
Pandora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c93c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800cbd4  0800cbd4  0001cbd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cc60  0800cc60  0001cc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cc68  0800cc68  0001cc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cc6c  0800cc6c  0001cc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800cc70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800cc84  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800cce4  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  240000d4  0800cd44  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240008cc  0800cd44  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002dfe2  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f00  00000000  00000000  0004e127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ed8  00000000  00000000  00053028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001826  00000000  00000000  00054f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003e772  00000000  00000000  00056726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dcf0  00000000  00000000  00094e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018a77d  00000000  00000000  000c2b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008428  00000000  00000000  0024d308  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00255730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800cbbc 	.word	0x0800cbbc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	0800cbbc 	.word	0x0800cbbc

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f8:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <MX_ADC1_Init+0xe4>)
 80005fa:	4a30      	ldr	r2, [pc, #192]	; (80006bc <MX_ADC1_Init+0xe8>)
 80005fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000612:	2204      	movs	r2, #4
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000618:	2200      	movs	r2, #0
 800061a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800061e:	2201      	movs	r2, #1
 8000620:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000624:	2201      	movs	r2, #1
 8000626:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800062a:	2200      	movs	r2, #0
 800062c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000642:	2200      	movs	r2, #0
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000656:	f002 fb15 	bl	8002c84 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000660:	f001 fa24 	bl	8001aac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000670:	f003 fb38 	bl	8003ce4 <HAL_ADCEx_MultiModeConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800067a:	f001 fa17 	bl	8001aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_ADC1_Init+0xec>)
 8000680:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000682:	2306      	movs	r3, #6
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800068e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000690:	2304      	movs	r3, #4
 8000692:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_ADC1_Init+0xe4>)
 80006a2:	f002 fd73 	bl	800318c <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006ac:	f001 f9fe 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	240000f0 	.word	0x240000f0
 80006bc:	40022000 	.word	0x40022000
 80006c0:	08600004 	.word	0x08600004

080006c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006de:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <MX_ADC2_Init+0xc4>)
 80006e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000702:	2201      	movs	r2, #1
 8000704:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000708:	2201      	movs	r2, #1
 800070a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC2_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_ADC2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_ADC2_Init+0xc0>)
 800073a:	f002 faa3 	bl	8002c84 <HAL_ADC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000744:	f001 f9b2 	bl	8001aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_ADC2_Init+0xc8>)
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074c:	2306      	movs	r3, #6
 800074e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000754:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000758:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_ADC2_Init+0xc0>)
 800076c:	f002 fd0e 	bl	800318c <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000776:	f001 f999 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	24000154 	.word	0x24000154
 8000788:	40022100 	.word	0x40022100
 800078c:	08600004 	.word	0x08600004

08000790 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007aa:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <MX_ADC3_Init+0xc4>)
 80007ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_ADC3_Init+0xc0>)
 8000806:	f002 fa3d 	bl	8002c84 <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000810:	f001 f94c 	bl	8001aac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_ADC3_Init+0xc8>)
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000818:	2306      	movs	r3, #6
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000820:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000826:	2304      	movs	r3, #4
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_ADC3_Init+0xc0>)
 8000838:	f002 fca8 	bl	800318c <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000842:	f001 f933 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	240001b8 	.word	0x240001b8
 8000854:	58026000 	.word	0x58026000
 8000858:	21800100 	.word	0x21800100

0800085c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a99      	ldr	r2, [pc, #612]	; (8000ae0 <HAL_ADC_MspInit+0x284>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d164      	bne.n	8000948 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800087e:	4b99      	ldr	r3, [pc, #612]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a97      	ldr	r2, [pc, #604]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000886:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000888:	4b96      	ldr	r3, [pc, #600]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10e      	bne.n	80008ae <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000890:	4b95      	ldr	r3, [pc, #596]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000896:	4a94      	ldr	r2, [pc, #592]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008a0:	4b91      	ldr	r3, [pc, #580]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	623b      	str	r3, [r7, #32]
 80008ac:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b8e      	ldr	r3, [pc, #568]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b4:	4a8c      	ldr	r2, [pc, #560]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008be:	4b8a      	ldr	r3, [pc, #552]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = EOS_CURRENT_Pin|KKU_CURRENT_Pin;
 80008cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4882      	ldr	r0, [pc, #520]	; (8000aec <HAL_ADC_MspInit+0x290>)
 80008e2:	f006 fc5d 	bl	80071a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80008e6:	4b82      	ldr	r3, [pc, #520]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008e8:	4a82      	ldr	r2, [pc, #520]	; (8000af4 <HAL_ADC_MspInit+0x298>)
 80008ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008ec:	4b80      	ldr	r3, [pc, #512]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008ee:	2209      	movs	r2, #9
 80008f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f2:	4b7f      	ldr	r3, [pc, #508]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f8:	4b7d      	ldr	r3, [pc, #500]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008fe:	4b7c      	ldr	r3, [pc, #496]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000904:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000906:	4b7a      	ldr	r3, [pc, #488]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800090c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800090e:	4b78      	ldr	r3, [pc, #480]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000910:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000914:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000916:	4b76      	ldr	r3, [pc, #472]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800091c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b74      	ldr	r3, [pc, #464]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000924:	4b72      	ldr	r3, [pc, #456]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800092a:	4871      	ldr	r0, [pc, #452]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 800092c:	f003 fbc8 	bl	80040c0 <HAL_DMA_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000936:	f001 f8b9 	bl	8001aac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a6c      	ldr	r2, [pc, #432]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 800093e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000940:	4a6b      	ldr	r2, [pc, #428]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000946:	e0c6      	b.n	8000ad6 <HAL_ADC_MspInit+0x27a>
  else if(adcHandle->Instance==ADC2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a6a      	ldr	r2, [pc, #424]	; (8000af8 <HAL_ADC_MspInit+0x29c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d164      	bne.n	8000a1c <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000952:	4b64      	ldr	r3, [pc, #400]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	4a62      	ldr	r2, [pc, #392]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800095a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800095c:	4b61      	ldr	r3, [pc, #388]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10e      	bne.n	8000982 <HAL_ADC_MspInit+0x126>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000964:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800096a:	4a5f      	ldr	r2, [pc, #380]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 800096c:	f043 0320 	orr.w	r3, r3, #32
 8000970:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000974:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000976:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800097a:	f003 0320 	and.w	r3, r3, #32
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000982:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a57      	ldr	r2, [pc, #348]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b55      	ldr	r3, [pc, #340]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AKB_CURRENT_Pin|SERVO_CURRENT_Pin;
 80009a0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a6:	2303      	movs	r3, #3
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	484d      	ldr	r0, [pc, #308]	; (8000aec <HAL_ADC_MspInit+0x290>)
 80009b6:	f006 fbf3 	bl	80071a0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 80009ba:	4b50      	ldr	r3, [pc, #320]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009bc:	4a50      	ldr	r2, [pc, #320]	; (8000b00 <HAL_ADC_MspInit+0x2a4>)
 80009be:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009c0:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009c2:	220a      	movs	r2, #10
 80009c4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c6:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009cc:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009d2:	4b4a      	ldr	r3, [pc, #296]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009da:	4b48      	ldr	r3, [pc, #288]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009e2:	4b46      	ldr	r3, [pc, #280]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80009f2:	4b42      	ldr	r3, [pc, #264]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009f8:	4b40      	ldr	r3, [pc, #256]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009fe:	483f      	ldr	r0, [pc, #252]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a00:	f003 fb5e 	bl	80040c0 <HAL_DMA_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8000a0a:	f001 f84f 	bl	8001aac <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a12:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a14:	4a39      	ldr	r2, [pc, #228]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a1a:	e05c      	b.n	8000ad6 <HAL_ADC_MspInit+0x27a>
  else if(adcHandle->Instance==ADC3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a38      	ldr	r2, [pc, #224]	; (8000b04 <HAL_ADC_MspInit+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d157      	bne.n	8000ad6 <HAL_ADC_MspInit+0x27a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a4c:	f043 0320 	orr.w	r3, r3, #32
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAIN_POWER_VOLTAGE_Pin|MAIN_POWER_CURRENT_Pin|SOLENOID_CURRENT_Pin|COCKING_HANDLE_CURRENT_Pin;
 8000a62:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	481d      	ldr	r0, [pc, #116]	; (8000aec <HAL_ADC_MspInit+0x290>)
 8000a78:	f006 fb92 	bl	80071a0 <HAL_GPIO_Init>
    hdma_adc3.Instance = BDMA_Channel0;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_ADC_MspInit+0x2b0>)
 8000a80:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a84:	2211      	movs	r2, #17
 8000a86:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aa2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aaa:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000aba:	4813      	ldr	r0, [pc, #76]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000abc:	f003 fb00 	bl	80040c0 <HAL_DMA_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_ADC_MspInit+0x26e>
      Error_Handler();
 8000ac6:	f000 fff1 	bl	8001aac <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ace:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ad6:	bf00      	nop
 8000ad8:	3738      	adds	r7, #56	; 0x38
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000
 8000ae4:	24000384 	.word	0x24000384
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58021400 	.word	0x58021400
 8000af0:	2400021c 	.word	0x2400021c
 8000af4:	40020010 	.word	0x40020010
 8000af8:	40022100 	.word	0x40022100
 8000afc:	24000294 	.word	0x24000294
 8000b00:	40020028 	.word	0x40020028
 8000b04:	58026000 	.word	0x58026000
 8000b08:	2400030c 	.word	0x2400030c
 8000b0c:	58025408 	.word	0x58025408

08000b10 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	2081      	movs	r0, #129	; 0x81
 8000b3a:	f003 fa8c 	bl	8004056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000b3e:	2081      	movs	r0, #129	; 0x81
 8000b40:	f003 faa3 	bl	800408a <HAL_NVIC_EnableIRQ>

}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400

08000b50 <maingunEncoderRead>:
	else
		return false;
}

void maingunEncoderRead(TIM_HandleTypeDef *htim)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	int32_t currentCount = __HAL_TIM_GET_COUNTER(htim);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5e:	60fb      	str	r3, [r7, #12]
	int32_t difference = currentCount - lastCount;
 8000b60:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <maingunEncoderRead+0x6c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	60bb      	str	r3, [r7, #8]

	if(pandora.switches.switches_cocking_handle_home)
 8000b6a:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <maingunEncoderRead+0x70>)
 8000b6c:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <maingunEncoderRead+0x28>
	{
		currentCount = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
	}

	if(difference > 0)
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	dd09      	ble.n	8000b92 <maingunEncoderRead+0x42>
	{
		pandora.gun.cockingHandle.encoderRotation = FORWARD;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <maingunEncoderRead+0x70>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	731a      	strb	r2, [r3, #12]
		pandora.gun.cockingHandle.encoderCounter += difference;
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <maingunEncoderRead+0x70>)
 8000b86:	689a      	ldr	r2, [r3, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <maingunEncoderRead+0x70>)
 8000b8e:	6093      	str	r3, [r2, #8]
 8000b90:	e00b      	b.n	8000baa <maingunEncoderRead+0x5a>
	}

	else if (difference < 0)
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	da08      	bge.n	8000baa <maingunEncoderRead+0x5a>
	{
		pandora.gun.cockingHandle.encoderRotation = BACKWARD;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <maingunEncoderRead+0x70>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	731a      	strb	r2, [r3, #12]
		pandora.gun.cockingHandle.encoderCounter += difference;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <maingunEncoderRead+0x70>)
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a06      	ldr	r2, [pc, #24]	; (8000bc0 <maingunEncoderRead+0x70>)
 8000ba8:	6093      	str	r3, [r2, #8]

	}

	lastCount = currentCount;
 8000baa:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <maingunEncoderRead+0x6c>)
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	3714      	adds	r7, #20
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	24000388 	.word	0x24000388
 8000bc0:	24000570 	.word	0x24000570

08000bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_DMA_Init+0x4c>)
 8000bcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bd0:	4a0f      	ldr	r2, [pc, #60]	; (8000c10 <MX_DMA_Init+0x4c>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bda:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_DMA_Init+0x4c>)
 8000bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000be0:	f003 0301 	and.w	r3, r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	200b      	movs	r0, #11
 8000bee:	f003 fa32 	bl	8004056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000bf2:	200b      	movs	r0, #11
 8000bf4:	f003 fa49 	bl	800408a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	200c      	movs	r0, #12
 8000bfe:	f003 fa2a 	bl	8004056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c02:	200c      	movs	r0, #12
 8000c04:	f003 fa41 	bl	800408a <HAL_NVIC_EnableIRQ>

}
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	58024400 	.word	0x58024400

08000c14 <function_errorCheck>:
#include "definitions.h"

extern pandoraStructer pandora;

void function_errorCheck (void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	/************************SOLENOID_BEGIN**************************/
	if(pandora.powerManagement.solenoidCurrent > AMPER_5)
 8000c18:	4b3a      	ldr	r3, [pc, #232]	; (8000d04 <function_errorCheck+0xf0>)
 8000c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c1e:	2b05      	cmp	r3, #5
 8000c20:	d904      	bls.n	8000c2c <function_errorCheck+0x18>
	{
		pandora.error.solenoidCurrentHigh = true;
 8000c22:	4b38      	ldr	r3, [pc, #224]	; (8000d04 <function_errorCheck+0xf0>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8000c2a:	e003      	b.n	8000c34 <function_errorCheck+0x20>
	}
	else
	{
		pandora.error.solenoidCurrentHigh = false;
 8000c2c:	4b35      	ldr	r3, [pc, #212]	; (8000d04 <function_errorCheck+0xf0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}
	/************************SOLENOID_END****************************/

	/*********************COCKING_HANDLE_BEGIN***********************/
	if(pandora.powerManagement.cockingHandleCurrent > AMPER_5)
 8000c34:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <function_errorCheck+0xf0>)
 8000c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c3a:	2b05      	cmp	r3, #5
 8000c3c:	d904      	bls.n	8000c48 <function_errorCheck+0x34>
	{
		pandora.error.cockingHandleCurrentHigh = true;
 8000c3e:	4b31      	ldr	r3, [pc, #196]	; (8000d04 <function_errorCheck+0xf0>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 8000c46:	e003      	b.n	8000c50 <function_errorCheck+0x3c>
	}
	else
	{
		pandora.error.cockingHandleCurrentHigh = false;
 8000c48:	4b2e      	ldr	r3, [pc, #184]	; (8000d04 <function_errorCheck+0xf0>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}
	/*********************COCKING_HANDLE_END*************************/

	/************************HERCULE_BEGIN***************************/
	if(pandora.powerManagement.servoCurrent > AMPER_5)
 8000c50:	4b2c      	ldr	r3, [pc, #176]	; (8000d04 <function_errorCheck+0xf0>)
 8000c52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000c56:	2b05      	cmp	r3, #5
 8000c58:	d904      	bls.n	8000c64 <function_errorCheck+0x50>
	{
		pandora.error.herculeCurrentHigh = true;
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <function_errorCheck+0xf0>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8000c62:	e003      	b.n	8000c6c <function_errorCheck+0x58>
	}
	else
	{
		pandora.error.herculeCurrentHigh = false;
 8000c64:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <function_errorCheck+0xf0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
	/************************HERCULE_END*****************************/

	/**************************KKU_BEGIN*****************************/
	if(pandora.powerManagement.KKUCurrent > AMPER_5)
 8000c6c:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <function_errorCheck+0xf0>)
 8000c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000c72:	2b05      	cmp	r3, #5
 8000c74:	d904      	bls.n	8000c80 <function_errorCheck+0x6c>
	{
		pandora.error.kkuCurrentHigh = true;
 8000c76:	4b23      	ldr	r3, [pc, #140]	; (8000d04 <function_errorCheck+0xf0>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8000c7e:	e003      	b.n	8000c88 <function_errorCheck+0x74>
	}
	else
	{
		pandora.error.kkuCurrentHigh = false;
 8000c80:	4b20      	ldr	r3, [pc, #128]	; (8000d04 <function_errorCheck+0xf0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	}
	/**************************KKU_END*******************************/

	/**************************AKB_BEGIN*****************************/
	if(pandora.powerManagement.AKBCurrent > AMPER_5)
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <function_errorCheck+0xf0>)
 8000c8a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000c8e:	2b05      	cmp	r3, #5
 8000c90:	d904      	bls.n	8000c9c <function_errorCheck+0x88>
	{
		pandora.error.akbCurrentHigh = true;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <function_errorCheck+0xf0>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 8000c9a:	e003      	b.n	8000ca4 <function_errorCheck+0x90>
	}
	else
	{
		pandora.error.akbCurrentHigh = false;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <function_errorCheck+0xf0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}
	/**************************AKB_END*******************************/

	/**************************GDB_BEGIN*****************************/
	if(pandora.powerManagement.GDBCurrent > AMPER_5)
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <function_errorCheck+0xf0>)
 8000ca6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000caa:	2b05      	cmp	r3, #5
 8000cac:	d904      	bls.n	8000cb8 <function_errorCheck+0xa4>
	{
		pandora.error.gdbCurrentHigh = true;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <function_errorCheck+0xf0>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8000cb6:	e003      	b.n	8000cc0 <function_errorCheck+0xac>
	}
	else
	{
		pandora.error.gdbCurrentHigh = false;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <function_errorCheck+0xf0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}
	/**************************GDB_END*******************************/

	/**************************EOS_BEGIN*****************************/
	if(pandora.powerManagement.EOSCurrent > AMPER_5)
 8000cc0:	4b10      	ldr	r3, [pc, #64]	; (8000d04 <function_errorCheck+0xf0>)
 8000cc2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000cc6:	2b05      	cmp	r3, #5
 8000cc8:	d904      	bls.n	8000cd4 <function_errorCheck+0xc0>
	{
		pandora.error.eosCurrentHigh = true;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <function_errorCheck+0xf0>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 8000cd2:	e003      	b.n	8000cdc <function_errorCheck+0xc8>
	}
	else
	{
		pandora.error.eosCurrentHigh = false;
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <function_errorCheck+0xf0>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}
	/**************************EOS_END*******************************/

	/************************BATTERY_BEGIN***************************/
	if(pandora.powerManagement.batteryVoltage < VOLTAGE_22)
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <function_errorCheck+0xf0>)
 8000cde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000ce2:	2b15      	cmp	r3, #21
 8000ce4:	d804      	bhi.n	8000cf0 <function_errorCheck+0xdc>
	{
		pandora.error.gdbVoltageLow = true;
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <function_errorCheck+0xf0>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	else
	{
		pandora.error.gdbVoltageLow = false;
	}
	/************************BATTERY_END***************************/
}
 8000cee:	e003      	b.n	8000cf8 <function_errorCheck+0xe4>
		pandora.error.gdbVoltageLow = false;
 8000cf0:	4b04      	ldr	r3, [pc, #16]	; (8000d04 <function_errorCheck+0xf0>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	24000570 	.word	0x24000570

08000d08 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	; (8000d88 <MX_ETH_Init+0x80>)
 8000d0e:	4a1f      	ldr	r2, [pc, #124]	; (8000d8c <MX_ETH_Init+0x84>)
 8000d10:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_ETH_Init+0x88>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_ETH_Init+0x88>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_ETH_Init+0x88>)
 8000d20:	22e1      	movs	r2, #225	; 0xe1
 8000d22:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_ETH_Init+0x88>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <MX_ETH_Init+0x88>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d30:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <MX_ETH_Init+0x88>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <MX_ETH_Init+0x80>)
 8000d38:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <MX_ETH_Init+0x88>)
 8000d3a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_ETH_Init+0x80>)
 8000d3e:	2201      	movs	r2, #1
 8000d40:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_ETH_Init+0x80>)
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <MX_ETH_Init+0x8c>)
 8000d46:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_ETH_Init+0x80>)
 8000d4a:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <MX_ETH_Init+0x90>)
 8000d4c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_ETH_Init+0x80>)
 8000d50:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000d54:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d56:	480c      	ldr	r0, [pc, #48]	; (8000d88 <MX_ETH_Init+0x80>)
 8000d58:	f005 fa8a 	bl	8006270 <HAL_ETH_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d62:	f000 fea3 	bl	8001aac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d66:	2238      	movs	r2, #56	; 0x38
 8000d68:	2100      	movs	r1, #0
 8000d6a:	480c      	ldr	r0, [pc, #48]	; (8000d9c <MX_ETH_Init+0x94>)
 8000d6c:	f00b feec 	bl	800cb48 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_ETH_Init+0x94>)
 8000d72:	2221      	movs	r2, #33	; 0x21
 8000d74:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_ETH_Init+0x94>)
 8000d78:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000d7c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d7e:	4b07      	ldr	r3, [pc, #28]	; (8000d9c <MX_ETH_Init+0x94>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	240003c4 	.word	0x240003c4
 8000d8c:	40028000 	.word	0x40028000
 8000d90:	24000474 	.word	0x24000474
 8000d94:	24000074 	.word	0x24000074
 8000d98:	24000014 	.word	0x24000014
 8000d9c:	2400038c 	.word	0x2400038c

08000da0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08e      	sub	sp, #56	; 0x38
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a49      	ldr	r2, [pc, #292]	; (8000ee4 <HAL_ETH_MspInit+0x144>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	f040 808b 	bne.w	8000eda <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000dc4:	4b48      	ldr	r3, [pc, #288]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000dc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dca:	4a47      	ldr	r2, [pc, #284]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000dd4:	4b44      	ldr	r3, [pc, #272]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000dde:	623b      	str	r3, [r7, #32]
 8000de0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000de2:	4b41      	ldr	r3, [pc, #260]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000de4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000de8:	4a3f      	ldr	r2, [pc, #252]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dee:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000df2:	4b3d      	ldr	r3, [pc, #244]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000df4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	61fb      	str	r3, [r7, #28]
 8000dfe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e00:	4b39      	ldr	r3, [pc, #228]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e06:	4a38      	ldr	r2, [pc, #224]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e10:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	4a30      	ldr	r2, [pc, #192]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e26:	f043 0304 	orr.w	r3, r3, #4
 8000e2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e42:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e60:	4a21      	ldr	r2, [pc, #132]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e62:	f043 0302 	orr.w	r3, r3, #2
 8000e66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <HAL_ETH_MspInit+0x148>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e78:	2332      	movs	r3, #50	; 0x32
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e88:	230b      	movs	r3, #11
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4816      	ldr	r0, [pc, #88]	; (8000eec <HAL_ETH_MspInit+0x14c>)
 8000e94:	f006 f984 	bl	80071a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e98:	2386      	movs	r3, #134	; 0x86
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ea8:	230b      	movs	r3, #11
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	480f      	ldr	r0, [pc, #60]	; (8000ef0 <HAL_ETH_MspInit+0x150>)
 8000eb4:	f006 f974 	bl	80071a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8000eb8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eca:	230b      	movs	r3, #11
 8000ecc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ece:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <HAL_ETH_MspInit+0x154>)
 8000ed6:	f006 f963 	bl	80071a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000eda:	bf00      	nop
 8000edc:	3738      	adds	r7, #56	; 0x38
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40028000 	.word	0x40028000
 8000ee8:	58024400 	.word	0x58024400
 8000eec:	58020800 	.word	0x58020800
 8000ef0:	58020000 	.word	0x58020000
 8000ef4:	58020400 	.word	0x58020400

08000ef8 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000efc:	4b2e      	ldr	r3, [pc, #184]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000efe:	4a2f      	ldr	r2, [pc, #188]	; (8000fbc <MX_FDCAN2_Init+0xc4>)
 8000f00:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000f08:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000f1a:	4b27      	ldr	r3, [pc, #156]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000f20:	4b25      	ldr	r3, [pc, #148]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f22:	2210      	movs	r2, #16
 8000f24:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f2e:	2202      	movs	r2, #2
 8000f30:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000f32:	4b21      	ldr	r3, [pc, #132]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f34:	2202      	movs	r2, #2
 8000f36:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000f38:	4b1f      	ldr	r3, [pc, #124]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000f3e:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000f44:	4b1c      	ldr	r3, [pc, #112]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000f4a:	4b1b      	ldr	r3, [pc, #108]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000f50:	4b19      	ldr	r3, [pc, #100]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000f5c:	4b16      	ldr	r3, [pc, #88]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f6a:	2204      	movs	r2, #4
 8000f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f74:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f76:	2204      	movs	r2, #4
 8000f78:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f98:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000fa0:	2204      	movs	r2, #4
 8000fa2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <MX_FDCAN2_Init+0xc0>)
 8000fa6:	f005 fd97 	bl	8006ad8 <HAL_FDCAN_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000fb0:	f000 fd7c 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2400047c 	.word	0x2400047c
 8000fbc:	4000a400 	.word	0x4000a400

08000fc0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b0ba      	sub	sp, #232	; 0xe8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	22c0      	movs	r2, #192	; 0xc0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00b fdb1 	bl	800cb48 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a27      	ldr	r2, [pc, #156]	; (8001088 <HAL_FDCAN_MspInit+0xc8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d146      	bne.n	800107e <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ff0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000ffc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001000:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4618      	mov	r0, r3
 800100a:	f007 fbe7 	bl	80087dc <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001014:	f000 fd4a 	bl	8001aac <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_FDCAN_MspInit+0xcc>)
 800101a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800101e:	4a1b      	ldr	r2, [pc, #108]	; (800108c <HAL_FDCAN_MspInit+0xcc>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001024:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_FDCAN_MspInit+0xcc>)
 800102a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800102e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <HAL_FDCAN_MspInit+0xcc>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a13      	ldr	r2, [pc, #76]	; (800108c <HAL_FDCAN_MspInit+0xcc>)
 800103e:	f043 0302 	orr.w	r3, r3, #2
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b11      	ldr	r3, [pc, #68]	; (800108c <HAL_FDCAN_MspInit+0xcc>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001054:	2360      	movs	r3, #96	; 0x60
 8001056:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800106c:	2309      	movs	r3, #9
 800106e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001072:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001076:	4619      	mov	r1, r3
 8001078:	4805      	ldr	r0, [pc, #20]	; (8001090 <HAL_FDCAN_MspInit+0xd0>)
 800107a:	f006 f891 	bl	80071a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 800107e:	bf00      	nop
 8001080:	37e8      	adds	r7, #232	; 0xe8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	4000a400 	.word	0x4000a400
 800108c:	58024400 	.word	0x58024400
 8001090:	58020400 	.word	0x58020400

08001094 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010aa:	4b6b      	ldr	r3, [pc, #428]	; (8001258 <MX_GPIO_Init+0x1c4>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010b0:	4a69      	ldr	r2, [pc, #420]	; (8001258 <MX_GPIO_Init+0x1c4>)
 80010b2:	f043 0320 	orr.w	r3, r3, #32
 80010b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ba:	4b67      	ldr	r3, [pc, #412]	; (8001258 <MX_GPIO_Init+0x1c4>)
 80010bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	623b      	str	r3, [r7, #32]
 80010c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c8:	4b63      	ldr	r3, [pc, #396]	; (8001258 <MX_GPIO_Init+0x1c4>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ce:	4a62      	ldr	r2, [pc, #392]	; (8001258 <MX_GPIO_Init+0x1c4>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d8:	4b5f      	ldr	r3, [pc, #380]	; (8001258 <MX_GPIO_Init+0x1c4>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	4b5c      	ldr	r3, [pc, #368]	; (8001258 <MX_GPIO_Init+0x1c4>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ec:	4a5a      	ldr	r2, [pc, #360]	; (8001258 <MX_GPIO_Init+0x1c4>)
 80010ee:	f043 0304 	orr.w	r3, r3, #4
 80010f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f6:	4b58      	ldr	r3, [pc, #352]	; (8001258 <MX_GPIO_Init+0x1c4>)
 80010f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001104:	4b54      	ldr	r3, [pc, #336]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110a:	4a53      	ldr	r2, [pc, #332]	; (8001258 <MX_GPIO_Init+0x1c4>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001114:	4b50      	ldr	r3, [pc, #320]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001122:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001124:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001128:	4a4b      	ldr	r2, [pc, #300]	; (8001258 <MX_GPIO_Init+0x1c4>)
 800112a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800112e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001132:	4b49      	ldr	r3, [pc, #292]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001134:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001140:	4b45      	ldr	r3, [pc, #276]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001146:	4a44      	ldr	r2, [pc, #272]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001148:	f043 0310 	orr.w	r3, r3, #16
 800114c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001150:	4b41      	ldr	r3, [pc, #260]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b3e      	ldr	r3, [pc, #248]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	4a3c      	ldr	r2, [pc, #240]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116e:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800117c:	4b36      	ldr	r3, [pc, #216]	; (8001258 <MX_GPIO_Init+0x1c4>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001182:	4a35      	ldr	r2, [pc, #212]	; (8001258 <MX_GPIO_Init+0x1c4>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118c:	4b32      	ldr	r3, [pc, #200]	; (8001258 <MX_GPIO_Init+0x1c4>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, COCKING_HANDLE_DRV_H_BACKWARD_Pin|COCKING_HANDLE_DRV_H_FORWARD_Pin|COCKING_HANDLE_POWER_Pin|SOLENOID_POWER_Pin
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80011a0:	482e      	ldr	r0, [pc, #184]	; (800125c <MX_GPIO_Init+0x1c8>)
 80011a2:	f006 f9ad 	bl	8007500 <HAL_GPIO_WritePin>
                          |SOLENOID_DRV_2_Pin|SOLENOID_DRV_1_Pin|SOLENOID_DRV_H_REVERSE_Pin|SOLENOID_DRV_H_FORWARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CASE_LED_GPIO_Port, CASE_LED_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ac:	482c      	ldr	r0, [pc, #176]	; (8001260 <MX_GPIO_Init+0x1cc>)
 80011ae:	f006 f9a7 	bl	8007500 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EOS_POWER_Pin|SERVO_POWER_Pin|AKB_POWER_Pin|KKU_POWER_Pin
 80011b2:	2200      	movs	r2, #0
 80011b4:	f64d 6121 	movw	r1, #56865	; 0xde21
 80011b8:	482a      	ldr	r0, [pc, #168]	; (8001264 <MX_GPIO_Init+0x1d0>)
 80011ba:	f006 f9a1 	bl	8007500 <HAL_GPIO_WritePin>
                          |BRAKE_DRV_12V_Pin|BRAKE_DRV_28V_Pin|EMERGENCY_STOP_RESET_Pin|SYSTEM_ON_OFFD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = COCKING_HANDLE_DRV_H_BACKWARD_Pin|COCKING_HANDLE_DRV_H_FORWARD_Pin|COCKING_HANDLE_POWER_Pin|SOLENOID_POWER_Pin
 80011be:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SOLENOID_DRV_2_Pin|SOLENOID_DRV_1_Pin|SOLENOID_DRV_H_REVERSE_Pin|SOLENOID_DRV_H_FORWARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	4619      	mov	r1, r3
 80011d6:	4821      	ldr	r0, [pc, #132]	; (800125c <MX_GPIO_Init+0x1c8>)
 80011d8:	f005 ffe2 	bl	80071a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CASE_LED_Pin;
 80011dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CASE_LED_GPIO_Port, &GPIO_InitStruct);
 80011ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f2:	4619      	mov	r1, r3
 80011f4:	481a      	ldr	r0, [pc, #104]	; (8001260 <MX_GPIO_Init+0x1cc>)
 80011f6:	f005 ffd3 	bl	80071a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = EOS_POWER_Pin|SERVO_POWER_Pin|AKB_POWER_Pin|KKU_POWER_Pin
 80011fa:	f64d 6321 	movw	r3, #56865	; 0xde21
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
                          |BRAKE_DRV_12V_Pin|BRAKE_DRV_28V_Pin|EMERGENCY_STOP_RESET_Pin|SYSTEM_ON_OFFD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001200:	2301      	movs	r3, #1
 8001202:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001210:	4619      	mov	r1, r3
 8001212:	4814      	ldr	r0, [pc, #80]	; (8001264 <MX_GPIO_Init+0x1d0>)
 8001214:	f005 ffc4 	bl	80071a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_FEEDBACK_Pin|SYSTEM_ON_OFF_Pin|SWITCHES_FIRE_ORDER_Pin|SWITCHES_SAFETY_Pin
 8001218:	23de      	movs	r3, #222	; 0xde
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SWITCHES_COCKING_HANDLE_ORDER_Pin|SWITCHES_MOVEMENT_ALLOWED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <MX_GPIO_Init+0x1d0>)
 800122e:	f005 ffb7 	bl	80071a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = SWITCHES_SMGA_Pin|SWITCHES_SYSTEM_ON_OFF_Pin|SWITCHES_CREW_1_Pin|SWITCHES_CREW_2_Pin
 8001232:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
                          |SWITCHES_COCKING_HANDLE_HOME_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001238:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001246:	4619      	mov	r1, r3
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_GPIO_Init+0x1c8>)
 800124a:	f005 ffa9 	bl	80071a0 <HAL_GPIO_Init>

}
 800124e:	bf00      	nop
 8001250:	3738      	adds	r7, #56	; 0x38
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	58024400 	.word	0x58024400
 800125c:	58021800 	.word	0x58021800
 8001260:	58021000 	.word	0x58021000
 8001264:	58020c00 	.word	0x58020c00

08001268 <gunControl_getShotInterval>:

// global structer
extern pandoraStructer pandora;

static uint32_t gunControl_getShotInterval(uint16_t rpm)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	80fb      	strh	r3, [r7, #6]
    return 60000 / rpm;
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001278:	fb92 f3f3 	sdiv	r3, r2, r3
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <gunControl_Init>:

void gunControl_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	SOLENOID(SOLENOID_DRV_1,OFF);
 800128c:	2200      	movs	r2, #0
 800128e:	2140      	movs	r1, #64	; 0x40
 8001290:	481d      	ldr	r0, [pc, #116]	; (8001308 <gunControl_Init+0x80>)
 8001292:	f006 f935 	bl	8007500 <HAL_GPIO_WritePin>

	pandora.gun.configurations.fastRpm 				= pandora.eeprom.fastRpm;
 8001296:	4b1d      	ldr	r3, [pc, #116]	; (800130c <gunControl_Init+0x84>)
 8001298:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800129c:	4b1b      	ldr	r3, [pc, #108]	; (800130c <gunControl_Init+0x84>)
 800129e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	pandora.gun.configurations.slowRpm 				= pandora.eeprom.slowRpm;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <gunControl_Init+0x84>)
 80012a4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80012a8:	4b18      	ldr	r3, [pc, #96]	; (800130c <gunControl_Init+0x84>)
 80012aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	pandora.gun.configurations.solenoidTime 		= pandora.eeprom.solenoidTime;
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <gunControl_Init+0x84>)
 80012b0:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80012b4:	4b15      	ldr	r3, [pc, #84]	; (800130c <gunControl_Init+0x84>)
 80012b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	pandora.gun.configurations.solenoidActiveTime  	= pandora.eeprom.solenoidActiveTime;
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <gunControl_Init+0x84>)
 80012bc:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <gunControl_Init+0x84>)
 80012c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	pandora.gun.configurations.solenoidPassiveTime 	= pandora.eeprom.solenoidPassiveTime;
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <gunControl_Init+0x84>)
 80012c8:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 80012cc:	4b0f      	ldr	r3, [pc, #60]	; (800130c <gunControl_Init+0x84>)
 80012ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	pandora.gun.configurations.fireMode 			= pandora.eeprom.fireMode;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <gunControl_Init+0x84>)
 80012d4:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <gunControl_Init+0x84>)
 80012da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	pandora.states.solenoidActive 		= false;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <gunControl_Init+0x84>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	pandora.states.triggerHeld 			= false;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <gunControl_Init+0x84>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pandora.states.changeTime 			= 0;
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <gunControl_Init+0x84>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	645a      	str	r2, [r3, #68]	; 0x44
	pandora.states.burstCounter 		= 0;
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <gunControl_Init+0x84>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	pandora.states.ammoCounter			= 0;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <gunControl_Init+0x84>)
 80012fe:	2200      	movs	r2, #0
 8001300:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	58021800 	.word	0x58021800
 800130c:	24000570 	.word	0x24000570

08001310 <gunControl_SetMode>:

void gunControl_SetMode(FireMode_t mode)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
    pandora.gun.configurations.fireMode = mode;
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <gunControl_SetMode+0x20>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	24000570 	.word	0x24000570

08001334 <gunControl_TriggerPressed>:

void gunControl_TriggerPressed(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
    pandora.states.triggerHeld = true;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <gunControl_TriggerPressed+0x68>)
 800133a:	2201      	movs	r2, #1
 800133c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    pandora.states.burstCounter = 0;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <gunControl_TriggerPressed+0x68>)
 8001342:	2200      	movs	r2, #0
 8001344:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pandora.states.changeTime = HAL_GetTick();
 8001348:	f001 fa64 	bl	8002814 <HAL_GetTick>
 800134c:	4603      	mov	r3, r0
 800134e:	4a13      	ldr	r2, [pc, #76]	; (800139c <gunControl_TriggerPressed+0x68>)
 8001350:	6453      	str	r3, [r2, #68]	; 0x44

    if (pandora.gun.configurations.fireMode == FIRE_MODE_SINGLE)
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <gunControl_TriggerPressed+0x68>)
 8001354:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001358:	2b00      	cmp	r3, #0
 800135a:	d109      	bne.n	8001370 <gunControl_TriggerPressed+0x3c>
    {
        SOLENOID(SOLENOID_DRV_1,ON);
 800135c:	2201      	movs	r2, #1
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	480f      	ldr	r0, [pc, #60]	; (80013a0 <gunControl_TriggerPressed+0x6c>)
 8001362:	f006 f8cd 	bl	8007500 <HAL_GPIO_WritePin>
        pandora.states.solenoidActive = true;
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <gunControl_TriggerPressed+0x68>)
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    else if (pandora.gun.configurations.fireMode == FIRE_MODE_FAST_BURST_3 || pandora.gun.configurations.fireMode == FIRE_MODE_FAST_BURST_5)
    {
        pandora.states.solenoidActive = true;
        SOLENOID(SOLENOID_DRV_1,ON);
    }
}
 800136e:	e012      	b.n	8001396 <gunControl_TriggerPressed+0x62>
    else if (pandora.gun.configurations.fireMode == FIRE_MODE_FAST_BURST_3 || pandora.gun.configurations.fireMode == FIRE_MODE_FAST_BURST_5)
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <gunControl_TriggerPressed+0x68>)
 8001372:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001376:	2b02      	cmp	r3, #2
 8001378:	d004      	beq.n	8001384 <gunControl_TriggerPressed+0x50>
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <gunControl_TriggerPressed+0x68>)
 800137c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001380:	2b03      	cmp	r3, #3
 8001382:	d108      	bne.n	8001396 <gunControl_TriggerPressed+0x62>
        pandora.states.solenoidActive = true;
 8001384:	4b05      	ldr	r3, [pc, #20]	; (800139c <gunControl_TriggerPressed+0x68>)
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        SOLENOID(SOLENOID_DRV_1,ON);
 800138c:	2201      	movs	r2, #1
 800138e:	2140      	movs	r1, #64	; 0x40
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <gunControl_TriggerPressed+0x6c>)
 8001392:	f006 f8b5 	bl	8007500 <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	24000570 	.word	0x24000570
 80013a0:	58021800 	.word	0x58021800

080013a4 <gunControl_TriggerReleased>:

void gunControl_TriggerReleased(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    pandora.states.triggerHeld = false;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <gunControl_TriggerReleased+0x2c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    pandora.states.solenoidActive = false;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <gunControl_TriggerReleased+0x2c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    pandora.states.burstCounter = 0;
 80013b8:	4b05      	ldr	r3, [pc, #20]	; (80013d0 <gunControl_TriggerReleased+0x2c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SOLENOID(SOLENOID_DRV_1,OFF);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2140      	movs	r1, #64	; 0x40
 80013c4:	4803      	ldr	r0, [pc, #12]	; (80013d4 <gunControl_TriggerReleased+0x30>)
 80013c6:	f006 f89b 	bl	8007500 <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	24000570 	.word	0x24000570
 80013d4:	58021800 	.word	0x58021800

080013d8 <gunControl_Process>:

void gunControl_Process(uint32_t now)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    if (!pandora.states.triggerHeld && pandora.gun.configurations.fireMode != FIRE_MODE_SINGLE) return;
 80013e0:	4bac      	ldr	r3, [pc, #688]	; (8001694 <gunControl_Process+0x2bc>)
 80013e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013e6:	f083 0301 	eor.w	r3, r3, #1
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <gunControl_Process+0x24>
 80013f0:	4ba8      	ldr	r3, [pc, #672]	; (8001694 <gunControl_Process+0x2bc>)
 80013f2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 8149 	bne.w	800168e <gunControl_Process+0x2b6>

    switch (pandora.gun.configurations.fireMode)
 80013fc:	4ba5      	ldr	r3, [pc, #660]	; (8001694 <gunControl_Process+0x2bc>)
 80013fe:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001402:	2b06      	cmp	r3, #6
 8001404:	f200 814a 	bhi.w	800169c <gunControl_Process+0x2c4>
 8001408:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <gunControl_Process+0x38>)
 800140a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140e:	bf00      	nop
 8001410:	0800142d 	.word	0x0800142d
 8001414:	0800146b 	.word	0x0800146b
 8001418:	080014eb 	.word	0x080014eb
 800141c:	080014eb 	.word	0x080014eb
 8001420:	08001551 	.word	0x08001551
 8001424:	080015d9 	.word	0x080015d9
 8001428:	080015d9 	.word	0x080015d9
    {
        case FIRE_MODE_SINGLE:
            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.gun.configurations.solenoidTime)
 800142c:	4b99      	ldr	r3, [pc, #612]	; (8001694 <gunControl_Process+0x2bc>)
 800142e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8134 	beq.w	80016a0 <gunControl_Process+0x2c8>
 8001438:	4b96      	ldr	r3, [pc, #600]	; (8001694 <gunControl_Process+0x2bc>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	4a94      	ldr	r2, [pc, #592]	; (8001694 <gunControl_Process+0x2bc>)
 8001442:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8001446:	4293      	cmp	r3, r2
 8001448:	f0c0 812a 	bcc.w	80016a0 <gunControl_Process+0x2c8>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 800144c:	2200      	movs	r2, #0
 800144e:	2140      	movs	r1, #64	; 0x40
 8001450:	4891      	ldr	r0, [pc, #580]	; (8001698 <gunControl_Process+0x2c0>)
 8001452:	f006 f855 	bl	8007500 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001456:	4b8f      	ldr	r3, [pc, #572]	; (8001694 <gunControl_Process+0x2bc>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                pandora.states.ammoCounter++;
 800145e:	4b8d      	ldr	r3, [pc, #564]	; (8001694 <gunControl_Process+0x2bc>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	3301      	adds	r3, #1
 8001464:	4a8b      	ldr	r2, [pc, #556]	; (8001694 <gunControl_Process+0x2bc>)
 8001466:	64d3      	str	r3, [r2, #76]	; 0x4c
            }
            break;
 8001468:	e11a      	b.n	80016a0 <gunControl_Process+0x2c8>

        case FIRE_MODE_FAST_AUTO:
            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.gun.configurations.solenoidActiveTime)
 800146a:	4b8a      	ldr	r3, [pc, #552]	; (8001694 <gunControl_Process+0x2bc>)
 800146c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001470:	2b00      	cmp	r3, #0
 8001472:	d01a      	beq.n	80014aa <gunControl_Process+0xd2>
 8001474:	4b87      	ldr	r3, [pc, #540]	; (8001694 <gunControl_Process+0x2bc>)
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	4a85      	ldr	r2, [pc, #532]	; (8001694 <gunControl_Process+0x2bc>)
 800147e:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8001482:	4293      	cmp	r3, r2
 8001484:	d311      	bcc.n	80014aa <gunControl_Process+0xd2>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001486:	2200      	movs	r2, #0
 8001488:	2140      	movs	r1, #64	; 0x40
 800148a:	4883      	ldr	r0, [pc, #524]	; (8001698 <gunControl_Process+0x2c0>)
 800148c:	f006 f838 	bl	8007500 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001490:	4b80      	ldr	r3, [pc, #512]	; (8001694 <gunControl_Process+0x2bc>)
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                pandora.states.ammoCounter++;
 8001498:	4b7e      	ldr	r3, [pc, #504]	; (8001694 <gunControl_Process+0x2bc>)
 800149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149c:	3301      	adds	r3, #1
 800149e:	4a7d      	ldr	r2, [pc, #500]	; (8001694 <gunControl_Process+0x2bc>)
 80014a0:	64d3      	str	r3, [r2, #76]	; 0x4c
                pandora.states.changeTime = now;
 80014a2:	4a7c      	ldr	r2, [pc, #496]	; (8001694 <gunControl_Process+0x2bc>)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6453      	str	r3, [r2, #68]	; 0x44
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
                pandora.states.solenoidActive = true;
                pandora.states.changeTime = now;
            }
            break;
 80014a8:	e0fc      	b.n	80016a4 <gunControl_Process+0x2cc>
            else if (!pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.gun.configurations.solenoidPassiveTime)
 80014aa:	4b7a      	ldr	r3, [pc, #488]	; (8001694 <gunControl_Process+0x2bc>)
 80014ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014b0:	f083 0301 	eor.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	f000 80f4 	beq.w	80016a4 <gunControl_Process+0x2cc>
 80014bc:	4b75      	ldr	r3, [pc, #468]	; (8001694 <gunControl_Process+0x2bc>)
 80014be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	4a73      	ldr	r2, [pc, #460]	; (8001694 <gunControl_Process+0x2bc>)
 80014c6:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 80014ca:	4293      	cmp	r3, r2
 80014cc:	f0c0 80ea 	bcc.w	80016a4 <gunControl_Process+0x2cc>
            	SOLENOID(SOLENOID_DRV_1,ON);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2140      	movs	r1, #64	; 0x40
 80014d4:	4870      	ldr	r0, [pc, #448]	; (8001698 <gunControl_Process+0x2c0>)
 80014d6:	f006 f813 	bl	8007500 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 80014da:	4b6e      	ldr	r3, [pc, #440]	; (8001694 <gunControl_Process+0x2bc>)
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                pandora.states.changeTime = now;
 80014e2:	4a6c      	ldr	r2, [pc, #432]	; (8001694 <gunControl_Process+0x2bc>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80014e8:	e0dc      	b.n	80016a4 <gunControl_Process+0x2cc>

        case FIRE_MODE_FAST_BURST_3:
        case FIRE_MODE_FAST_BURST_5:
        {
            uint8_t target = (pandora.gun.configurations.fireMode == FIRE_MODE_FAST_BURST_3) ? 3 : 5;
 80014ea:	4b6a      	ldr	r3, [pc, #424]	; (8001694 <gunControl_Process+0x2bc>)
 80014ec:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d101      	bne.n	80014f8 <gunControl_Process+0x120>
 80014f4:	2303      	movs	r3, #3
 80014f6:	e000      	b.n	80014fa <gunControl_Process+0x122>
 80014f8:	2305      	movs	r3, #5
 80014fa:	73bb      	strb	r3, [r7, #14]
            uint32_t burst_duration = gunControl_getShotInterval(pandora.gun.configurations.fastRpm) * target;
 80014fc:	4b65      	ldr	r3, [pc, #404]	; (8001694 <gunControl_Process+0x2bc>)
 80014fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001502:	b29b      	uxth	r3, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff feaf 	bl	8001268 <gunControl_getShotInterval>
 800150a:	4602      	mov	r2, r0
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	60bb      	str	r3, [r7, #8]

            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= burst_duration)
 8001514:	4b5f      	ldr	r3, [pc, #380]	; (8001694 <gunControl_Process+0x2bc>)
 8001516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800151a:	2b00      	cmp	r3, #0
 800151c:	f000 80c4 	beq.w	80016a8 <gunControl_Process+0x2d0>
 8001520:	4b5c      	ldr	r3, [pc, #368]	; (8001694 <gunControl_Process+0x2bc>)
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	429a      	cmp	r2, r3
 800152c:	f200 80bc 	bhi.w	80016a8 <gunControl_Process+0x2d0>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001530:	2200      	movs	r2, #0
 8001532:	2140      	movs	r1, #64	; 0x40
 8001534:	4858      	ldr	r0, [pc, #352]	; (8001698 <gunControl_Process+0x2c0>)
 8001536:	f005 ffe3 	bl	8007500 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 800153a:	4b56      	ldr	r3, [pc, #344]	; (8001694 <gunControl_Process+0x2bc>)
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                pandora.states.ammoCounter += target;
 8001542:	4b54      	ldr	r3, [pc, #336]	; (8001694 <gunControl_Process+0x2bc>)
 8001544:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001546:	7bbb      	ldrb	r3, [r7, #14]
 8001548:	4413      	add	r3, r2
 800154a:	4a52      	ldr	r2, [pc, #328]	; (8001694 <gunControl_Process+0x2bc>)
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
            }
            break;
 800154e:	e0ab      	b.n	80016a8 <gunControl_Process+0x2d0>
        }

        case FIRE_MODE_SLOW_AUTO:
            if (!pandora.states.solenoidActive && now - pandora.states.changeTime >= gunControl_getShotInterval(pandora.gun.configurations.slowRpm))
 8001550:	4b50      	ldr	r3, [pc, #320]	; (8001694 <gunControl_Process+0x2bc>)
 8001552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001556:	f083 0301 	eor.w	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01a      	beq.n	8001596 <gunControl_Process+0x1be>
 8001560:	4b4c      	ldr	r3, [pc, #304]	; (8001694 <gunControl_Process+0x2bc>)
 8001562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	1ad4      	subs	r4, r2, r3
 8001568:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <gunControl_Process+0x2bc>)
 800156a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800156e:	b29b      	uxth	r3, r3
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fe79 	bl	8001268 <gunControl_getShotInterval>
 8001576:	4603      	mov	r3, r0
 8001578:	429c      	cmp	r4, r3
 800157a:	d30c      	bcc.n	8001596 <gunControl_Process+0x1be>
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
 800157c:	2201      	movs	r2, #1
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	4845      	ldr	r0, [pc, #276]	; (8001698 <gunControl_Process+0x2c0>)
 8001582:	f005 ffbd 	bl	8007500 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 8001586:	4b43      	ldr	r3, [pc, #268]	; (8001694 <gunControl_Process+0x2bc>)
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                pandora.states.changeTime = now;
 800158e:	4a41      	ldr	r2, [pc, #260]	; (8001694 <gunControl_Process+0x2bc>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6453      	str	r3, [r2, #68]	; 0x44
            	SOLENOID(SOLENOID_DRV_1,OFF);
                pandora.states.solenoidActive = false;
                pandora.states.ammoCounter++;
                pandora.states.changeTime = now;
            }
            break;
 8001594:	e08a      	b.n	80016ac <gunControl_Process+0x2d4>
            else if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.gun.configurations.solenoidTime)
 8001596:	4b3f      	ldr	r3, [pc, #252]	; (8001694 <gunControl_Process+0x2bc>)
 8001598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8085 	beq.w	80016ac <gunControl_Process+0x2d4>
 80015a2:	4b3c      	ldr	r3, [pc, #240]	; (8001694 <gunControl_Process+0x2bc>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	4a3a      	ldr	r2, [pc, #232]	; (8001694 <gunControl_Process+0x2bc>)
 80015ac:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d37b      	bcc.n	80016ac <gunControl_Process+0x2d4>
            	SOLENOID(SOLENOID_DRV_1,OFF);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2140      	movs	r1, #64	; 0x40
 80015b8:	4837      	ldr	r0, [pc, #220]	; (8001698 <gunControl_Process+0x2c0>)
 80015ba:	f005 ffa1 	bl	8007500 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 80015be:	4b35      	ldr	r3, [pc, #212]	; (8001694 <gunControl_Process+0x2bc>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                pandora.states.ammoCounter++;
 80015c6:	4b33      	ldr	r3, [pc, #204]	; (8001694 <gunControl_Process+0x2bc>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	3301      	adds	r3, #1
 80015cc:	4a31      	ldr	r2, [pc, #196]	; (8001694 <gunControl_Process+0x2bc>)
 80015ce:	64d3      	str	r3, [r2, #76]	; 0x4c
                pandora.states.changeTime = now;
 80015d0:	4a30      	ldr	r2, [pc, #192]	; (8001694 <gunControl_Process+0x2bc>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80015d6:	e069      	b.n	80016ac <gunControl_Process+0x2d4>

        case FIRE_MODE_SLOW_BURST_3:
        case FIRE_MODE_SLOW_BURST_5:
        {
            uint8_t target = (pandora.gun.configurations.fireMode == FIRE_MODE_SLOW_BURST_3) ? 3 : 5;
 80015d8:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <gunControl_Process+0x2bc>)
 80015da:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80015de:	2b05      	cmp	r3, #5
 80015e0:	d101      	bne.n	80015e6 <gunControl_Process+0x20e>
 80015e2:	2303      	movs	r3, #3
 80015e4:	e000      	b.n	80015e8 <gunControl_Process+0x210>
 80015e6:	2305      	movs	r3, #5
 80015e8:	73fb      	strb	r3, [r7, #15]
            if (pandora.states.burstCounter >= target) break;
 80015ea:	4b2a      	ldr	r3, [pc, #168]	; (8001694 <gunControl_Process+0x2bc>)
 80015ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d25b      	bcs.n	80016b0 <gunControl_Process+0x2d8>

            if (!pandora.states.solenoidActive && now - pandora.states.changeTime >= gunControl_getShotInterval(pandora.gun.configurations.slowRpm))
 80015f8:	4b26      	ldr	r3, [pc, #152]	; (8001694 <gunControl_Process+0x2bc>)
 80015fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01a      	beq.n	800163e <gunControl_Process+0x266>
 8001608:	4b22      	ldr	r3, [pc, #136]	; (8001694 <gunControl_Process+0x2bc>)
 800160a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	1ad4      	subs	r4, r2, r3
 8001610:	4b20      	ldr	r3, [pc, #128]	; (8001694 <gunControl_Process+0x2bc>)
 8001612:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001616:	b29b      	uxth	r3, r3
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fe25 	bl	8001268 <gunControl_getShotInterval>
 800161e:	4603      	mov	r3, r0
 8001620:	429c      	cmp	r4, r3
 8001622:	d30c      	bcc.n	800163e <gunControl_Process+0x266>
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
 8001624:	2201      	movs	r2, #1
 8001626:	2140      	movs	r1, #64	; 0x40
 8001628:	481b      	ldr	r0, [pc, #108]	; (8001698 <gunControl_Process+0x2c0>)
 800162a:	f005 ff69 	bl	8007500 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <gunControl_Process+0x2bc>)
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                pandora.states.changeTime = now;
 8001636:	4a17      	ldr	r2, [pc, #92]	; (8001694 <gunControl_Process+0x2bc>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6453      	str	r3, [r2, #68]	; 0x44
                pandora.states.solenoidActive = false;
                pandora.states.ammoCounter++;
                pandora.states.burstCounter++;
                pandora.states.changeTime = now;
            }
            break;
 800163c:	e03a      	b.n	80016b4 <gunControl_Process+0x2dc>
            else if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.gun.configurations.solenoidTime)
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <gunControl_Process+0x2bc>)
 8001640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d035      	beq.n	80016b4 <gunControl_Process+0x2dc>
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <gunControl_Process+0x2bc>)
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	4a10      	ldr	r2, [pc, #64]	; (8001694 <gunControl_Process+0x2bc>)
 8001652:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 8001656:	4293      	cmp	r3, r2
 8001658:	d32c      	bcc.n	80016b4 <gunControl_Process+0x2dc>
            	SOLENOID(SOLENOID_DRV_1,OFF);
 800165a:	2200      	movs	r2, #0
 800165c:	2140      	movs	r1, #64	; 0x40
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <gunControl_Process+0x2c0>)
 8001660:	f005 ff4e 	bl	8007500 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001664:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <gunControl_Process+0x2bc>)
 8001666:	2200      	movs	r2, #0
 8001668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                pandora.states.ammoCounter++;
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <gunControl_Process+0x2bc>)
 800166e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001670:	3301      	adds	r3, #1
 8001672:	4a08      	ldr	r2, [pc, #32]	; (8001694 <gunControl_Process+0x2bc>)
 8001674:	64d3      	str	r3, [r2, #76]	; 0x4c
                pandora.states.burstCounter++;
 8001676:	4b07      	ldr	r3, [pc, #28]	; (8001694 <gunControl_Process+0x2bc>)
 8001678:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800167c:	3301      	adds	r3, #1
 800167e:	b29a      	uxth	r2, r3
 8001680:	4b04      	ldr	r3, [pc, #16]	; (8001694 <gunControl_Process+0x2bc>)
 8001682:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                pandora.states.changeTime = now;
 8001686:	4a03      	ldr	r2, [pc, #12]	; (8001694 <gunControl_Process+0x2bc>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 800168c:	e012      	b.n	80016b4 <gunControl_Process+0x2dc>
    if (!pandora.states.triggerHeld && pandora.gun.configurations.fireMode != FIRE_MODE_SINGLE) return;
 800168e:	bf00      	nop
 8001690:	e011      	b.n	80016b6 <gunControl_Process+0x2de>
 8001692:	bf00      	nop
 8001694:	24000570 	.word	0x24000570
 8001698:	58021800 	.word	0x58021800
        }

        default:
            break;
 800169c:	bf00      	nop
 800169e:	e00a      	b.n	80016b6 <gunControl_Process+0x2de>
            break;
 80016a0:	bf00      	nop
 80016a2:	e008      	b.n	80016b6 <gunControl_Process+0x2de>
            break;
 80016a4:	bf00      	nop
 80016a6:	e006      	b.n	80016b6 <gunControl_Process+0x2de>
            break;
 80016a8:	bf00      	nop
 80016aa:	e004      	b.n	80016b6 <gunControl_Process+0x2de>
            break;
 80016ac:	bf00      	nop
 80016ae:	e002      	b.n	80016b6 <gunControl_Process+0x2de>
            if (pandora.states.burstCounter >= target) break;
 80016b0:	bf00      	nop
 80016b2:	e000      	b.n	80016b6 <gunControl_Process+0x2de>
            break;
 80016b4:	bf00      	nop
    }
}
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}

080016bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_I2C1_Init+0x74>)
 80016c2:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <MX_I2C1_Init+0x78>)
 80016c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_I2C1_Init+0x74>)
 80016c8:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <MX_I2C1_Init+0x7c>)
 80016ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_I2C1_Init+0x74>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d2:	4b17      	ldr	r3, [pc, #92]	; (8001730 <MX_I2C1_Init+0x74>)
 80016d4:	2201      	movs	r2, #1
 80016d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_I2C1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016de:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_I2C1_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <MX_I2C1_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_I2C1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_I2C1_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016f6:	480e      	ldr	r0, [pc, #56]	; (8001730 <MX_I2C1_Init+0x74>)
 80016f8:	f005 ff1c 	bl	8007534 <HAL_I2C_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001702:	f000 f9d3 	bl	8001aac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001706:	2100      	movs	r1, #0
 8001708:	4809      	ldr	r0, [pc, #36]	; (8001730 <MX_I2C1_Init+0x74>)
 800170a:	f005 ffaf 	bl	800766c <HAL_I2CEx_ConfigAnalogFilter>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001714:	f000 f9ca 	bl	8001aac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001718:	2100      	movs	r1, #0
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_I2C1_Init+0x74>)
 800171c:	f005 fff1 	bl	8007702 <HAL_I2CEx_ConfigDigitalFilter>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001726:	f000 f9c1 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2400051c 	.word	0x2400051c
 8001734:	40005400 	.word	0x40005400
 8001738:	307075b1 	.word	0x307075b1

0800173c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0ba      	sub	sp, #232	; 0xe8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	22c0      	movs	r2, #192	; 0xc0
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f00b f9f3 	bl	800cb48 <memset>
  if(i2cHandle->Instance==I2C1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a27      	ldr	r2, [pc, #156]	; (8001804 <HAL_I2C_MspInit+0xc8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d146      	bne.n	80017fa <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800176c:	f04f 0208 	mov.w	r2, #8
 8001770:	f04f 0300 	mov.w	r3, #0
 8001774:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001778:	2300      	movs	r3, #0
 800177a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4618      	mov	r0, r3
 8001784:	f007 f82a 	bl	80087dc <HAL_RCCEx_PeriphCLKConfig>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800178e:	f000 f98d 	bl	8001aac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001792:	4b1d      	ldr	r3, [pc, #116]	; (8001808 <HAL_I2C_MspInit+0xcc>)
 8001794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001798:	4a1b      	ldr	r2, [pc, #108]	; (8001808 <HAL_I2C_MspInit+0xcc>)
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a2:	4b19      	ldr	r3, [pc, #100]	; (8001808 <HAL_I2C_MspInit+0xcc>)
 80017a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = RTC_I2C_SDA_Pin|RTC_I2C_SCL_Pin;
 80017b0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017b8:	2312      	movs	r3, #18
 80017ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017ca:	2304      	movs	r3, #4
 80017cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017d0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017d4:	4619      	mov	r1, r3
 80017d6:	480d      	ldr	r0, [pc, #52]	; (800180c <HAL_I2C_MspInit+0xd0>)
 80017d8:	f005 fce2 	bl	80071a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_I2C_MspInit+0xcc>)
 80017de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_I2C_MspInit+0xcc>)
 80017e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_I2C_MspInit+0xcc>)
 80017ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017fa:	bf00      	nop
 80017fc:	37e8      	adds	r7, #232	; 0xe8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40005400 	.word	0x40005400
 8001808:	58024400 	.word	0x58024400
 800180c:	58020400 	.word	0x58020400

08001810 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001814:	f000 ff78 	bl	8002708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001818:	f000 f86a 	bl	80018f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800181c:	f000 f916 	bl	8001a4c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001820:	f7ff fc38 	bl	8001094 <MX_GPIO_Init>
  MX_DMA_Init();
 8001824:	f7ff f9ce 	bl	8000bc4 <MX_DMA_Init>
  MX_BDMA_Init();
 8001828:	f7ff f972 	bl	8000b10 <MX_BDMA_Init>
  MX_TIM1_Init();
 800182c:	f000 fa6c 	bl	8001d08 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001830:	f7fe ff48 	bl	80006c4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001834:	f7fe ffac 	bl	8000790 <MX_ADC3_Init>
  MX_ETH_Init();
 8001838:	f7ff fa66 	bl	8000d08 <MX_ETH_Init>
  MX_FDCAN2_Init();
 800183c:	f7ff fb5c 	bl	8000ef8 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001840:	f7ff ff3c 	bl	80016bc <MX_I2C1_Init>
  MX_UART4_Init();
 8001844:	f000 fd4a 	bl	80022dc <MX_UART4_Init>
  MX_UART7_Init();
 8001848:	f000 fd94 	bl	8002374 <MX_UART7_Init>
  MX_ADC1_Init();
 800184c:	f7fe fec2 	bl	80005d4 <MX_ADC1_Init>
  MX_UART8_Init();
 8001850:	f000 fddc 	bl	800240c <MX_UART8_Init>
  MX_TIM3_Init();
 8001854:	f000 fab2 	bl	8001dbc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, pandora.analogDigitalConverter.hadc1Buffer, 1);
 8001858:	2201      	movs	r2, #1
 800185a:	491d      	ldr	r1, [pc, #116]	; (80018d0 <main+0xc0>)
 800185c:	481d      	ldr	r0, [pc, #116]	; (80018d4 <main+0xc4>)
 800185e:	f001 fbb3 	bl	8002fc8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, pandora.analogDigitalConverter.hadc2Buffer, 1);
 8001862:	2201      	movs	r2, #1
 8001864:	491c      	ldr	r1, [pc, #112]	; (80018d8 <main+0xc8>)
 8001866:	481d      	ldr	r0, [pc, #116]	; (80018dc <main+0xcc>)
 8001868:	f001 fbae 	bl	8002fc8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, pandora.analogDigitalConverter.hadc3Buffer, 1);
 800186c:	2201      	movs	r2, #1
 800186e:	491c      	ldr	r1, [pc, #112]	; (80018e0 <main+0xd0>)
 8001870:	481c      	ldr	r0, [pc, #112]	; (80018e4 <main+0xd4>)
 8001872:	f001 fba9 	bl	8002fc8 <HAL_ADC_Start_DMA>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001876:	213c      	movs	r1, #60	; 0x3c
 8001878:	481b      	ldr	r0, [pc, #108]	; (80018e8 <main+0xd8>)
 800187a:	f009 fd53 	bl	800b324 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim3,0);
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <main+0xd8>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24

  gunControl_Init();
 8001886:	f7ff fcff 	bl	8001288 <gunControl_Init>
  gunControl_SetMode(FIRE_MODE_SINGLE);
 800188a:	2000      	movs	r0, #0
 800188c:	f7ff fd40 	bl	8001310 <gunControl_SetMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startTimeScanFlags();
 8001890:	f000 fc56 	bl	8002140 <startTimeScanFlags>

	  maingunEncoderRead(&htim3);
 8001894:	4814      	ldr	r0, [pc, #80]	; (80018e8 <main+0xd8>)
 8001896:	f7ff f95b 	bl	8000b50 <maingunEncoderRead>
	  functionMeasure();
 800189a:	f000 f90d 	bl	8001ab8 <functionMeasure>
	  function_errorCheck();
 800189e:	f7ff f9b9 	bl	8000c14 <function_errorCheck>





	  gunControl_Process(HAL_GetTick());
 80018a2:	f000 ffb7 	bl	8002814 <HAL_GetTick>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fd95 	bl	80013d8 <gunControl_Process>

	  if(pandora.switches.switches_fire_order)
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <main+0xdc>)
 80018b0:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d002      	beq.n	80018be <main+0xae>
	  {
		  gunControl_TriggerPressed();
 80018b8:	f7ff fd3c 	bl	8001334 <gunControl_TriggerPressed>
 80018bc:	e001      	b.n	80018c2 <main+0xb2>
	  }
	  else
	  {
		  gunControl_TriggerReleased();
 80018be:	f7ff fd71 	bl	80013a4 <gunControl_TriggerReleased>
	  //pandora.maingunEncoder.maingunEncoderCounter = __HAL_TIM_GET_COUNTER(&htim3);
	  //pandora.maingun.encoderCounter = __HAL_TIM_GET_COUNTER(&htim3);
	  //pandora.maingun.cockingHandle.encoderRotation = false;

	  //FDCAN_SendMessage(&hfdcan1, 0x100,(uint8_t *)&(pandora.canMessages.maingunCockingHandle), 8);
	  HAL_Delay(10);
 80018c2:	200a      	movs	r0, #10
 80018c4:	f000 ffb2 	bl	800282c <HAL_Delay>
	  clearTimeScanFlags();
 80018c8:	f000 fcce 	bl	8002268 <clearTimeScanFlags>
  {
 80018cc:	e7e0      	b.n	8001890 <main+0x80>
 80018ce:	bf00      	nop
 80018d0:	24000628 	.word	0x24000628
 80018d4:	240000f0 	.word	0x240000f0
 80018d8:	24000630 	.word	0x24000630
 80018dc:	24000154 	.word	0x24000154
 80018e0:	24000638 	.word	0x24000638
 80018e4:	240001b8 	.word	0x240001b8
 80018e8:	2400069c 	.word	0x2400069c
 80018ec:	24000570 	.word	0x24000570

080018f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b09e      	sub	sp, #120	; 0x78
 80018f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fa:	224c      	movs	r2, #76	; 0x4c
 80018fc:	2100      	movs	r1, #0
 80018fe:	4618      	mov	r0, r3
 8001900:	f00b f922 	bl	800cb48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	2220      	movs	r2, #32
 800190a:	2100      	movs	r1, #0
 800190c:	4618      	mov	r0, r3
 800190e:	f00b f91b 	bl	800cb48 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001912:	2002      	movs	r0, #2
 8001914:	f005 ff42 	bl	800779c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <SystemClock_Config+0x150>)
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	4a47      	ldr	r2, [pc, #284]	; (8001a40 <SystemClock_Config+0x150>)
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <SystemClock_Config+0x150>)
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	4b44      	ldr	r3, [pc, #272]	; (8001a44 <SystemClock_Config+0x154>)
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	4a43      	ldr	r2, [pc, #268]	; (8001a44 <SystemClock_Config+0x154>)
 8001938:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800193c:	6193      	str	r3, [r2, #24]
 800193e:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <SystemClock_Config+0x154>)
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800194a:	bf00      	nop
 800194c:	4b3d      	ldr	r3, [pc, #244]	; (8001a44 <SystemClock_Config+0x154>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001958:	d1f8      	bne.n	800194c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4b3b      	ldr	r3, [pc, #236]	; (8001a48 <SystemClock_Config+0x158>)
 800195c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001960:	4a39      	ldr	r2, [pc, #228]	; (8001a48 <SystemClock_Config+0x158>)
 8001962:	f043 0302 	orr.w	r3, r3, #2
 8001966:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800196a:	4b37      	ldr	r3, [pc, #220]	; (8001a48 <SystemClock_Config+0x158>)
 800196c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001978:	2300      	movs	r3, #0
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <SystemClock_Config+0x154>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	4a30      	ldr	r2, [pc, #192]	; (8001a44 <SystemClock_Config+0x154>)
 8001982:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001986:	6193      	str	r3, [r2, #24]
 8001988:	4b2e      	ldr	r3, [pc, #184]	; (8001a44 <SystemClock_Config+0x154>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001990:	603b      	str	r3, [r7, #0]
 8001992:	4b2b      	ldr	r3, [pc, #172]	; (8001a40 <SystemClock_Config+0x150>)
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	4a2a      	ldr	r2, [pc, #168]	; (8001a40 <SystemClock_Config+0x150>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800199e:	4b28      	ldr	r3, [pc, #160]	; (8001a40 <SystemClock_Config+0x150>)
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019aa:	bf00      	nop
 80019ac:	4b25      	ldr	r3, [pc, #148]	; (8001a44 <SystemClock_Config+0x154>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b8:	d1f8      	bne.n	80019ac <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019c4:	2302      	movs	r3, #2
 80019c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019c8:	2302      	movs	r3, #2
 80019ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 80019cc:	2302      	movs	r3, #2
 80019ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80019d0:	2350      	movs	r3, #80	; 0x50
 80019d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80019d4:	2302      	movs	r3, #2
 80019d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80019d8:	2308      	movs	r3, #8
 80019da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80019dc:	2302      	movs	r3, #2
 80019de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80019e0:	230c      	movs	r3, #12
 80019e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019f0:	4618      	mov	r0, r3
 80019f2:	f005 ff0d 	bl	8007810 <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80019fc:	f000 f856 	bl	8001aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	233f      	movs	r3, #63	; 0x3f
 8001a02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2303      	movs	r3, #3
 8001a06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a0c:	2308      	movs	r3, #8
 8001a0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a10:	2340      	movs	r3, #64	; 0x40
 8001a12:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a14:	2340      	movs	r3, #64	; 0x40
 8001a16:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a1e:	2340      	movs	r3, #64	; 0x40
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	2104      	movs	r1, #4
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f006 fb4b 	bl	80080c4 <HAL_RCC_ClockConfig>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001a34:	f000 f83a 	bl	8001aac <Error_Handler>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	3778      	adds	r7, #120	; 0x78
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	58000400 	.word	0x58000400
 8001a44:	58024800 	.word	0x58024800
 8001a48:	58024400 	.word	0x58024400

08001a4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b0b0      	sub	sp, #192	; 0xc0
 8001a50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a52:	463b      	mov	r3, r7
 8001a54:	22c0      	movs	r2, #192	; 0xc0
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00b f875 	bl	800cb48 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001a6e:	230c      	movs	r3, #12
 8001a70:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001a72:	2302      	movs	r3, #2
 8001a74:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001a76:	2302      	movs	r3, #2
 8001a78:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001a7e:	23c0      	movs	r3, #192	; 0xc0
 8001a80:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001a82:	2320      	movs	r3, #32
 8001a84:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a92:	463b      	mov	r3, r7
 8001a94:	4618      	mov	r0, r3
 8001a96:	f006 fea1 	bl	80087dc <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001aa0:	f000 f804 	bl	8001aac <Error_Handler>
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	37c0      	adds	r7, #192	; 0xc0
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <Error_Handler+0x8>
	...

08001ab8 <functionMeasure>:
        }
    }
}

void functionMeasure(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	pandora.powerManagement.solenoidCurrent 		= pandora.analogDigitalConverter.hadc3Buffer[2];
 8001abc:	4b17      	ldr	r3, [pc, #92]	; (8001b1c <functionMeasure+0x64>)
 8001abe:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001ac2:	4a16      	ldr	r2, [pc, #88]	; (8001b1c <functionMeasure+0x64>)
 8001ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	pandora.powerManagement.cockingHandleCurrent 	= pandora.analogDigitalConverter.hadc3Buffer[0];
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <functionMeasure+0x64>)
 8001aca:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <functionMeasure+0x64>)
 8001ad0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	pandora.powerManagement.servoCurrent 			= pandora.analogDigitalConverter.hadc2Buffer[1];
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <functionMeasure+0x64>)
 8001ad6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001ada:	4a10      	ldr	r2, [pc, #64]	; (8001b1c <functionMeasure+0x64>)
 8001adc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	pandora.powerManagement.AKBCurrent 				= pandora.analogDigitalConverter.hadc2Buffer[0];
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <functionMeasure+0x64>)
 8001ae2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ae6:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <functionMeasure+0x64>)
 8001ae8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	pandora.powerManagement.EOSCurrent 				= pandora.analogDigitalConverter.hadc1Buffer[0];
 8001aec:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <functionMeasure+0x64>)
 8001aee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <functionMeasure+0x64>)
 8001af4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	pandora.powerManagement.GDBCurrent 				= pandora.analogDigitalConverter.hadc3Buffer[0];
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <functionMeasure+0x64>)
 8001afa:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001afe:	4a07      	ldr	r2, [pc, #28]	; (8001b1c <functionMeasure+0x64>)
 8001b00:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	pandora.powerManagement.KKUCurrent 				= pandora.analogDigitalConverter.hadc1Buffer[1];
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <functionMeasure+0x64>)
 8001b06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001b0a:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <functionMeasure+0x64>)
 8001b0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	24000570 	.word	0x24000570

08001b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <HAL_MspInit+0x30>)
 8001b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b2c:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_MspInit+0x30>)
 8001b2e:	f043 0302 	orr.w	r3, r3, #2
 8001b32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_MspInit+0x30>)
 8001b38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b3c:	f003 0302 	and.w	r3, r3, #2
 8001b40:	607b      	str	r3, [r7, #4]
 8001b42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	58024400 	.word	0x58024400

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b58:	e7fe      	b.n	8001b58 <NMI_Handler+0x4>

08001b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b5e:	e7fe      	b.n	8001b5e <HardFault_Handler+0x4>

08001b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b64:	e7fe      	b.n	8001b64 <MemManage_Handler+0x4>

08001b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b6a:	e7fe      	b.n	8001b6a <BusFault_Handler+0x4>

08001b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b70:	e7fe      	b.n	8001b70 <UsageFault_Handler+0x4>

08001b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b72:	b480      	push	{r7}
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr

08001b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba0:	f000 fe24 	bl	80027ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DMA1_Stream0_IRQHandler+0x10>)
 8001bae:	f003 f84d 	bl	8004c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	2400021c 	.word	0x2400021c

08001bbc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <DMA1_Stream1_IRQHandler+0x10>)
 8001bc2:	f003 f843 	bl	8004c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	24000294 	.word	0x24000294

08001bd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM3_IRQHandler+0x10>)
 8001bd6:	f009 fc33 	bl	800b440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2400069c 	.word	0x2400069c

08001be4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <BDMA_Channel0_IRQHandler+0x10>)
 8001bea:	f003 f82f 	bl	8004c4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2400030c 	.word	0x2400030c

08001bf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bfc:	4b37      	ldr	r3, [pc, #220]	; (8001cdc <SystemInit+0xe4>)
 8001bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c02:	4a36      	ldr	r2, [pc, #216]	; (8001cdc <SystemInit+0xe4>)
 8001c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c0c:	4b34      	ldr	r3, [pc, #208]	; (8001ce0 <SystemInit+0xe8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	2b06      	cmp	r3, #6
 8001c16:	d807      	bhi.n	8001c28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c18:	4b31      	ldr	r3, [pc, #196]	; (8001ce0 <SystemInit+0xe8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 030f 	bic.w	r3, r3, #15
 8001c20:	4a2f      	ldr	r2, [pc, #188]	; (8001ce0 <SystemInit+0xe8>)
 8001c22:	f043 0307 	orr.w	r3, r3, #7
 8001c26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001c28:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <SystemInit+0xec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2d      	ldr	r2, [pc, #180]	; (8001ce4 <SystemInit+0xec>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001c34:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <SystemInit+0xec>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <SystemInit+0xec>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4929      	ldr	r1, [pc, #164]	; (8001ce4 <SystemInit+0xec>)
 8001c40:	4b29      	ldr	r3, [pc, #164]	; (8001ce8 <SystemInit+0xf0>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <SystemInit+0xe8>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d007      	beq.n	8001c62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001c52:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <SystemInit+0xe8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 030f 	bic.w	r3, r3, #15
 8001c5a:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <SystemInit+0xe8>)
 8001c5c:	f043 0307 	orr.w	r3, r3, #7
 8001c60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <SystemInit+0xec>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001c68:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <SystemInit+0xec>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ce4 <SystemInit+0xec>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001c74:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <SystemInit+0xec>)
 8001c76:	4a1d      	ldr	r2, [pc, #116]	; (8001cec <SystemInit+0xf4>)
 8001c78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <SystemInit+0xec>)
 8001c7c:	4a1c      	ldr	r2, [pc, #112]	; (8001cf0 <SystemInit+0xf8>)
 8001c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001c80:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <SystemInit+0xec>)
 8001c82:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <SystemInit+0xfc>)
 8001c84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <SystemInit+0xec>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <SystemInit+0xec>)
 8001c8e:	4a19      	ldr	r2, [pc, #100]	; (8001cf4 <SystemInit+0xfc>)
 8001c90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <SystemInit+0xec>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c98:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <SystemInit+0xec>)
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <SystemInit+0xfc>)
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <SystemInit+0xec>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ca4:	4b0f      	ldr	r3, [pc, #60]	; (8001ce4 <SystemInit+0xec>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a0e      	ldr	r2, [pc, #56]	; (8001ce4 <SystemInit+0xec>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <SystemInit+0xec>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <SystemInit+0x100>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <SystemInit+0x104>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001cc2:	d202      	bcs.n	8001cca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <SystemInit+0x108>)
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <SystemInit+0x10c>)
 8001ccc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001cd0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00
 8001ce0:	52002000 	.word	0x52002000
 8001ce4:	58024400 	.word	0x58024400
 8001ce8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001cec:	02020200 	.word	0x02020200
 8001cf0:	01ff0000 	.word	0x01ff0000
 8001cf4:	01010280 	.word	0x01010280
 8001cf8:	5c001000 	.word	0x5c001000
 8001cfc:	ffff0000 	.word	0xffff0000
 8001d00:	51008108 	.word	0x51008108
 8001d04:	52004000 	.word	0x52004000

08001d08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2224      	movs	r2, #36	; 0x24
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f00a ff16 	bl	800cb48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <MX_TIM1_Init+0xac>)
 8001d28:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <MX_TIM1_Init+0xb0>)
 8001d2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <MX_TIM1_Init+0xac>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <MX_TIM1_Init+0xac>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <MX_TIM1_Init+0xac>)
 8001d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d40:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <MX_TIM1_Init+0xac>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d46:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <MX_TIM1_Init+0xac>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <MX_TIM1_Init+0xac>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d72:	2300      	movs	r3, #0
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	480d      	ldr	r0, [pc, #52]	; (8001db4 <MX_TIM1_Init+0xac>)
 8001d7e:	f009 fa2b 	bl	800b1d8 <HAL_TIM_Encoder_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001d88:	f7ff fe90 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d98:	463b      	mov	r3, r7
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_TIM1_Init+0xac>)
 8001d9e:	f009 fd4b 	bl	800b838 <HAL_TIMEx_MasterConfigSynchronization>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001da8:	f7ff fe80 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dac:	bf00      	nop
 8001dae:	3730      	adds	r7, #48	; 0x30
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	24000650 	.word	0x24000650
 8001db8:	40010000 	.word	0x40010000

08001dbc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08c      	sub	sp, #48	; 0x30
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dc2:	f107 030c 	add.w	r3, r7, #12
 8001dc6:	2224      	movs	r2, #36	; 0x24
 8001dc8:	2100      	movs	r1, #0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f00a febc 	bl	800cb48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	463b      	mov	r3, r7
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <MX_TIM3_Init+0xa4>)
 8001ddc:	4a21      	ldr	r2, [pc, #132]	; (8001e64 <MX_TIM3_Init+0xa8>)
 8001dde:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001de0:	4b1f      	ldr	r3, [pc, #124]	; (8001e60 <MX_TIM3_Init+0xa4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b1e      	ldr	r3, [pc, #120]	; (8001e60 <MX_TIM3_Init+0xa4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <MX_TIM3_Init+0xa4>)
 8001dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001df2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df4:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <MX_TIM3_Init+0xa4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <MX_TIM3_Init+0xa4>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e00:	2301      	movs	r3, #1
 8001e02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e14:	2300      	movs	r3, #0
 8001e16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	4619      	mov	r1, r3
 8001e2a:	480d      	ldr	r0, [pc, #52]	; (8001e60 <MX_TIM3_Init+0xa4>)
 8001e2c:	f009 f9d4 	bl	800b1d8 <HAL_TIM_Encoder_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001e36:	f7ff fe39 	bl	8001aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e42:	463b      	mov	r3, r7
 8001e44:	4619      	mov	r1, r3
 8001e46:	4806      	ldr	r0, [pc, #24]	; (8001e60 <MX_TIM3_Init+0xa4>)
 8001e48:	f009 fcf6 	bl	800b838 <HAL_TIMEx_MasterConfigSynchronization>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001e52:	f7ff fe2b 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	3730      	adds	r7, #48	; 0x30
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2400069c 	.word	0x2400069c
 8001e64:	40000400 	.word	0x40000400

08001e68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	; 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e70:	f107 031c 	add.w	r3, r7, #28
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a38      	ldr	r2, [pc, #224]	; (8001f68 <HAL_TIM_Encoder_MspInit+0x100>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d12f      	bne.n	8001eea <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e90:	4a36      	ldr	r2, [pc, #216]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001e9a:	4b34      	ldr	r3, [pc, #208]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea8:	4b30      	ldr	r3, [pc, #192]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eae:	4a2f      	ldr	r2, [pc, #188]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eb8:	4b2c      	ldr	r3, [pc, #176]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001eba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_2_PHASE_A_Pin|ENCODER_2_PHASE_B_Pin;
 8001ec6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f107 031c 	add.w	r3, r7, #28
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4823      	ldr	r0, [pc, #140]	; (8001f70 <HAL_TIM_Encoder_MspInit+0x108>)
 8001ee4:	f005 f95c 	bl	80071a0 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001ee8:	e03a      	b.n	8001f60 <HAL_TIM_Encoder_MspInit+0xf8>
  else if(tim_encoderHandle->Instance==TIM3)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a21      	ldr	r2, [pc, #132]	; (8001f74 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d135      	bne.n	8001f60 <HAL_TIM_Encoder_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001ef6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001efa:	4a1c      	ldr	r2, [pc, #112]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001efc:	f043 0302 	orr.w	r3, r3, #2
 8001f00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001f06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f12:	4b16      	ldr	r3, [pc, #88]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <HAL_TIM_Encoder_MspInit+0x104>)
 8001f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_1_PHASE_A_Pin|ENCODER_1_PHASE_B_Pin;
 8001f30:	23c0      	movs	r3, #192	; 0xc0
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f40:	2302      	movs	r3, #2
 8001f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f44:	f107 031c 	add.w	r3, r7, #28
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480b      	ldr	r0, [pc, #44]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x110>)
 8001f4c:	f005 f928 	bl	80071a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f50:	2200      	movs	r2, #0
 8001f52:	2100      	movs	r1, #0
 8001f54:	201d      	movs	r0, #29
 8001f56:	f002 f87e 	bl	8004056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f5a:	201d      	movs	r0, #29
 8001f5c:	f002 f895 	bl	800408a <HAL_NVIC_EnableIRQ>
}
 8001f60:	bf00      	nop
 8001f62:	3730      	adds	r7, #48	; 0x30
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40010000 	.word	0x40010000
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	58020000 	.word	0x58020000
 8001f74:	40000400 	.word	0x40000400
 8001f78:	58020800 	.word	0x58020800

08001f7c <HAL_TIM_PeriodElapsedCallback>:
bool _500msFlag		 		= false;
bool _1sFlag				= false;
bool _10sFlag				= false;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)   // şuan 50ms 1msye  ayarla
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a57      	ldr	r2, [pc, #348]	; (80020e8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f040 80a6 	bne.w	80020dc <HAL_TIM_PeriodElapsedCallback+0x160>
    {
    	_configurableCounter++;
 8001f90:	4b56      	ldr	r3, [pc, #344]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	b2da      	uxtb	r2, r3
 8001f98:	4b54      	ldr	r3, [pc, #336]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f9a:	701a      	strb	r2, [r3, #0]
    	if(_configurableCounter>configurableTime)
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d905      	bls.n	8001fb4 <HAL_TIM_PeriodElapsedCallback+0x38>
    	{
    		_configurableFlagScanStart = true;
 8001fa8:	4b52      	ldr	r3, [pc, #328]	; (80020f4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
    		_configurableCounter = 0;
 8001fae:	4b4f      	ldr	r3, [pc, #316]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	701a      	strb	r2, [r3, #0]
    	}

    	_1msCounter++;
 8001fb4:	4b50      	ldr	r3, [pc, #320]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b4e      	ldr	r3, [pc, #312]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001fbe:	701a      	strb	r2, [r3, #0]
    	if(_1msCounter>0)
 8001fc0:	4b4d      	ldr	r3, [pc, #308]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_TIM_PeriodElapsedCallback+0x58>
    	{
    		_1msFlagScanStart = true;
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
    		_1msCounter = 0;
 8001fce:	4b4a      	ldr	r3, [pc, #296]	; (80020f8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	701a      	strb	r2, [r3, #0]
    	}


    	_10msCounter++;
 8001fd4:	4b4a      	ldr	r3, [pc, #296]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	4b48      	ldr	r3, [pc, #288]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001fde:	701a      	strb	r2, [r3, #0]
    	if(_10msCounter>9)
 8001fe0:	4b47      	ldr	r3, [pc, #284]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b09      	cmp	r3, #9
 8001fe6:	d905      	bls.n	8001ff4 <HAL_TIM_PeriodElapsedCallback+0x78>
    	{
    		_10msFlagScanStart = true;
 8001fe8:	4b46      	ldr	r3, [pc, #280]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
    		_10msCounter = 0;
 8001fee:	4b44      	ldr	r3, [pc, #272]	; (8002100 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
    	}

    	_25msCounter++;
 8001ff4:	4b44      	ldr	r3, [pc, #272]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001ffe:	701a      	strb	r2, [r3, #0]
    	if(_25msCounter>24)
 8002000:	4b41      	ldr	r3, [pc, #260]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b18      	cmp	r3, #24
 8002006:	d905      	bls.n	8002014 <HAL_TIM_PeriodElapsedCallback+0x98>
    	{
    		_25msFlagScanStart = true;
 8002008:	4b40      	ldr	r3, [pc, #256]	; (800210c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
    		_25msCounter = 0;
 800200e:	4b3e      	ldr	r3, [pc, #248]	; (8002108 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
    	}

    	_50msCounter++;
 8002014:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b3c      	ldr	r3, [pc, #240]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800201e:	701a      	strb	r2, [r3, #0]
    	if(_50msCounter>49)
 8002020:	4b3b      	ldr	r3, [pc, #236]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b31      	cmp	r3, #49	; 0x31
 8002026:	d905      	bls.n	8002034 <HAL_TIM_PeriodElapsedCallback+0xb8>
    	{
    		_50msFlagScanStart = true;
 8002028:	4b3a      	ldr	r3, [pc, #232]	; (8002114 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
    		_50msCounter = 0;
 800202e:	4b38      	ldr	r3, [pc, #224]	; (8002110 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
    	}

    	_100msCounter++;
 8002034:	4b38      	ldr	r3, [pc, #224]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b36      	ldr	r3, [pc, #216]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800203e:	701a      	strb	r2, [r3, #0]
    	if(_100msCounter>99)
 8002040:	4b35      	ldr	r3, [pc, #212]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b63      	cmp	r3, #99	; 0x63
 8002046:	d905      	bls.n	8002054 <HAL_TIM_PeriodElapsedCallback+0xd8>
    	{
    		_100msFlagScanStart = true;
 8002048:	4b34      	ldr	r3, [pc, #208]	; (800211c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800204a:	2201      	movs	r2, #1
 800204c:	701a      	strb	r2, [r3, #0]
    		_100msCounter = 0;
 800204e:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]

    	}

    	_250msCounter++;
 8002054:	4b32      	ldr	r3, [pc, #200]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	b2da      	uxtb	r2, r3
 800205c:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800205e:	701a      	strb	r2, [r3, #0]
    	if(_250msCounter>249)
 8002060:	4b2f      	ldr	r3, [pc, #188]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2bf9      	cmp	r3, #249	; 0xf9
 8002066:	d905      	bls.n	8002074 <HAL_TIM_PeriodElapsedCallback+0xf8>
    	{
    		_250msFlagScanStart = true;
 8002068:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
    		_250msCounter = 0;
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
    	}

    	_500msCounter++;
 8002074:	4b2c      	ldr	r3, [pc, #176]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	b29a      	uxth	r2, r3
 800207c:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800207e:	801a      	strh	r2, [r3, #0]
    	if(_500msCounter>499)
 8002080:	4b29      	ldr	r3, [pc, #164]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002088:	d305      	bcc.n	8002096 <HAL_TIM_PeriodElapsedCallback+0x11a>
    	{
    		_500msFlagScanStart = true;
 800208a:	4b28      	ldr	r3, [pc, #160]	; (800212c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
    		_500msCounter = 0;
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002092:	2200      	movs	r2, #0
 8002094:	801a      	strh	r2, [r3, #0]
    	}

    	_1sCounter++;
 8002096:	4b26      	ldr	r3, [pc, #152]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	3301      	adds	r3, #1
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80020a0:	801a      	strh	r2, [r3, #0]
    	if(_1sCounter>999)
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020aa:	d305      	bcc.n	80020b8 <HAL_TIM_PeriodElapsedCallback+0x13c>
    	{
    		_1sFlagScanStart = true;
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	701a      	strb	r2, [r3, #0]
    		_1sCounter = 0;
 80020b2:	4b1f      	ldr	r3, [pc, #124]	; (8002130 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	801a      	strh	r2, [r3, #0]
    	}

    	_10sCounter++;
 80020b8:	4b1f      	ldr	r3, [pc, #124]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	3301      	adds	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80020c2:	801a      	strh	r2, [r3, #0]
    	if(_10sCounter>9999)
 80020c4:	4b1c      	ldr	r3, [pc, #112]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d905      	bls.n	80020dc <HAL_TIM_PeriodElapsedCallback+0x160>
    	{
    		_10sFlagScanStart = true;
 80020d0:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
    		_10sCounter = 0;
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80020d8:	2200      	movs	r2, #0
 80020da:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	40000400 	.word	0x40000400
 80020ec:	240006e8 	.word	0x240006e8
 80020f0:	24000008 	.word	0x24000008
 80020f4:	240006f6 	.word	0x240006f6
 80020f8:	240006e9 	.word	0x240006e9
 80020fc:	240006f7 	.word	0x240006f7
 8002100:	240006ea 	.word	0x240006ea
 8002104:	240006f8 	.word	0x240006f8
 8002108:	240006eb 	.word	0x240006eb
 800210c:	240006f9 	.word	0x240006f9
 8002110:	240006ec 	.word	0x240006ec
 8002114:	240006fa 	.word	0x240006fa
 8002118:	240006ed 	.word	0x240006ed
 800211c:	240006fb 	.word	0x240006fb
 8002120:	240006ee 	.word	0x240006ee
 8002124:	240006fc 	.word	0x240006fc
 8002128:	240006f0 	.word	0x240006f0
 800212c:	240006fd 	.word	0x240006fd
 8002130:	240006f2 	.word	0x240006f2
 8002134:	240006fe 	.word	0x240006fe
 8002138:	240006f4 	.word	0x240006f4
 800213c:	240006ff 	.word	0x240006ff

08002140 <startTimeScanFlags>:

void startTimeScanFlags(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
	if(_configurableFlagScanStart)
 8002144:	4b34      	ldr	r3, [pc, #208]	; (8002218 <startTimeScanFlags+0xd8>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <startTimeScanFlags+0x18>
	{
		_configurableFlag = true;
 800214c:	4b33      	ldr	r3, [pc, #204]	; (800221c <startTimeScanFlags+0xdc>)
 800214e:	2201      	movs	r2, #1
 8002150:	701a      	strb	r2, [r3, #0]
		_configurableFlagScanStart = false;
 8002152:	4b31      	ldr	r3, [pc, #196]	; (8002218 <startTimeScanFlags+0xd8>)
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
	}
	if(_1msFlagScanStart)
 8002158:	4b31      	ldr	r3, [pc, #196]	; (8002220 <startTimeScanFlags+0xe0>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <startTimeScanFlags+0x2c>
	{
		_1msFlag = true;
 8002160:	4b30      	ldr	r3, [pc, #192]	; (8002224 <startTimeScanFlags+0xe4>)
 8002162:	2201      	movs	r2, #1
 8002164:	701a      	strb	r2, [r3, #0]
		_1msFlagScanStart = false;
 8002166:	4b2e      	ldr	r3, [pc, #184]	; (8002220 <startTimeScanFlags+0xe0>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
	}
	if(_10msFlagScanStart)
 800216c:	4b2e      	ldr	r3, [pc, #184]	; (8002228 <startTimeScanFlags+0xe8>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <startTimeScanFlags+0x40>
	{
		_10msFlag = true;
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <startTimeScanFlags+0xec>)
 8002176:	2201      	movs	r2, #1
 8002178:	701a      	strb	r2, [r3, #0]
		_10msFlagScanStart = false;
 800217a:	4b2b      	ldr	r3, [pc, #172]	; (8002228 <startTimeScanFlags+0xe8>)
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
	}
	if(_25msFlagScanStart)
 8002180:	4b2b      	ldr	r3, [pc, #172]	; (8002230 <startTimeScanFlags+0xf0>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d005      	beq.n	8002194 <startTimeScanFlags+0x54>
	{
		_25msFlag = true;
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <startTimeScanFlags+0xf4>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
		_25msFlagScanStart = false;
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <startTimeScanFlags+0xf0>)
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]
	}
	if(_50msFlagScanStart)
 8002194:	4b28      	ldr	r3, [pc, #160]	; (8002238 <startTimeScanFlags+0xf8>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <startTimeScanFlags+0x68>
	{
		_50msFlag = true;
 800219c:	4b27      	ldr	r3, [pc, #156]	; (800223c <startTimeScanFlags+0xfc>)
 800219e:	2201      	movs	r2, #1
 80021a0:	701a      	strb	r2, [r3, #0]
		_50msFlagScanStart = false;
 80021a2:	4b25      	ldr	r3, [pc, #148]	; (8002238 <startTimeScanFlags+0xf8>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	701a      	strb	r2, [r3, #0]
	}
	if(_100msFlagScanStart)
 80021a8:	4b25      	ldr	r3, [pc, #148]	; (8002240 <startTimeScanFlags+0x100>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <startTimeScanFlags+0x7c>
	{
		_100msFlag = true;
 80021b0:	4b24      	ldr	r3, [pc, #144]	; (8002244 <startTimeScanFlags+0x104>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
		_100msFlagScanStart = false;
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <startTimeScanFlags+0x100>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
	}
	if(_250msFlagScanStart)
 80021bc:	4b22      	ldr	r3, [pc, #136]	; (8002248 <startTimeScanFlags+0x108>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <startTimeScanFlags+0x90>
	{
		_250msFlag = true;
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <startTimeScanFlags+0x10c>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]
		_250msFlagScanStart = false;
 80021ca:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <startTimeScanFlags+0x108>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
	}
	if(_500msFlagScanStart)
 80021d0:	4b1f      	ldr	r3, [pc, #124]	; (8002250 <startTimeScanFlags+0x110>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <startTimeScanFlags+0xa4>
	{
		_500msFlag = true;
 80021d8:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <startTimeScanFlags+0x114>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
		_500msFlagScanStart = false;
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <startTimeScanFlags+0x110>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]
	}
	if(_1sFlagScanStart)
 80021e4:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <startTimeScanFlags+0x118>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <startTimeScanFlags+0xb8>
	{
		_1sFlag = true;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <startTimeScanFlags+0x11c>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
		_1sFlagScanStart = false;
 80021f2:	4b19      	ldr	r3, [pc, #100]	; (8002258 <startTimeScanFlags+0x118>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
	}
	if(_10sFlagScanStart)
 80021f8:	4b19      	ldr	r3, [pc, #100]	; (8002260 <startTimeScanFlags+0x120>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <startTimeScanFlags+0xcc>
	{
		_10sFlag = true;
 8002200:	4b18      	ldr	r3, [pc, #96]	; (8002264 <startTimeScanFlags+0x124>)
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
		_10sFlagScanStart = false;
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <startTimeScanFlags+0x120>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
	}
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	240006f6 	.word	0x240006f6
 800221c:	24000700 	.word	0x24000700
 8002220:	240006f7 	.word	0x240006f7
 8002224:	24000701 	.word	0x24000701
 8002228:	240006f8 	.word	0x240006f8
 800222c:	24000702 	.word	0x24000702
 8002230:	240006f9 	.word	0x240006f9
 8002234:	24000703 	.word	0x24000703
 8002238:	240006fa 	.word	0x240006fa
 800223c:	24000704 	.word	0x24000704
 8002240:	240006fb 	.word	0x240006fb
 8002244:	24000705 	.word	0x24000705
 8002248:	240006fc 	.word	0x240006fc
 800224c:	24000706 	.word	0x24000706
 8002250:	240006fd 	.word	0x240006fd
 8002254:	24000707 	.word	0x24000707
 8002258:	240006fe 	.word	0x240006fe
 800225c:	24000708 	.word	0x24000708
 8002260:	240006ff 	.word	0x240006ff
 8002264:	24000709 	.word	0x24000709

08002268 <clearTimeScanFlags>:

void clearTimeScanFlags(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
	_configurableFlag 	= false;
 800226c:	4b11      	ldr	r3, [pc, #68]	; (80022b4 <clearTimeScanFlags+0x4c>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
	_1msFlag 	= false;
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <clearTimeScanFlags+0x50>)
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
	_10msFlag 	= false;
 8002278:	4b10      	ldr	r3, [pc, #64]	; (80022bc <clearTimeScanFlags+0x54>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
	_25msFlag 	= false;
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <clearTimeScanFlags+0x58>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
	_50msFlag 	= false;
 8002284:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <clearTimeScanFlags+0x5c>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
	_100msFlag 	= false;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <clearTimeScanFlags+0x60>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
	_250msFlag 	= false;
 8002290:	4b0e      	ldr	r3, [pc, #56]	; (80022cc <clearTimeScanFlags+0x64>)
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
	_500msFlag 	= false;
 8002296:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <clearTimeScanFlags+0x68>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
	_1sFlag 	= false;
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <clearTimeScanFlags+0x6c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
	_10sFlag 	= false;
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <clearTimeScanFlags+0x70>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	701a      	strb	r2, [r3, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	24000700 	.word	0x24000700
 80022b8:	24000701 	.word	0x24000701
 80022bc:	24000702 	.word	0x24000702
 80022c0:	24000703 	.word	0x24000703
 80022c4:	24000704 	.word	0x24000704
 80022c8:	24000705 	.word	0x24000705
 80022cc:	24000706 	.word	0x24000706
 80022d0:	24000707 	.word	0x24000707
 80022d4:	24000708 	.word	0x24000708
 80022d8:	24000709 	.word	0x24000709

080022dc <MX_UART4_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <MX_UART4_Init+0x90>)
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <MX_UART4_Init+0x94>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <MX_UART4_Init+0x90>)
 80022e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <MX_UART4_Init+0x90>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <MX_UART4_Init+0x90>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_UART4_Init+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_UART4_Init+0x90>)
 8002302:	220c      	movs	r2, #12
 8002304:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_UART4_Init+0x90>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <MX_UART4_Init+0x90>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <MX_UART4_Init+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <MX_UART4_Init+0x90>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <MX_UART4_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002324:	4811      	ldr	r0, [pc, #68]	; (800236c <MX_UART4_Init+0x90>)
 8002326:	f009 fb33 	bl	800b990 <HAL_UART_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002330:	f7ff fbbc 	bl	8001aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002334:	2100      	movs	r1, #0
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <MX_UART4_Init+0x90>)
 8002338:	f00a fb3b 	bl	800c9b2 <HAL_UARTEx_SetTxFifoThreshold>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002342:	f7ff fbb3 	bl	8001aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002346:	2100      	movs	r1, #0
 8002348:	4808      	ldr	r0, [pc, #32]	; (800236c <MX_UART4_Init+0x90>)
 800234a:	f00a fb70 	bl	800ca2e <HAL_UARTEx_SetRxFifoThreshold>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002354:	f7ff fbaa 	bl	8001aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <MX_UART4_Init+0x90>)
 800235a:	f00a faf1 	bl	800c940 <HAL_UARTEx_DisableFifoMode>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002364:	f7ff fba2 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	2400070c 	.word	0x2400070c
 8002370:	40004c00 	.word	0x40004c00

08002374 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <MX_UART7_Init+0x90>)
 800237a:	4a23      	ldr	r2, [pc, #140]	; (8002408 <MX_UART7_Init+0x94>)
 800237c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <MX_UART7_Init+0x90>)
 8002380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002384:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002386:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <MX_UART7_Init+0x90>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <MX_UART7_Init+0x90>)
 800238e:	2200      	movs	r2, #0
 8002390:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <MX_UART7_Init+0x90>)
 8002394:	2200      	movs	r2, #0
 8002396:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <MX_UART7_Init+0x90>)
 800239a:	220c      	movs	r2, #12
 800239c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <MX_UART7_Init+0x90>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80023a4:	4b17      	ldr	r3, [pc, #92]	; (8002404 <MX_UART7_Init+0x90>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <MX_UART7_Init+0x90>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_UART7_Init+0x90>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <MX_UART7_Init+0x90>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80023bc:	4811      	ldr	r0, [pc, #68]	; (8002404 <MX_UART7_Init+0x90>)
 80023be:	f009 fae7 	bl	800b990 <HAL_UART_Init>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80023c8:	f7ff fb70 	bl	8001aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023cc:	2100      	movs	r1, #0
 80023ce:	480d      	ldr	r0, [pc, #52]	; (8002404 <MX_UART7_Init+0x90>)
 80023d0:	f00a faef 	bl	800c9b2 <HAL_UARTEx_SetTxFifoThreshold>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 80023da:	f7ff fb67 	bl	8001aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023de:	2100      	movs	r1, #0
 80023e0:	4808      	ldr	r0, [pc, #32]	; (8002404 <MX_UART7_Init+0x90>)
 80023e2:	f00a fb24 	bl	800ca2e <HAL_UARTEx_SetRxFifoThreshold>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 80023ec:	f7ff fb5e 	bl	8001aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 80023f0:	4804      	ldr	r0, [pc, #16]	; (8002404 <MX_UART7_Init+0x90>)
 80023f2:	f00a faa5 	bl	800c940 <HAL_UARTEx_DisableFifoMode>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 80023fc:	f7ff fb56 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002400:	bf00      	nop
 8002402:	bd80      	pop	{r7, pc}
 8002404:	240007a0 	.word	0x240007a0
 8002408:	40007800 	.word	0x40007800

0800240c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <MX_UART8_Init+0x90>)
 8002412:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <MX_UART8_Init+0x94>)
 8002414:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002416:	4b21      	ldr	r3, [pc, #132]	; (800249c <MX_UART8_Init+0x90>)
 8002418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800241c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b1f      	ldr	r3, [pc, #124]	; (800249c <MX_UART8_Init+0x90>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <MX_UART8_Init+0x90>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <MX_UART8_Init+0x90>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <MX_UART8_Init+0x90>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <MX_UART8_Init+0x90>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <MX_UART8_Init+0x90>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <MX_UART8_Init+0x90>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_UART8_Init+0x90>)
 800244a:	2200      	movs	r2, #0
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_UART8_Init+0x90>)
 8002450:	2200      	movs	r2, #0
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002454:	4811      	ldr	r0, [pc, #68]	; (800249c <MX_UART8_Init+0x90>)
 8002456:	f009 fa9b 	bl	800b990 <HAL_UART_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002460:	f7ff fb24 	bl	8001aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002464:	2100      	movs	r1, #0
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <MX_UART8_Init+0x90>)
 8002468:	f00a faa3 	bl	800c9b2 <HAL_UARTEx_SetTxFifoThreshold>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002472:	f7ff fb1b 	bl	8001aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002476:	2100      	movs	r1, #0
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <MX_UART8_Init+0x90>)
 800247a:	f00a fad8 	bl	800ca2e <HAL_UARTEx_SetRxFifoThreshold>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002484:	f7ff fb12 	bl	8001aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <MX_UART8_Init+0x90>)
 800248a:	f00a fa59 	bl	800c940 <HAL_UARTEx_DisableFifoMode>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002494:	f7ff fb0a 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	24000834 	.word	0x24000834
 80024a0:	40007c00 	.word	0x40007c00

080024a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b0be      	sub	sp, #248	; 0xf8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024bc:	f107 0320 	add.w	r3, r7, #32
 80024c0:	22c0      	movs	r2, #192	; 0xc0
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f00a fb3f 	bl	800cb48 <memset>
  if(uartHandle->Instance==UART4)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a73      	ldr	r2, [pc, #460]	; (800269c <HAL_UART_MspInit+0x1f8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d147      	bne.n	8002564 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80024d4:	f04f 0202 	mov.w	r2, #2
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024e0:	2300      	movs	r3, #0
 80024e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024e6:	f107 0320 	add.w	r3, r7, #32
 80024ea:	4618      	mov	r0, r3
 80024ec:	f006 f976 	bl	80087dc <HAL_RCCEx_PeriphCLKConfig>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80024f6:	f7ff fad9 	bl	8001aac <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80024fa:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 80024fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002500:	4a67      	ldr	r2, [pc, #412]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 8002502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002506:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800250a:	4b65      	ldr	r3, [pc, #404]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 800250c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002514:	61fb      	str	r3, [r7, #28]
 8002516:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002518:	4b61      	ldr	r3, [pc, #388]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800251e:	4a60      	ldr	r2, [pc, #384]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 8002520:	f043 0304 	orr.w	r3, r3, #4
 8002524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002528:	4b5d      	ldr	r3, [pc, #372]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 800252a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	61bb      	str	r3, [r7, #24]
 8002534:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = RS422_TX_1_Pin|RS422_RX_1_Pin;
 8002536:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800253a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800253e:	2302      	movs	r3, #2
 8002540:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002550:	2308      	movs	r3, #8
 8002552:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002556:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800255a:	4619      	mov	r1, r3
 800255c:	4851      	ldr	r0, [pc, #324]	; (80026a4 <HAL_UART_MspInit+0x200>)
 800255e:	f004 fe1f 	bl	80071a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8002562:	e097      	b.n	8002694 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==UART7)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a4f      	ldr	r2, [pc, #316]	; (80026a8 <HAL_UART_MspInit+0x204>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d147      	bne.n	80025fe <HAL_UART_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800256e:	f04f 0202 	mov.w	r2, #2
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800257a:	2300      	movs	r3, #0
 800257c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002580:	f107 0320 	add.w	r3, r7, #32
 8002584:	4618      	mov	r0, r3
 8002586:	f006 f929 	bl	80087dc <HAL_RCCEx_PeriphCLKConfig>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002590:	f7ff fa8c 	bl	8001aac <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002594:	4b42      	ldr	r3, [pc, #264]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 8002596:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800259a:	4a41      	ldr	r2, [pc, #260]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 800259c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025a0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80025a4:	4b3e      	ldr	r3, [pc, #248]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 80025a6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80025aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025b2:	4b3b      	ldr	r3, [pc, #236]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 80025b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025b8:	4a39      	ldr	r2, [pc, #228]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 80025ba:	f043 0310 	orr.w	r3, r3, #16
 80025be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025c2:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 80025c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RS422_RX_2_Pin|RS422_TX_2_Pin;
 80025d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80025d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80025ea:	2307      	movs	r3, #7
 80025ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025f4:	4619      	mov	r1, r3
 80025f6:	482d      	ldr	r0, [pc, #180]	; (80026ac <HAL_UART_MspInit+0x208>)
 80025f8:	f004 fdd2 	bl	80071a0 <HAL_GPIO_Init>
}
 80025fc:	e04a      	b.n	8002694 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==UART8)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a2b      	ldr	r2, [pc, #172]	; (80026b0 <HAL_UART_MspInit+0x20c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d145      	bne.n	8002694 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002608:	f04f 0202 	mov.w	r2, #2
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002614:	2300      	movs	r3, #0
 8002616:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800261a:	f107 0320 	add.w	r3, r7, #32
 800261e:	4618      	mov	r0, r3
 8002620:	f006 f8dc 	bl	80087dc <HAL_RCCEx_PeriphCLKConfig>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_UART_MspInit+0x18a>
      Error_Handler();
 800262a:	f7ff fa3f 	bl	8001aac <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 800262e:	4b1c      	ldr	r3, [pc, #112]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 8002630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002634:	4a1a      	ldr	r2, [pc, #104]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 8002636:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800263a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800263e:	4b18      	ldr	r3, [pc, #96]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 8002640:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800264c:	4b14      	ldr	r3, [pc, #80]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 800264e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002652:	4a13      	ldr	r2, [pc, #76]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 8002654:	f043 0310 	orr.w	r3, r3, #16
 8002658:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800265c:	4b10      	ldr	r3, [pc, #64]	; (80026a0 <HAL_UART_MspInit+0x1fc>)
 800265e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 800266a:	2303      	movs	r3, #3
 800266c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002670:	2302      	movs	r3, #2
 8002672:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002682:	2308      	movs	r3, #8
 8002684:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002688:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800268c:	4619      	mov	r1, r3
 800268e:	4807      	ldr	r0, [pc, #28]	; (80026ac <HAL_UART_MspInit+0x208>)
 8002690:	f004 fd86 	bl	80071a0 <HAL_GPIO_Init>
}
 8002694:	bf00      	nop
 8002696:	37f8      	adds	r7, #248	; 0xf8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40004c00 	.word	0x40004c00
 80026a0:	58024400 	.word	0x58024400
 80026a4:	58020800 	.word	0x58020800
 80026a8:	40007800 	.word	0x40007800
 80026ac:	58021000 	.word	0x58021000
 80026b0:	40007c00 	.word	0x40007c00

080026b4 <Reset_Handler>:
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026ec <LoopFillZerobss+0xe>
 80026b8:	f7ff fa9e 	bl	8001bf8 <SystemInit>
 80026bc:	480c      	ldr	r0, [pc, #48]	; (80026f0 <LoopFillZerobss+0x12>)
 80026be:	490d      	ldr	r1, [pc, #52]	; (80026f4 <LoopFillZerobss+0x16>)
 80026c0:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <LoopFillZerobss+0x1a>)
 80026c2:	2300      	movs	r3, #0
 80026c4:	e002      	b.n	80026cc <LoopCopyDataInit>

080026c6 <CopyDataInit>:
 80026c6:	58d4      	ldr	r4, [r2, r3]
 80026c8:	50c4      	str	r4, [r0, r3]
 80026ca:	3304      	adds	r3, #4

080026cc <LoopCopyDataInit>:
 80026cc:	18c4      	adds	r4, r0, r3
 80026ce:	428c      	cmp	r4, r1
 80026d0:	d3f9      	bcc.n	80026c6 <CopyDataInit>
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <LoopFillZerobss+0x1e>)
 80026d4:	4c0a      	ldr	r4, [pc, #40]	; (8002700 <LoopFillZerobss+0x22>)
 80026d6:	2300      	movs	r3, #0
 80026d8:	e001      	b.n	80026de <LoopFillZerobss>

080026da <FillZerobss>:
 80026da:	6013      	str	r3, [r2, #0]
 80026dc:	3204      	adds	r2, #4

080026de <LoopFillZerobss>:
 80026de:	42a2      	cmp	r2, r4
 80026e0:	d3fb      	bcc.n	80026da <FillZerobss>
 80026e2:	f00a fa39 	bl	800cb58 <__libc_init_array>
 80026e6:	f7ff f893 	bl	8001810 <main>
 80026ea:	4770      	bx	lr
 80026ec:	24080000 	.word	0x24080000
 80026f0:	24000000 	.word	0x24000000
 80026f4:	24000014 	.word	0x24000014
 80026f8:	0800cc70 	.word	0x0800cc70
 80026fc:	240000d4 	.word	0x240000d4
 8002700:	240008cc 	.word	0x240008cc

08002704 <ADC3_IRQHandler>:
 8002704:	e7fe      	b.n	8002704 <ADC3_IRQHandler>
	...

08002708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800270e:	2003      	movs	r0, #3
 8002710:	f001 fc96 	bl	8004040 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002714:	f005 fe8c 	bl	8008430 <HAL_RCC_GetSysClockFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <HAL_Init+0x68>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	4913      	ldr	r1, [pc, #76]	; (8002774 <HAL_Init+0x6c>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
 8002730:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_Init+0x68>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	4a0e      	ldr	r2, [pc, #56]	; (8002774 <HAL_Init+0x6c>)
 800273c:	5cd3      	ldrb	r3, [r2, r3]
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <HAL_Init+0x70>)
 800274a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800274c:	4a0b      	ldr	r2, [pc, #44]	; (800277c <HAL_Init+0x74>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002752:	200f      	movs	r0, #15
 8002754:	f000 f814 	bl	8002780 <HAL_InitTick>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e002      	b.n	8002768 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002762:	f7ff f9dd 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002766:	2300      	movs	r3, #0
}
 8002768:	4618      	mov	r0, r3
 800276a:	3708      	adds	r7, #8
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	58024400 	.word	0x58024400
 8002774:	0800cc20 	.word	0x0800cc20
 8002778:	24000004 	.word	0x24000004
 800277c:	24000000 	.word	0x24000000

08002780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002788:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_InitTick+0x60>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e021      	b.n	80027d8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002794:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_InitTick+0x64>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_InitTick+0x60>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 fc7b 	bl	80040a6 <HAL_SYSTICK_Config>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e00e      	b.n	80027d8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b0f      	cmp	r3, #15
 80027be:	d80a      	bhi.n	80027d6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027c0:	2200      	movs	r2, #0
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295
 80027c8:	f001 fc45 	bl	8004056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027cc:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <HAL_InitTick+0x68>)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	e000      	b.n	80027d8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3708      	adds	r7, #8
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	24000010 	.word	0x24000010
 80027e4:	24000000 	.word	0x24000000
 80027e8:	2400000c 	.word	0x2400000c

080027ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <HAL_IncTick+0x20>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	461a      	mov	r2, r3
 80027f6:	4b06      	ldr	r3, [pc, #24]	; (8002810 <HAL_IncTick+0x24>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4413      	add	r3, r2
 80027fc:	4a04      	ldr	r2, [pc, #16]	; (8002810 <HAL_IncTick+0x24>)
 80027fe:	6013      	str	r3, [r2, #0]
}
 8002800:	bf00      	nop
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	24000010 	.word	0x24000010
 8002810:	240008c8 	.word	0x240008c8

08002814 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return uwTick;
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_GetTick+0x14>)
 800281a:	681b      	ldr	r3, [r3, #0]
}
 800281c:	4618      	mov	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	240008c8 	.word	0x240008c8

0800282c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002834:	f7ff ffee 	bl	8002814 <HAL_GetTick>
 8002838:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d005      	beq.n	8002852 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_Delay+0x44>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002852:	bf00      	nop
 8002854:	f7ff ffde 	bl	8002814 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	429a      	cmp	r2, r3
 8002862:	d8f7      	bhi.n	8002854 <HAL_Delay+0x28>
  {
  }
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	24000010 	.word	0x24000010

08002874 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002878:	4b03      	ldr	r3, [pc, #12]	; (8002888 <HAL_GetREVID+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0c1b      	lsrs	r3, r3, #16
}
 800287e:	4618      	mov	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	5c001000 	.word	0x5c001000

0800288c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800289c:	4904      	ldr	r1, [pc, #16]	; (80028b0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	58000400 	.word	0x58000400

080028b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	609a      	str	r2, [r3, #8]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	3360      	adds	r3, #96	; 0x60
 800292e:	461a      	mov	r2, r3
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	430b      	orrs	r3, r1
 800294a:	431a      	orrs	r2, r3
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002950:	bf00      	nop
 8002952:	371c      	adds	r7, #28
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	f003 031f 	and.w	r3, r3, #31
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	431a      	orrs	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	611a      	str	r2, [r3, #16]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800298e:	b480      	push	{r7}
 8002990:	b087      	sub	sp, #28
 8002992:	af00      	add	r7, sp, #0
 8002994:	60f8      	str	r0, [r7, #12]
 8002996:	60b9      	str	r1, [r7, #8]
 8002998:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	3360      	adds	r3, #96	; 0x60
 800299e:	461a      	mov	r2, r3
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	601a      	str	r2, [r3, #0]
  }
}
 80029b8:	bf00      	nop
 80029ba:	371c      	adds	r7, #28
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80029d8:	2301      	movs	r3, #1
 80029da:	e000      	b.n	80029de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	370c      	adds	r7, #12
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b087      	sub	sp, #28
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	3330      	adds	r3, #48	; 0x30
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	0a1b      	lsrs	r3, r3, #8
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	f003 030c 	and.w	r3, r3, #12
 8002a06:	4413      	add	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	211f      	movs	r1, #31
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	401a      	ands	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0e9b      	lsrs	r3, r3, #26
 8002a22:	f003 011f 	and.w	r1, r3, #31
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	f003 031f 	and.w	r3, r3, #31
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a36:	bf00      	nop
 8002a38:	371c      	adds	r7, #28
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f023 0203 	bic.w	r2, r3, #3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	3314      	adds	r3, #20
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	0e5b      	lsrs	r3, r3, #25
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	4413      	add	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	0d1b      	lsrs	r3, r3, #20
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	2107      	movs	r1, #7
 8002a96:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	401a      	ands	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	0d1b      	lsrs	r3, r3, #20
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	6879      	ldr	r1, [r7, #4]
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	431a      	orrs	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	401a      	ands	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f003 0318 	and.w	r3, r3, #24
 8002ae2:	4908      	ldr	r1, [pc, #32]	; (8002b04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ae4:	40d9      	lsrs	r1, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	400b      	ands	r3, r1
 8002aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002aee:	431a      	orrs	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002af6:	bf00      	nop
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	000fffff 	.word	0x000fffff

08002b08 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 031f 	and.w	r3, r3, #31
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	6093      	str	r3, [r2, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	5fffffc0 	.word	0x5fffffc0

08002b48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b5c:	d101      	bne.n	8002b62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <LL_ADC_EnableInternalRegulator+0x24>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	6fffffc0 	.word	0x6fffffc0

08002b98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bac:	d101      	bne.n	8002bb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e000      	b.n	8002bb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <LL_ADC_Enable+0x24>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	7fffffc0 	.word	0x7fffffc0

08002be8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <LL_ADC_IsEnabled+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LL_ADC_IsEnabled+0x1a>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
	...

08002c10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <LL_ADC_REG_StartConversion+0x24>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	f043 0204 	orr.w	r2, r3, #4
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	7fffffc0 	.word	0x7fffffc0

08002c38 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d101      	bne.n	8002c50 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b08      	cmp	r3, #8
 8002c70:	d101      	bne.n	8002c76 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e000      	b.n	8002c78 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c84:	b590      	push	{r4, r7, lr}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e18f      	b.n	8002fbe <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d109      	bne.n	8002cc0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7fd fdd5 	bl	800085c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff3f 	bl	8002b48 <LL_ADC_IsDeepPowerDownEnabled>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d004      	beq.n	8002cda <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff25 	bl	8002b24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff ff5a 	bl	8002b98 <LL_ADC_IsInternalRegulatorEnabled>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d114      	bne.n	8002d14 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff ff3e 	bl	8002b70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf4:	4b87      	ldr	r3, [pc, #540]	; (8002f14 <HAL_ADC_Init+0x290>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	4a87      	ldr	r2, [pc, #540]	; (8002f18 <HAL_ADC_Init+0x294>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	3301      	adds	r3, #1
 8002d04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d06:	e002      	b.n	8002d0e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1f9      	bne.n	8002d08 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff ff3d 	bl	8002b98 <LL_ADC_IsInternalRegulatorEnabled>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	f043 0210 	orr.w	r2, r3, #16
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f043 0201 	orr.w	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff77 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 8002d4a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f003 0310 	and.w	r3, r3, #16
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f040 8129 	bne.w	8002fac <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 8125 	bne.w	8002fac <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d66:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d6a:	f043 0202 	orr.w	r2, r3, #2
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff36 	bl	8002be8 <LL_ADC_IsEnabled>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d136      	bne.n	8002df0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a65      	ldr	r2, [pc, #404]	; (8002f1c <HAL_ADC_Init+0x298>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADC_Init+0x112>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a63      	ldr	r2, [pc, #396]	; (8002f20 <HAL_ADC_Init+0x29c>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10e      	bne.n	8002db4 <HAL_ADC_Init+0x130>
 8002d96:	4861      	ldr	r0, [pc, #388]	; (8002f1c <HAL_ADC_Init+0x298>)
 8002d98:	f7ff ff26 	bl	8002be8 <LL_ADC_IsEnabled>
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	4860      	ldr	r0, [pc, #384]	; (8002f20 <HAL_ADC_Init+0x29c>)
 8002da0:	f7ff ff22 	bl	8002be8 <LL_ADC_IsEnabled>
 8002da4:	4603      	mov	r3, r0
 8002da6:	4323      	orrs	r3, r4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	e008      	b.n	8002dc6 <HAL_ADC_Init+0x142>
 8002db4:	485b      	ldr	r0, [pc, #364]	; (8002f24 <HAL_ADC_Init+0x2a0>)
 8002db6:	f7ff ff17 	bl	8002be8 <LL_ADC_IsEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	bf0c      	ite	eq
 8002dc0:	2301      	moveq	r3, #1
 8002dc2:	2300      	movne	r3, #0
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d012      	beq.n	8002df0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a53      	ldr	r2, [pc, #332]	; (8002f1c <HAL_ADC_Init+0x298>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d004      	beq.n	8002dde <HAL_ADC_Init+0x15a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a51      	ldr	r2, [pc, #324]	; (8002f20 <HAL_ADC_Init+0x29c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d101      	bne.n	8002de2 <HAL_ADC_Init+0x15e>
 8002dde:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <HAL_ADC_Init+0x2a4>)
 8002de0:	e000      	b.n	8002de4 <HAL_ADC_Init+0x160>
 8002de2:	4a52      	ldr	r2, [pc, #328]	; (8002f2c <HAL_ADC_Init+0x2a8>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	4619      	mov	r1, r3
 8002dea:	4610      	mov	r0, r2
 8002dec:	f7ff fd62 	bl	80028b4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002df0:	f7ff fd40 	bl	8002874 <HAL_GetREVID>
 8002df4:	4603      	mov	r3, r0
 8002df6:	f241 0203 	movw	r2, #4099	; 0x1003
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d914      	bls.n	8002e28 <HAL_ADC_Init+0x1a4>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d110      	bne.n	8002e28 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	7d5b      	ldrb	r3, [r3, #21]
 8002e0a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e10:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e16:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7f1b      	ldrb	r3, [r3, #28]
 8002e1c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e1e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e20:	f043 030c 	orr.w	r3, r3, #12
 8002e24:	61bb      	str	r3, [r7, #24]
 8002e26:	e00d      	b.n	8002e44 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7d5b      	ldrb	r3, [r3, #21]
 8002e2c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e32:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e38:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	7f1b      	ldrb	r3, [r3, #28]
 8002e3e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7f1b      	ldrb	r3, [r3, #28]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d106      	bne.n	8002e5a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	3b01      	subs	r3, #1
 8002e52:	045b      	lsls	r3, r3, #17
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d009      	beq.n	8002e76 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <HAL_ADC_Init+0x2ac>)
 8002e7e:	4013      	ands	r3, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6812      	ldr	r2, [r2, #0]
 8002e84:	69b9      	ldr	r1, [r7, #24]
 8002e86:	430b      	orrs	r3, r1
 8002e88:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff fed2 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 8002e94:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fedf 	bl	8002c5e <LL_ADC_INJ_IsConversionOngoing>
 8002ea0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d15f      	bne.n	8002f68 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d15c      	bne.n	8002f68 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7d1b      	ldrb	r3, [r3, #20]
 8002eb2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	4b1c      	ldr	r3, [pc, #112]	; (8002f34 <HAL_ADC_Init+0x2b0>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	69b9      	ldr	r1, [r7, #24]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d130      	bne.n	8002f3c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	691a      	ldr	r2, [r3, #16]
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <HAL_ADC_Init+0x2b4>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002eee:	3a01      	subs	r2, #1
 8002ef0:	0411      	lsls	r1, r2, #16
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ef6:	4311      	orrs	r1, r2
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002efc:	4311      	orrs	r1, r2
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f02:	430a      	orrs	r2, r1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f042 0201 	orr.w	r2, r2, #1
 8002f0e:	611a      	str	r2, [r3, #16]
 8002f10:	e01c      	b.n	8002f4c <HAL_ADC_Init+0x2c8>
 8002f12:	bf00      	nop
 8002f14:	24000000 	.word	0x24000000
 8002f18:	053e2d63 	.word	0x053e2d63
 8002f1c:	40022000 	.word	0x40022000
 8002f20:	40022100 	.word	0x40022100
 8002f24:	58026000 	.word	0x58026000
 8002f28:	40022300 	.word	0x40022300
 8002f2c:	58026300 	.word	0x58026300
 8002f30:	fff0c003 	.word	0xfff0c003
 8002f34:	ffffbffc 	.word	0xffffbffc
 8002f38:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0201 	bic.w	r2, r2, #1
 8002f4a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fd8c 	bl	8003a80 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10c      	bne.n	8002f8a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f76:	f023 010f 	bic.w	r1, r3, #15
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	1e5a      	subs	r2, r3, #1
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
 8002f88:	e007      	b.n	8002f9a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 020f 	bic.w	r2, r2, #15
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	f043 0201 	orr.w	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	655a      	str	r2, [r3, #84]	; 0x54
 8002faa:	e007      	b.n	8002fbc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb0:	f043 0210 	orr.w	r2, r3, #16
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3724      	adds	r7, #36	; 0x24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd90      	pop	{r4, r7, pc}
 8002fc6:	bf00      	nop

08002fc8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a55      	ldr	r2, [pc, #340]	; (8003130 <HAL_ADC_Start_DMA+0x168>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d004      	beq.n	8002fe8 <HAL_ADC_Start_DMA+0x20>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a54      	ldr	r2, [pc, #336]	; (8003134 <HAL_ADC_Start_DMA+0x16c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d101      	bne.n	8002fec <HAL_ADC_Start_DMA+0x24>
 8002fe8:	4b53      	ldr	r3, [pc, #332]	; (8003138 <HAL_ADC_Start_DMA+0x170>)
 8002fea:	e000      	b.n	8002fee <HAL_ADC_Start_DMA+0x26>
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_ADC_Start_DMA+0x174>)
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff fd8a 	bl	8002b08 <LL_ADC_GetMultimode>
 8002ff4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fe1c 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	f040 808c 	bne.w	8003120 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_ADC_Start_DMA+0x4e>
 8003012:	2302      	movs	r3, #2
 8003014:	e087      	b.n	8003126 <HAL_ADC_Start_DMA+0x15e>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	2b05      	cmp	r3, #5
 8003028:	d002      	beq.n	8003030 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b09      	cmp	r3, #9
 800302e:	d170      	bne.n	8003112 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 fc07 	bl	8003844 <ADC_Enable>
 8003036:	4603      	mov	r3, r0
 8003038:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800303a:	7dfb      	ldrb	r3, [r7, #23]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d163      	bne.n	8003108 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003044:	4b3e      	ldr	r3, [pc, #248]	; (8003140 <HAL_ADC_Start_DMA+0x178>)
 8003046:	4013      	ands	r3, r2
 8003048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a37      	ldr	r2, [pc, #220]	; (8003134 <HAL_ADC_Start_DMA+0x16c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d002      	beq.n	8003060 <HAL_ADC_Start_DMA+0x98>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	e000      	b.n	8003062 <HAL_ADC_Start_DMA+0x9a>
 8003060:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_ADC_Start_DMA+0x168>)
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	4293      	cmp	r3, r2
 8003068:	d002      	beq.n	8003070 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003074:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308c:	f023 0206 	bic.w	r2, r3, #6
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	659a      	str	r2, [r3, #88]	; 0x58
 8003094:	e002      	b.n	800309c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a0:	4a28      	ldr	r2, [pc, #160]	; (8003144 <HAL_ADC_Start_DMA+0x17c>)
 80030a2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a8:	4a27      	ldr	r2, [pc, #156]	; (8003148 <HAL_ADC_Start_DMA+0x180>)
 80030aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b0:	4a26      	ldr	r2, [pc, #152]	; (800314c <HAL_ADC_Start_DMA+0x184>)
 80030b2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	221c      	movs	r2, #28
 80030ba:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f042 0210 	orr.w	r2, r2, #16
 80030d2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f7ff fcaf 	bl	8002a42 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3340      	adds	r3, #64	; 0x40
 80030ee:	4619      	mov	r1, r3
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f001 fb40 	bl	8004778 <HAL_DMA_Start_IT>
 80030f8:	4603      	mov	r3, r0
 80030fa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff fd85 	bl	8002c10 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003106:	e00d      	b.n	8003124 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8003110:	e008      	b.n	8003124 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800311e:	e001      	b.n	8003124 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003120:	2302      	movs	r3, #2
 8003122:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003124:	7dfb      	ldrb	r3, [r7, #23]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40022000 	.word	0x40022000
 8003134:	40022100 	.word	0x40022100
 8003138:	40022300 	.word	0x40022300
 800313c:	58026300 	.word	0x58026300
 8003140:	fffff0fe 	.word	0xfffff0fe
 8003144:	08003959 	.word	0x08003959
 8003148:	08003a31 	.word	0x08003a31
 800314c:	08003a4d 	.word	0x08003a4d

08003150 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800318c:	b590      	push	{r4, r7, lr}
 800318e:	b0a1      	sub	sp, #132	; 0x84
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003196:	2300      	movs	r3, #0
 8003198:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4a65      	ldr	r2, [pc, #404]	; (800333c <HAL_ADC_ConfigChannel+0x1b0>)
 80031a6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_ADC_ConfigChannel+0x2a>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e32e      	b.n	8003814 <HAL_ADC_ConfigChannel+0x688>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff fd38 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f040 8313 	bne.w	80037f6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	db2c      	blt.n	8003232 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d108      	bne.n	80031f6 <HAL_ADC_ConfigChannel+0x6a>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2201      	movs	r2, #1
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	e016      	b.n	8003224 <HAL_ADC_ConfigChannel+0x98>
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003206:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003208:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800320e:	2320      	movs	r3, #32
 8003210:	e003      	b.n	800321a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003212:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f003 031f 	and.w	r3, r3, #31
 800321e:	2201      	movs	r2, #1
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6812      	ldr	r2, [r2, #0]
 8003228:	69d1      	ldr	r1, [r2, #28]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	430b      	orrs	r3, r1
 8003230:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6818      	ldr	r0, [r3, #0]
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6859      	ldr	r1, [r3, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	461a      	mov	r2, r3
 8003240:	f7ff fbd3 	bl	80029ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fcf5 	bl	8002c38 <LL_ADC_REG_IsConversionOngoing>
 800324e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fd02 	bl	8002c5e <LL_ADC_INJ_IsConversionOngoing>
 800325a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800325c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 80b8 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003266:	2b00      	cmp	r3, #0
 8003268:	f040 80b4 	bne.w	80033d4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6819      	ldr	r1, [r3, #0]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	461a      	mov	r2, r3
 800327a:	f7ff fbf5 	bl	8002a68 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800327e:	4b30      	ldr	r3, [pc, #192]	; (8003340 <HAL_ADC_ConfigChannel+0x1b4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003286:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328a:	d10b      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x118>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	e01d      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x154>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0310 	and.w	r3, r3, #16
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x13e>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	089b      	lsrs	r3, r3, #2
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	e00a      	b.n	80032e0 <HAL_ADC_ConfigChannel+0x154>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	089b      	lsrs	r3, r3, #2
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b04      	cmp	r3, #4
 80032e8:	d02c      	beq.n	8003344 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6919      	ldr	r1, [r3, #16]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032f8:	f7ff fb10 	bl	800291c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6818      	ldr	r0, [r3, #0]
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	6919      	ldr	r1, [r3, #16]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	7e5b      	ldrb	r3, [r3, #25]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d102      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x186>
 800330c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003310:	e000      	b.n	8003314 <HAL_ADC_ConfigChannel+0x188>
 8003312:	2300      	movs	r3, #0
 8003314:	461a      	mov	r2, r3
 8003316:	f7ff fb3a 	bl	800298e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6919      	ldr	r1, [r3, #16]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	7e1b      	ldrb	r3, [r3, #24]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d102      	bne.n	8003330 <HAL_ADC_ConfigChannel+0x1a4>
 800332a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800332e:	e000      	b.n	8003332 <HAL_ADC_ConfigChannel+0x1a6>
 8003330:	2300      	movs	r3, #0
 8003332:	461a      	mov	r2, r3
 8003334:	f7ff fb12 	bl	800295c <LL_ADC_SetDataRightShift>
 8003338:	e04c      	b.n	80033d4 <HAL_ADC_ConfigChannel+0x248>
 800333a:	bf00      	nop
 800333c:	47ff0000 	.word	0x47ff0000
 8003340:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	069b      	lsls	r3, r3, #26
 8003354:	429a      	cmp	r2, r3
 8003356:	d107      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003366:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800336e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	069b      	lsls	r3, r3, #26
 8003378:	429a      	cmp	r2, r3
 800337a:	d107      	bne.n	800338c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800338a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	069b      	lsls	r3, r3, #26
 800339c:	429a      	cmp	r2, r3
 800339e:	d107      	bne.n	80033b0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033ae:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	069b      	lsls	r3, r3, #26
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d107      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80033d2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fc05 	bl	8002be8 <LL_ADC_IsEnabled>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f040 8211 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6819      	ldr	r1, [r3, #0]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7ff fb64 	bl	8002ac0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	4aa1      	ldr	r2, [pc, #644]	; (8003684 <HAL_ADC_ConfigChannel+0x4f8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	f040 812e 	bne.w	8003660 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10b      	bne.n	800342c <HAL_ADC_ConfigChannel+0x2a0>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	0e9b      	lsrs	r3, r3, #26
 800341a:	3301      	adds	r3, #1
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	2b09      	cmp	r3, #9
 8003422:	bf94      	ite	ls
 8003424:	2301      	movls	r3, #1
 8003426:	2300      	movhi	r3, #0
 8003428:	b2db      	uxtb	r3, r3
 800342a:	e019      	b.n	8003460 <HAL_ADC_ConfigChannel+0x2d4>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003434:	fa93 f3a3 	rbit	r3, r3
 8003438:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800343a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800343c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800343e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003444:	2320      	movs	r3, #32
 8003446:	e003      	b.n	8003450 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003448:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	3301      	adds	r3, #1
 8003452:	f003 031f 	and.w	r3, r3, #31
 8003456:	2b09      	cmp	r3, #9
 8003458:	bf94      	ite	ls
 800345a:	2301      	movls	r3, #1
 800345c:	2300      	movhi	r3, #0
 800345e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003460:	2b00      	cmp	r3, #0
 8003462:	d079      	beq.n	8003558 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800346c:	2b00      	cmp	r3, #0
 800346e:	d107      	bne.n	8003480 <HAL_ADC_ConfigChannel+0x2f4>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	3301      	adds	r3, #1
 8003478:	069b      	lsls	r3, r3, #26
 800347a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800347e:	e015      	b.n	80034ac <HAL_ADC_ConfigChannel+0x320>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800348e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003490:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003498:	2320      	movs	r3, #32
 800349a:	e003      	b.n	80034a4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800349c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	3301      	adds	r3, #1
 80034a6:	069b      	lsls	r3, r3, #26
 80034a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d109      	bne.n	80034cc <HAL_ADC_ConfigChannel+0x340>
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0e9b      	lsrs	r3, r3, #26
 80034be:	3301      	adds	r3, #1
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	2101      	movs	r1, #1
 80034c6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ca:	e017      	b.n	80034fc <HAL_ADC_ConfigChannel+0x370>
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80034da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80034de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80034e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	f003 031f 	and.w	r3, r3, #31
 80034f6:	2101      	movs	r1, #1
 80034f8:	fa01 f303 	lsl.w	r3, r1, r3
 80034fc:	ea42 0103 	orr.w	r1, r2, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x396>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	0e9b      	lsrs	r3, r3, #26
 8003512:	3301      	adds	r3, #1
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	4613      	mov	r3, r2
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	4413      	add	r3, r2
 800351e:	051b      	lsls	r3, r3, #20
 8003520:	e018      	b.n	8003554 <HAL_ADC_ConfigChannel+0x3c8>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352a:	fa93 f3a3 	rbit	r3, r3
 800352e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003532:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800353a:	2320      	movs	r3, #32
 800353c:	e003      	b.n	8003546 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800353e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	b2db      	uxtb	r3, r3
 8003546:	3301      	adds	r3, #1
 8003548:	f003 021f 	and.w	r2, r3, #31
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003554:	430b      	orrs	r3, r1
 8003556:	e07e      	b.n	8003656 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003560:	2b00      	cmp	r3, #0
 8003562:	d107      	bne.n	8003574 <HAL_ADC_ConfigChannel+0x3e8>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0e9b      	lsrs	r3, r3, #26
 800356a:	3301      	adds	r3, #1
 800356c:	069b      	lsls	r3, r3, #26
 800356e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003572:	e015      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x414>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e003      	b.n	8003598 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	3301      	adds	r3, #1
 800359a:	069b      	lsls	r3, r3, #26
 800359c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x434>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	0e9b      	lsrs	r3, r3, #26
 80035b2:	3301      	adds	r3, #1
 80035b4:	f003 031f 	and.w	r3, r3, #31
 80035b8:	2101      	movs	r1, #1
 80035ba:	fa01 f303 	lsl.w	r3, r1, r3
 80035be:	e017      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x464>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	61bb      	str	r3, [r7, #24]
  return result;
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80035d2:	6a3b      	ldr	r3, [r7, #32]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d101      	bne.n	80035dc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80035d8:	2320      	movs	r3, #32
 80035da:	e003      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	fab3 f383 	clz	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f303 	lsl.w	r3, r1, r3
 80035f0:	ea42 0103 	orr.w	r1, r2, r3
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10d      	bne.n	800361c <HAL_ADC_ConfigChannel+0x490>
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	0e9b      	lsrs	r3, r3, #26
 8003606:	3301      	adds	r3, #1
 8003608:	f003 021f 	and.w	r2, r3, #31
 800360c:	4613      	mov	r3, r2
 800360e:	005b      	lsls	r3, r3, #1
 8003610:	4413      	add	r3, r2
 8003612:	3b1e      	subs	r3, #30
 8003614:	051b      	lsls	r3, r3, #20
 8003616:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800361a:	e01b      	b.n	8003654 <HAL_ADC_ConfigChannel+0x4c8>
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	fa93 f3a3 	rbit	r3, r3
 8003628:	60fb      	str	r3, [r7, #12]
  return result;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003634:	2320      	movs	r3, #32
 8003636:	e003      	b.n	8003640 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	fab3 f383 	clz	r3, r3
 800363e:	b2db      	uxtb	r3, r3
 8003640:	3301      	adds	r3, #1
 8003642:	f003 021f 	and.w	r2, r3, #31
 8003646:	4613      	mov	r3, r2
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	4413      	add	r3, r2
 800364c:	3b1e      	subs	r3, #30
 800364e:	051b      	lsls	r3, r3, #20
 8003650:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003654:	430b      	orrs	r3, r1
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	6892      	ldr	r2, [r2, #8]
 800365a:	4619      	mov	r1, r3
 800365c:	f7ff fa04 	bl	8002a68 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f280 80cf 	bge.w	8003808 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a06      	ldr	r2, [pc, #24]	; (8003688 <HAL_ADC_ConfigChannel+0x4fc>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d004      	beq.n	800367e <HAL_ADC_ConfigChannel+0x4f2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a04      	ldr	r2, [pc, #16]	; (800368c <HAL_ADC_ConfigChannel+0x500>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d10a      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x508>
 800367e:	4b04      	ldr	r3, [pc, #16]	; (8003690 <HAL_ADC_ConfigChannel+0x504>)
 8003680:	e009      	b.n	8003696 <HAL_ADC_ConfigChannel+0x50a>
 8003682:	bf00      	nop
 8003684:	47ff0000 	.word	0x47ff0000
 8003688:	40022000 	.word	0x40022000
 800368c:	40022100 	.word	0x40022100
 8003690:	40022300 	.word	0x40022300
 8003694:	4b61      	ldr	r3, [pc, #388]	; (800381c <HAL_ADC_ConfigChannel+0x690>)
 8003696:	4618      	mov	r0, r3
 8003698:	f7ff f932 	bl	8002900 <LL_ADC_GetCommonPathInternalCh>
 800369c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5f      	ldr	r2, [pc, #380]	; (8003820 <HAL_ADC_ConfigChannel+0x694>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_ADC_ConfigChannel+0x526>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5d      	ldr	r2, [pc, #372]	; (8003824 <HAL_ADC_ConfigChannel+0x698>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10e      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x544>
 80036b2:	485b      	ldr	r0, [pc, #364]	; (8003820 <HAL_ADC_ConfigChannel+0x694>)
 80036b4:	f7ff fa98 	bl	8002be8 <LL_ADC_IsEnabled>
 80036b8:	4604      	mov	r4, r0
 80036ba:	485a      	ldr	r0, [pc, #360]	; (8003824 <HAL_ADC_ConfigChannel+0x698>)
 80036bc:	f7ff fa94 	bl	8002be8 <LL_ADC_IsEnabled>
 80036c0:	4603      	mov	r3, r0
 80036c2:	4323      	orrs	r3, r4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e008      	b.n	80036e2 <HAL_ADC_ConfigChannel+0x556>
 80036d0:	4855      	ldr	r0, [pc, #340]	; (8003828 <HAL_ADC_ConfigChannel+0x69c>)
 80036d2:	f7ff fa89 	bl	8002be8 <LL_ADC_IsEnabled>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf0c      	ite	eq
 80036dc:	2301      	moveq	r3, #1
 80036de:	2300      	movne	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d07d      	beq.n	80037e2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a50      	ldr	r2, [pc, #320]	; (800382c <HAL_ADC_ConfigChannel+0x6a0>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d130      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x5c6>
 80036f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d12b      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4a      	ldr	r2, [pc, #296]	; (8003828 <HAL_ADC_ConfigChannel+0x69c>)
 8003700:	4293      	cmp	r3, r2
 8003702:	f040 8081 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a45      	ldr	r2, [pc, #276]	; (8003820 <HAL_ADC_ConfigChannel+0x694>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d004      	beq.n	800371a <HAL_ADC_ConfigChannel+0x58e>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a43      	ldr	r2, [pc, #268]	; (8003824 <HAL_ADC_ConfigChannel+0x698>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d101      	bne.n	800371e <HAL_ADC_ConfigChannel+0x592>
 800371a:	4a45      	ldr	r2, [pc, #276]	; (8003830 <HAL_ADC_ConfigChannel+0x6a4>)
 800371c:	e000      	b.n	8003720 <HAL_ADC_ConfigChannel+0x594>
 800371e:	4a3f      	ldr	r2, [pc, #252]	; (800381c <HAL_ADC_ConfigChannel+0x690>)
 8003720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003722:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003726:	4619      	mov	r1, r3
 8003728:	4610      	mov	r0, r2
 800372a:	f7ff f8d6 	bl	80028da <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800372e:	4b41      	ldr	r3, [pc, #260]	; (8003834 <HAL_ADC_ConfigChannel+0x6a8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	099b      	lsrs	r3, r3, #6
 8003734:	4a40      	ldr	r2, [pc, #256]	; (8003838 <HAL_ADC_ConfigChannel+0x6ac>)
 8003736:	fba2 2303 	umull	r2, r3, r2, r3
 800373a:	099b      	lsrs	r3, r3, #6
 800373c:	3301      	adds	r3, #1
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003742:	e002      	b.n	800374a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	3b01      	subs	r3, #1
 8003748:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1f9      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003750:	e05a      	b.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a39      	ldr	r2, [pc, #228]	; (800383c <HAL_ADC_ConfigChannel+0x6b0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d11e      	bne.n	800379a <HAL_ADC_ConfigChannel+0x60e>
 800375c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d119      	bne.n	800379a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2f      	ldr	r2, [pc, #188]	; (8003828 <HAL_ADC_ConfigChannel+0x69c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d14b      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <HAL_ADC_ConfigChannel+0x694>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d004      	beq.n	8003784 <HAL_ADC_ConfigChannel+0x5f8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a29      	ldr	r2, [pc, #164]	; (8003824 <HAL_ADC_ConfigChannel+0x698>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x5fc>
 8003784:	4a2a      	ldr	r2, [pc, #168]	; (8003830 <HAL_ADC_ConfigChannel+0x6a4>)
 8003786:	e000      	b.n	800378a <HAL_ADC_ConfigChannel+0x5fe>
 8003788:	4a24      	ldr	r2, [pc, #144]	; (800381c <HAL_ADC_ConfigChannel+0x690>)
 800378a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800378c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003790:	4619      	mov	r1, r3
 8003792:	4610      	mov	r0, r2
 8003794:	f7ff f8a1 	bl	80028da <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003798:	e036      	b.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a28      	ldr	r2, [pc, #160]	; (8003840 <HAL_ADC_ConfigChannel+0x6b4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d131      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
 80037a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d12c      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <HAL_ADC_ConfigChannel+0x69c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d127      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_ADC_ConfigChannel+0x694>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d004      	beq.n	80037cc <HAL_ADC_ConfigChannel+0x640>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a17      	ldr	r2, [pc, #92]	; (8003824 <HAL_ADC_ConfigChannel+0x698>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x644>
 80037cc:	4a18      	ldr	r2, [pc, #96]	; (8003830 <HAL_ADC_ConfigChannel+0x6a4>)
 80037ce:	e000      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x646>
 80037d0:	4a12      	ldr	r2, [pc, #72]	; (800381c <HAL_ADC_ConfigChannel+0x690>)
 80037d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037d8:	4619      	mov	r1, r3
 80037da:	4610      	mov	r0, r2
 80037dc:	f7ff f87d 	bl	80028da <LL_ADC_SetCommonPathInternalCh>
 80037e0:	e012      	b.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80037f4:	e008      	b.n	8003808 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003810:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003814:	4618      	mov	r0, r3
 8003816:	3784      	adds	r7, #132	; 0x84
 8003818:	46bd      	mov	sp, r7
 800381a:	bd90      	pop	{r4, r7, pc}
 800381c:	58026300 	.word	0x58026300
 8003820:	40022000 	.word	0x40022000
 8003824:	40022100 	.word	0x40022100
 8003828:	58026000 	.word	0x58026000
 800382c:	cb840000 	.word	0xcb840000
 8003830:	40022300 	.word	0x40022300
 8003834:	24000000 	.word	0x24000000
 8003838:	053e2d63 	.word	0x053e2d63
 800383c:	c7520000 	.word	0xc7520000
 8003840:	cfb80000 	.word	0xcfb80000

08003844 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff f9c9 	bl	8002be8 <LL_ADC_IsEnabled>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d16e      	bne.n	800393a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	4b38      	ldr	r3, [pc, #224]	; (8003944 <ADC_Enable+0x100>)
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00d      	beq.n	8003886 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386e:	f043 0210 	orr.w	r2, r3, #16
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e05a      	b.n	800393c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff f998 	bl	8002bc0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003890:	f7fe ffc0 	bl	8002814 <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2b      	ldr	r2, [pc, #172]	; (8003948 <ADC_Enable+0x104>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <ADC_Enable+0x66>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a29      	ldr	r2, [pc, #164]	; (800394c <ADC_Enable+0x108>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d101      	bne.n	80038ae <ADC_Enable+0x6a>
 80038aa:	4b29      	ldr	r3, [pc, #164]	; (8003950 <ADC_Enable+0x10c>)
 80038ac:	e000      	b.n	80038b0 <ADC_Enable+0x6c>
 80038ae:	4b29      	ldr	r3, [pc, #164]	; (8003954 <ADC_Enable+0x110>)
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff f929 	bl	8002b08 <LL_ADC_GetMultimode>
 80038b6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a23      	ldr	r2, [pc, #140]	; (800394c <ADC_Enable+0x108>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d002      	beq.n	80038c8 <ADC_Enable+0x84>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	e000      	b.n	80038ca <ADC_Enable+0x86>
 80038c8:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <ADC_Enable+0x104>)
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02c      	beq.n	800392c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d130      	bne.n	800393a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038d8:	e028      	b.n	800392c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff f982 	bl	8002be8 <LL_ADC_IsEnabled>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d104      	bne.n	80038f4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff f966 	bl	8002bc0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80038f4:	f7fe ff8e 	bl	8002814 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d914      	bls.n	800392c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	2b01      	cmp	r3, #1
 800390e:	d00d      	beq.n	800392c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003914:	f043 0210 	orr.w	r2, r3, #16
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	f043 0201 	orr.w	r2, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e007      	b.n	800393c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d1cf      	bne.n	80038da <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	8000003f 	.word	0x8000003f
 8003948:	40022000 	.word	0x40022000
 800394c:	40022100 	.word	0x40022100
 8003950:	40022300 	.word	0x40022300
 8003954:	58026300 	.word	0x58026300

08003958 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800396e:	2b00      	cmp	r3, #0
 8003970:	d14b      	bne.n	8003a0a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d021      	beq.n	80039d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f817 	bl	80029c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d032      	beq.n	8003a02 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d12b      	bne.n	8003a02 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d11f      	bne.n	8003a02 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c6:	f043 0201 	orr.w	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	655a      	str	r2, [r3, #84]	; 0x54
 80039ce:	e018      	b.n	8003a02 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d111      	bne.n	8003a02 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d105      	bne.n	8003a02 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f7ff fba4 	bl	8003150 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003a08:	e00e      	b.n	8003a28 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f7ff fbae 	bl	8003178 <HAL_ADC_ErrorCallback>
}
 8003a1c:	e004      	b.n	8003a28 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	4798      	blx	r3
}
 8003a28:	bf00      	nop
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff fb90 	bl	8003164 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a44:	bf00      	nop
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a58:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	f043 0204 	orr.w	r2, r3, #4
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f7ff fb80 	bl	8003178 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a78:	bf00      	nop
 8003a7a:	3710      	adds	r7, #16
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a7a      	ldr	r2, [pc, #488]	; (8003c78 <ADC_ConfigureBoostMode+0x1f8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <ADC_ConfigureBoostMode+0x1c>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a79      	ldr	r2, [pc, #484]	; (8003c7c <ADC_ConfigureBoostMode+0x1fc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d109      	bne.n	8003ab0 <ADC_ConfigureBoostMode+0x30>
 8003a9c:	4b78      	ldr	r3, [pc, #480]	; (8003c80 <ADC_ConfigureBoostMode+0x200>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e008      	b.n	8003ac2 <ADC_ConfigureBoostMode+0x42>
 8003ab0:	4b74      	ldr	r3, [pc, #464]	; (8003c84 <ADC_ConfigureBoostMode+0x204>)
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	bf14      	ite	ne
 8003abc:	2301      	movne	r3, #1
 8003abe:	2300      	moveq	r3, #0
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01c      	beq.n	8003b00 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003ac6:	f004 fe2d 	bl	8008724 <HAL_RCC_GetHCLKFreq>
 8003aca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ad4:	d010      	beq.n	8003af8 <ADC_ConfigureBoostMode+0x78>
 8003ad6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003ada:	d873      	bhi.n	8003bc4 <ADC_ConfigureBoostMode+0x144>
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae0:	d002      	beq.n	8003ae8 <ADC_ConfigureBoostMode+0x68>
 8003ae2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ae6:	d16d      	bne.n	8003bc4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	60fb      	str	r3, [r7, #12]
        break;
 8003af6:	e068      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	60fb      	str	r3, [r7, #12]
        break;
 8003afe:	e064      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003b04:	f04f 0100 	mov.w	r1, #0
 8003b08:	f006 f872 	bl	8009bf0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b0c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b16:	d051      	beq.n	8003bbc <ADC_ConfigureBoostMode+0x13c>
 8003b18:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003b1c:	d854      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b1e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b22:	d047      	beq.n	8003bb4 <ADC_ConfigureBoostMode+0x134>
 8003b24:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003b28:	d84e      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b2a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b2e:	d03d      	beq.n	8003bac <ADC_ConfigureBoostMode+0x12c>
 8003b30:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003b34:	d848      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b3a:	d033      	beq.n	8003ba4 <ADC_ConfigureBoostMode+0x124>
 8003b3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b40:	d842      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b42:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b46:	d029      	beq.n	8003b9c <ADC_ConfigureBoostMode+0x11c>
 8003b48:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003b4c:	d83c      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b4e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b52:	d01a      	beq.n	8003b8a <ADC_ConfigureBoostMode+0x10a>
 8003b54:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003b58:	d836      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b5a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b5e:	d014      	beq.n	8003b8a <ADC_ConfigureBoostMode+0x10a>
 8003b60:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003b64:	d830      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6a:	d00e      	beq.n	8003b8a <ADC_ConfigureBoostMode+0x10a>
 8003b6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b70:	d82a      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b76:	d008      	beq.n	8003b8a <ADC_ConfigureBoostMode+0x10a>
 8003b78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003b7c:	d824      	bhi.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
 8003b7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b82:	d002      	beq.n	8003b8a <ADC_ConfigureBoostMode+0x10a>
 8003b84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b88:	d11e      	bne.n	8003bc8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	0c9b      	lsrs	r3, r3, #18
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	68fa      	ldr	r2, [r7, #12]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	60fb      	str	r3, [r7, #12]
        break;
 8003b9a:	e016      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	091b      	lsrs	r3, r3, #4
 8003ba0:	60fb      	str	r3, [r7, #12]
        break;
 8003ba2:	e012      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	60fb      	str	r3, [r7, #12]
        break;
 8003baa:	e00e      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	60fb      	str	r3, [r7, #12]
        break;
 8003bb2:	e00a      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	09db      	lsrs	r3, r3, #7
 8003bb8:	60fb      	str	r3, [r7, #12]
        break;
 8003bba:	e006      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	0a1b      	lsrs	r3, r3, #8
 8003bc0:	60fb      	str	r3, [r7, #12]
        break;
 8003bc2:	e002      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
        break;
 8003bc4:	bf00      	nop
 8003bc6:	e000      	b.n	8003bca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003bc8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003bca:	f7fe fe53 	bl	8002874 <HAL_GetREVID>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f241 0203 	movw	r2, #4099	; 0x1003
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d815      	bhi.n	8003c04 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4a2b      	ldr	r2, [pc, #172]	; (8003c88 <ADC_ConfigureBoostMode+0x208>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d908      	bls.n	8003bf2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689a      	ldr	r2, [r3, #8]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003bf0:	e03e      	b.n	8003c70 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c00:	609a      	str	r2, [r3, #8]
}
 8003c02:	e035      	b.n	8003c70 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	085b      	lsrs	r3, r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a1f      	ldr	r2, [pc, #124]	; (8003c8c <ADC_ConfigureBoostMode+0x20c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d808      	bhi.n	8003c24 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	e025      	b.n	8003c70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <ADC_ConfigureBoostMode+0x210>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d80a      	bhi.n	8003c42 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c3e:	609a      	str	r2, [r3, #8]
}
 8003c40:	e016      	b.n	8003c70 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <ADC_ConfigureBoostMode+0x214>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d80a      	bhi.n	8003c60 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5c:	609a      	str	r2, [r3, #8]
}
 8003c5e:	e007      	b.n	8003c70 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003c6e:	609a      	str	r2, [r3, #8]
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40022000 	.word	0x40022000
 8003c7c:	40022100 	.word	0x40022100
 8003c80:	40022300 	.word	0x40022300
 8003c84:	58026300 	.word	0x58026300
 8003c88:	01312d00 	.word	0x01312d00
 8003c8c:	005f5e10 	.word	0x005f5e10
 8003c90:	00bebc20 	.word	0x00bebc20
 8003c94:	017d7840 	.word	0x017d7840

08003c98 <LL_ADC_IsEnabled>:
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <LL_ADC_IsEnabled+0x18>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <LL_ADC_IsEnabled+0x1a>
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <LL_ADC_REG_IsConversionOngoing>:
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d101      	bne.n	8003cd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003ce4:	b590      	push	{r4, r7, lr}
 8003ce6:	b09f      	sub	sp, #124	; 0x7c
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d101      	bne.n	8003d02 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003cfe:	2302      	movs	r3, #2
 8003d00:	e0be      	b.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2201      	movs	r2, #1
 8003d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a5c      	ldr	r2, [pc, #368]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d102      	bne.n	8003d22 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d1c:	4b5b      	ldr	r3, [pc, #364]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d1e:	60bb      	str	r3, [r7, #8]
 8003d20:	e001      	b.n	8003d26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10b      	bne.n	8003d44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	f043 0220 	orr.w	r2, r3, #32
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e09d      	b.n	8003e80 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7ff ffb9 	bl	8003cbe <LL_ADC_REG_IsConversionOngoing>
 8003d4c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7ff ffb3 	bl	8003cbe <LL_ADC_REG_IsConversionOngoing>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d17f      	bne.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d17c      	bne.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a47      	ldr	r2, [pc, #284]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d004      	beq.n	8003d78 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a46      	ldr	r2, [pc, #280]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d101      	bne.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003d78:	4b45      	ldr	r3, [pc, #276]	; (8003e90 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003d7a:	e000      	b.n	8003d7e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003d7c:	4b45      	ldr	r3, [pc, #276]	; (8003e94 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003d7e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d039      	beq.n	8003dfc <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d98:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a3a      	ldr	r2, [pc, #232]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a38      	ldr	r2, [pc, #224]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10e      	bne.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003dae:	4836      	ldr	r0, [pc, #216]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003db0:	f7ff ff72 	bl	8003c98 <LL_ADC_IsEnabled>
 8003db4:	4604      	mov	r4, r0
 8003db6:	4835      	ldr	r0, [pc, #212]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003db8:	f7ff ff6e 	bl	8003c98 <LL_ADC_IsEnabled>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4323      	orrs	r3, r4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf0c      	ite	eq
 8003dc4:	2301      	moveq	r3, #1
 8003dc6:	2300      	movne	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e008      	b.n	8003dde <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003dcc:	4832      	ldr	r0, [pc, #200]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003dce:	f7ff ff63 	bl	8003c98 <LL_ADC_IsEnabled>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d047      	beq.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	4b2d      	ldr	r3, [pc, #180]	; (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003de8:	4013      	ands	r3, r2
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	6811      	ldr	r1, [r2, #0]
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	6892      	ldr	r2, [r2, #8]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	431a      	orrs	r2, r3
 8003df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dfa:	e03a      	b.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e06:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d004      	beq.n	8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a1d      	ldr	r2, [pc, #116]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d10e      	bne.n	8003e3a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003e1c:	481a      	ldr	r0, [pc, #104]	; (8003e88 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003e1e:	f7ff ff3b 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e22:	4604      	mov	r4, r0
 8003e24:	4819      	ldr	r0, [pc, #100]	; (8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003e26:	f7ff ff37 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	4323      	orrs	r3, r4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	e008      	b.n	8003e4c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003e3a:	4817      	ldr	r0, [pc, #92]	; (8003e98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003e3c:	f7ff ff2c 	bl	8003c98 <LL_ADC_IsEnabled>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	bf0c      	ite	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	2300      	movne	r3, #0
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	4b11      	ldr	r3, [pc, #68]	; (8003e9c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e5a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e5c:	e009      	b.n	8003e72 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e70:	e000      	b.n	8003e74 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e72:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e7c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	377c      	adds	r7, #124	; 0x7c
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd90      	pop	{r4, r7, pc}
 8003e88:	40022000 	.word	0x40022000
 8003e8c:	40022100 	.word	0x40022100
 8003e90:	40022300 	.word	0x40022300
 8003e94:	58026300 	.word	0x58026300
 8003e98:	58026000 	.word	0x58026000
 8003e9c:	fffff0e0 	.word	0xfffff0e0

08003ea0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ece:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <__NVIC_SetPriorityGrouping+0x40>)
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	60d3      	str	r3, [r2, #12]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	e000ed00 	.word	0xe000ed00
 8003ee4:	05fa0000 	.word	0x05fa0000

08003ee8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <__NVIC_GetPriorityGrouping+0x18>)
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	0a1b      	lsrs	r3, r3, #8
 8003ef2:	f003 0307 	and.w	r3, r3, #7
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	e000ed00 	.word	0xe000ed00

08003f04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	db0b      	blt.n	8003f2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f16:	88fb      	ldrh	r3, [r7, #6]
 8003f18:	f003 021f 	and.w	r2, r3, #31
 8003f1c:	4907      	ldr	r1, [pc, #28]	; (8003f3c <__NVIC_EnableIRQ+0x38>)
 8003f1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	2001      	movs	r0, #1
 8003f26:	fa00 f202 	lsl.w	r2, r0, r2
 8003f2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f2e:	bf00      	nop
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	e000e100 	.word	0xe000e100

08003f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	6039      	str	r1, [r7, #0]
 8003f4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003f4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db0a      	blt.n	8003f6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	490c      	ldr	r1, [pc, #48]	; (8003f8c <__NVIC_SetPriority+0x4c>)
 8003f5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f5e:	0112      	lsls	r2, r2, #4
 8003f60:	b2d2      	uxtb	r2, r2
 8003f62:	440b      	add	r3, r1
 8003f64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f68:	e00a      	b.n	8003f80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	4908      	ldr	r1, [pc, #32]	; (8003f90 <__NVIC_SetPriority+0x50>)
 8003f70:	88fb      	ldrh	r3, [r7, #6]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	3b04      	subs	r3, #4
 8003f78:	0112      	lsls	r2, r2, #4
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	440b      	add	r3, r1
 8003f7e:	761a      	strb	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000e100 	.word	0xe000e100
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b089      	sub	sp, #36	; 0x24
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f1c3 0307 	rsb	r3, r3, #7
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	bf28      	it	cs
 8003fb2:	2304      	movcs	r3, #4
 8003fb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	3304      	adds	r3, #4
 8003fba:	2b06      	cmp	r3, #6
 8003fbc:	d902      	bls.n	8003fc4 <NVIC_EncodePriority+0x30>
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3b03      	subs	r3, #3
 8003fc2:	e000      	b.n	8003fc6 <NVIC_EncodePriority+0x32>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	43d9      	mvns	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fec:	4313      	orrs	r3, r2
         );
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3724      	adds	r7, #36	; 0x24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3b01      	subs	r3, #1
 8004008:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800400c:	d301      	bcc.n	8004012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800400e:	2301      	movs	r3, #1
 8004010:	e00f      	b.n	8004032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004012:	4a0a      	ldr	r2, [pc, #40]	; (800403c <SysTick_Config+0x40>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3b01      	subs	r3, #1
 8004018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800401a:	210f      	movs	r1, #15
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	f7ff ff8e 	bl	8003f40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <SysTick_Config+0x40>)
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800402a:	4b04      	ldr	r3, [pc, #16]	; (800403c <SysTick_Config+0x40>)
 800402c:	2207      	movs	r2, #7
 800402e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	e000e010 	.word	0xe000e010

08004040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ff29 	bl	8003ea0 <__NVIC_SetPriorityGrouping>
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	4603      	mov	r3, r0
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004064:	f7ff ff40 	bl	8003ee8 <__NVIC_GetPriorityGrouping>
 8004068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	6978      	ldr	r0, [r7, #20]
 8004070:	f7ff ff90 	bl	8003f94 <NVIC_EncodePriority>
 8004074:	4602      	mov	r2, r0
 8004076:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800407a:	4611      	mov	r1, r2
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff ff5f 	bl	8003f40 <__NVIC_SetPriority>
}
 8004082:	bf00      	nop
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	4603      	mov	r3, r0
 8004092:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004098:	4618      	mov	r0, r3
 800409a:	f7ff ff33 	bl	8003f04 <__NVIC_EnableIRQ>
}
 800409e:	bf00      	nop
 80040a0:	3708      	adds	r7, #8
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b082      	sub	sp, #8
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff ffa4 	bl	8003ffc <SysTick_Config>
 80040b4:	4603      	mov	r3, r0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80040c8:	f7fe fba4 	bl	8002814 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d101      	bne.n	80040d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e316      	b.n	8004706 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a66      	ldr	r2, [pc, #408]	; (8004278 <HAL_DMA_Init+0x1b8>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d04a      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a65      	ldr	r2, [pc, #404]	; (800427c <HAL_DMA_Init+0x1bc>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d045      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a63      	ldr	r2, [pc, #396]	; (8004280 <HAL_DMA_Init+0x1c0>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d040      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a62      	ldr	r2, [pc, #392]	; (8004284 <HAL_DMA_Init+0x1c4>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d03b      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a60      	ldr	r2, [pc, #384]	; (8004288 <HAL_DMA_Init+0x1c8>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d036      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a5f      	ldr	r2, [pc, #380]	; (800428c <HAL_DMA_Init+0x1cc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d031      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a5d      	ldr	r2, [pc, #372]	; (8004290 <HAL_DMA_Init+0x1d0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02c      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a5c      	ldr	r2, [pc, #368]	; (8004294 <HAL_DMA_Init+0x1d4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d027      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a5a      	ldr	r2, [pc, #360]	; (8004298 <HAL_DMA_Init+0x1d8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d022      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a59      	ldr	r2, [pc, #356]	; (800429c <HAL_DMA_Init+0x1dc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d01d      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a57      	ldr	r2, [pc, #348]	; (80042a0 <HAL_DMA_Init+0x1e0>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d018      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a56      	ldr	r2, [pc, #344]	; (80042a4 <HAL_DMA_Init+0x1e4>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d013      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a54      	ldr	r2, [pc, #336]	; (80042a8 <HAL_DMA_Init+0x1e8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00e      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a53      	ldr	r2, [pc, #332]	; (80042ac <HAL_DMA_Init+0x1ec>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d009      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a51      	ldr	r2, [pc, #324]	; (80042b0 <HAL_DMA_Init+0x1f0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <HAL_DMA_Init+0xb8>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a50      	ldr	r2, [pc, #320]	; (80042b4 <HAL_DMA_Init+0x1f4>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d101      	bne.n	800417c <HAL_DMA_Init+0xbc>
 8004178:	2301      	movs	r3, #1
 800417a:	e000      	b.n	800417e <HAL_DMA_Init+0xbe>
 800417c:	2300      	movs	r3, #0
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 813b 	beq.w	80043fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a37      	ldr	r2, [pc, #220]	; (8004278 <HAL_DMA_Init+0x1b8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d04a      	beq.n	8004234 <HAL_DMA_Init+0x174>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a36      	ldr	r2, [pc, #216]	; (800427c <HAL_DMA_Init+0x1bc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d045      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a34      	ldr	r2, [pc, #208]	; (8004280 <HAL_DMA_Init+0x1c0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d040      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a33      	ldr	r2, [pc, #204]	; (8004284 <HAL_DMA_Init+0x1c4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d03b      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a31      	ldr	r2, [pc, #196]	; (8004288 <HAL_DMA_Init+0x1c8>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d036      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a30      	ldr	r2, [pc, #192]	; (800428c <HAL_DMA_Init+0x1cc>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d031      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2e      	ldr	r2, [pc, #184]	; (8004290 <HAL_DMA_Init+0x1d0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d02c      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a2d      	ldr	r2, [pc, #180]	; (8004294 <HAL_DMA_Init+0x1d4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d027      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a2b      	ldr	r2, [pc, #172]	; (8004298 <HAL_DMA_Init+0x1d8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d022      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a2a      	ldr	r2, [pc, #168]	; (800429c <HAL_DMA_Init+0x1dc>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d01d      	beq.n	8004234 <HAL_DMA_Init+0x174>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <HAL_DMA_Init+0x1e0>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d018      	beq.n	8004234 <HAL_DMA_Init+0x174>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a27      	ldr	r2, [pc, #156]	; (80042a4 <HAL_DMA_Init+0x1e4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <HAL_DMA_Init+0x174>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a25      	ldr	r2, [pc, #148]	; (80042a8 <HAL_DMA_Init+0x1e8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d00e      	beq.n	8004234 <HAL_DMA_Init+0x174>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a24      	ldr	r2, [pc, #144]	; (80042ac <HAL_DMA_Init+0x1ec>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_DMA_Init+0x174>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a22      	ldr	r2, [pc, #136]	; (80042b0 <HAL_DMA_Init+0x1f0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d004      	beq.n	8004234 <HAL_DMA_Init+0x174>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a21      	ldr	r2, [pc, #132]	; (80042b4 <HAL_DMA_Init+0x1f4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d108      	bne.n	8004246 <HAL_DMA_Init+0x186>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0201 	bic.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	e007      	b.n	8004256 <HAL_DMA_Init+0x196>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0201 	bic.w	r2, r2, #1
 8004254:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004256:	e02f      	b.n	80042b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004258:	f7fe fadc 	bl	8002814 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b05      	cmp	r3, #5
 8004264:	d928      	bls.n	80042b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2203      	movs	r2, #3
 8004270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e246      	b.n	8004706 <HAL_DMA_Init+0x646>
 8004278:	40020010 	.word	0x40020010
 800427c:	40020028 	.word	0x40020028
 8004280:	40020040 	.word	0x40020040
 8004284:	40020058 	.word	0x40020058
 8004288:	40020070 	.word	0x40020070
 800428c:	40020088 	.word	0x40020088
 8004290:	400200a0 	.word	0x400200a0
 8004294:	400200b8 	.word	0x400200b8
 8004298:	40020410 	.word	0x40020410
 800429c:	40020428 	.word	0x40020428
 80042a0:	40020440 	.word	0x40020440
 80042a4:	40020458 	.word	0x40020458
 80042a8:	40020470 	.word	0x40020470
 80042ac:	40020488 	.word	0x40020488
 80042b0:	400204a0 	.word	0x400204a0
 80042b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1c8      	bne.n	8004258 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4b83      	ldr	r3, [pc, #524]	; (80044e0 <HAL_DMA_Init+0x420>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80042de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2b04      	cmp	r3, #4
 800430a:	d107      	bne.n	800431c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	4313      	orrs	r3, r2
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800431c:	4b71      	ldr	r3, [pc, #452]	; (80044e4 <HAL_DMA_Init+0x424>)
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	4b71      	ldr	r3, [pc, #452]	; (80044e8 <HAL_DMA_Init+0x428>)
 8004322:	4013      	ands	r3, r2
 8004324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004328:	d328      	bcc.n	800437c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b28      	cmp	r3, #40	; 0x28
 8004330:	d903      	bls.n	800433a <HAL_DMA_Init+0x27a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b2e      	cmp	r3, #46	; 0x2e
 8004338:	d917      	bls.n	800436a <HAL_DMA_Init+0x2aa>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2b3e      	cmp	r3, #62	; 0x3e
 8004340:	d903      	bls.n	800434a <HAL_DMA_Init+0x28a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b42      	cmp	r3, #66	; 0x42
 8004348:	d90f      	bls.n	800436a <HAL_DMA_Init+0x2aa>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	2b46      	cmp	r3, #70	; 0x46
 8004350:	d903      	bls.n	800435a <HAL_DMA_Init+0x29a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	2b48      	cmp	r3, #72	; 0x48
 8004358:	d907      	bls.n	800436a <HAL_DMA_Init+0x2aa>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b4e      	cmp	r3, #78	; 0x4e
 8004360:	d905      	bls.n	800436e <HAL_DMA_Init+0x2ae>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b52      	cmp	r3, #82	; 0x52
 8004368:	d801      	bhi.n	800436e <HAL_DMA_Init+0x2ae>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <HAL_DMA_Init+0x2b0>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d003      	beq.n	800437c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800437a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	f023 0307 	bic.w	r3, r3, #7
 8004392:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a2:	2b04      	cmp	r3, #4
 80043a4:	d117      	bne.n	80043d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00e      	beq.n	80043d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f001 fdcf 	bl	8005f5c <DMA_CheckFifoParam>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d008      	beq.n	80043d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2240      	movs	r2, #64	; 0x40
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e197      	b.n	8004706 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f001 fd0a 	bl	8005df8 <DMA_CalcBaseAndBitshift>
 80043e4:	4603      	mov	r3, r0
 80043e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	223f      	movs	r2, #63	; 0x3f
 80043f2:	409a      	lsls	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	e0cd      	b.n	8004596 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a3b      	ldr	r2, [pc, #236]	; (80044ec <HAL_DMA_Init+0x42c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d022      	beq.n	800444a <HAL_DMA_Init+0x38a>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a39      	ldr	r2, [pc, #228]	; (80044f0 <HAL_DMA_Init+0x430>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01d      	beq.n	800444a <HAL_DMA_Init+0x38a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a38      	ldr	r2, [pc, #224]	; (80044f4 <HAL_DMA_Init+0x434>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d018      	beq.n	800444a <HAL_DMA_Init+0x38a>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a36      	ldr	r2, [pc, #216]	; (80044f8 <HAL_DMA_Init+0x438>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <HAL_DMA_Init+0x38a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a35      	ldr	r2, [pc, #212]	; (80044fc <HAL_DMA_Init+0x43c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d00e      	beq.n	800444a <HAL_DMA_Init+0x38a>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a33      	ldr	r2, [pc, #204]	; (8004500 <HAL_DMA_Init+0x440>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d009      	beq.n	800444a <HAL_DMA_Init+0x38a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a32      	ldr	r2, [pc, #200]	; (8004504 <HAL_DMA_Init+0x444>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d004      	beq.n	800444a <HAL_DMA_Init+0x38a>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a30      	ldr	r2, [pc, #192]	; (8004508 <HAL_DMA_Init+0x448>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d101      	bne.n	800444e <HAL_DMA_Init+0x38e>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_DMA_Init+0x390>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 8097 	beq.w	8004584 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a24      	ldr	r2, [pc, #144]	; (80044ec <HAL_DMA_Init+0x42c>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d021      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a22      	ldr	r2, [pc, #136]	; (80044f0 <HAL_DMA_Init+0x430>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01c      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <HAL_DMA_Init+0x434>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d017      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <HAL_DMA_Init+0x438>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d012      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1e      	ldr	r2, [pc, #120]	; (80044fc <HAL_DMA_Init+0x43c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00d      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1c      	ldr	r2, [pc, #112]	; (8004500 <HAL_DMA_Init+0x440>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d008      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	; (8004504 <HAL_DMA_Init+0x444>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d003      	beq.n	80044a4 <HAL_DMA_Init+0x3e4>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a19      	ldr	r2, [pc, #100]	; (8004508 <HAL_DMA_Init+0x448>)
 80044a2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <HAL_DMA_Init+0x44c>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d021      	beq.n	8004510 <HAL_DMA_Init+0x450>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b80      	cmp	r3, #128	; 0x80
 80044d2:	d102      	bne.n	80044da <HAL_DMA_Init+0x41a>
 80044d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044d8:	e01b      	b.n	8004512 <HAL_DMA_Init+0x452>
 80044da:	2300      	movs	r3, #0
 80044dc:	e019      	b.n	8004512 <HAL_DMA_Init+0x452>
 80044de:	bf00      	nop
 80044e0:	fe10803f 	.word	0xfe10803f
 80044e4:	5c001000 	.word	0x5c001000
 80044e8:	ffff0000 	.word	0xffff0000
 80044ec:	58025408 	.word	0x58025408
 80044f0:	5802541c 	.word	0x5802541c
 80044f4:	58025430 	.word	0x58025430
 80044f8:	58025444 	.word	0x58025444
 80044fc:	58025458 	.word	0x58025458
 8004500:	5802546c 	.word	0x5802546c
 8004504:	58025480 	.word	0x58025480
 8004508:	58025494 	.word	0x58025494
 800450c:	fffe000f 	.word	0xfffe000f
 8004510:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	68d2      	ldr	r2, [r2, #12]
 8004516:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004518:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004520:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004528:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004530:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004538:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004540:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	4b6e      	ldr	r3, [pc, #440]	; (8004710 <HAL_DMA_Init+0x650>)
 8004558:	4413      	add	r3, r2
 800455a:	4a6e      	ldr	r2, [pc, #440]	; (8004714 <HAL_DMA_Init+0x654>)
 800455c:	fba2 2303 	umull	r2, r3, r2, r3
 8004560:	091b      	lsrs	r3, r3, #4
 8004562:	009a      	lsls	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f001 fc45 	bl	8005df8 <DMA_CalcBaseAndBitshift>
 800456e:	4603      	mov	r3, r0
 8004570:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004576:	f003 031f 	and.w	r3, r3, #31
 800457a:	2201      	movs	r2, #1
 800457c:	409a      	lsls	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	605a      	str	r2, [r3, #4]
 8004582:	e008      	b.n	8004596 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2240      	movs	r2, #64	; 0x40
 8004588:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2203      	movs	r2, #3
 800458e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e0b7      	b.n	8004706 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5f      	ldr	r2, [pc, #380]	; (8004718 <HAL_DMA_Init+0x658>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d072      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a5d      	ldr	r2, [pc, #372]	; (800471c <HAL_DMA_Init+0x65c>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d06d      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a5c      	ldr	r2, [pc, #368]	; (8004720 <HAL_DMA_Init+0x660>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d068      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a5a      	ldr	r2, [pc, #360]	; (8004724 <HAL_DMA_Init+0x664>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d063      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a59      	ldr	r2, [pc, #356]	; (8004728 <HAL_DMA_Init+0x668>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d05e      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a57      	ldr	r2, [pc, #348]	; (800472c <HAL_DMA_Init+0x66c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d059      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a56      	ldr	r2, [pc, #344]	; (8004730 <HAL_DMA_Init+0x670>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d054      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a54      	ldr	r2, [pc, #336]	; (8004734 <HAL_DMA_Init+0x674>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d04f      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a53      	ldr	r2, [pc, #332]	; (8004738 <HAL_DMA_Init+0x678>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d04a      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a51      	ldr	r2, [pc, #324]	; (800473c <HAL_DMA_Init+0x67c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d045      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a50      	ldr	r2, [pc, #320]	; (8004740 <HAL_DMA_Init+0x680>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d040      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a4e      	ldr	r2, [pc, #312]	; (8004744 <HAL_DMA_Init+0x684>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d03b      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a4d      	ldr	r2, [pc, #308]	; (8004748 <HAL_DMA_Init+0x688>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d036      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a4b      	ldr	r2, [pc, #300]	; (800474c <HAL_DMA_Init+0x68c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d031      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a4a      	ldr	r2, [pc, #296]	; (8004750 <HAL_DMA_Init+0x690>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d02c      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a48      	ldr	r2, [pc, #288]	; (8004754 <HAL_DMA_Init+0x694>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d027      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a47      	ldr	r2, [pc, #284]	; (8004758 <HAL_DMA_Init+0x698>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d022      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a45      	ldr	r2, [pc, #276]	; (800475c <HAL_DMA_Init+0x69c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d01d      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a44      	ldr	r2, [pc, #272]	; (8004760 <HAL_DMA_Init+0x6a0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d018      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a42      	ldr	r2, [pc, #264]	; (8004764 <HAL_DMA_Init+0x6a4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a41      	ldr	r2, [pc, #260]	; (8004768 <HAL_DMA_Init+0x6a8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00e      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a3f      	ldr	r2, [pc, #252]	; (800476c <HAL_DMA_Init+0x6ac>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d009      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a3e      	ldr	r2, [pc, #248]	; (8004770 <HAL_DMA_Init+0x6b0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d004      	beq.n	8004686 <HAL_DMA_Init+0x5c6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a3c      	ldr	r2, [pc, #240]	; (8004774 <HAL_DMA_Init+0x6b4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d101      	bne.n	800468a <HAL_DMA_Init+0x5ca>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_DMA_Init+0x5cc>
 800468a:	2300      	movs	r3, #0
 800468c:	2b00      	cmp	r3, #0
 800468e:	d032      	beq.n	80046f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f001 fcdf 	bl	8006054 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	2b80      	cmp	r3, #128	; 0x80
 800469c:	d102      	bne.n	80046a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80046b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d010      	beq.n	80046e4 <HAL_DMA_Init+0x624>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	d80c      	bhi.n	80046e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 fd5c 	bl	8006188 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80046e0:	605a      	str	r2, [r3, #4]
 80046e2:	e008      	b.n	80046f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	a7fdabf8 	.word	0xa7fdabf8
 8004714:	cccccccd 	.word	0xcccccccd
 8004718:	40020010 	.word	0x40020010
 800471c:	40020028 	.word	0x40020028
 8004720:	40020040 	.word	0x40020040
 8004724:	40020058 	.word	0x40020058
 8004728:	40020070 	.word	0x40020070
 800472c:	40020088 	.word	0x40020088
 8004730:	400200a0 	.word	0x400200a0
 8004734:	400200b8 	.word	0x400200b8
 8004738:	40020410 	.word	0x40020410
 800473c:	40020428 	.word	0x40020428
 8004740:	40020440 	.word	0x40020440
 8004744:	40020458 	.word	0x40020458
 8004748:	40020470 	.word	0x40020470
 800474c:	40020488 	.word	0x40020488
 8004750:	400204a0 	.word	0x400204a0
 8004754:	400204b8 	.word	0x400204b8
 8004758:	58025408 	.word	0x58025408
 800475c:	5802541c 	.word	0x5802541c
 8004760:	58025430 	.word	0x58025430
 8004764:	58025444 	.word	0x58025444
 8004768:	58025458 	.word	0x58025458
 800476c:	5802546c 	.word	0x5802546c
 8004770:	58025480 	.word	0x58025480
 8004774:	58025494 	.word	0x58025494

08004778 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e226      	b.n	8004be2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800479a:	2b01      	cmp	r3, #1
 800479c:	d101      	bne.n	80047a2 <HAL_DMA_Start_IT+0x2a>
 800479e:	2302      	movs	r3, #2
 80047a0:	e21f      	b.n	8004be2 <HAL_DMA_Start_IT+0x46a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	f040 820a 	bne.w	8004bcc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a68      	ldr	r2, [pc, #416]	; (800496c <HAL_DMA_Start_IT+0x1f4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d04a      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a66      	ldr	r2, [pc, #408]	; (8004970 <HAL_DMA_Start_IT+0x1f8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d045      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a65      	ldr	r2, [pc, #404]	; (8004974 <HAL_DMA_Start_IT+0x1fc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d040      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a63      	ldr	r2, [pc, #396]	; (8004978 <HAL_DMA_Start_IT+0x200>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d03b      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a62      	ldr	r2, [pc, #392]	; (800497c <HAL_DMA_Start_IT+0x204>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d036      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a60      	ldr	r2, [pc, #384]	; (8004980 <HAL_DMA_Start_IT+0x208>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d031      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a5f      	ldr	r2, [pc, #380]	; (8004984 <HAL_DMA_Start_IT+0x20c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d02c      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a5d      	ldr	r2, [pc, #372]	; (8004988 <HAL_DMA_Start_IT+0x210>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d027      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a5c      	ldr	r2, [pc, #368]	; (800498c <HAL_DMA_Start_IT+0x214>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a5a      	ldr	r2, [pc, #360]	; (8004990 <HAL_DMA_Start_IT+0x218>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01d      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a59      	ldr	r2, [pc, #356]	; (8004994 <HAL_DMA_Start_IT+0x21c>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_DMA_Start_IT+0x220>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a56      	ldr	r2, [pc, #344]	; (800499c <HAL_DMA_Start_IT+0x224>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a54      	ldr	r2, [pc, #336]	; (80049a0 <HAL_DMA_Start_IT+0x228>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a53      	ldr	r2, [pc, #332]	; (80049a4 <HAL_DMA_Start_IT+0x22c>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_DMA_Start_IT+0xee>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a51      	ldr	r2, [pc, #324]	; (80049a8 <HAL_DMA_Start_IT+0x230>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <HAL_DMA_Start_IT+0x100>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 0201 	bic.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	e007      	b.n	8004888 <HAL_DMA_Start_IT+0x110>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f022 0201 	bic.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68b9      	ldr	r1, [r7, #8]
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f001 f906 	bl	8005aa0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a34      	ldr	r2, [pc, #208]	; (800496c <HAL_DMA_Start_IT+0x1f4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d04a      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a33      	ldr	r2, [pc, #204]	; (8004970 <HAL_DMA_Start_IT+0x1f8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d045      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a31      	ldr	r2, [pc, #196]	; (8004974 <HAL_DMA_Start_IT+0x1fc>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d040      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a30      	ldr	r2, [pc, #192]	; (8004978 <HAL_DMA_Start_IT+0x200>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d03b      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a2e      	ldr	r2, [pc, #184]	; (800497c <HAL_DMA_Start_IT+0x204>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d036      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a2d      	ldr	r2, [pc, #180]	; (8004980 <HAL_DMA_Start_IT+0x208>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d031      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a2b      	ldr	r2, [pc, #172]	; (8004984 <HAL_DMA_Start_IT+0x20c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d02c      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2a      	ldr	r2, [pc, #168]	; (8004988 <HAL_DMA_Start_IT+0x210>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d027      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a28      	ldr	r2, [pc, #160]	; (800498c <HAL_DMA_Start_IT+0x214>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d022      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a27      	ldr	r2, [pc, #156]	; (8004990 <HAL_DMA_Start_IT+0x218>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d01d      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a25      	ldr	r2, [pc, #148]	; (8004994 <HAL_DMA_Start_IT+0x21c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d018      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a24      	ldr	r2, [pc, #144]	; (8004998 <HAL_DMA_Start_IT+0x220>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d013      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a22      	ldr	r2, [pc, #136]	; (800499c <HAL_DMA_Start_IT+0x224>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d00e      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a21      	ldr	r2, [pc, #132]	; (80049a0 <HAL_DMA_Start_IT+0x228>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d009      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1f      	ldr	r2, [pc, #124]	; (80049a4 <HAL_DMA_Start_IT+0x22c>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_DMA_Start_IT+0x1bc>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a1e      	ldr	r2, [pc, #120]	; (80049a8 <HAL_DMA_Start_IT+0x230>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <HAL_DMA_Start_IT+0x1c0>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_DMA_Start_IT+0x1c2>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d036      	beq.n	80049ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f023 021e 	bic.w	r2, r3, #30
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f042 0216 	orr.w	r2, r2, #22
 8004950:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	2b00      	cmp	r3, #0
 8004958:	d03e      	beq.n	80049d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0208 	orr.w	r2, r2, #8
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e035      	b.n	80049d8 <HAL_DMA_Start_IT+0x260>
 800496c:	40020010 	.word	0x40020010
 8004970:	40020028 	.word	0x40020028
 8004974:	40020040 	.word	0x40020040
 8004978:	40020058 	.word	0x40020058
 800497c:	40020070 	.word	0x40020070
 8004980:	40020088 	.word	0x40020088
 8004984:	400200a0 	.word	0x400200a0
 8004988:	400200b8 	.word	0x400200b8
 800498c:	40020410 	.word	0x40020410
 8004990:	40020428 	.word	0x40020428
 8004994:	40020440 	.word	0x40020440
 8004998:	40020458 	.word	0x40020458
 800499c:	40020470 	.word	0x40020470
 80049a0:	40020488 	.word	0x40020488
 80049a4:	400204a0 	.word	0x400204a0
 80049a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 020e 	bic.w	r2, r3, #14
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 020a 	orr.w	r2, r2, #10
 80049be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0204 	orr.w	r2, r2, #4
 80049d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a83      	ldr	r2, [pc, #524]	; (8004bec <HAL_DMA_Start_IT+0x474>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d072      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a82      	ldr	r2, [pc, #520]	; (8004bf0 <HAL_DMA_Start_IT+0x478>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d06d      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a80      	ldr	r2, [pc, #512]	; (8004bf4 <HAL_DMA_Start_IT+0x47c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d068      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a7f      	ldr	r2, [pc, #508]	; (8004bf8 <HAL_DMA_Start_IT+0x480>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d063      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a7d      	ldr	r2, [pc, #500]	; (8004bfc <HAL_DMA_Start_IT+0x484>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d05e      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a7c      	ldr	r2, [pc, #496]	; (8004c00 <HAL_DMA_Start_IT+0x488>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d059      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a7a      	ldr	r2, [pc, #488]	; (8004c04 <HAL_DMA_Start_IT+0x48c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d054      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a79      	ldr	r2, [pc, #484]	; (8004c08 <HAL_DMA_Start_IT+0x490>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d04f      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a77      	ldr	r2, [pc, #476]	; (8004c0c <HAL_DMA_Start_IT+0x494>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d04a      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a76      	ldr	r2, [pc, #472]	; (8004c10 <HAL_DMA_Start_IT+0x498>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d045      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a74      	ldr	r2, [pc, #464]	; (8004c14 <HAL_DMA_Start_IT+0x49c>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d040      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a73      	ldr	r2, [pc, #460]	; (8004c18 <HAL_DMA_Start_IT+0x4a0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d03b      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a71      	ldr	r2, [pc, #452]	; (8004c1c <HAL_DMA_Start_IT+0x4a4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d036      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a70      	ldr	r2, [pc, #448]	; (8004c20 <HAL_DMA_Start_IT+0x4a8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d031      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a6e      	ldr	r2, [pc, #440]	; (8004c24 <HAL_DMA_Start_IT+0x4ac>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d02c      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a6d      	ldr	r2, [pc, #436]	; (8004c28 <HAL_DMA_Start_IT+0x4b0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d027      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a6b      	ldr	r2, [pc, #428]	; (8004c2c <HAL_DMA_Start_IT+0x4b4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d022      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a6a      	ldr	r2, [pc, #424]	; (8004c30 <HAL_DMA_Start_IT+0x4b8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d01d      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a68      	ldr	r2, [pc, #416]	; (8004c34 <HAL_DMA_Start_IT+0x4bc>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d018      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a67      	ldr	r2, [pc, #412]	; (8004c38 <HAL_DMA_Start_IT+0x4c0>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d013      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a65      	ldr	r2, [pc, #404]	; (8004c3c <HAL_DMA_Start_IT+0x4c4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d00e      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a64      	ldr	r2, [pc, #400]	; (8004c40 <HAL_DMA_Start_IT+0x4c8>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d009      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a62      	ldr	r2, [pc, #392]	; (8004c44 <HAL_DMA_Start_IT+0x4cc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <HAL_DMA_Start_IT+0x350>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a61      	ldr	r2, [pc, #388]	; (8004c48 <HAL_DMA_Start_IT+0x4d0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d101      	bne.n	8004acc <HAL_DMA_Start_IT+0x354>
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e000      	b.n	8004ace <HAL_DMA_Start_IT+0x356>
 8004acc:	2300      	movs	r3, #0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d01a      	beq.n	8004b08 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004aee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b06:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a37      	ldr	r2, [pc, #220]	; (8004bec <HAL_DMA_Start_IT+0x474>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d04a      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a36      	ldr	r2, [pc, #216]	; (8004bf0 <HAL_DMA_Start_IT+0x478>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d045      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a34      	ldr	r2, [pc, #208]	; (8004bf4 <HAL_DMA_Start_IT+0x47c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d040      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a33      	ldr	r2, [pc, #204]	; (8004bf8 <HAL_DMA_Start_IT+0x480>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d03b      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a31      	ldr	r2, [pc, #196]	; (8004bfc <HAL_DMA_Start_IT+0x484>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d036      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a30      	ldr	r2, [pc, #192]	; (8004c00 <HAL_DMA_Start_IT+0x488>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d031      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a2e      	ldr	r2, [pc, #184]	; (8004c04 <HAL_DMA_Start_IT+0x48c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d02c      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a2d      	ldr	r2, [pc, #180]	; (8004c08 <HAL_DMA_Start_IT+0x490>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d027      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a2b      	ldr	r2, [pc, #172]	; (8004c0c <HAL_DMA_Start_IT+0x494>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d022      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a2a      	ldr	r2, [pc, #168]	; (8004c10 <HAL_DMA_Start_IT+0x498>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a28      	ldr	r2, [pc, #160]	; (8004c14 <HAL_DMA_Start_IT+0x49c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a27      	ldr	r2, [pc, #156]	; (8004c18 <HAL_DMA_Start_IT+0x4a0>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a25      	ldr	r2, [pc, #148]	; (8004c1c <HAL_DMA_Start_IT+0x4a4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a24      	ldr	r2, [pc, #144]	; (8004c20 <HAL_DMA_Start_IT+0x4a8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a22      	ldr	r2, [pc, #136]	; (8004c24 <HAL_DMA_Start_IT+0x4ac>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_DMA_Start_IT+0x430>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a21      	ldr	r2, [pc, #132]	; (8004c28 <HAL_DMA_Start_IT+0x4b0>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d108      	bne.n	8004bba <HAL_DMA_Start_IT+0x442>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e012      	b.n	8004be0 <HAL_DMA_Start_IT+0x468>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0201 	orr.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
 8004bca:	e009      	b.n	8004be0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3718      	adds	r7, #24
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40020010 	.word	0x40020010
 8004bf0:	40020028 	.word	0x40020028
 8004bf4:	40020040 	.word	0x40020040
 8004bf8:	40020058 	.word	0x40020058
 8004bfc:	40020070 	.word	0x40020070
 8004c00:	40020088 	.word	0x40020088
 8004c04:	400200a0 	.word	0x400200a0
 8004c08:	400200b8 	.word	0x400200b8
 8004c0c:	40020410 	.word	0x40020410
 8004c10:	40020428 	.word	0x40020428
 8004c14:	40020440 	.word	0x40020440
 8004c18:	40020458 	.word	0x40020458
 8004c1c:	40020470 	.word	0x40020470
 8004c20:	40020488 	.word	0x40020488
 8004c24:	400204a0 	.word	0x400204a0
 8004c28:	400204b8 	.word	0x400204b8
 8004c2c:	58025408 	.word	0x58025408
 8004c30:	5802541c 	.word	0x5802541c
 8004c34:	58025430 	.word	0x58025430
 8004c38:	58025444 	.word	0x58025444
 8004c3c:	58025458 	.word	0x58025458
 8004c40:	5802546c 	.word	0x5802546c
 8004c44:	58025480 	.word	0x58025480
 8004c48:	58025494 	.word	0x58025494

08004c4c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004c54:	2300      	movs	r3, #0
 8004c56:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004c58:	4b67      	ldr	r3, [pc, #412]	; (8004df8 <HAL_DMA_IRQHandler+0x1ac>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a67      	ldr	r2, [pc, #412]	; (8004dfc <HAL_DMA_IRQHandler+0x1b0>)
 8004c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c62:	0a9b      	lsrs	r3, r3, #10
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a5f      	ldr	r2, [pc, #380]	; (8004e00 <HAL_DMA_IRQHandler+0x1b4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d04a      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a5d      	ldr	r2, [pc, #372]	; (8004e04 <HAL_DMA_IRQHandler+0x1b8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d045      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a5c      	ldr	r2, [pc, #368]	; (8004e08 <HAL_DMA_IRQHandler+0x1bc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d040      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a5a      	ldr	r2, [pc, #360]	; (8004e0c <HAL_DMA_IRQHandler+0x1c0>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d03b      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a59      	ldr	r2, [pc, #356]	; (8004e10 <HAL_DMA_IRQHandler+0x1c4>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d036      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a57      	ldr	r2, [pc, #348]	; (8004e14 <HAL_DMA_IRQHandler+0x1c8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d031      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a56      	ldr	r2, [pc, #344]	; (8004e18 <HAL_DMA_IRQHandler+0x1cc>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d02c      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a54      	ldr	r2, [pc, #336]	; (8004e1c <HAL_DMA_IRQHandler+0x1d0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d027      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a53      	ldr	r2, [pc, #332]	; (8004e20 <HAL_DMA_IRQHandler+0x1d4>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d022      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a51      	ldr	r2, [pc, #324]	; (8004e24 <HAL_DMA_IRQHandler+0x1d8>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01d      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a50      	ldr	r2, [pc, #320]	; (8004e28 <HAL_DMA_IRQHandler+0x1dc>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d018      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a4e      	ldr	r2, [pc, #312]	; (8004e2c <HAL_DMA_IRQHandler+0x1e0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d013      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a4d      	ldr	r2, [pc, #308]	; (8004e30 <HAL_DMA_IRQHandler+0x1e4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d00e      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a4b      	ldr	r2, [pc, #300]	; (8004e34 <HAL_DMA_IRQHandler+0x1e8>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d009      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a4a      	ldr	r2, [pc, #296]	; (8004e38 <HAL_DMA_IRQHandler+0x1ec>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d004      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd2>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a48      	ldr	r2, [pc, #288]	; (8004e3c <HAL_DMA_IRQHandler+0x1f0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <HAL_DMA_IRQHandler+0xd6>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e000      	b.n	8004d24 <HAL_DMA_IRQHandler+0xd8>
 8004d22:	2300      	movs	r3, #0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 842b 	beq.w	8005580 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2208      	movs	r2, #8
 8004d34:	409a      	lsls	r2, r3
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80a2 	beq.w	8004e84 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2e      	ldr	r2, [pc, #184]	; (8004e00 <HAL_DMA_IRQHandler+0x1b4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d04a      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2d      	ldr	r2, [pc, #180]	; (8004e04 <HAL_DMA_IRQHandler+0x1b8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d045      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2b      	ldr	r2, [pc, #172]	; (8004e08 <HAL_DMA_IRQHandler+0x1bc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d040      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2a      	ldr	r2, [pc, #168]	; (8004e0c <HAL_DMA_IRQHandler+0x1c0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d03b      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a28      	ldr	r2, [pc, #160]	; (8004e10 <HAL_DMA_IRQHandler+0x1c4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d036      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <HAL_DMA_IRQHandler+0x1c8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d031      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a25      	ldr	r2, [pc, #148]	; (8004e18 <HAL_DMA_IRQHandler+0x1cc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d02c      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a24      	ldr	r2, [pc, #144]	; (8004e1c <HAL_DMA_IRQHandler+0x1d0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d027      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a22      	ldr	r2, [pc, #136]	; (8004e20 <HAL_DMA_IRQHandler+0x1d4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d022      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a21      	ldr	r2, [pc, #132]	; (8004e24 <HAL_DMA_IRQHandler+0x1d8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d01d      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1f      	ldr	r2, [pc, #124]	; (8004e28 <HAL_DMA_IRQHandler+0x1dc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d018      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1e      	ldr	r2, [pc, #120]	; (8004e2c <HAL_DMA_IRQHandler+0x1e0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d013      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1c      	ldr	r2, [pc, #112]	; (8004e30 <HAL_DMA_IRQHandler+0x1e4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d00e      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a1b      	ldr	r2, [pc, #108]	; (8004e34 <HAL_DMA_IRQHandler+0x1e8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d009      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <HAL_DMA_IRQHandler+0x1ec>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d004      	beq.n	8004de0 <HAL_DMA_IRQHandler+0x194>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a18      	ldr	r2, [pc, #96]	; (8004e3c <HAL_DMA_IRQHandler+0x1f0>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d12f      	bne.n	8004e40 <HAL_DMA_IRQHandler+0x1f4>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	bf14      	ite	ne
 8004dee:	2301      	movne	r3, #1
 8004df0:	2300      	moveq	r3, #0
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e02e      	b.n	8004e54 <HAL_DMA_IRQHandler+0x208>
 8004df6:	bf00      	nop
 8004df8:	24000000 	.word	0x24000000
 8004dfc:	1b4e81b5 	.word	0x1b4e81b5
 8004e00:	40020010 	.word	0x40020010
 8004e04:	40020028 	.word	0x40020028
 8004e08:	40020040 	.word	0x40020040
 8004e0c:	40020058 	.word	0x40020058
 8004e10:	40020070 	.word	0x40020070
 8004e14:	40020088 	.word	0x40020088
 8004e18:	400200a0 	.word	0x400200a0
 8004e1c:	400200b8 	.word	0x400200b8
 8004e20:	40020410 	.word	0x40020410
 8004e24:	40020428 	.word	0x40020428
 8004e28:	40020440 	.word	0x40020440
 8004e2c:	40020458 	.word	0x40020458
 8004e30:	40020470 	.word	0x40020470
 8004e34:	40020488 	.word	0x40020488
 8004e38:	400204a0 	.word	0x400204a0
 8004e3c:	400204b8 	.word	0x400204b8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	bf14      	ite	ne
 8004e4e:	2301      	movne	r3, #1
 8004e50:	2300      	moveq	r3, #0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d015      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0204 	bic.w	r2, r2, #4
 8004e66:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	2208      	movs	r2, #8
 8004e72:	409a      	lsls	r2, r3
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e7c:	f043 0201 	orr.w	r2, r3, #1
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d06e      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a69      	ldr	r2, [pc, #420]	; (8005044 <HAL_DMA_IRQHandler+0x3f8>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d04a      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a67      	ldr	r2, [pc, #412]	; (8005048 <HAL_DMA_IRQHandler+0x3fc>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d045      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a66      	ldr	r2, [pc, #408]	; (800504c <HAL_DMA_IRQHandler+0x400>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d040      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a64      	ldr	r2, [pc, #400]	; (8005050 <HAL_DMA_IRQHandler+0x404>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d03b      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a63      	ldr	r2, [pc, #396]	; (8005054 <HAL_DMA_IRQHandler+0x408>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d036      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a61      	ldr	r2, [pc, #388]	; (8005058 <HAL_DMA_IRQHandler+0x40c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d031      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a60      	ldr	r2, [pc, #384]	; (800505c <HAL_DMA_IRQHandler+0x410>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d02c      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5e      	ldr	r2, [pc, #376]	; (8005060 <HAL_DMA_IRQHandler+0x414>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d027      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a5d      	ldr	r2, [pc, #372]	; (8005064 <HAL_DMA_IRQHandler+0x418>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d022      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a5b      	ldr	r2, [pc, #364]	; (8005068 <HAL_DMA_IRQHandler+0x41c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01d      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a5a      	ldr	r2, [pc, #360]	; (800506c <HAL_DMA_IRQHandler+0x420>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d018      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a58      	ldr	r2, [pc, #352]	; (8005070 <HAL_DMA_IRQHandler+0x424>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a57      	ldr	r2, [pc, #348]	; (8005074 <HAL_DMA_IRQHandler+0x428>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a55      	ldr	r2, [pc, #340]	; (8005078 <HAL_DMA_IRQHandler+0x42c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a54      	ldr	r2, [pc, #336]	; (800507c <HAL_DMA_IRQHandler+0x430>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_DMA_IRQHandler+0x2ee>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a52      	ldr	r2, [pc, #328]	; (8005080 <HAL_DMA_IRQHandler+0x434>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d10a      	bne.n	8004f50 <HAL_DMA_IRQHandler+0x304>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	e003      	b.n	8004f58 <HAL_DMA_IRQHandler+0x30c>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2300      	movs	r3, #0
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00d      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f60:	f003 031f 	and.w	r3, r3, #31
 8004f64:	2201      	movs	r2, #1
 8004f66:	409a      	lsls	r2, r3
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f70:	f043 0202 	orr.w	r2, r3, #2
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f7c:	f003 031f 	and.w	r3, r3, #31
 8004f80:	2204      	movs	r2, #4
 8004f82:	409a      	lsls	r2, r3
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	4013      	ands	r3, r2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f000 808f 	beq.w	80050ac <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a2c      	ldr	r2, [pc, #176]	; (8005044 <HAL_DMA_IRQHandler+0x3f8>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d04a      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <HAL_DMA_IRQHandler+0x3fc>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d045      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a29      	ldr	r2, [pc, #164]	; (800504c <HAL_DMA_IRQHandler+0x400>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d040      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a27      	ldr	r2, [pc, #156]	; (8005050 <HAL_DMA_IRQHandler+0x404>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d03b      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a26      	ldr	r2, [pc, #152]	; (8005054 <HAL_DMA_IRQHandler+0x408>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d036      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a24      	ldr	r2, [pc, #144]	; (8005058 <HAL_DMA_IRQHandler+0x40c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d031      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a23      	ldr	r2, [pc, #140]	; (800505c <HAL_DMA_IRQHandler+0x410>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d02c      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a21      	ldr	r2, [pc, #132]	; (8005060 <HAL_DMA_IRQHandler+0x414>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d027      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a20      	ldr	r2, [pc, #128]	; (8005064 <HAL_DMA_IRQHandler+0x418>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d022      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1e      	ldr	r2, [pc, #120]	; (8005068 <HAL_DMA_IRQHandler+0x41c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01d      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1d      	ldr	r2, [pc, #116]	; (800506c <HAL_DMA_IRQHandler+0x420>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d018      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1b      	ldr	r2, [pc, #108]	; (8005070 <HAL_DMA_IRQHandler+0x424>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a1a      	ldr	r2, [pc, #104]	; (8005074 <HAL_DMA_IRQHandler+0x428>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00e      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a18      	ldr	r2, [pc, #96]	; (8005078 <HAL_DMA_IRQHandler+0x42c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d009      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a17      	ldr	r2, [pc, #92]	; (800507c <HAL_DMA_IRQHandler+0x430>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d004      	beq.n	800502e <HAL_DMA_IRQHandler+0x3e2>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a15      	ldr	r2, [pc, #84]	; (8005080 <HAL_DMA_IRQHandler+0x434>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d12a      	bne.n	8005084 <HAL_DMA_IRQHandler+0x438>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
 8005042:	e023      	b.n	800508c <HAL_DMA_IRQHandler+0x440>
 8005044:	40020010 	.word	0x40020010
 8005048:	40020028 	.word	0x40020028
 800504c:	40020040 	.word	0x40020040
 8005050:	40020058 	.word	0x40020058
 8005054:	40020070 	.word	0x40020070
 8005058:	40020088 	.word	0x40020088
 800505c:	400200a0 	.word	0x400200a0
 8005060:	400200b8 	.word	0x400200b8
 8005064:	40020410 	.word	0x40020410
 8005068:	40020428 	.word	0x40020428
 800506c:	40020440 	.word	0x40020440
 8005070:	40020458 	.word	0x40020458
 8005074:	40020470 	.word	0x40020470
 8005078:	40020488 	.word	0x40020488
 800507c:	400204a0 	.word	0x400204a0
 8005080:	400204b8 	.word	0x400204b8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2300      	movs	r3, #0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00d      	beq.n	80050ac <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005094:	f003 031f 	and.w	r3, r3, #31
 8005098:	2204      	movs	r2, #4
 800509a:	409a      	lsls	r2, r3
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050a4:	f043 0204 	orr.w	r2, r3, #4
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b0:	f003 031f 	and.w	r3, r3, #31
 80050b4:	2210      	movs	r2, #16
 80050b6:	409a      	lsls	r2, r3
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	4013      	ands	r3, r2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80a6 	beq.w	800520e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a85      	ldr	r2, [pc, #532]	; (80052dc <HAL_DMA_IRQHandler+0x690>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d04a      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a83      	ldr	r2, [pc, #524]	; (80052e0 <HAL_DMA_IRQHandler+0x694>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d045      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a82      	ldr	r2, [pc, #520]	; (80052e4 <HAL_DMA_IRQHandler+0x698>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d040      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a80      	ldr	r2, [pc, #512]	; (80052e8 <HAL_DMA_IRQHandler+0x69c>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d03b      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a7f      	ldr	r2, [pc, #508]	; (80052ec <HAL_DMA_IRQHandler+0x6a0>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d036      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a7d      	ldr	r2, [pc, #500]	; (80052f0 <HAL_DMA_IRQHandler+0x6a4>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d031      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a7c      	ldr	r2, [pc, #496]	; (80052f4 <HAL_DMA_IRQHandler+0x6a8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d02c      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a7a      	ldr	r2, [pc, #488]	; (80052f8 <HAL_DMA_IRQHandler+0x6ac>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d027      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a79      	ldr	r2, [pc, #484]	; (80052fc <HAL_DMA_IRQHandler+0x6b0>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d022      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a77      	ldr	r2, [pc, #476]	; (8005300 <HAL_DMA_IRQHandler+0x6b4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d01d      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a76      	ldr	r2, [pc, #472]	; (8005304 <HAL_DMA_IRQHandler+0x6b8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d018      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a74      	ldr	r2, [pc, #464]	; (8005308 <HAL_DMA_IRQHandler+0x6bc>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d013      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a73      	ldr	r2, [pc, #460]	; (800530c <HAL_DMA_IRQHandler+0x6c0>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00e      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a71      	ldr	r2, [pc, #452]	; (8005310 <HAL_DMA_IRQHandler+0x6c4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d009      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a70      	ldr	r2, [pc, #448]	; (8005314 <HAL_DMA_IRQHandler+0x6c8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d004      	beq.n	8005162 <HAL_DMA_IRQHandler+0x516>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a6e      	ldr	r2, [pc, #440]	; (8005318 <HAL_DMA_IRQHandler+0x6cc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d10a      	bne.n	8005178 <HAL_DMA_IRQHandler+0x52c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b00      	cmp	r3, #0
 800516e:	bf14      	ite	ne
 8005170:	2301      	movne	r3, #1
 8005172:	2300      	moveq	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	e009      	b.n	800518c <HAL_DMA_IRQHandler+0x540>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0304 	and.w	r3, r3, #4
 8005182:	2b00      	cmp	r3, #0
 8005184:	bf14      	ite	ne
 8005186:	2301      	movne	r3, #1
 8005188:	2300      	moveq	r3, #0
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b00      	cmp	r3, #0
 800518e:	d03e      	beq.n	800520e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	2210      	movs	r2, #16
 800519a:	409a      	lsls	r2, r3
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d018      	beq.n	80051e0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d108      	bne.n	80051ce <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d024      	beq.n	800520e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	4798      	blx	r3
 80051cc:	e01f      	b.n	800520e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d01b      	beq.n	800520e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
 80051de:	e016      	b.n	800520e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d107      	bne.n	80051fe <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0208 	bic.w	r2, r2, #8
 80051fc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005212:	f003 031f 	and.w	r3, r3, #31
 8005216:	2220      	movs	r2, #32
 8005218:	409a      	lsls	r2, r3
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 8110 	beq.w	8005444 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2c      	ldr	r2, [pc, #176]	; (80052dc <HAL_DMA_IRQHandler+0x690>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d04a      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a2b      	ldr	r2, [pc, #172]	; (80052e0 <HAL_DMA_IRQHandler+0x694>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d045      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a29      	ldr	r2, [pc, #164]	; (80052e4 <HAL_DMA_IRQHandler+0x698>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d040      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a28      	ldr	r2, [pc, #160]	; (80052e8 <HAL_DMA_IRQHandler+0x69c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d03b      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a26      	ldr	r2, [pc, #152]	; (80052ec <HAL_DMA_IRQHandler+0x6a0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d036      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a25      	ldr	r2, [pc, #148]	; (80052f0 <HAL_DMA_IRQHandler+0x6a4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d031      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a23      	ldr	r2, [pc, #140]	; (80052f4 <HAL_DMA_IRQHandler+0x6a8>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d02c      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a22      	ldr	r2, [pc, #136]	; (80052f8 <HAL_DMA_IRQHandler+0x6ac>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d027      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a20      	ldr	r2, [pc, #128]	; (80052fc <HAL_DMA_IRQHandler+0x6b0>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d022      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1f      	ldr	r2, [pc, #124]	; (8005300 <HAL_DMA_IRQHandler+0x6b4>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d01d      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <HAL_DMA_IRQHandler+0x6b8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d018      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a1c      	ldr	r2, [pc, #112]	; (8005308 <HAL_DMA_IRQHandler+0x6bc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a1a      	ldr	r2, [pc, #104]	; (800530c <HAL_DMA_IRQHandler+0x6c0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00e      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a19      	ldr	r2, [pc, #100]	; (8005310 <HAL_DMA_IRQHandler+0x6c4>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a17      	ldr	r2, [pc, #92]	; (8005314 <HAL_DMA_IRQHandler+0x6c8>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_DMA_IRQHandler+0x678>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a16      	ldr	r2, [pc, #88]	; (8005318 <HAL_DMA_IRQHandler+0x6cc>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d12b      	bne.n	800531c <HAL_DMA_IRQHandler+0x6d0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bf14      	ite	ne
 80052d2:	2301      	movne	r3, #1
 80052d4:	2300      	moveq	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	e02a      	b.n	8005330 <HAL_DMA_IRQHandler+0x6e4>
 80052da:	bf00      	nop
 80052dc:	40020010 	.word	0x40020010
 80052e0:	40020028 	.word	0x40020028
 80052e4:	40020040 	.word	0x40020040
 80052e8:	40020058 	.word	0x40020058
 80052ec:	40020070 	.word	0x40020070
 80052f0:	40020088 	.word	0x40020088
 80052f4:	400200a0 	.word	0x400200a0
 80052f8:	400200b8 	.word	0x400200b8
 80052fc:	40020410 	.word	0x40020410
 8005300:	40020428 	.word	0x40020428
 8005304:	40020440 	.word	0x40020440
 8005308:	40020458 	.word	0x40020458
 800530c:	40020470 	.word	0x40020470
 8005310:	40020488 	.word	0x40020488
 8005314:	400204a0 	.word	0x400204a0
 8005318:	400204b8 	.word	0x400204b8
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0302 	and.w	r3, r3, #2
 8005326:	2b00      	cmp	r3, #0
 8005328:	bf14      	ite	ne
 800532a:	2301      	movne	r3, #1
 800532c:	2300      	moveq	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8087 	beq.w	8005444 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800533a:	f003 031f 	and.w	r3, r3, #31
 800533e:	2220      	movs	r2, #32
 8005340:	409a      	lsls	r2, r3
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800534c:	b2db      	uxtb	r3, r3
 800534e:	2b04      	cmp	r3, #4
 8005350:	d139      	bne.n	80053c6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0216 	bic.w	r2, r2, #22
 8005360:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005370:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <HAL_DMA_IRQHandler+0x736>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0208 	bic.w	r2, r2, #8
 8005390:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	f003 031f 	and.w	r3, r3, #31
 800539a:	223f      	movs	r2, #63	; 0x3f
 800539c:	409a      	lsls	r2, r3
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 834a 	beq.w	8005a50 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	4798      	blx	r3
          }
          return;
 80053c4:	e344      	b.n	8005a50 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d018      	beq.n	8005406 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d108      	bne.n	80053f4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02c      	beq.n	8005444 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	4798      	blx	r3
 80053f2:	e027      	b.n	8005444 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d023      	beq.n	8005444 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	4798      	blx	r3
 8005404:	e01e      	b.n	8005444 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005410:	2b00      	cmp	r3, #0
 8005412:	d10f      	bne.n	8005434 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f022 0210 	bic.w	r2, r2, #16
 8005422:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 8306 	beq.w	8005a5a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 8088 	beq.w	800556c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2204      	movs	r2, #4
 8005460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a7a      	ldr	r2, [pc, #488]	; (8005654 <HAL_DMA_IRQHandler+0xa08>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d04a      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a79      	ldr	r2, [pc, #484]	; (8005658 <HAL_DMA_IRQHandler+0xa0c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d045      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a77      	ldr	r2, [pc, #476]	; (800565c <HAL_DMA_IRQHandler+0xa10>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d040      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a76      	ldr	r2, [pc, #472]	; (8005660 <HAL_DMA_IRQHandler+0xa14>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d03b      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a74      	ldr	r2, [pc, #464]	; (8005664 <HAL_DMA_IRQHandler+0xa18>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d036      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a73      	ldr	r2, [pc, #460]	; (8005668 <HAL_DMA_IRQHandler+0xa1c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d031      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a71      	ldr	r2, [pc, #452]	; (800566c <HAL_DMA_IRQHandler+0xa20>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d02c      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a70      	ldr	r2, [pc, #448]	; (8005670 <HAL_DMA_IRQHandler+0xa24>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d027      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a6e      	ldr	r2, [pc, #440]	; (8005674 <HAL_DMA_IRQHandler+0xa28>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d022      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a6d      	ldr	r2, [pc, #436]	; (8005678 <HAL_DMA_IRQHandler+0xa2c>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d01d      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a6b      	ldr	r2, [pc, #428]	; (800567c <HAL_DMA_IRQHandler+0xa30>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d018      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a6a      	ldr	r2, [pc, #424]	; (8005680 <HAL_DMA_IRQHandler+0xa34>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d013      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a68      	ldr	r2, [pc, #416]	; (8005684 <HAL_DMA_IRQHandler+0xa38>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d00e      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a67      	ldr	r2, [pc, #412]	; (8005688 <HAL_DMA_IRQHandler+0xa3c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d009      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a65      	ldr	r2, [pc, #404]	; (800568c <HAL_DMA_IRQHandler+0xa40>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d004      	beq.n	8005504 <HAL_DMA_IRQHandler+0x8b8>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a64      	ldr	r2, [pc, #400]	; (8005690 <HAL_DMA_IRQHandler+0xa44>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d108      	bne.n	8005516 <HAL_DMA_IRQHandler+0x8ca>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f022 0201 	bic.w	r2, r2, #1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e007      	b.n	8005526 <HAL_DMA_IRQHandler+0x8da>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	3301      	adds	r3, #1
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552e:	429a      	cmp	r2, r3
 8005530:	d307      	bcc.n	8005542 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0301 	and.w	r3, r3, #1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d1f2      	bne.n	8005526 <HAL_DMA_IRQHandler+0x8da>
 8005540:	e000      	b.n	8005544 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005542:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d004      	beq.n	800555c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2203      	movs	r2, #3
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800555a:	e003      	b.n	8005564 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8272 	beq.w	8005a5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	4798      	blx	r3
 800557e:	e26c      	b.n	8005a5a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a43      	ldr	r2, [pc, #268]	; (8005694 <HAL_DMA_IRQHandler+0xa48>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d022      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x984>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a42      	ldr	r2, [pc, #264]	; (8005698 <HAL_DMA_IRQHandler+0xa4c>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d01d      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x984>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a40      	ldr	r2, [pc, #256]	; (800569c <HAL_DMA_IRQHandler+0xa50>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d018      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x984>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a3f      	ldr	r2, [pc, #252]	; (80056a0 <HAL_DMA_IRQHandler+0xa54>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d013      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x984>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a3d      	ldr	r2, [pc, #244]	; (80056a4 <HAL_DMA_IRQHandler+0xa58>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00e      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x984>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a3c      	ldr	r2, [pc, #240]	; (80056a8 <HAL_DMA_IRQHandler+0xa5c>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d009      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x984>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a3a      	ldr	r2, [pc, #232]	; (80056ac <HAL_DMA_IRQHandler+0xa60>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <HAL_DMA_IRQHandler+0x984>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a39      	ldr	r2, [pc, #228]	; (80056b0 <HAL_DMA_IRQHandler+0xa64>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d101      	bne.n	80055d4 <HAL_DMA_IRQHandler+0x988>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_DMA_IRQHandler+0x98a>
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 823f 	beq.w	8005a5a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2204      	movs	r2, #4
 80055ee:	409a      	lsls	r2, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 80cd 	beq.w	8005794 <HAL_DMA_IRQHandler+0xb48>
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 80c7 	beq.w	8005794 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560a:	f003 031f 	and.w	r3, r3, #31
 800560e:	2204      	movs	r2, #4
 8005610:	409a      	lsls	r2, r3
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d049      	beq.n	80056b4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8210 	beq.w	8005a54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800563c:	e20a      	b.n	8005a54 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8206 	beq.w	8005a54 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005650:	e200      	b.n	8005a54 <HAL_DMA_IRQHandler+0xe08>
 8005652:	bf00      	nop
 8005654:	40020010 	.word	0x40020010
 8005658:	40020028 	.word	0x40020028
 800565c:	40020040 	.word	0x40020040
 8005660:	40020058 	.word	0x40020058
 8005664:	40020070 	.word	0x40020070
 8005668:	40020088 	.word	0x40020088
 800566c:	400200a0 	.word	0x400200a0
 8005670:	400200b8 	.word	0x400200b8
 8005674:	40020410 	.word	0x40020410
 8005678:	40020428 	.word	0x40020428
 800567c:	40020440 	.word	0x40020440
 8005680:	40020458 	.word	0x40020458
 8005684:	40020470 	.word	0x40020470
 8005688:	40020488 	.word	0x40020488
 800568c:	400204a0 	.word	0x400204a0
 8005690:	400204b8 	.word	0x400204b8
 8005694:	58025408 	.word	0x58025408
 8005698:	5802541c 	.word	0x5802541c
 800569c:	58025430 	.word	0x58025430
 80056a0:	58025444 	.word	0x58025444
 80056a4:	58025458 	.word	0x58025458
 80056a8:	5802546c 	.word	0x5802546c
 80056ac:	58025480 	.word	0x58025480
 80056b0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d160      	bne.n	8005780 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a7f      	ldr	r2, [pc, #508]	; (80058c0 <HAL_DMA_IRQHandler+0xc74>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d04a      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a7d      	ldr	r2, [pc, #500]	; (80058c4 <HAL_DMA_IRQHandler+0xc78>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d045      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a7c      	ldr	r2, [pc, #496]	; (80058c8 <HAL_DMA_IRQHandler+0xc7c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d040      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a7a      	ldr	r2, [pc, #488]	; (80058cc <HAL_DMA_IRQHandler+0xc80>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d03b      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a79      	ldr	r2, [pc, #484]	; (80058d0 <HAL_DMA_IRQHandler+0xc84>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d036      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a77      	ldr	r2, [pc, #476]	; (80058d4 <HAL_DMA_IRQHandler+0xc88>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d031      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a76      	ldr	r2, [pc, #472]	; (80058d8 <HAL_DMA_IRQHandler+0xc8c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d02c      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a74      	ldr	r2, [pc, #464]	; (80058dc <HAL_DMA_IRQHandler+0xc90>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d027      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a73      	ldr	r2, [pc, #460]	; (80058e0 <HAL_DMA_IRQHandler+0xc94>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a71      	ldr	r2, [pc, #452]	; (80058e4 <HAL_DMA_IRQHandler+0xc98>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d01d      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a70      	ldr	r2, [pc, #448]	; (80058e8 <HAL_DMA_IRQHandler+0xc9c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d018      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a6e      	ldr	r2, [pc, #440]	; (80058ec <HAL_DMA_IRQHandler+0xca0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a6d      	ldr	r2, [pc, #436]	; (80058f0 <HAL_DMA_IRQHandler+0xca4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d00e      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6b      	ldr	r2, [pc, #428]	; (80058f4 <HAL_DMA_IRQHandler+0xca8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d009      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a6a      	ldr	r2, [pc, #424]	; (80058f8 <HAL_DMA_IRQHandler+0xcac>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_DMA_IRQHandler+0xb12>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a68      	ldr	r2, [pc, #416]	; (80058fc <HAL_DMA_IRQHandler+0xcb0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d108      	bne.n	8005770 <HAL_DMA_IRQHandler+0xb24>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0208 	bic.w	r2, r2, #8
 800576c:	601a      	str	r2, [r3, #0]
 800576e:	e007      	b.n	8005780 <HAL_DMA_IRQHandler+0xb34>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0204 	bic.w	r2, r2, #4
 800577e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 8165 	beq.w	8005a54 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005792:	e15f      	b.n	8005a54 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005798:	f003 031f 	and.w	r3, r3, #31
 800579c:	2202      	movs	r2, #2
 800579e:	409a      	lsls	r2, r3
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f000 80c5 	beq.w	8005934 <HAL_DMA_IRQHandler+0xce8>
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f003 0302 	and.w	r3, r3, #2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 80bf 	beq.w	8005934 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ba:	f003 031f 	and.w	r3, r3, #31
 80057be:	2202      	movs	r2, #2
 80057c0:	409a      	lsls	r2, r3
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d018      	beq.n	8005802 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057de:	2b00      	cmp	r3, #0
 80057e0:	f000 813a 	beq.w	8005a58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ec:	e134      	b.n	8005a58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8130 	beq.w	8005a58 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005800:	e12a      	b.n	8005a58 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	f040 8089 	bne.w	8005920 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a2b      	ldr	r2, [pc, #172]	; (80058c0 <HAL_DMA_IRQHandler+0xc74>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d04a      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a29      	ldr	r2, [pc, #164]	; (80058c4 <HAL_DMA_IRQHandler+0xc78>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d045      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a28      	ldr	r2, [pc, #160]	; (80058c8 <HAL_DMA_IRQHandler+0xc7c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d040      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a26      	ldr	r2, [pc, #152]	; (80058cc <HAL_DMA_IRQHandler+0xc80>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d03b      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a25      	ldr	r2, [pc, #148]	; (80058d0 <HAL_DMA_IRQHandler+0xc84>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d036      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a23      	ldr	r2, [pc, #140]	; (80058d4 <HAL_DMA_IRQHandler+0xc88>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d031      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a22      	ldr	r2, [pc, #136]	; (80058d8 <HAL_DMA_IRQHandler+0xc8c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d02c      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a20      	ldr	r2, [pc, #128]	; (80058dc <HAL_DMA_IRQHandler+0xc90>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d027      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1f      	ldr	r2, [pc, #124]	; (80058e0 <HAL_DMA_IRQHandler+0xc94>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d022      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1d      	ldr	r2, [pc, #116]	; (80058e4 <HAL_DMA_IRQHandler+0xc98>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01d      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1c      	ldr	r2, [pc, #112]	; (80058e8 <HAL_DMA_IRQHandler+0xc9c>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d018      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1a      	ldr	r2, [pc, #104]	; (80058ec <HAL_DMA_IRQHandler+0xca0>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a19      	ldr	r2, [pc, #100]	; (80058f0 <HAL_DMA_IRQHandler+0xca4>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00e      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a17      	ldr	r2, [pc, #92]	; (80058f4 <HAL_DMA_IRQHandler+0xca8>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d009      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a16      	ldr	r2, [pc, #88]	; (80058f8 <HAL_DMA_IRQHandler+0xcac>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <HAL_DMA_IRQHandler+0xc62>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a14      	ldr	r2, [pc, #80]	; (80058fc <HAL_DMA_IRQHandler+0xcb0>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d128      	bne.n	8005900 <HAL_DMA_IRQHandler+0xcb4>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0214 	bic.w	r2, r2, #20
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e027      	b.n	8005910 <HAL_DMA_IRQHandler+0xcc4>
 80058c0:	40020010 	.word	0x40020010
 80058c4:	40020028 	.word	0x40020028
 80058c8:	40020040 	.word	0x40020040
 80058cc:	40020058 	.word	0x40020058
 80058d0:	40020070 	.word	0x40020070
 80058d4:	40020088 	.word	0x40020088
 80058d8:	400200a0 	.word	0x400200a0
 80058dc:	400200b8 	.word	0x400200b8
 80058e0:	40020410 	.word	0x40020410
 80058e4:	40020428 	.word	0x40020428
 80058e8:	40020440 	.word	0x40020440
 80058ec:	40020458 	.word	0x40020458
 80058f0:	40020470 	.word	0x40020470
 80058f4:	40020488 	.word	0x40020488
 80058f8:	400204a0 	.word	0x400204a0
 80058fc:	400204b8 	.word	0x400204b8
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 020a 	bic.w	r2, r2, #10
 800590e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005924:	2b00      	cmp	r3, #0
 8005926:	f000 8097 	beq.w	8005a58 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005932:	e091      	b.n	8005a58 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005938:	f003 031f 	and.w	r3, r3, #31
 800593c:	2208      	movs	r2, #8
 800593e:	409a      	lsls	r2, r3
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	4013      	ands	r3, r2
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8088 	beq.w	8005a5a <HAL_DMA_IRQHandler+0xe0e>
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8082 	beq.w	8005a5a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a41      	ldr	r2, [pc, #260]	; (8005a60 <HAL_DMA_IRQHandler+0xe14>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d04a      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a3f      	ldr	r2, [pc, #252]	; (8005a64 <HAL_DMA_IRQHandler+0xe18>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d045      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a3e      	ldr	r2, [pc, #248]	; (8005a68 <HAL_DMA_IRQHandler+0xe1c>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d040      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a3c      	ldr	r2, [pc, #240]	; (8005a6c <HAL_DMA_IRQHandler+0xe20>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d03b      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a3b      	ldr	r2, [pc, #236]	; (8005a70 <HAL_DMA_IRQHandler+0xe24>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d036      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a39      	ldr	r2, [pc, #228]	; (8005a74 <HAL_DMA_IRQHandler+0xe28>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d031      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a38      	ldr	r2, [pc, #224]	; (8005a78 <HAL_DMA_IRQHandler+0xe2c>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d02c      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a36      	ldr	r2, [pc, #216]	; (8005a7c <HAL_DMA_IRQHandler+0xe30>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d027      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a35      	ldr	r2, [pc, #212]	; (8005a80 <HAL_DMA_IRQHandler+0xe34>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d022      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a33      	ldr	r2, [pc, #204]	; (8005a84 <HAL_DMA_IRQHandler+0xe38>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d01d      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a32      	ldr	r2, [pc, #200]	; (8005a88 <HAL_DMA_IRQHandler+0xe3c>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d018      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a30      	ldr	r2, [pc, #192]	; (8005a8c <HAL_DMA_IRQHandler+0xe40>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d013      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a2f      	ldr	r2, [pc, #188]	; (8005a90 <HAL_DMA_IRQHandler+0xe44>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d00e      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a2d      	ldr	r2, [pc, #180]	; (8005a94 <HAL_DMA_IRQHandler+0xe48>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d009      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a2c      	ldr	r2, [pc, #176]	; (8005a98 <HAL_DMA_IRQHandler+0xe4c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d004      	beq.n	80059f6 <HAL_DMA_IRQHandler+0xdaa>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2a      	ldr	r2, [pc, #168]	; (8005a9c <HAL_DMA_IRQHandler+0xe50>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d108      	bne.n	8005a08 <HAL_DMA_IRQHandler+0xdbc>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 021c 	bic.w	r2, r2, #28
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e007      	b.n	8005a18 <HAL_DMA_IRQHandler+0xdcc>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 020e 	bic.w	r2, r2, #14
 8005a16:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1c:	f003 031f 	and.w	r3, r3, #31
 8005a20:	2201      	movs	r2, #1
 8005a22:	409a      	lsls	r2, r3
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
 8005a4e:	e004      	b.n	8005a5a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005a50:	bf00      	nop
 8005a52:	e002      	b.n	8005a5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a54:	bf00      	nop
 8005a56:	e000      	b.n	8005a5a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a58:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a5a:	3728      	adds	r7, #40	; 0x28
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40020010 	.word	0x40020010
 8005a64:	40020028 	.word	0x40020028
 8005a68:	40020040 	.word	0x40020040
 8005a6c:	40020058 	.word	0x40020058
 8005a70:	40020070 	.word	0x40020070
 8005a74:	40020088 	.word	0x40020088
 8005a78:	400200a0 	.word	0x400200a0
 8005a7c:	400200b8 	.word	0x400200b8
 8005a80:	40020410 	.word	0x40020410
 8005a84:	40020428 	.word	0x40020428
 8005a88:	40020440 	.word	0x40020440
 8005a8c:	40020458 	.word	0x40020458
 8005a90:	40020470 	.word	0x40020470
 8005a94:	40020488 	.word	0x40020488
 8005a98:	400204a0 	.word	0x400204a0
 8005a9c:	400204b8 	.word	0x400204b8

08005aa0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a7f      	ldr	r2, [pc, #508]	; (8005cbc <DMA_SetConfig+0x21c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d072      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a7d      	ldr	r2, [pc, #500]	; (8005cc0 <DMA_SetConfig+0x220>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d06d      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a7c      	ldr	r2, [pc, #496]	; (8005cc4 <DMA_SetConfig+0x224>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d068      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a7a      	ldr	r2, [pc, #488]	; (8005cc8 <DMA_SetConfig+0x228>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d063      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a79      	ldr	r2, [pc, #484]	; (8005ccc <DMA_SetConfig+0x22c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d05e      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a77      	ldr	r2, [pc, #476]	; (8005cd0 <DMA_SetConfig+0x230>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d059      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a76      	ldr	r2, [pc, #472]	; (8005cd4 <DMA_SetConfig+0x234>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d054      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a74      	ldr	r2, [pc, #464]	; (8005cd8 <DMA_SetConfig+0x238>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d04f      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a73      	ldr	r2, [pc, #460]	; (8005cdc <DMA_SetConfig+0x23c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d04a      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a71      	ldr	r2, [pc, #452]	; (8005ce0 <DMA_SetConfig+0x240>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d045      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a70      	ldr	r2, [pc, #448]	; (8005ce4 <DMA_SetConfig+0x244>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d040      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a6e      	ldr	r2, [pc, #440]	; (8005ce8 <DMA_SetConfig+0x248>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d03b      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a6d      	ldr	r2, [pc, #436]	; (8005cec <DMA_SetConfig+0x24c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d036      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a6b      	ldr	r2, [pc, #428]	; (8005cf0 <DMA_SetConfig+0x250>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d031      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a6a      	ldr	r2, [pc, #424]	; (8005cf4 <DMA_SetConfig+0x254>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d02c      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a68      	ldr	r2, [pc, #416]	; (8005cf8 <DMA_SetConfig+0x258>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d027      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a67      	ldr	r2, [pc, #412]	; (8005cfc <DMA_SetConfig+0x25c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a65      	ldr	r2, [pc, #404]	; (8005d00 <DMA_SetConfig+0x260>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01d      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a64      	ldr	r2, [pc, #400]	; (8005d04 <DMA_SetConfig+0x264>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d018      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a62      	ldr	r2, [pc, #392]	; (8005d08 <DMA_SetConfig+0x268>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a61      	ldr	r2, [pc, #388]	; (8005d0c <DMA_SetConfig+0x26c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a5f      	ldr	r2, [pc, #380]	; (8005d10 <DMA_SetConfig+0x270>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a5e      	ldr	r2, [pc, #376]	; (8005d14 <DMA_SetConfig+0x274>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <DMA_SetConfig+0x10a>
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a5c      	ldr	r2, [pc, #368]	; (8005d18 <DMA_SetConfig+0x278>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <DMA_SetConfig+0x10e>
 8005baa:	2301      	movs	r3, #1
 8005bac:	e000      	b.n	8005bb0 <DMA_SetConfig+0x110>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00d      	beq.n	8005bd0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005bbc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005bce:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a39      	ldr	r2, [pc, #228]	; (8005cbc <DMA_SetConfig+0x21c>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d04a      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a38      	ldr	r2, [pc, #224]	; (8005cc0 <DMA_SetConfig+0x220>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d045      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a36      	ldr	r2, [pc, #216]	; (8005cc4 <DMA_SetConfig+0x224>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d040      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a35      	ldr	r2, [pc, #212]	; (8005cc8 <DMA_SetConfig+0x228>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d03b      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a33      	ldr	r2, [pc, #204]	; (8005ccc <DMA_SetConfig+0x22c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d036      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a32      	ldr	r2, [pc, #200]	; (8005cd0 <DMA_SetConfig+0x230>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d031      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a30      	ldr	r2, [pc, #192]	; (8005cd4 <DMA_SetConfig+0x234>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d02c      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a2f      	ldr	r2, [pc, #188]	; (8005cd8 <DMA_SetConfig+0x238>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d027      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a2d      	ldr	r2, [pc, #180]	; (8005cdc <DMA_SetConfig+0x23c>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d022      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a2c      	ldr	r2, [pc, #176]	; (8005ce0 <DMA_SetConfig+0x240>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d01d      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a2a      	ldr	r2, [pc, #168]	; (8005ce4 <DMA_SetConfig+0x244>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d018      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a29      	ldr	r2, [pc, #164]	; (8005ce8 <DMA_SetConfig+0x248>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d013      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a27      	ldr	r2, [pc, #156]	; (8005cec <DMA_SetConfig+0x24c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00e      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a26      	ldr	r2, [pc, #152]	; (8005cf0 <DMA_SetConfig+0x250>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d009      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a24      	ldr	r2, [pc, #144]	; (8005cf4 <DMA_SetConfig+0x254>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d004      	beq.n	8005c70 <DMA_SetConfig+0x1d0>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a23      	ldr	r2, [pc, #140]	; (8005cf8 <DMA_SetConfig+0x258>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d101      	bne.n	8005c74 <DMA_SetConfig+0x1d4>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <DMA_SetConfig+0x1d6>
 8005c74:	2300      	movs	r3, #0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d059      	beq.n	8005d2e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7e:	f003 031f 	and.w	r3, r3, #31
 8005c82:	223f      	movs	r2, #63	; 0x3f
 8005c84:	409a      	lsls	r2, r3
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005c98:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	2b40      	cmp	r3, #64	; 0x40
 8005ca8:	d138      	bne.n	8005d1c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cba:	e086      	b.n	8005dca <DMA_SetConfig+0x32a>
 8005cbc:	40020010 	.word	0x40020010
 8005cc0:	40020028 	.word	0x40020028
 8005cc4:	40020040 	.word	0x40020040
 8005cc8:	40020058 	.word	0x40020058
 8005ccc:	40020070 	.word	0x40020070
 8005cd0:	40020088 	.word	0x40020088
 8005cd4:	400200a0 	.word	0x400200a0
 8005cd8:	400200b8 	.word	0x400200b8
 8005cdc:	40020410 	.word	0x40020410
 8005ce0:	40020428 	.word	0x40020428
 8005ce4:	40020440 	.word	0x40020440
 8005ce8:	40020458 	.word	0x40020458
 8005cec:	40020470 	.word	0x40020470
 8005cf0:	40020488 	.word	0x40020488
 8005cf4:	400204a0 	.word	0x400204a0
 8005cf8:	400204b8 	.word	0x400204b8
 8005cfc:	58025408 	.word	0x58025408
 8005d00:	5802541c 	.word	0x5802541c
 8005d04:	58025430 	.word	0x58025430
 8005d08:	58025444 	.word	0x58025444
 8005d0c:	58025458 	.word	0x58025458
 8005d10:	5802546c 	.word	0x5802546c
 8005d14:	58025480 	.word	0x58025480
 8005d18:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	60da      	str	r2, [r3, #12]
}
 8005d2c:	e04d      	b.n	8005dca <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a29      	ldr	r2, [pc, #164]	; (8005dd8 <DMA_SetConfig+0x338>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d022      	beq.n	8005d7e <DMA_SetConfig+0x2de>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a27      	ldr	r2, [pc, #156]	; (8005ddc <DMA_SetConfig+0x33c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d01d      	beq.n	8005d7e <DMA_SetConfig+0x2de>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a26      	ldr	r2, [pc, #152]	; (8005de0 <DMA_SetConfig+0x340>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d018      	beq.n	8005d7e <DMA_SetConfig+0x2de>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a24      	ldr	r2, [pc, #144]	; (8005de4 <DMA_SetConfig+0x344>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d013      	beq.n	8005d7e <DMA_SetConfig+0x2de>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a23      	ldr	r2, [pc, #140]	; (8005de8 <DMA_SetConfig+0x348>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d00e      	beq.n	8005d7e <DMA_SetConfig+0x2de>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a21      	ldr	r2, [pc, #132]	; (8005dec <DMA_SetConfig+0x34c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d009      	beq.n	8005d7e <DMA_SetConfig+0x2de>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a20      	ldr	r2, [pc, #128]	; (8005df0 <DMA_SetConfig+0x350>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d004      	beq.n	8005d7e <DMA_SetConfig+0x2de>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <DMA_SetConfig+0x354>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d101      	bne.n	8005d82 <DMA_SetConfig+0x2e2>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e000      	b.n	8005d84 <DMA_SetConfig+0x2e4>
 8005d82:	2300      	movs	r3, #0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d020      	beq.n	8005dca <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d8c:	f003 031f 	and.w	r3, r3, #31
 8005d90:	2201      	movs	r2, #1
 8005d92:	409a      	lsls	r2, r3
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d108      	bne.n	8005dba <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	60da      	str	r2, [r3, #12]
}
 8005db8:	e007      	b.n	8005dca <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	60da      	str	r2, [r3, #12]
}
 8005dca:	bf00      	nop
 8005dcc:	371c      	adds	r7, #28
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	58025408 	.word	0x58025408
 8005ddc:	5802541c 	.word	0x5802541c
 8005de0:	58025430 	.word	0x58025430
 8005de4:	58025444 	.word	0x58025444
 8005de8:	58025458 	.word	0x58025458
 8005dec:	5802546c 	.word	0x5802546c
 8005df0:	58025480 	.word	0x58025480
 8005df4:	58025494 	.word	0x58025494

08005df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a42      	ldr	r2, [pc, #264]	; (8005f10 <DMA_CalcBaseAndBitshift+0x118>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d04a      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a41      	ldr	r2, [pc, #260]	; (8005f14 <DMA_CalcBaseAndBitshift+0x11c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d045      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a3f      	ldr	r2, [pc, #252]	; (8005f18 <DMA_CalcBaseAndBitshift+0x120>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d040      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a3e      	ldr	r2, [pc, #248]	; (8005f1c <DMA_CalcBaseAndBitshift+0x124>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d03b      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a3c      	ldr	r2, [pc, #240]	; (8005f20 <DMA_CalcBaseAndBitshift+0x128>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d036      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a3b      	ldr	r2, [pc, #236]	; (8005f24 <DMA_CalcBaseAndBitshift+0x12c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d031      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a39      	ldr	r2, [pc, #228]	; (8005f28 <DMA_CalcBaseAndBitshift+0x130>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d02c      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a38      	ldr	r2, [pc, #224]	; (8005f2c <DMA_CalcBaseAndBitshift+0x134>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d027      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a36      	ldr	r2, [pc, #216]	; (8005f30 <DMA_CalcBaseAndBitshift+0x138>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a35      	ldr	r2, [pc, #212]	; (8005f34 <DMA_CalcBaseAndBitshift+0x13c>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d01d      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a33      	ldr	r2, [pc, #204]	; (8005f38 <DMA_CalcBaseAndBitshift+0x140>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a32      	ldr	r2, [pc, #200]	; (8005f3c <DMA_CalcBaseAndBitshift+0x144>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a30      	ldr	r2, [pc, #192]	; (8005f40 <DMA_CalcBaseAndBitshift+0x148>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a2f      	ldr	r2, [pc, #188]	; (8005f44 <DMA_CalcBaseAndBitshift+0x14c>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a2d      	ldr	r2, [pc, #180]	; (8005f48 <DMA_CalcBaseAndBitshift+0x150>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <DMA_CalcBaseAndBitshift+0xa8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <DMA_CalcBaseAndBitshift+0x154>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d101      	bne.n	8005ea4 <DMA_CalcBaseAndBitshift+0xac>
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e000      	b.n	8005ea6 <DMA_CalcBaseAndBitshift+0xae>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d024      	beq.n	8005ef4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	3b10      	subs	r3, #16
 8005eb2:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <DMA_CalcBaseAndBitshift+0x158>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	091b      	lsrs	r3, r3, #4
 8005eba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 0307 	and.w	r3, r3, #7
 8005ec2:	4a24      	ldr	r2, [pc, #144]	; (8005f54 <DMA_CalcBaseAndBitshift+0x15c>)
 8005ec4:	5cd3      	ldrb	r3, [r2, r3]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b03      	cmp	r3, #3
 8005ed0:	d908      	bls.n	8005ee4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	4b1f      	ldr	r3, [pc, #124]	; (8005f58 <DMA_CalcBaseAndBitshift+0x160>)
 8005eda:	4013      	ands	r3, r2
 8005edc:	1d1a      	adds	r2, r3, #4
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	659a      	str	r2, [r3, #88]	; 0x58
 8005ee2:	e00d      	b.n	8005f00 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	4b1b      	ldr	r3, [pc, #108]	; (8005f58 <DMA_CalcBaseAndBitshift+0x160>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8005ef2:	e005      	b.n	8005f00 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3714      	adds	r7, #20
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	40020010 	.word	0x40020010
 8005f14:	40020028 	.word	0x40020028
 8005f18:	40020040 	.word	0x40020040
 8005f1c:	40020058 	.word	0x40020058
 8005f20:	40020070 	.word	0x40020070
 8005f24:	40020088 	.word	0x40020088
 8005f28:	400200a0 	.word	0x400200a0
 8005f2c:	400200b8 	.word	0x400200b8
 8005f30:	40020410 	.word	0x40020410
 8005f34:	40020428 	.word	0x40020428
 8005f38:	40020440 	.word	0x40020440
 8005f3c:	40020458 	.word	0x40020458
 8005f40:	40020470 	.word	0x40020470
 8005f44:	40020488 	.word	0x40020488
 8005f48:	400204a0 	.word	0x400204a0
 8005f4c:	400204b8 	.word	0x400204b8
 8005f50:	aaaaaaab 	.word	0xaaaaaaab
 8005f54:	0800cc30 	.word	0x0800cc30
 8005f58:	fffffc00 	.word	0xfffffc00

08005f5c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f64:	2300      	movs	r3, #0
 8005f66:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d120      	bne.n	8005fb2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f74:	2b03      	cmp	r3, #3
 8005f76:	d858      	bhi.n	800602a <DMA_CheckFifoParam+0xce>
 8005f78:	a201      	add	r2, pc, #4	; (adr r2, 8005f80 <DMA_CheckFifoParam+0x24>)
 8005f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f7e:	bf00      	nop
 8005f80:	08005f91 	.word	0x08005f91
 8005f84:	08005fa3 	.word	0x08005fa3
 8005f88:	08005f91 	.word	0x08005f91
 8005f8c:	0800602b 	.word	0x0800602b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d048      	beq.n	800602e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fa0:	e045      	b.n	800602e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005faa:	d142      	bne.n	8006032 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005fb0:	e03f      	b.n	8006032 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fba:	d123      	bne.n	8006004 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc0:	2b03      	cmp	r3, #3
 8005fc2:	d838      	bhi.n	8006036 <DMA_CheckFifoParam+0xda>
 8005fc4:	a201      	add	r2, pc, #4	; (adr r2, 8005fcc <DMA_CheckFifoParam+0x70>)
 8005fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fca:	bf00      	nop
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	08005fe3 	.word	0x08005fe3
 8005fd4:	08005fdd 	.word	0x08005fdd
 8005fd8:	08005ff5 	.word	0x08005ff5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	73fb      	strb	r3, [r7, #15]
        break;
 8005fe0:	e030      	b.n	8006044 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d025      	beq.n	800603a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ff2:	e022      	b.n	800603a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ffc:	d11f      	bne.n	800603e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006002:	e01c      	b.n	800603e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006008:	2b02      	cmp	r3, #2
 800600a:	d902      	bls.n	8006012 <DMA_CheckFifoParam+0xb6>
 800600c:	2b03      	cmp	r3, #3
 800600e:	d003      	beq.n	8006018 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006010:	e018      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	73fb      	strb	r3, [r7, #15]
        break;
 8006016:	e015      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00e      	beq.n	8006042 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	73fb      	strb	r3, [r7, #15]
    break;
 8006028:	e00b      	b.n	8006042 <DMA_CheckFifoParam+0xe6>
        break;
 800602a:	bf00      	nop
 800602c:	e00a      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
        break;
 800602e:	bf00      	nop
 8006030:	e008      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
        break;
 8006032:	bf00      	nop
 8006034:	e006      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
        break;
 8006036:	bf00      	nop
 8006038:	e004      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
        break;
 800603a:	bf00      	nop
 800603c:	e002      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
        break;
 800603e:	bf00      	nop
 8006040:	e000      	b.n	8006044 <DMA_CheckFifoParam+0xe8>
    break;
 8006042:	bf00      	nop
    }
  }

  return status;
 8006044:	7bfb      	ldrb	r3, [r7, #15]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop

08006054 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a38      	ldr	r2, [pc, #224]	; (8006148 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d022      	beq.n	80060b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a36      	ldr	r2, [pc, #216]	; (800614c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d01d      	beq.n	80060b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a35      	ldr	r2, [pc, #212]	; (8006150 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d018      	beq.n	80060b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a33      	ldr	r2, [pc, #204]	; (8006154 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d013      	beq.n	80060b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a32      	ldr	r2, [pc, #200]	; (8006158 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d00e      	beq.n	80060b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a30      	ldr	r2, [pc, #192]	; (800615c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d009      	beq.n	80060b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2f      	ldr	r2, [pc, #188]	; (8006160 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d004      	beq.n	80060b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a2d      	ldr	r2, [pc, #180]	; (8006164 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d101      	bne.n	80060b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e000      	b.n	80060b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80060b6:	2300      	movs	r3, #0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d01a      	beq.n	80060f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	3b08      	subs	r3, #8
 80060c4:	4a28      	ldr	r2, [pc, #160]	; (8006168 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80060c6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ca:	091b      	lsrs	r3, r3, #4
 80060cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	4b26      	ldr	r3, [pc, #152]	; (800616c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	461a      	mov	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a24      	ldr	r2, [pc, #144]	; (8006170 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80060e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f003 031f 	and.w	r3, r3, #31
 80060e8:	2201      	movs	r2, #1
 80060ea:	409a      	lsls	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80060f0:	e024      	b.n	800613c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	3b10      	subs	r3, #16
 80060fa:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4a1c      	ldr	r2, [pc, #112]	; (8006178 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d806      	bhi.n	800611a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4a1b      	ldr	r2, [pc, #108]	; (800617c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d902      	bls.n	800611a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	3308      	adds	r3, #8
 8006118:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800611a:	68fa      	ldr	r2, [r7, #12]
 800611c:	4b18      	ldr	r3, [pc, #96]	; (8006180 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	461a      	mov	r2, r3
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a16      	ldr	r2, [pc, #88]	; (8006184 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800612c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f003 031f 	and.w	r3, r3, #31
 8006134:	2201      	movs	r2, #1
 8006136:	409a      	lsls	r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800613c:	bf00      	nop
 800613e:	3714      	adds	r7, #20
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	58025408 	.word	0x58025408
 800614c:	5802541c 	.word	0x5802541c
 8006150:	58025430 	.word	0x58025430
 8006154:	58025444 	.word	0x58025444
 8006158:	58025458 	.word	0x58025458
 800615c:	5802546c 	.word	0x5802546c
 8006160:	58025480 	.word	0x58025480
 8006164:	58025494 	.word	0x58025494
 8006168:	cccccccd 	.word	0xcccccccd
 800616c:	16009600 	.word	0x16009600
 8006170:	58025880 	.word	0x58025880
 8006174:	aaaaaaab 	.word	0xaaaaaaab
 8006178:	400204b8 	.word	0x400204b8
 800617c:	4002040f 	.word	0x4002040f
 8006180:	10008200 	.word	0x10008200
 8006184:	40020880 	.word	0x40020880

08006188 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	b2db      	uxtb	r3, r3
 8006196:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d04a      	beq.n	8006234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	d847      	bhi.n	8006234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a25      	ldr	r2, [pc, #148]	; (8006240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d022      	beq.n	80061f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a24      	ldr	r2, [pc, #144]	; (8006244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d01d      	beq.n	80061f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a22      	ldr	r2, [pc, #136]	; (8006248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d018      	beq.n	80061f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a21      	ldr	r2, [pc, #132]	; (800624c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d013      	beq.n	80061f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00e      	beq.n	80061f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a1e      	ldr	r2, [pc, #120]	; (8006254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d009      	beq.n	80061f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1c      	ldr	r2, [pc, #112]	; (8006258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d004      	beq.n	80061f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1b      	ldr	r2, [pc, #108]	; (800625c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d101      	bne.n	80061f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80061f4:	2301      	movs	r3, #1
 80061f6:	e000      	b.n	80061fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80061f8:	2300      	movs	r3, #0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	461a      	mov	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a15      	ldr	r2, [pc, #84]	; (8006264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006210:	671a      	str	r2, [r3, #112]	; 0x70
 8006212:	e009      	b.n	8006228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4b14      	ldr	r3, [pc, #80]	; (8006268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	461a      	mov	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a11      	ldr	r2, [pc, #68]	; (800626c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006226:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3b01      	subs	r3, #1
 800622c:	2201      	movs	r2, #1
 800622e:	409a      	lsls	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006234:	bf00      	nop
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr
 8006240:	58025408 	.word	0x58025408
 8006244:	5802541c 	.word	0x5802541c
 8006248:	58025430 	.word	0x58025430
 800624c:	58025444 	.word	0x58025444
 8006250:	58025458 	.word	0x58025458
 8006254:	5802546c 	.word	0x5802546c
 8006258:	58025480 	.word	0x58025480
 800625c:	58025494 	.word	0x58025494
 8006260:	1600963f 	.word	0x1600963f
 8006264:	58025940 	.word	0x58025940
 8006268:	1000823f 	.word	0x1000823f
 800626c:	40020940 	.word	0x40020940

08006270 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d101      	bne.n	8006282 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e0e3      	b.n	800644a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006288:	2b00      	cmp	r3, #0
 800628a:	d106      	bne.n	800629a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2223      	movs	r2, #35	; 0x23
 8006290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f7fa fd83 	bl	8000da0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800629a:	4b6e      	ldr	r3, [pc, #440]	; (8006454 <HAL_ETH_Init+0x1e4>)
 800629c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062a0:	4a6c      	ldr	r2, [pc, #432]	; (8006454 <HAL_ETH_Init+0x1e4>)
 80062a2:	f043 0302 	orr.w	r3, r3, #2
 80062a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80062aa:	4b6a      	ldr	r3, [pc, #424]	; (8006454 <HAL_ETH_Init+0x1e4>)
 80062ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062b0:	f003 0302 	and.w	r3, r3, #2
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	7a1b      	ldrb	r3, [r3, #8]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d103      	bne.n	80062c8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80062c0:	2000      	movs	r0, #0
 80062c2:	f7fc fae3 	bl	800288c <HAL_SYSCFG_ETHInterfaceSelect>
 80062c6:	e003      	b.n	80062d0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80062c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80062cc:	f7fc fade 	bl	800288c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80062d0:	4b61      	ldr	r3, [pc, #388]	; (8006458 <HAL_ETH_Init+0x1e8>)
 80062d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	6812      	ldr	r2, [r2, #0]
 80062e2:	f043 0301 	orr.w	r3, r3, #1
 80062e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80062ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062ec:	f7fc fa92 	bl	8002814 <HAL_GetTick>
 80062f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80062f2:	e011      	b.n	8006318 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80062f4:	f7fc fa8e 	bl	8002814 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006302:	d909      	bls.n	8006318 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2204      	movs	r2, #4
 8006308:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	22e0      	movs	r2, #224	; 0xe0
 8006310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e098      	b.n	800644a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e4      	bne.n	80062f4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f89e 	bl	800646c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006330:	f002 f9f8 	bl	8008724 <HAL_RCC_GetHCLKFreq>
 8006334:	4603      	mov	r3, r0
 8006336:	4a49      	ldr	r2, [pc, #292]	; (800645c <HAL_ETH_Init+0x1ec>)
 8006338:	fba2 2303 	umull	r2, r3, r2, r3
 800633c:	0c9a      	lsrs	r2, r3, #18
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3a01      	subs	r2, #1
 8006344:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 fa81 	bl	8006850 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006356:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800635a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006366:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800636a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d009      	beq.n	800638e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	22e0      	movs	r2, #224	; 0xe0
 8006386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e05d      	b.n	800644a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006396:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800639a:	4b31      	ldr	r3, [pc, #196]	; (8006460 <HAL_ETH_Init+0x1f0>)
 800639c:	4013      	ands	r3, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	6952      	ldr	r2, [r2, #20]
 80063a2:	0051      	lsls	r1, r2, #1
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6812      	ldr	r2, [r2, #0]
 80063a8:	430b      	orrs	r3, r1
 80063aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80063ae:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fae9 	bl	800698a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fb2f 	bl	8006a1c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	3305      	adds	r3, #5
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	021a      	lsls	r2, r3, #8
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	3304      	adds	r3, #4
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	4619      	mov	r1, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	3303      	adds	r3, #3
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	061a      	lsls	r2, r3, #24
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	3302      	adds	r3, #2
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	041b      	lsls	r3, r3, #16
 80063f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	3301      	adds	r3, #1
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80063fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800640a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800640c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	4b11      	ldr	r3, [pc, #68]	; (8006464 <HAL_ETH_Init+0x1f4>)
 800641e:	430b      	orrs	r3, r1
 8006420:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <HAL_ETH_Init+0x1f8>)
 8006432:	430b      	orrs	r3, r1
 8006434:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2200      	movs	r2, #0
 800643c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2210      	movs	r2, #16
 8006444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	58024400 	.word	0x58024400
 8006458:	58000400 	.word	0x58000400
 800645c:	431bde83 	.word	0x431bde83
 8006460:	ffff8001 	.word	0xffff8001
 8006464:	0c020060 	.word	0x0c020060
 8006468:	0c20c000 	.word	0x0c20c000

0800646c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800647c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006484:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006486:	f002 f94d 	bl	8008724 <HAL_RCC_GetHCLKFreq>
 800648a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4a1a      	ldr	r2, [pc, #104]	; (80064f8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d804      	bhi.n	800649e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	e022      	b.n	80064e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4a16      	ldr	r2, [pc, #88]	; (80064fc <HAL_ETH_SetMDIOClockRange+0x90>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d204      	bcs.n	80064b0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80064ac:	60fb      	str	r3, [r7, #12]
 80064ae:	e019      	b.n	80064e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	4a13      	ldr	r2, [pc, #76]	; (8006500 <HAL_ETH_SetMDIOClockRange+0x94>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d915      	bls.n	80064e4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4a12      	ldr	r2, [pc, #72]	; (8006504 <HAL_ETH_SetMDIOClockRange+0x98>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d804      	bhi.n	80064ca <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e00c      	b.n	80064e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4a0e      	ldr	r2, [pc, #56]	; (8006508 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d804      	bhi.n	80064dc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064d8:	60fb      	str	r3, [r7, #12]
 80064da:	e003      	b.n	80064e4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80064e2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80064ee:	bf00      	nop
 80064f0:	3710      	adds	r7, #16
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	02160ebf 	.word	0x02160ebf
 80064fc:	03938700 	.word	0x03938700
 8006500:	05f5e0ff 	.word	0x05f5e0ff
 8006504:	08f0d17f 	.word	0x08f0d17f
 8006508:	0ee6b27f 	.word	0x0ee6b27f

0800650c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800651e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	791b      	ldrb	r3, [r3, #4]
 8006524:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006526:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	7b1b      	ldrb	r3, [r3, #12]
 800652c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800652e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	7b5b      	ldrb	r3, [r3, #13]
 8006534:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006536:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	7b9b      	ldrb	r3, [r3, #14]
 800653c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800653e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	7bdb      	ldrb	r3, [r3, #15]
 8006544:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006546:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	7c12      	ldrb	r2, [r2, #16]
 800654c:	2a00      	cmp	r2, #0
 800654e:	d102      	bne.n	8006556 <ETH_SetMACConfig+0x4a>
 8006550:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006554:	e000      	b.n	8006558 <ETH_SetMACConfig+0x4c>
 8006556:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006558:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	7c52      	ldrb	r2, [r2, #17]
 800655e:	2a00      	cmp	r2, #0
 8006560:	d102      	bne.n	8006568 <ETH_SetMACConfig+0x5c>
 8006562:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006566:	e000      	b.n	800656a <ETH_SetMACConfig+0x5e>
 8006568:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800656a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	7c9b      	ldrb	r3, [r3, #18]
 8006570:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006572:	431a      	orrs	r2, r3
               macconf->Speed |
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006578:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800657e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	7f1b      	ldrb	r3, [r3, #28]
 8006584:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	7f5b      	ldrb	r3, [r3, #29]
 800658c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800658e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	7f92      	ldrb	r2, [r2, #30]
 8006594:	2a00      	cmp	r2, #0
 8006596:	d102      	bne.n	800659e <ETH_SetMACConfig+0x92>
 8006598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800659c:	e000      	b.n	80065a0 <ETH_SetMACConfig+0x94>
 800659e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80065a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	7fdb      	ldrb	r3, [r3, #31]
 80065a6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80065a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	d102      	bne.n	80065ba <ETH_SetMACConfig+0xae>
 80065b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065b8:	e000      	b.n	80065bc <ETH_SetMACConfig+0xb0>
 80065ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80065bc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80065c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065ca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80065cc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80065d2:	4313      	orrs	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4b56      	ldr	r3, [pc, #344]	; (8006738 <ETH_SetMACConfig+0x22c>)
 80065de:	4013      	ands	r3, r2
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	6812      	ldr	r2, [r2, #0]
 80065e4:	68f9      	ldr	r1, [r7, #12]
 80065e6:	430b      	orrs	r3, r1
 80065e8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80065f6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80065f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006600:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006602:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800660a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800660c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006614:	2a00      	cmp	r2, #0
 8006616:	d102      	bne.n	800661e <ETH_SetMACConfig+0x112>
 8006618:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800661c:	e000      	b.n	8006620 <ETH_SetMACConfig+0x114>
 800661e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006620:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	4b42      	ldr	r3, [pc, #264]	; (800673c <ETH_SetMACConfig+0x230>)
 8006632:	4013      	ands	r3, r2
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	68f9      	ldr	r1, [r7, #12]
 800663a:	430b      	orrs	r3, r1
 800663c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006644:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	4b3a      	ldr	r3, [pc, #232]	; (8006740 <ETH_SetMACConfig+0x234>)
 8006656:	4013      	ands	r3, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	68f9      	ldr	r1, [r7, #12]
 800665e:	430b      	orrs	r3, r1
 8006660:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006668:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800666e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006676:	2a00      	cmp	r2, #0
 8006678:	d101      	bne.n	800667e <ETH_SetMACConfig+0x172>
 800667a:	2280      	movs	r2, #128	; 0x80
 800667c:	e000      	b.n	8006680 <ETH_SetMACConfig+0x174>
 800667e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006680:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006686:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006692:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006696:	4013      	ands	r3, r2
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	6812      	ldr	r2, [r2, #0]
 800669c:	68f9      	ldr	r1, [r7, #12]
 800669e:	430b      	orrs	r3, r1
 80066a0:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80066a8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80066b0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066be:	f023 0103 	bic.w	r1, r3, #3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80066d6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80066ec:	683a      	ldr	r2, [r7, #0]
 80066ee:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80066f2:	2a00      	cmp	r2, #0
 80066f4:	d101      	bne.n	80066fa <ETH_SetMACConfig+0x1ee>
 80066f6:	2240      	movs	r2, #64	; 0x40
 80066f8:	e000      	b.n	80066fc <ETH_SetMACConfig+0x1f0>
 80066fa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80066fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006704:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006706:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800670e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800671c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	430a      	orrs	r2, r1
 8006728:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800672c:	bf00      	nop
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	00048083 	.word	0x00048083
 800673c:	c0f88000 	.word	0xc0f88000
 8006740:	fffffef0 	.word	0xfffffef0

08006744 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	4b38      	ldr	r3, [pc, #224]	; (800683c <ETH_SetDMAConfig+0xf8>)
 800675a:	4013      	ands	r3, r2
 800675c:	683a      	ldr	r2, [r7, #0]
 800675e:	6811      	ldr	r1, [r2, #0]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	430b      	orrs	r3, r1
 8006766:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800676a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	791b      	ldrb	r3, [r3, #4]
 8006770:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006776:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	7b1b      	ldrb	r3, [r3, #12]
 800677c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800677e:	4313      	orrs	r3, r2
 8006780:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	4b2c      	ldr	r3, [pc, #176]	; (8006840 <ETH_SetDMAConfig+0xfc>)
 800678e:	4013      	ands	r3, r2
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	68f9      	ldr	r1, [r7, #12]
 8006796:	430b      	orrs	r3, r1
 8006798:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800679c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	7b5b      	ldrb	r3, [r3, #13]
 80067a2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067b4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80067b8:	4b22      	ldr	r3, [pc, #136]	; (8006844 <ETH_SetDMAConfig+0x100>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	68f9      	ldr	r1, [r7, #12]
 80067c2:	430b      	orrs	r3, r1
 80067c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067c8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	7d1b      	ldrb	r3, [r3, #20]
 80067d4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80067d6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	7f5b      	ldrb	r3, [r3, #29]
 80067dc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80067de:	4313      	orrs	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ea:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80067ee:	4b16      	ldr	r3, [pc, #88]	; (8006848 <ETH_SetDMAConfig+0x104>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	430b      	orrs	r3, r1
 80067fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067fe:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	7f1b      	ldrb	r3, [r3, #28]
 8006806:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800680c:	4313      	orrs	r3, r2
 800680e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006818:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800681c:	4b0b      	ldr	r3, [pc, #44]	; (800684c <ETH_SetDMAConfig+0x108>)
 800681e:	4013      	ands	r3, r2
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6812      	ldr	r2, [r2, #0]
 8006824:	68f9      	ldr	r1, [r7, #12]
 8006826:	430b      	orrs	r3, r1
 8006828:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800682c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006830:	bf00      	nop
 8006832:	3714      	adds	r7, #20
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr
 800683c:	ffff87fd 	.word	0xffff87fd
 8006840:	ffff2ffe 	.word	0xffff2ffe
 8006844:	fffec000 	.word	0xfffec000
 8006848:	ffc0efef 	.word	0xffc0efef
 800684c:	7fc0ffff 	.word	0x7fc0ffff

08006850 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b0a4      	sub	sp, #144	; 0x90
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006858:	2301      	movs	r3, #1
 800685a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800685e:	2300      	movs	r3, #0
 8006860:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006862:	2300      	movs	r3, #0
 8006864:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006868:	2300      	movs	r3, #0
 800686a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800686e:	2301      	movs	r3, #1
 8006870:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006874:	2301      	movs	r3, #1
 8006876:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006880:	2300      	movs	r3, #0
 8006882:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006886:	2301      	movs	r3, #1
 8006888:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800688c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006890:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006892:	2300      	movs	r3, #0
 8006894:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8006898:	2300      	movs	r3, #0
 800689a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800689c:	2300      	movs	r3, #0
 800689e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80068a8:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80068ac:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80068ae:	2300      	movs	r3, #0
 80068b0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80068b4:	2300      	movs	r3, #0
 80068b6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80068be:	2300      	movs	r3, #0
 80068c0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80068c4:	2300      	movs	r3, #0
 80068c6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80068ca:	2300      	movs	r3, #0
 80068cc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80068d2:	2300      	movs	r3, #0
 80068d4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80068d6:	2300      	movs	r3, #0
 80068d8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80068dc:	2300      	movs	r3, #0
 80068de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80068e8:	2320      	movs	r3, #32
 80068ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80068f4:	2300      	movs	r3, #0
 80068f6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80068fa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006904:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006906:	2300      	movs	r3, #0
 8006908:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800690c:	2302      	movs	r3, #2
 800690e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006912:	2300      	movs	r3, #0
 8006914:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006918:	2300      	movs	r3, #0
 800691a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800691e:	2300      	movs	r3, #0
 8006920:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006924:	2301      	movs	r3, #1
 8006926:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800692a:	2300      	movs	r3, #0
 800692c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800692e:	2301      	movs	r3, #1
 8006930:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006934:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006938:	4619      	mov	r1, r3
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f7ff fde6 	bl	800650c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006940:	2301      	movs	r3, #1
 8006942:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006944:	2301      	movs	r3, #1
 8006946:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006948:	2300      	movs	r3, #0
 800694a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800694c:	2300      	movs	r3, #0
 800694e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006952:	2300      	movs	r3, #0
 8006954:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006956:	2300      	movs	r3, #0
 8006958:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800695a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800695e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006960:	2300      	movs	r3, #0
 8006962:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006964:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006968:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800696a:	2300      	movs	r3, #0
 800696c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006970:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006974:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006976:	f107 0308 	add.w	r3, r7, #8
 800697a:	4619      	mov	r1, r3
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7ff fee1 	bl	8006744 <ETH_SetDMAConfig>
}
 8006982:	bf00      	nop
 8006984:	3790      	adds	r7, #144	; 0x90
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800698a:	b480      	push	{r7}
 800698c:	b085      	sub	sp, #20
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	e01d      	b.n	80069d4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68d9      	ldr	r1, [r3, #12]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4613      	mov	r3, r2
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	4413      	add	r3, r2
 80069a4:	00db      	lsls	r3, r3, #3
 80069a6:	440b      	add	r3, r1
 80069a8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2200      	movs	r2, #0
 80069ae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	2200      	movs	r2, #0
 80069b4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2200      	movs	r2, #0
 80069ba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2200      	movs	r2, #0
 80069c0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	3206      	adds	r2, #6
 80069ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	3301      	adds	r3, #1
 80069d2:	60fb      	str	r3, [r7, #12]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	d9de      	bls.n	8006998 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e8:	461a      	mov	r2, r3
 80069ea:	2303      	movs	r3, #3
 80069ec:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68da      	ldr	r2, [r3, #12]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069fc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	68da      	ldr	r2, [r3, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a0c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006a10:	bf00      	nop
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e023      	b.n	8006a72 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6919      	ldr	r1, [r3, #16]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4613      	mov	r3, r2
 8006a32:	005b      	lsls	r3, r3, #1
 8006a34:	4413      	add	r3, r2
 8006a36:	00db      	lsls	r3, r3, #3
 8006a38:	440b      	add	r3, r1
 8006a3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	2200      	movs	r2, #0
 8006a46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2200      	movs	r2, #0
 8006a52:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	2200      	movs	r2, #0
 8006a58:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	3212      	adds	r2, #18
 8006a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d9d8      	bls.n	8006a2a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	691a      	ldr	r2, [r3, #16]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ac6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b098      	sub	sp, #96	; 0x60
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006ae0:	4a84      	ldr	r2, [pc, #528]	; (8006cf4 <HAL_FDCAN_Init+0x21c>)
 8006ae2:	f107 030c 	add.w	r3, r7, #12
 8006ae6:	4611      	mov	r1, r2
 8006ae8:	224c      	movs	r2, #76	; 0x4c
 8006aea:	4618      	mov	r0, r3
 8006aec:	f006 f858 	bl	800cba0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e1c6      	b.n	8006e88 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a7e      	ldr	r2, [pc, #504]	; (8006cf8 <HAL_FDCAN_Init+0x220>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d106      	bne.n	8006b12 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7fa fa4a 	bl	8000fc0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699a      	ldr	r2, [r3, #24]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0210 	bic.w	r2, r2, #16
 8006b3a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b3c:	f7fb fe6a 	bl	8002814 <HAL_GetTick>
 8006b40:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b42:	e014      	b.n	8006b6e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b44:	f7fb fe66 	bl	8002814 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b0a      	cmp	r3, #10
 8006b50:	d90d      	bls.n	8006b6e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b58:	f043 0201 	orr.w	r2, r3, #1
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2203      	movs	r2, #3
 8006b66:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e18c      	b.n	8006e88 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f003 0308 	and.w	r3, r3, #8
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d0e3      	beq.n	8006b44 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	699a      	ldr	r2, [r3, #24]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f042 0201 	orr.w	r2, r2, #1
 8006b8a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b8c:	f7fb fe42 	bl	8002814 <HAL_GetTick>
 8006b90:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b92:	e014      	b.n	8006bbe <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006b94:	f7fb fe3e 	bl	8002814 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b0a      	cmp	r3, #10
 8006ba0:	d90d      	bls.n	8006bbe <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ba8:	f043 0201 	orr.w	r2, r3, #1
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2203      	movs	r2, #3
 8006bb6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e164      	b.n	8006e88 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0e3      	beq.n	8006b94 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0202 	orr.w	r2, r2, #2
 8006bda:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7c1b      	ldrb	r3, [r3, #16]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d108      	bne.n	8006bf6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	699a      	ldr	r2, [r3, #24]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bf2:	619a      	str	r2, [r3, #24]
 8006bf4:	e007      	b.n	8006c06 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	699a      	ldr	r2, [r3, #24]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c04:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	7c5b      	ldrb	r3, [r3, #17]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d108      	bne.n	8006c20 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c1c:	619a      	str	r2, [r3, #24]
 8006c1e:	e007      	b.n	8006c30 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c2e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	7c9b      	ldrb	r3, [r3, #18]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d108      	bne.n	8006c4a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	699a      	ldr	r2, [r3, #24]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006c46:	619a      	str	r2, [r3, #24]
 8006c48:	e007      	b.n	8006c5a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	699a      	ldr	r2, [r3, #24]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c58:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	430a      	orrs	r2, r1
 8006c6e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006c7e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691a      	ldr	r2, [r3, #16]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0210 	bic.w	r2, r2, #16
 8006c8e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d108      	bne.n	8006caa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f042 0204 	orr.w	r2, r2, #4
 8006ca6:	619a      	str	r2, [r3, #24]
 8006ca8:	e030      	b.n	8006d0c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d02c      	beq.n	8006d0c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d020      	beq.n	8006cfc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699a      	ldr	r2, [r3, #24]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006cc8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f042 0210 	orr.w	r2, r2, #16
 8006cd8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d114      	bne.n	8006d0c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0220 	orr.w	r2, r2, #32
 8006cf0:	619a      	str	r2, [r3, #24]
 8006cf2:	e00b      	b.n	8006d0c <HAL_FDCAN_Init+0x234>
 8006cf4:	0800cbd4 	.word	0x0800cbd4
 8006cf8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f042 0220 	orr.w	r2, r2, #32
 8006d0a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	3b01      	subs	r3, #1
 8006d12:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	69db      	ldr	r3, [r3, #28]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d1c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006d24:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	695b      	ldr	r3, [r3, #20]
 8006d2c:	3b01      	subs	r3, #1
 8006d2e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006d34:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006d36:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d40:	d115      	bne.n	8006d6e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d50:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d56:	3b01      	subs	r3, #1
 8006d58:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006d5a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d62:	3b01      	subs	r3, #1
 8006d64:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006d6a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006d6c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d00a      	beq.n	8006d8c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	430a      	orrs	r2, r1
 8006d88:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d94:	4413      	add	r3, r2
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d011      	beq.n	8006dbe <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006da2:	f023 0107 	bic.w	r1, r3, #7
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	3360      	adds	r3, #96	; 0x60
 8006dae:	443b      	add	r3, r7
 8006db0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	430a      	orrs	r2, r1
 8006dba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d011      	beq.n	8006dea <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006dce:	f023 0107 	bic.w	r1, r3, #7
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	3360      	adds	r3, #96	; 0x60
 8006dda:	443b      	add	r3, r7
 8006ddc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d012      	beq.n	8006e18 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006dfa:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	3360      	adds	r3, #96	; 0x60
 8006e06:	443b      	add	r3, r7
 8006e08:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006e0c:	011a      	lsls	r2, r3, #4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	430a      	orrs	r2, r1
 8006e14:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d012      	beq.n	8006e46 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006e28:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	3360      	adds	r3, #96	; 0x60
 8006e34:	443b      	add	r3, r7
 8006e36:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006e3a:	021a      	lsls	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	430a      	orrs	r2, r1
 8006e42:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a11      	ldr	r2, [pc, #68]	; (8006e90 <HAL_FDCAN_Init+0x3b8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d107      	bne.n	8006e60 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f022 0203 	bic.w	r2, r2, #3
 8006e5e:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 f80b 	bl	8006e94 <FDCAN_CalcultateRamBlockAddresses>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006e84:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3760      	adds	r7, #96	; 0x60
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	4000a000 	.word	0x4000a000

08006e94 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ea0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006eaa:	4ba7      	ldr	r3, [pc, #668]	; (8007148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	0091      	lsls	r1, r2, #2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6812      	ldr	r2, [r2, #0]
 8006eb6:	430b      	orrs	r3, r1
 8006eb8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ecc:	041a      	lsls	r2, r3, #16
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	4413      	add	r3, r2
 8006ee0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006eea:	4b97      	ldr	r3, [pc, #604]	; (8007148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006eec:	4013      	ands	r3, r2
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	0091      	lsls	r1, r2, #2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6812      	ldr	r2, [r2, #0]
 8006ef6:	430b      	orrs	r3, r1
 8006ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f04:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0c:	041a      	lsls	r2, r3, #16
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1c:	005b      	lsls	r3, r3, #1
 8006f1e:	68ba      	ldr	r2, [r7, #8]
 8006f20:	4413      	add	r3, r2
 8006f22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006f2c:	4b86      	ldr	r3, [pc, #536]	; (8007148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f2e:	4013      	ands	r3, r2
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	0091      	lsls	r1, r2, #2
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	6812      	ldr	r2, [r2, #0]
 8006f38:	430b      	orrs	r3, r1
 8006f3a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f46:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4e:	041a      	lsls	r2, r3, #16
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006f62:	fb02 f303 	mul.w	r3, r2, r3
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	4413      	add	r3, r2
 8006f6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006f74:	4b74      	ldr	r3, [pc, #464]	; (8007148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006f76:	4013      	ands	r3, r2
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	0091      	lsls	r1, r2, #2
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	6812      	ldr	r2, [r2, #0]
 8006f80:	430b      	orrs	r3, r1
 8006f82:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f8e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f96:	041a      	lsls	r2, r3, #16
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006faa:	fb02 f303 	mul.w	r3, r2, r3
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8006fbc:	4b62      	ldr	r3, [pc, #392]	; (8007148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	0091      	lsls	r1, r2, #2
 8006fc4:	687a      	ldr	r2, [r7, #4]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	430b      	orrs	r3, r1
 8006fca:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8006fd6:	fb02 f303 	mul.w	r3, r2, r3
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	4413      	add	r3, r2
 8006fde:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006fe8:	4b57      	ldr	r3, [pc, #348]	; (8007148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006fea:	4013      	ands	r3, r2
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	0091      	lsls	r1, r2, #2
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	430b      	orrs	r3, r1
 8006ff6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007002:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700a:	041a      	lsls	r2, r3, #16
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800701a:	005b      	lsls	r3, r3, #1
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	4413      	add	r3, r2
 8007020:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800702a:	4b47      	ldr	r3, [pc, #284]	; (8007148 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800702c:	4013      	ands	r3, r2
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	0091      	lsls	r1, r2, #2
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	6812      	ldr	r2, [r2, #0]
 8007036:	430b      	orrs	r3, r1
 8007038:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007044:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800704c:	041a      	lsls	r2, r3, #16
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007060:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007068:	061a      	lsls	r2, r3, #24
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007078:	4b34      	ldr	r3, [pc, #208]	; (800714c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800707a:	4413      	add	r3, r2
 800707c:	009a      	lsls	r2, r3, #2
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	441a      	add	r2, r3
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	441a      	add	r2, r3
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	6879      	ldr	r1, [r7, #4]
 80070ac:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80070b4:	441a      	add	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80070c6:	fb01 f303 	mul.w	r3, r1, r3
 80070ca:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80070cc:	441a      	add	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80070de:	fb01 f303 	mul.w	r3, r1, r3
 80070e2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80070e4:	441a      	add	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	441a      	add	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800710a:	6879      	ldr	r1, [r7, #4]
 800710c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800710e:	fb01 f303 	mul.w	r3, r1, r3
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	441a      	add	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800712a:	fb01 f303 	mul.w	r3, r1, r3
 800712e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007130:	441a      	add	r2, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713e:	4a04      	ldr	r2, [pc, #16]	; (8007150 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d915      	bls.n	8007170 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007144:	e006      	b.n	8007154 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007146:	bf00      	nop
 8007148:	ffff0003 	.word	0xffff0003
 800714c:	10002b00 	.word	0x10002b00
 8007150:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800715a:	f043 0220 	orr.w	r2, r3, #32
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2203      	movs	r2, #3
 8007168:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e010      	b.n	8007192 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	e005      	b.n	8007184 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3304      	adds	r3, #4
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	429a      	cmp	r2, r3
 800718e:	d3f3      	bcc.n	8007178 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop

080071a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b089      	sub	sp, #36	; 0x24
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80071aa:	2300      	movs	r3, #0
 80071ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80071ae:	4b89      	ldr	r3, [pc, #548]	; (80073d4 <HAL_GPIO_Init+0x234>)
 80071b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071b2:	e194      	b.n	80074de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	2101      	movs	r1, #1
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	fa01 f303 	lsl.w	r3, r1, r3
 80071c0:	4013      	ands	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 8186 	beq.w	80074d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	f003 0303 	and.w	r3, r3, #3
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d005      	beq.n	80071e4 <HAL_GPIO_Init+0x44>
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	f003 0303 	and.w	r3, r3, #3
 80071e0:	2b02      	cmp	r3, #2
 80071e2:	d130      	bne.n	8007246 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	2203      	movs	r2, #3
 80071f0:	fa02 f303 	lsl.w	r3, r2, r3
 80071f4:	43db      	mvns	r3, r3
 80071f6:	69ba      	ldr	r2, [r7, #24]
 80071f8:	4013      	ands	r3, r2
 80071fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	68da      	ldr	r2, [r3, #12]
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	fa02 f303 	lsl.w	r3, r2, r3
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	4313      	orrs	r3, r2
 800720c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	69ba      	ldr	r2, [r7, #24]
 8007212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800721a:	2201      	movs	r2, #1
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	fa02 f303 	lsl.w	r3, r2, r3
 8007222:	43db      	mvns	r3, r3
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	4013      	ands	r3, r2
 8007228:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	091b      	lsrs	r3, r3, #4
 8007230:	f003 0201 	and.w	r2, r3, #1
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	fa02 f303 	lsl.w	r3, r2, r3
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	4313      	orrs	r3, r2
 800723e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	69ba      	ldr	r2, [r7, #24]
 8007244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	f003 0303 	and.w	r3, r3, #3
 800724e:	2b03      	cmp	r3, #3
 8007250:	d017      	beq.n	8007282 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	68db      	ldr	r3, [r3, #12]
 8007256:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	2203      	movs	r2, #3
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	43db      	mvns	r3, r3
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	4013      	ands	r3, r2
 8007268:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689a      	ldr	r2, [r3, #8]
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	005b      	lsls	r3, r3, #1
 8007272:	fa02 f303 	lsl.w	r3, r2, r3
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	4313      	orrs	r3, r2
 800727a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d123      	bne.n	80072d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	08da      	lsrs	r2, r3, #3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	3208      	adds	r2, #8
 8007296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800729a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	220f      	movs	r2, #15
 80072a6:	fa02 f303 	lsl.w	r3, r2, r3
 80072aa:	43db      	mvns	r3, r3
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	4013      	ands	r3, r2
 80072b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	691a      	ldr	r2, [r3, #16]
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	fa02 f303 	lsl.w	r3, r2, r3
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	08da      	lsrs	r2, r3, #3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3208      	adds	r2, #8
 80072d0:	69b9      	ldr	r1, [r7, #24]
 80072d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	2203      	movs	r2, #3
 80072e2:	fa02 f303 	lsl.w	r3, r2, r3
 80072e6:	43db      	mvns	r3, r3
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	4013      	ands	r3, r2
 80072ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f003 0203 	and.w	r2, r3, #3
 80072f6:	69fb      	ldr	r3, [r7, #28]
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	4313      	orrs	r3, r2
 8007302:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007312:	2b00      	cmp	r3, #0
 8007314:	f000 80e0 	beq.w	80074d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007318:	4b2f      	ldr	r3, [pc, #188]	; (80073d8 <HAL_GPIO_Init+0x238>)
 800731a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800731e:	4a2e      	ldr	r2, [pc, #184]	; (80073d8 <HAL_GPIO_Init+0x238>)
 8007320:	f043 0302 	orr.w	r3, r3, #2
 8007324:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007328:	4b2b      	ldr	r3, [pc, #172]	; (80073d8 <HAL_GPIO_Init+0x238>)
 800732a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800732e:	f003 0302 	and.w	r3, r3, #2
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007336:	4a29      	ldr	r2, [pc, #164]	; (80073dc <HAL_GPIO_Init+0x23c>)
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	089b      	lsrs	r3, r3, #2
 800733c:	3302      	adds	r3, #2
 800733e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007344:	69fb      	ldr	r3, [r7, #28]
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	220f      	movs	r2, #15
 800734e:	fa02 f303 	lsl.w	r3, r2, r3
 8007352:	43db      	mvns	r3, r3
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	4013      	ands	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	4a20      	ldr	r2, [pc, #128]	; (80073e0 <HAL_GPIO_Init+0x240>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d052      	beq.n	8007408 <HAL_GPIO_Init+0x268>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a1f      	ldr	r2, [pc, #124]	; (80073e4 <HAL_GPIO_Init+0x244>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d031      	beq.n	80073ce <HAL_GPIO_Init+0x22e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	4a1e      	ldr	r2, [pc, #120]	; (80073e8 <HAL_GPIO_Init+0x248>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d02b      	beq.n	80073ca <HAL_GPIO_Init+0x22a>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	4a1d      	ldr	r2, [pc, #116]	; (80073ec <HAL_GPIO_Init+0x24c>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d025      	beq.n	80073c6 <HAL_GPIO_Init+0x226>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a1c      	ldr	r2, [pc, #112]	; (80073f0 <HAL_GPIO_Init+0x250>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d01f      	beq.n	80073c2 <HAL_GPIO_Init+0x222>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a1b      	ldr	r2, [pc, #108]	; (80073f4 <HAL_GPIO_Init+0x254>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d019      	beq.n	80073be <HAL_GPIO_Init+0x21e>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4a1a      	ldr	r2, [pc, #104]	; (80073f8 <HAL_GPIO_Init+0x258>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d013      	beq.n	80073ba <HAL_GPIO_Init+0x21a>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	4a19      	ldr	r2, [pc, #100]	; (80073fc <HAL_GPIO_Init+0x25c>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d00d      	beq.n	80073b6 <HAL_GPIO_Init+0x216>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4a18      	ldr	r2, [pc, #96]	; (8007400 <HAL_GPIO_Init+0x260>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d007      	beq.n	80073b2 <HAL_GPIO_Init+0x212>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a17      	ldr	r2, [pc, #92]	; (8007404 <HAL_GPIO_Init+0x264>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d101      	bne.n	80073ae <HAL_GPIO_Init+0x20e>
 80073aa:	2309      	movs	r3, #9
 80073ac:	e02d      	b.n	800740a <HAL_GPIO_Init+0x26a>
 80073ae:	230a      	movs	r3, #10
 80073b0:	e02b      	b.n	800740a <HAL_GPIO_Init+0x26a>
 80073b2:	2308      	movs	r3, #8
 80073b4:	e029      	b.n	800740a <HAL_GPIO_Init+0x26a>
 80073b6:	2307      	movs	r3, #7
 80073b8:	e027      	b.n	800740a <HAL_GPIO_Init+0x26a>
 80073ba:	2306      	movs	r3, #6
 80073bc:	e025      	b.n	800740a <HAL_GPIO_Init+0x26a>
 80073be:	2305      	movs	r3, #5
 80073c0:	e023      	b.n	800740a <HAL_GPIO_Init+0x26a>
 80073c2:	2304      	movs	r3, #4
 80073c4:	e021      	b.n	800740a <HAL_GPIO_Init+0x26a>
 80073c6:	2303      	movs	r3, #3
 80073c8:	e01f      	b.n	800740a <HAL_GPIO_Init+0x26a>
 80073ca:	2302      	movs	r3, #2
 80073cc:	e01d      	b.n	800740a <HAL_GPIO_Init+0x26a>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e01b      	b.n	800740a <HAL_GPIO_Init+0x26a>
 80073d2:	bf00      	nop
 80073d4:	58000080 	.word	0x58000080
 80073d8:	58024400 	.word	0x58024400
 80073dc:	58000400 	.word	0x58000400
 80073e0:	58020000 	.word	0x58020000
 80073e4:	58020400 	.word	0x58020400
 80073e8:	58020800 	.word	0x58020800
 80073ec:	58020c00 	.word	0x58020c00
 80073f0:	58021000 	.word	0x58021000
 80073f4:	58021400 	.word	0x58021400
 80073f8:	58021800 	.word	0x58021800
 80073fc:	58021c00 	.word	0x58021c00
 8007400:	58022000 	.word	0x58022000
 8007404:	58022400 	.word	0x58022400
 8007408:	2300      	movs	r3, #0
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	f002 0203 	and.w	r2, r2, #3
 8007410:	0092      	lsls	r2, r2, #2
 8007412:	4093      	lsls	r3, r2
 8007414:	69ba      	ldr	r2, [r7, #24]
 8007416:	4313      	orrs	r3, r2
 8007418:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800741a:	4938      	ldr	r1, [pc, #224]	; (80074fc <HAL_GPIO_Init+0x35c>)
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	089b      	lsrs	r3, r3, #2
 8007420:	3302      	adds	r3, #2
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	43db      	mvns	r3, r3
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	4013      	ands	r3, r2
 8007438:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d003      	beq.n	800744e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800744e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	43db      	mvns	r3, r3
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	4013      	ands	r3, r2
 8007466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007474:	69ba      	ldr	r2, [r7, #24]
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800747c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	43db      	mvns	r3, r3
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	4013      	ands	r3, r2
 8007492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d003      	beq.n	80074a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	43db      	mvns	r3, r3
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	4013      	ands	r3, r2
 80074bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	3301      	adds	r3, #1
 80074dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	fa22 f303 	lsr.w	r3, r2, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f47f ae63 	bne.w	80071b4 <HAL_GPIO_Init+0x14>
  }
}
 80074ee:	bf00      	nop
 80074f0:	bf00      	nop
 80074f2:	3724      	adds	r7, #36	; 0x24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	58000400 	.word	0x58000400

08007500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	460b      	mov	r3, r1
 800750a:	807b      	strh	r3, [r7, #2]
 800750c:	4613      	mov	r3, r2
 800750e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007510:	787b      	ldrb	r3, [r7, #1]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d003      	beq.n	800751e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007516:	887a      	ldrh	r2, [r7, #2]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800751c:	e003      	b.n	8007526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800751e:	887b      	ldrh	r3, [r7, #2]
 8007520:	041a      	lsls	r2, r3, #16
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	619a      	str	r2, [r3, #24]
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007530:	4770      	bx	lr
	...

08007534 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d101      	bne.n	8007546 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e08b      	b.n	800765e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800754c:	b2db      	uxtb	r3, r3
 800754e:	2b00      	cmp	r3, #0
 8007550:	d106      	bne.n	8007560 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7fa f8ee 	bl	800173c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2224      	movs	r2, #36	; 0x24
 8007564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0201 	bic.w	r2, r2, #1
 8007576:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685a      	ldr	r2, [r3, #4]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007584:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	689a      	ldr	r2, [r3, #8]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007594:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d107      	bne.n	80075ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075aa:	609a      	str	r2, [r3, #8]
 80075ac:	e006      	b.n	80075bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80075ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d108      	bne.n	80075d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	685a      	ldr	r2, [r3, #4]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075d2:	605a      	str	r2, [r3, #4]
 80075d4:	e007      	b.n	80075e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	685a      	ldr	r2, [r3, #4]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	6859      	ldr	r1, [r3, #4]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	4b1d      	ldr	r3, [pc, #116]	; (8007668 <HAL_I2C_Init+0x134>)
 80075f2:	430b      	orrs	r3, r1
 80075f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007604:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	691a      	ldr	r2, [r3, #16]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	699b      	ldr	r3, [r3, #24]
 8007616:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	69d9      	ldr	r1, [r3, #28]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1a      	ldr	r2, [r3, #32]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f042 0201 	orr.w	r2, r2, #1
 800763e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2220      	movs	r2, #32
 800764a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	02008000 	.word	0x02008000

0800766c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b20      	cmp	r3, #32
 8007680:	d138      	bne.n	80076f4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800768c:	2302      	movs	r3, #2
 800768e:	e032      	b.n	80076f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2224      	movs	r2, #36	; 0x24
 800769c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	681a      	ldr	r2, [r3, #0]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f022 0201 	bic.w	r2, r2, #1
 80076ae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076be:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6819      	ldr	r1, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	430a      	orrs	r2, r1
 80076ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0201 	orr.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076f0:	2300      	movs	r3, #0
 80076f2:	e000      	b.n	80076f6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076f4:	2302      	movs	r3, #2
  }
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007702:	b480      	push	{r7}
 8007704:	b085      	sub	sp, #20
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
 800770a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b20      	cmp	r3, #32
 8007716:	d139      	bne.n	800778c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007722:	2302      	movs	r3, #2
 8007724:	e033      	b.n	800778e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2224      	movs	r2, #36	; 0x24
 8007732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0201 	bic.w	r2, r2, #1
 8007744:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007754:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0201 	orr.w	r2, r2, #1
 8007776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2220      	movs	r2, #32
 800777c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	e000      	b.n	800778e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800778c:	2302      	movs	r3, #2
  }
}
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
	...

0800779c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b084      	sub	sp, #16
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80077a4:	4b19      	ldr	r3, [pc, #100]	; (800780c <HAL_PWREx_ConfigSupply+0x70>)
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	f003 0304 	and.w	r3, r3, #4
 80077ac:	2b04      	cmp	r3, #4
 80077ae:	d00a      	beq.n	80077c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80077b0:	4b16      	ldr	r3, [pc, #88]	; (800780c <HAL_PWREx_ConfigSupply+0x70>)
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f003 0307 	and.w	r3, r3, #7
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d001      	beq.n	80077c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e01f      	b.n	8007802 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	e01d      	b.n	8007802 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80077c6:	4b11      	ldr	r3, [pc, #68]	; (800780c <HAL_PWREx_ConfigSupply+0x70>)
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f023 0207 	bic.w	r2, r3, #7
 80077ce:	490f      	ldr	r1, [pc, #60]	; (800780c <HAL_PWREx_ConfigSupply+0x70>)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80077d6:	f7fb f81d 	bl	8002814 <HAL_GetTick>
 80077da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077dc:	e009      	b.n	80077f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80077de:	f7fb f819 	bl	8002814 <HAL_GetTick>
 80077e2:	4602      	mov	r2, r0
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	1ad3      	subs	r3, r2, r3
 80077e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077ec:	d901      	bls.n	80077f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e007      	b.n	8007802 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077f2:	4b06      	ldr	r3, [pc, #24]	; (800780c <HAL_PWREx_ConfigSupply+0x70>)
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077fe:	d1ee      	bne.n	80077de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	58024800 	.word	0x58024800

08007810 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b08c      	sub	sp, #48	; 0x30
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d102      	bne.n	8007824 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	f000 bc48 	b.w	80080b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	f000 8088 	beq.w	8007942 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007832:	4b99      	ldr	r3, [pc, #612]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800783a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800783c:	4b96      	ldr	r3, [pc, #600]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	2b10      	cmp	r3, #16
 8007846:	d007      	beq.n	8007858 <HAL_RCC_OscConfig+0x48>
 8007848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784a:	2b18      	cmp	r3, #24
 800784c:	d111      	bne.n	8007872 <HAL_RCC_OscConfig+0x62>
 800784e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007850:	f003 0303 	and.w	r3, r3, #3
 8007854:	2b02      	cmp	r3, #2
 8007856:	d10c      	bne.n	8007872 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007858:	4b8f      	ldr	r3, [pc, #572]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d06d      	beq.n	8007940 <HAL_RCC_OscConfig+0x130>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d169      	bne.n	8007940 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	f000 bc21 	b.w	80080b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800787a:	d106      	bne.n	800788a <HAL_RCC_OscConfig+0x7a>
 800787c:	4b86      	ldr	r3, [pc, #536]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a85      	ldr	r2, [pc, #532]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	e02e      	b.n	80078e8 <HAL_RCC_OscConfig+0xd8>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10c      	bne.n	80078ac <HAL_RCC_OscConfig+0x9c>
 8007892:	4b81      	ldr	r3, [pc, #516]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a80      	ldr	r2, [pc, #512]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	4b7e      	ldr	r3, [pc, #504]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a7d      	ldr	r2, [pc, #500]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80078a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	e01d      	b.n	80078e8 <HAL_RCC_OscConfig+0xd8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078b4:	d10c      	bne.n	80078d0 <HAL_RCC_OscConfig+0xc0>
 80078b6:	4b78      	ldr	r3, [pc, #480]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a77      	ldr	r2, [pc, #476]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80078bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078c0:	6013      	str	r3, [r2, #0]
 80078c2:	4b75      	ldr	r3, [pc, #468]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a74      	ldr	r2, [pc, #464]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80078c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	e00b      	b.n	80078e8 <HAL_RCC_OscConfig+0xd8>
 80078d0:	4b71      	ldr	r3, [pc, #452]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a70      	ldr	r2, [pc, #448]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80078d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	4b6e      	ldr	r3, [pc, #440]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a6d      	ldr	r2, [pc, #436]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80078e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d013      	beq.n	8007918 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078f0:	f7fa ff90 	bl	8002814 <HAL_GetTick>
 80078f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078f6:	e008      	b.n	800790a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078f8:	f7fa ff8c 	bl	8002814 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	2b64      	cmp	r3, #100	; 0x64
 8007904:	d901      	bls.n	800790a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e3d4      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800790a:	4b63      	ldr	r3, [pc, #396]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007912:	2b00      	cmp	r3, #0
 8007914:	d0f0      	beq.n	80078f8 <HAL_RCC_OscConfig+0xe8>
 8007916:	e014      	b.n	8007942 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007918:	f7fa ff7c 	bl	8002814 <HAL_GetTick>
 800791c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007920:	f7fa ff78 	bl	8002814 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b64      	cmp	r3, #100	; 0x64
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e3c0      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007932:	4b59      	ldr	r3, [pc, #356]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1f0      	bne.n	8007920 <HAL_RCC_OscConfig+0x110>
 800793e:	e000      	b.n	8007942 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f003 0302 	and.w	r3, r3, #2
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80ca 	beq.w	8007ae4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007950:	4b51      	ldr	r3, [pc, #324]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007958:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800795a:	4b4f      	ldr	r3, [pc, #316]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 800795c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800795e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d007      	beq.n	8007976 <HAL_RCC_OscConfig+0x166>
 8007966:	6a3b      	ldr	r3, [r7, #32]
 8007968:	2b18      	cmp	r3, #24
 800796a:	d156      	bne.n	8007a1a <HAL_RCC_OscConfig+0x20a>
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	f003 0303 	and.w	r3, r3, #3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d151      	bne.n	8007a1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007976:	4b48      	ldr	r3, [pc, #288]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b00      	cmp	r3, #0
 8007980:	d005      	beq.n	800798e <HAL_RCC_OscConfig+0x17e>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68db      	ldr	r3, [r3, #12]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d101      	bne.n	800798e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800798a:	2301      	movs	r3, #1
 800798c:	e392      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800798e:	4b42      	ldr	r3, [pc, #264]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f023 0219 	bic.w	r2, r3, #25
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	493f      	ldr	r1, [pc, #252]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 800799c:	4313      	orrs	r3, r2
 800799e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a0:	f7fa ff38 	bl	8002814 <HAL_GetTick>
 80079a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079a6:	e008      	b.n	80079ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079a8:	f7fa ff34 	bl	8002814 <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d901      	bls.n	80079ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80079b6:	2303      	movs	r3, #3
 80079b8:	e37c      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079ba:	4b37      	ldr	r3, [pc, #220]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f003 0304 	and.w	r3, r3, #4
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d0f0      	beq.n	80079a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079c6:	f7fa ff55 	bl	8002874 <HAL_GetREVID>
 80079ca:	4603      	mov	r3, r0
 80079cc:	f241 0203 	movw	r2, #4099	; 0x1003
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d817      	bhi.n	8007a04 <HAL_RCC_OscConfig+0x1f4>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b40      	cmp	r3, #64	; 0x40
 80079da:	d108      	bne.n	80079ee <HAL_RCC_OscConfig+0x1de>
 80079dc:	4b2e      	ldr	r3, [pc, #184]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80079e4:	4a2c      	ldr	r2, [pc, #176]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80079e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079ec:	e07a      	b.n	8007ae4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079ee:	4b2a      	ldr	r3, [pc, #168]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	031b      	lsls	r3, r3, #12
 80079fc:	4926      	ldr	r1, [pc, #152]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a02:	e06f      	b.n	8007ae4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a04:	4b24      	ldr	r3, [pc, #144]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	061b      	lsls	r3, r3, #24
 8007a12:	4921      	ldr	r1, [pc, #132]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a18:	e064      	b.n	8007ae4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d047      	beq.n	8007ab2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a22:	4b1d      	ldr	r3, [pc, #116]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f023 0219 	bic.w	r2, r3, #25
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	491a      	ldr	r1, [pc, #104]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a34:	f7fa feee 	bl	8002814 <HAL_GetTick>
 8007a38:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a3a:	e008      	b.n	8007a4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a3c:	f7fa feea 	bl	8002814 <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d901      	bls.n	8007a4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e332      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0f0      	beq.n	8007a3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a5a:	f7fa ff0b 	bl	8002874 <HAL_GetREVID>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d819      	bhi.n	8007a9c <HAL_RCC_OscConfig+0x28c>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	691b      	ldr	r3, [r3, #16]
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d108      	bne.n	8007a82 <HAL_RCC_OscConfig+0x272>
 8007a70:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a78:	4a07      	ldr	r2, [pc, #28]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007a7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a7e:	6053      	str	r3, [r2, #4]
 8007a80:	e030      	b.n	8007ae4 <HAL_RCC_OscConfig+0x2d4>
 8007a82:	4b05      	ldr	r3, [pc, #20]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	031b      	lsls	r3, r3, #12
 8007a90:	4901      	ldr	r1, [pc, #4]	; (8007a98 <HAL_RCC_OscConfig+0x288>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	604b      	str	r3, [r1, #4]
 8007a96:	e025      	b.n	8007ae4 <HAL_RCC_OscConfig+0x2d4>
 8007a98:	58024400 	.word	0x58024400
 8007a9c:	4b9a      	ldr	r3, [pc, #616]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	061b      	lsls	r3, r3, #24
 8007aaa:	4997      	ldr	r1, [pc, #604]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007aac:	4313      	orrs	r3, r2
 8007aae:	604b      	str	r3, [r1, #4]
 8007ab0:	e018      	b.n	8007ae4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ab2:	4b95      	ldr	r3, [pc, #596]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a94      	ldr	r2, [pc, #592]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007abe:	f7fa fea9 	bl	8002814 <HAL_GetTick>
 8007ac2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ac4:	e008      	b.n	8007ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ac6:	f7fa fea5 	bl	8002814 <HAL_GetTick>
 8007aca:	4602      	mov	r2, r0
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d901      	bls.n	8007ad8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e2ed      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007ad8:	4b8b      	ldr	r3, [pc, #556]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0304 	and.w	r3, r3, #4
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1f0      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0310 	and.w	r3, r3, #16
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 80a9 	beq.w	8007c44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007af2:	4b85      	ldr	r3, [pc, #532]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007afa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007afc:	4b82      	ldr	r3, [pc, #520]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	2b08      	cmp	r3, #8
 8007b06:	d007      	beq.n	8007b18 <HAL_RCC_OscConfig+0x308>
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	2b18      	cmp	r3, #24
 8007b0c:	d13a      	bne.n	8007b84 <HAL_RCC_OscConfig+0x374>
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	f003 0303 	and.w	r3, r3, #3
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d135      	bne.n	8007b84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b18:	4b7b      	ldr	r3, [pc, #492]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <HAL_RCC_OscConfig+0x320>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	69db      	ldr	r3, [r3, #28]
 8007b28:	2b80      	cmp	r3, #128	; 0x80
 8007b2a:	d001      	beq.n	8007b30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e2c1      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b30:	f7fa fea0 	bl	8002874 <HAL_GetREVID>
 8007b34:	4603      	mov	r3, r0
 8007b36:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d817      	bhi.n	8007b6e <HAL_RCC_OscConfig+0x35e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a1b      	ldr	r3, [r3, #32]
 8007b42:	2b20      	cmp	r3, #32
 8007b44:	d108      	bne.n	8007b58 <HAL_RCC_OscConfig+0x348>
 8007b46:	4b70      	ldr	r3, [pc, #448]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007b4e:	4a6e      	ldr	r2, [pc, #440]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007b50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b56:	e075      	b.n	8007c44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b58:	4b6b      	ldr	r3, [pc, #428]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	069b      	lsls	r3, r3, #26
 8007b66:	4968      	ldr	r1, [pc, #416]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b6c:	e06a      	b.n	8007c44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b6e:	4b66      	ldr	r3, [pc, #408]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	061b      	lsls	r3, r3, #24
 8007b7c:	4962      	ldr	r1, [pc, #392]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b82:	e05f      	b.n	8007c44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d042      	beq.n	8007c12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b8c:	4b5e      	ldr	r3, [pc, #376]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a5d      	ldr	r2, [pc, #372]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b98:	f7fa fe3c 	bl	8002814 <HAL_GetTick>
 8007b9c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ba0:	f7fa fe38 	bl	8002814 <HAL_GetTick>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	d901      	bls.n	8007bb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e280      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bb2:	4b55      	ldr	r3, [pc, #340]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d0f0      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007bbe:	f7fa fe59 	bl	8002874 <HAL_GetREVID>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	f241 0203 	movw	r2, #4099	; 0x1003
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d817      	bhi.n	8007bfc <HAL_RCC_OscConfig+0x3ec>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	2b20      	cmp	r3, #32
 8007bd2:	d108      	bne.n	8007be6 <HAL_RCC_OscConfig+0x3d6>
 8007bd4:	4b4c      	ldr	r3, [pc, #304]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007bdc:	4a4a      	ldr	r2, [pc, #296]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007bde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007be2:	6053      	str	r3, [r2, #4]
 8007be4:	e02e      	b.n	8007c44 <HAL_RCC_OscConfig+0x434>
 8007be6:	4b48      	ldr	r3, [pc, #288]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	069b      	lsls	r3, r3, #26
 8007bf4:	4944      	ldr	r1, [pc, #272]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	604b      	str	r3, [r1, #4]
 8007bfa:	e023      	b.n	8007c44 <HAL_RCC_OscConfig+0x434>
 8007bfc:	4b42      	ldr	r3, [pc, #264]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a1b      	ldr	r3, [r3, #32]
 8007c08:	061b      	lsls	r3, r3, #24
 8007c0a:	493f      	ldr	r1, [pc, #252]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60cb      	str	r3, [r1, #12]
 8007c10:	e018      	b.n	8007c44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007c12:	4b3d      	ldr	r3, [pc, #244]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4a3c      	ldr	r2, [pc, #240]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1e:	f7fa fdf9 	bl	8002814 <HAL_GetTick>
 8007c22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c24:	e008      	b.n	8007c38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c26:	f7fa fdf5 	bl	8002814 <HAL_GetTick>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	1ad3      	subs	r3, r2, r3
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d901      	bls.n	8007c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c34:	2303      	movs	r3, #3
 8007c36:	e23d      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c38:	4b33      	ldr	r3, [pc, #204]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d1f0      	bne.n	8007c26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0308 	and.w	r3, r3, #8
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d036      	beq.n	8007cbe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	695b      	ldr	r3, [r3, #20]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d019      	beq.n	8007c8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c58:	4b2b      	ldr	r3, [pc, #172]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007c5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5c:	4a2a      	ldr	r2, [pc, #168]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007c5e:	f043 0301 	orr.w	r3, r3, #1
 8007c62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c64:	f7fa fdd6 	bl	8002814 <HAL_GetTick>
 8007c68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c6a:	e008      	b.n	8007c7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c6c:	f7fa fdd2 	bl	8002814 <HAL_GetTick>
 8007c70:	4602      	mov	r2, r0
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d901      	bls.n	8007c7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007c7a:	2303      	movs	r3, #3
 8007c7c:	e21a      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c7e:	4b22      	ldr	r3, [pc, #136]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d0f0      	beq.n	8007c6c <HAL_RCC_OscConfig+0x45c>
 8007c8a:	e018      	b.n	8007cbe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c8c:	4b1e      	ldr	r3, [pc, #120]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007c8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c90:	4a1d      	ldr	r2, [pc, #116]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007c92:	f023 0301 	bic.w	r3, r3, #1
 8007c96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c98:	f7fa fdbc 	bl	8002814 <HAL_GetTick>
 8007c9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c9e:	e008      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ca0:	f7fa fdb8 	bl	8002814 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e200      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007cb2:	4b15      	ldr	r3, [pc, #84]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007cb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d1f0      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d039      	beq.n	8007d3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01c      	beq.n	8007d0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007cd2:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a0c      	ldr	r2, [pc, #48]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007cd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007cdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cde:	f7fa fd99 	bl	8002814 <HAL_GetTick>
 8007ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ce6:	f7fa fd95 	bl	8002814 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e1dd      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007cf8:	4b03      	ldr	r3, [pc, #12]	; (8007d08 <HAL_RCC_OscConfig+0x4f8>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0f0      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x4d6>
 8007d04:	e01b      	b.n	8007d3e <HAL_RCC_OscConfig+0x52e>
 8007d06:	bf00      	nop
 8007d08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d0c:	4b9b      	ldr	r3, [pc, #620]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a9a      	ldr	r2, [pc, #616]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d18:	f7fa fd7c 	bl	8002814 <HAL_GetTick>
 8007d1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d1e:	e008      	b.n	8007d32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d20:	f7fa fd78 	bl	8002814 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e1c0      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d32:	4b92      	ldr	r3, [pc, #584]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1f0      	bne.n	8007d20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 8081 	beq.w	8007e4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d4c:	4b8c      	ldr	r3, [pc, #560]	; (8007f80 <HAL_RCC_OscConfig+0x770>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a8b      	ldr	r2, [pc, #556]	; (8007f80 <HAL_RCC_OscConfig+0x770>)
 8007d52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d58:	f7fa fd5c 	bl	8002814 <HAL_GetTick>
 8007d5c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d5e:	e008      	b.n	8007d72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d60:	f7fa fd58 	bl	8002814 <HAL_GetTick>
 8007d64:	4602      	mov	r2, r0
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	2b64      	cmp	r3, #100	; 0x64
 8007d6c:	d901      	bls.n	8007d72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e1a0      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d72:	4b83      	ldr	r3, [pc, #524]	; (8007f80 <HAL_RCC_OscConfig+0x770>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d0f0      	beq.n	8007d60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d106      	bne.n	8007d94 <HAL_RCC_OscConfig+0x584>
 8007d86:	4b7d      	ldr	r3, [pc, #500]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8a:	4a7c      	ldr	r2, [pc, #496]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007d8c:	f043 0301 	orr.w	r3, r3, #1
 8007d90:	6713      	str	r3, [r2, #112]	; 0x70
 8007d92:	e02d      	b.n	8007df0 <HAL_RCC_OscConfig+0x5e0>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10c      	bne.n	8007db6 <HAL_RCC_OscConfig+0x5a6>
 8007d9c:	4b77      	ldr	r3, [pc, #476]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da0:	4a76      	ldr	r2, [pc, #472]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007da2:	f023 0301 	bic.w	r3, r3, #1
 8007da6:	6713      	str	r3, [r2, #112]	; 0x70
 8007da8:	4b74      	ldr	r3, [pc, #464]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dac:	4a73      	ldr	r2, [pc, #460]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007dae:	f023 0304 	bic.w	r3, r3, #4
 8007db2:	6713      	str	r3, [r2, #112]	; 0x70
 8007db4:	e01c      	b.n	8007df0 <HAL_RCC_OscConfig+0x5e0>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	2b05      	cmp	r3, #5
 8007dbc:	d10c      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x5c8>
 8007dbe:	4b6f      	ldr	r3, [pc, #444]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc2:	4a6e      	ldr	r2, [pc, #440]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007dc4:	f043 0304 	orr.w	r3, r3, #4
 8007dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8007dca:	4b6c      	ldr	r3, [pc, #432]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dce:	4a6b      	ldr	r2, [pc, #428]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8007dd6:	e00b      	b.n	8007df0 <HAL_RCC_OscConfig+0x5e0>
 8007dd8:	4b68      	ldr	r3, [pc, #416]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ddc:	4a67      	ldr	r2, [pc, #412]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007dde:	f023 0301 	bic.w	r3, r3, #1
 8007de2:	6713      	str	r3, [r2, #112]	; 0x70
 8007de4:	4b65      	ldr	r3, [pc, #404]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de8:	4a64      	ldr	r2, [pc, #400]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007dea:	f023 0304 	bic.w	r3, r3, #4
 8007dee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d015      	beq.n	8007e24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df8:	f7fa fd0c 	bl	8002814 <HAL_GetTick>
 8007dfc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dfe:	e00a      	b.n	8007e16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e00:	f7fa fd08 	bl	8002814 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e14e      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e16:	4b59      	ldr	r3, [pc, #356]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0ee      	beq.n	8007e00 <HAL_RCC_OscConfig+0x5f0>
 8007e22:	e014      	b.n	8007e4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e24:	f7fa fcf6 	bl	8002814 <HAL_GetTick>
 8007e28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e2a:	e00a      	b.n	8007e42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e2c:	f7fa fcf2 	bl	8002814 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e138      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e42:	4b4e      	ldr	r3, [pc, #312]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d1ee      	bne.n	8007e2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 812d 	beq.w	80080b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007e58:	4b48      	ldr	r3, [pc, #288]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e60:	2b18      	cmp	r3, #24
 8007e62:	f000 80bd 	beq.w	8007fe0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	f040 809e 	bne.w	8007fac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e70:	4b42      	ldr	r3, [pc, #264]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a41      	ldr	r2, [pc, #260]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e7c:	f7fa fcca 	bl	8002814 <HAL_GetTick>
 8007e80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e82:	e008      	b.n	8007e96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e84:	f7fa fcc6 	bl	8002814 <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	1ad3      	subs	r3, r2, r3
 8007e8e:	2b02      	cmp	r3, #2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e10e      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e96:	4b39      	ldr	r3, [pc, #228]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1f0      	bne.n	8007e84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ea2:	4b36      	ldr	r3, [pc, #216]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007ea4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ea6:	4b37      	ldr	r3, [pc, #220]	; (8007f84 <HAL_RCC_OscConfig+0x774>)
 8007ea8:	4013      	ands	r3, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007eb2:	0112      	lsls	r2, r2, #4
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	4931      	ldr	r1, [pc, #196]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	628b      	str	r3, [r1, #40]	; 0x28
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec0:	3b01      	subs	r3, #1
 8007ec2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	025b      	lsls	r3, r3, #9
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	431a      	orrs	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed6:	3b01      	subs	r3, #1
 8007ed8:	041b      	lsls	r3, r3, #16
 8007eda:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007ede:	431a      	orrs	r2, r3
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	061b      	lsls	r3, r3, #24
 8007ee8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007eec:	4923      	ldr	r1, [pc, #140]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007ef2:	4b22      	ldr	r3, [pc, #136]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	4a21      	ldr	r2, [pc, #132]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007ef8:	f023 0301 	bic.w	r3, r3, #1
 8007efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007efe:	4b1f      	ldr	r3, [pc, #124]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f02:	4b21      	ldr	r3, [pc, #132]	; (8007f88 <HAL_RCC_OscConfig+0x778>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007f0a:	00d2      	lsls	r2, r2, #3
 8007f0c:	491b      	ldr	r1, [pc, #108]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007f12:	4b1a      	ldr	r3, [pc, #104]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	f023 020c 	bic.w	r2, r3, #12
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	4917      	ldr	r1, [pc, #92]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007f24:	4b15      	ldr	r3, [pc, #84]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	f023 0202 	bic.w	r2, r3, #2
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f30:	4912      	ldr	r1, [pc, #72]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f36:	4b11      	ldr	r3, [pc, #68]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3a:	4a10      	ldr	r2, [pc, #64]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f42:	4b0e      	ldr	r3, [pc, #56]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f46:	4a0d      	ldr	r2, [pc, #52]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007f4e:	4b0b      	ldr	r3, [pc, #44]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	4a0a      	ldr	r2, [pc, #40]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007f5a:	4b08      	ldr	r3, [pc, #32]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	4a07      	ldr	r2, [pc, #28]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f60:	f043 0301 	orr.w	r3, r3, #1
 8007f64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f66:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a04      	ldr	r2, [pc, #16]	; (8007f7c <HAL_RCC_OscConfig+0x76c>)
 8007f6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f72:	f7fa fc4f 	bl	8002814 <HAL_GetTick>
 8007f76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f78:	e011      	b.n	8007f9e <HAL_RCC_OscConfig+0x78e>
 8007f7a:	bf00      	nop
 8007f7c:	58024400 	.word	0x58024400
 8007f80:	58024800 	.word	0x58024800
 8007f84:	fffffc0c 	.word	0xfffffc0c
 8007f88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f8c:	f7fa fc42 	bl	8002814 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e08a      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f9e:	4b47      	ldr	r3, [pc, #284]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0f0      	beq.n	8007f8c <HAL_RCC_OscConfig+0x77c>
 8007faa:	e082      	b.n	80080b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fac:	4b43      	ldr	r3, [pc, #268]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a42      	ldr	r2, [pc, #264]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 8007fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb8:	f7fa fc2c 	bl	8002814 <HAL_GetTick>
 8007fbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fbe:	e008      	b.n	8007fd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fc0:	f7fa fc28 	bl	8002814 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e070      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fd2:	4b3a      	ldr	r3, [pc, #232]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1f0      	bne.n	8007fc0 <HAL_RCC_OscConfig+0x7b0>
 8007fde:	e068      	b.n	80080b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007fe0:	4b36      	ldr	r3, [pc, #216]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 8007fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fe4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007fe6:	4b35      	ldr	r3, [pc, #212]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d031      	beq.n	8008058 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	f003 0203 	and.w	r2, r3, #3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d12a      	bne.n	8008058 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	091b      	lsrs	r3, r3, #4
 8008006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800800e:	429a      	cmp	r2, r3
 8008010:	d122      	bne.n	8008058 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800801e:	429a      	cmp	r2, r3
 8008020:	d11a      	bne.n	8008058 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	0a5b      	lsrs	r3, r3, #9
 8008026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800802e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008030:	429a      	cmp	r2, r3
 8008032:	d111      	bne.n	8008058 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	0c1b      	lsrs	r3, r3, #16
 8008038:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008040:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008042:	429a      	cmp	r2, r3
 8008044:	d108      	bne.n	8008058 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	0e1b      	lsrs	r3, r3, #24
 800804a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008052:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008054:	429a      	cmp	r2, r3
 8008056:	d001      	beq.n	800805c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e02b      	b.n	80080b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800805c:	4b17      	ldr	r3, [pc, #92]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 800805e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008060:	08db      	lsrs	r3, r3, #3
 8008062:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008066:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	429a      	cmp	r2, r3
 8008070:	d01f      	beq.n	80080b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008072:	4b12      	ldr	r3, [pc, #72]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 8008074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008076:	4a11      	ldr	r2, [pc, #68]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 8008078:	f023 0301 	bic.w	r3, r3, #1
 800807c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800807e:	f7fa fbc9 	bl	8002814 <HAL_GetTick>
 8008082:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008084:	bf00      	nop
 8008086:	f7fa fbc5 	bl	8002814 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	4293      	cmp	r3, r2
 8008090:	d0f9      	beq.n	8008086 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008092:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 8008094:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008096:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <HAL_RCC_OscConfig+0x8b0>)
 8008098:	4013      	ands	r3, r2
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800809e:	00d2      	lsls	r2, r2, #3
 80080a0:	4906      	ldr	r1, [pc, #24]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80080a6:	4b05      	ldr	r3, [pc, #20]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 80080a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080aa:	4a04      	ldr	r2, [pc, #16]	; (80080bc <HAL_RCC_OscConfig+0x8ac>)
 80080ac:	f043 0301 	orr.w	r3, r3, #1
 80080b0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3730      	adds	r7, #48	; 0x30
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	58024400 	.word	0x58024400
 80080c0:	ffff0007 	.word	0xffff0007

080080c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e19c      	b.n	8008412 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080d8:	4b8a      	ldr	r3, [pc, #552]	; (8008304 <HAL_RCC_ClockConfig+0x240>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 030f 	and.w	r3, r3, #15
 80080e0:	683a      	ldr	r2, [r7, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d910      	bls.n	8008108 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080e6:	4b87      	ldr	r3, [pc, #540]	; (8008304 <HAL_RCC_ClockConfig+0x240>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f023 020f 	bic.w	r2, r3, #15
 80080ee:	4985      	ldr	r1, [pc, #532]	; (8008304 <HAL_RCC_ClockConfig+0x240>)
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080f6:	4b83      	ldr	r3, [pc, #524]	; (8008304 <HAL_RCC_ClockConfig+0x240>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 030f 	and.w	r3, r3, #15
 80080fe:	683a      	ldr	r2, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d001      	beq.n	8008108 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e184      	b.n	8008412 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d010      	beq.n	8008136 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	691a      	ldr	r2, [r3, #16]
 8008118:	4b7b      	ldr	r3, [pc, #492]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008120:	429a      	cmp	r2, r3
 8008122:	d908      	bls.n	8008136 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008124:	4b78      	ldr	r3, [pc, #480]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	4975      	ldr	r1, [pc, #468]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008132:	4313      	orrs	r3, r2
 8008134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0308 	and.w	r3, r3, #8
 800813e:	2b00      	cmp	r3, #0
 8008140:	d010      	beq.n	8008164 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	695a      	ldr	r2, [r3, #20]
 8008146:	4b70      	ldr	r3, [pc, #448]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800814e:	429a      	cmp	r2, r3
 8008150:	d908      	bls.n	8008164 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008152:	4b6d      	ldr	r3, [pc, #436]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008154:	69db      	ldr	r3, [r3, #28]
 8008156:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	496a      	ldr	r1, [pc, #424]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008160:	4313      	orrs	r3, r2
 8008162:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f003 0310 	and.w	r3, r3, #16
 800816c:	2b00      	cmp	r3, #0
 800816e:	d010      	beq.n	8008192 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	699a      	ldr	r2, [r3, #24]
 8008174:	4b64      	ldr	r3, [pc, #400]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008176:	69db      	ldr	r3, [r3, #28]
 8008178:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800817c:	429a      	cmp	r2, r3
 800817e:	d908      	bls.n	8008192 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008180:	4b61      	ldr	r3, [pc, #388]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	495e      	ldr	r1, [pc, #376]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 800818e:	4313      	orrs	r3, r2
 8008190:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f003 0320 	and.w	r3, r3, #32
 800819a:	2b00      	cmp	r3, #0
 800819c:	d010      	beq.n	80081c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	69da      	ldr	r2, [r3, #28]
 80081a2:	4b59      	ldr	r3, [pc, #356]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d908      	bls.n	80081c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80081ae:	4b56      	ldr	r3, [pc, #344]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	4953      	ldr	r1, [pc, #332]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 80081bc:	4313      	orrs	r3, r2
 80081be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f003 0302 	and.w	r3, r3, #2
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d010      	beq.n	80081ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	68da      	ldr	r2, [r3, #12]
 80081d0:	4b4d      	ldr	r3, [pc, #308]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f003 030f 	and.w	r3, r3, #15
 80081d8:	429a      	cmp	r2, r3
 80081da:	d908      	bls.n	80081ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081dc:	4b4a      	ldr	r3, [pc, #296]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	f023 020f 	bic.w	r2, r3, #15
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	4947      	ldr	r1, [pc, #284]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 80081ea:	4313      	orrs	r3, r2
 80081ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d055      	beq.n	80082a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80081fa:	4b43      	ldr	r3, [pc, #268]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	4940      	ldr	r1, [pc, #256]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008208:	4313      	orrs	r3, r2
 800820a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2b02      	cmp	r3, #2
 8008212:	d107      	bne.n	8008224 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008214:	4b3c      	ldr	r3, [pc, #240]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d121      	bne.n	8008264 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008220:	2301      	movs	r3, #1
 8008222:	e0f6      	b.n	8008412 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	2b03      	cmp	r3, #3
 800822a:	d107      	bne.n	800823c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800822c:	4b36      	ldr	r3, [pc, #216]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008234:	2b00      	cmp	r3, #0
 8008236:	d115      	bne.n	8008264 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e0ea      	b.n	8008412 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d107      	bne.n	8008254 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008244:	4b30      	ldr	r3, [pc, #192]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824c:	2b00      	cmp	r3, #0
 800824e:	d109      	bne.n	8008264 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e0de      	b.n	8008412 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008254:	4b2c      	ldr	r3, [pc, #176]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f003 0304 	and.w	r3, r3, #4
 800825c:	2b00      	cmp	r3, #0
 800825e:	d101      	bne.n	8008264 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	e0d6      	b.n	8008412 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008264:	4b28      	ldr	r3, [pc, #160]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	f023 0207 	bic.w	r2, r3, #7
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	4925      	ldr	r1, [pc, #148]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008272:	4313      	orrs	r3, r2
 8008274:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008276:	f7fa facd 	bl	8002814 <HAL_GetTick>
 800827a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800827c:	e00a      	b.n	8008294 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800827e:	f7fa fac9 	bl	8002814 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	f241 3288 	movw	r2, #5000	; 0x1388
 800828c:	4293      	cmp	r3, r2
 800828e:	d901      	bls.n	8008294 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e0be      	b.n	8008412 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008294:	4b1c      	ldr	r3, [pc, #112]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	00db      	lsls	r3, r3, #3
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d1eb      	bne.n	800827e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d010      	beq.n	80082d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	68da      	ldr	r2, [r3, #12]
 80082b6:	4b14      	ldr	r3, [pc, #80]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f003 030f 	and.w	r3, r3, #15
 80082be:	429a      	cmp	r2, r3
 80082c0:	d208      	bcs.n	80082d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082c2:	4b11      	ldr	r3, [pc, #68]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 80082c4:	699b      	ldr	r3, [r3, #24]
 80082c6:	f023 020f 	bic.w	r2, r3, #15
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	490e      	ldr	r1, [pc, #56]	; (8008308 <HAL_RCC_ClockConfig+0x244>)
 80082d0:	4313      	orrs	r3, r2
 80082d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082d4:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <HAL_RCC_ClockConfig+0x240>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 030f 	and.w	r3, r3, #15
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d214      	bcs.n	800830c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082e2:	4b08      	ldr	r3, [pc, #32]	; (8008304 <HAL_RCC_ClockConfig+0x240>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f023 020f 	bic.w	r2, r3, #15
 80082ea:	4906      	ldr	r1, [pc, #24]	; (8008304 <HAL_RCC_ClockConfig+0x240>)
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082f2:	4b04      	ldr	r3, [pc, #16]	; (8008304 <HAL_RCC_ClockConfig+0x240>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 030f 	and.w	r3, r3, #15
 80082fa:	683a      	ldr	r2, [r7, #0]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d005      	beq.n	800830c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e086      	b.n	8008412 <HAL_RCC_ClockConfig+0x34e>
 8008304:	52002000 	.word	0x52002000
 8008308:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d010      	beq.n	800833a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	691a      	ldr	r2, [r3, #16]
 800831c:	4b3f      	ldr	r3, [pc, #252]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008324:	429a      	cmp	r2, r3
 8008326:	d208      	bcs.n	800833a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008328:	4b3c      	ldr	r3, [pc, #240]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 800832a:	699b      	ldr	r3, [r3, #24]
 800832c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	4939      	ldr	r1, [pc, #228]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 8008336:	4313      	orrs	r3, r2
 8008338:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b00      	cmp	r3, #0
 8008344:	d010      	beq.n	8008368 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	695a      	ldr	r2, [r3, #20]
 800834a:	4b34      	ldr	r3, [pc, #208]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008352:	429a      	cmp	r2, r3
 8008354:	d208      	bcs.n	8008368 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008356:	4b31      	ldr	r3, [pc, #196]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 8008358:	69db      	ldr	r3, [r3, #28]
 800835a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	695b      	ldr	r3, [r3, #20]
 8008362:	492e      	ldr	r1, [pc, #184]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 8008364:	4313      	orrs	r3, r2
 8008366:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 0310 	and.w	r3, r3, #16
 8008370:	2b00      	cmp	r3, #0
 8008372:	d010      	beq.n	8008396 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699a      	ldr	r2, [r3, #24]
 8008378:	4b28      	ldr	r3, [pc, #160]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 800837a:	69db      	ldr	r3, [r3, #28]
 800837c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008380:	429a      	cmp	r2, r3
 8008382:	d208      	bcs.n	8008396 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008384:	4b25      	ldr	r3, [pc, #148]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 8008386:	69db      	ldr	r3, [r3, #28]
 8008388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	4922      	ldr	r1, [pc, #136]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 8008392:	4313      	orrs	r3, r2
 8008394:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d010      	beq.n	80083c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	69da      	ldr	r2, [r3, #28]
 80083a6:	4b1d      	ldr	r3, [pc, #116]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 80083a8:	6a1b      	ldr	r3, [r3, #32]
 80083aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d208      	bcs.n	80083c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80083b2:	4b1a      	ldr	r3, [pc, #104]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 80083b4:	6a1b      	ldr	r3, [r3, #32]
 80083b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	4917      	ldr	r1, [pc, #92]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80083c4:	f000 f834 	bl	8008430 <HAL_RCC_GetSysClockFreq>
 80083c8:	4602      	mov	r2, r0
 80083ca:	4b14      	ldr	r3, [pc, #80]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	0a1b      	lsrs	r3, r3, #8
 80083d0:	f003 030f 	and.w	r3, r3, #15
 80083d4:	4912      	ldr	r1, [pc, #72]	; (8008420 <HAL_RCC_ClockConfig+0x35c>)
 80083d6:	5ccb      	ldrb	r3, [r1, r3]
 80083d8:	f003 031f 	and.w	r3, r3, #31
 80083dc:	fa22 f303 	lsr.w	r3, r2, r3
 80083e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80083e2:	4b0e      	ldr	r3, [pc, #56]	; (800841c <HAL_RCC_ClockConfig+0x358>)
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	f003 030f 	and.w	r3, r3, #15
 80083ea:	4a0d      	ldr	r2, [pc, #52]	; (8008420 <HAL_RCC_ClockConfig+0x35c>)
 80083ec:	5cd3      	ldrb	r3, [r2, r3]
 80083ee:	f003 031f 	and.w	r3, r3, #31
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	fa22 f303 	lsr.w	r3, r2, r3
 80083f8:	4a0a      	ldr	r2, [pc, #40]	; (8008424 <HAL_RCC_ClockConfig+0x360>)
 80083fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80083fc:	4a0a      	ldr	r2, [pc, #40]	; (8008428 <HAL_RCC_ClockConfig+0x364>)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008402:	4b0a      	ldr	r3, [pc, #40]	; (800842c <HAL_RCC_ClockConfig+0x368>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f7fa f9ba 	bl	8002780 <HAL_InitTick>
 800840c:	4603      	mov	r3, r0
 800840e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3718      	adds	r7, #24
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	58024400 	.word	0x58024400
 8008420:	0800cc20 	.word	0x0800cc20
 8008424:	24000004 	.word	0x24000004
 8008428:	24000000 	.word	0x24000000
 800842c:	2400000c 	.word	0x2400000c

08008430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008430:	b480      	push	{r7}
 8008432:	b089      	sub	sp, #36	; 0x24
 8008434:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008436:	4bb3      	ldr	r3, [pc, #716]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800843e:	2b18      	cmp	r3, #24
 8008440:	f200 8155 	bhi.w	80086ee <HAL_RCC_GetSysClockFreq+0x2be>
 8008444:	a201      	add	r2, pc, #4	; (adr r2, 800844c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844a:	bf00      	nop
 800844c:	080084b1 	.word	0x080084b1
 8008450:	080086ef 	.word	0x080086ef
 8008454:	080086ef 	.word	0x080086ef
 8008458:	080086ef 	.word	0x080086ef
 800845c:	080086ef 	.word	0x080086ef
 8008460:	080086ef 	.word	0x080086ef
 8008464:	080086ef 	.word	0x080086ef
 8008468:	080086ef 	.word	0x080086ef
 800846c:	080084d7 	.word	0x080084d7
 8008470:	080086ef 	.word	0x080086ef
 8008474:	080086ef 	.word	0x080086ef
 8008478:	080086ef 	.word	0x080086ef
 800847c:	080086ef 	.word	0x080086ef
 8008480:	080086ef 	.word	0x080086ef
 8008484:	080086ef 	.word	0x080086ef
 8008488:	080086ef 	.word	0x080086ef
 800848c:	080084dd 	.word	0x080084dd
 8008490:	080086ef 	.word	0x080086ef
 8008494:	080086ef 	.word	0x080086ef
 8008498:	080086ef 	.word	0x080086ef
 800849c:	080086ef 	.word	0x080086ef
 80084a0:	080086ef 	.word	0x080086ef
 80084a4:	080086ef 	.word	0x080086ef
 80084a8:	080086ef 	.word	0x080086ef
 80084ac:	080084e3 	.word	0x080084e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084b0:	4b94      	ldr	r3, [pc, #592]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d009      	beq.n	80084d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084bc:	4b91      	ldr	r3, [pc, #580]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	08db      	lsrs	r3, r3, #3
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	4a90      	ldr	r2, [pc, #576]	; (8008708 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
 80084cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80084ce:	e111      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80084d0:	4b8d      	ldr	r3, [pc, #564]	; (8008708 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084d2:	61bb      	str	r3, [r7, #24]
      break;
 80084d4:	e10e      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80084d6:	4b8d      	ldr	r3, [pc, #564]	; (800870c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80084d8:	61bb      	str	r3, [r7, #24]
      break;
 80084da:	e10b      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80084dc:	4b8c      	ldr	r3, [pc, #560]	; (8008710 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80084de:	61bb      	str	r3, [r7, #24]
      break;
 80084e0:	e108      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084e2:	4b88      	ldr	r3, [pc, #544]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80084ec:	4b85      	ldr	r3, [pc, #532]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f0:	091b      	lsrs	r3, r3, #4
 80084f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80084f8:	4b82      	ldr	r3, [pc, #520]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008502:	4b80      	ldr	r3, [pc, #512]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008506:	08db      	lsrs	r3, r3, #3
 8008508:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	fb02 f303 	mul.w	r3, r2, r3
 8008512:	ee07 3a90 	vmov	s15, r3
 8008516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800851a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 80e1 	beq.w	80086e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2b02      	cmp	r3, #2
 800852a:	f000 8083 	beq.w	8008634 <HAL_RCC_GetSysClockFreq+0x204>
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	2b02      	cmp	r3, #2
 8008532:	f200 80a1 	bhi.w	8008678 <HAL_RCC_GetSysClockFreq+0x248>
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d003      	beq.n	8008544 <HAL_RCC_GetSysClockFreq+0x114>
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d056      	beq.n	80085f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008542:	e099      	b.n	8008678 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008544:	4b6f      	ldr	r3, [pc, #444]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f003 0320 	and.w	r3, r3, #32
 800854c:	2b00      	cmp	r3, #0
 800854e:	d02d      	beq.n	80085ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008550:	4b6c      	ldr	r3, [pc, #432]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	08db      	lsrs	r3, r3, #3
 8008556:	f003 0303 	and.w	r3, r3, #3
 800855a:	4a6b      	ldr	r2, [pc, #428]	; (8008708 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800855c:	fa22 f303 	lsr.w	r3, r2, r3
 8008560:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	ee07 3a90 	vmov	s15, r3
 8008568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	ee07 3a90 	vmov	s15, r3
 8008572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800857a:	4b62      	ldr	r3, [pc, #392]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800857c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800857e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008582:	ee07 3a90 	vmov	s15, r3
 8008586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800858a:	ed97 6a02 	vldr	s12, [r7, #8]
 800858e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008714 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800859a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800859e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80085aa:	e087      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085b6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008718 <HAL_RCC_GetSysClockFreq+0x2e8>
 80085ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085be:	4b51      	ldr	r3, [pc, #324]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085c6:	ee07 3a90 	vmov	s15, r3
 80085ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80085d2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008714 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80085ee:	e065      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	ee07 3a90 	vmov	s15, r3
 80085f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fa:	eddf 6a48 	vldr	s13, [pc, #288]	; 800871c <HAL_RCC_GetSysClockFreq+0x2ec>
 80085fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008602:	4b40      	ldr	r3, [pc, #256]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800860a:	ee07 3a90 	vmov	s15, r3
 800860e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008612:	ed97 6a02 	vldr	s12, [r7, #8]
 8008616:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008714 <HAL_RCC_GetSysClockFreq+0x2e4>
 800861a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800861e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800862a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800862e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008632:	e043      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008720 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008642:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008646:	4b2f      	ldr	r3, [pc, #188]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800864e:	ee07 3a90 	vmov	s15, r3
 8008652:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008656:	ed97 6a02 	vldr	s12, [r7, #8]
 800865a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008714 <HAL_RCC_GetSysClockFreq+0x2e4>
 800865e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008662:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008666:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800866a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800866e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008672:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008676:	e021      	b.n	80086bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008682:	eddf 6a26 	vldr	s13, [pc, #152]	; 800871c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868a:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869a:	ed97 6a02 	vldr	s12, [r7, #8]
 800869e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008714 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80086bc:	4b11      	ldr	r3, [pc, #68]	; (8008704 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c0:	0a5b      	lsrs	r3, r3, #9
 80086c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086c6:	3301      	adds	r3, #1
 80086c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	ee07 3a90 	vmov	s15, r3
 80086d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80086d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086e0:	ee17 3a90 	vmov	r3, s15
 80086e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80086e6:	e005      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80086e8:	2300      	movs	r3, #0
 80086ea:	61bb      	str	r3, [r7, #24]
      break;
 80086ec:	e002      	b.n	80086f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80086ee:	4b07      	ldr	r3, [pc, #28]	; (800870c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80086f0:	61bb      	str	r3, [r7, #24]
      break;
 80086f2:	bf00      	nop
  }

  return sysclockfreq;
 80086f4:	69bb      	ldr	r3, [r7, #24]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3724      	adds	r7, #36	; 0x24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	58024400 	.word	0x58024400
 8008708:	03d09000 	.word	0x03d09000
 800870c:	003d0900 	.word	0x003d0900
 8008710:	016e3600 	.word	0x016e3600
 8008714:	46000000 	.word	0x46000000
 8008718:	4c742400 	.word	0x4c742400
 800871c:	4a742400 	.word	0x4a742400
 8008720:	4bb71b00 	.word	0x4bb71b00

08008724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800872a:	f7ff fe81 	bl	8008430 <HAL_RCC_GetSysClockFreq>
 800872e:	4602      	mov	r2, r0
 8008730:	4b10      	ldr	r3, [pc, #64]	; (8008774 <HAL_RCC_GetHCLKFreq+0x50>)
 8008732:	699b      	ldr	r3, [r3, #24]
 8008734:	0a1b      	lsrs	r3, r3, #8
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	490f      	ldr	r1, [pc, #60]	; (8008778 <HAL_RCC_GetHCLKFreq+0x54>)
 800873c:	5ccb      	ldrb	r3, [r1, r3]
 800873e:	f003 031f 	and.w	r3, r3, #31
 8008742:	fa22 f303 	lsr.w	r3, r2, r3
 8008746:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008748:	4b0a      	ldr	r3, [pc, #40]	; (8008774 <HAL_RCC_GetHCLKFreq+0x50>)
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	4a09      	ldr	r2, [pc, #36]	; (8008778 <HAL_RCC_GetHCLKFreq+0x54>)
 8008752:	5cd3      	ldrb	r3, [r2, r3]
 8008754:	f003 031f 	and.w	r3, r3, #31
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	fa22 f303 	lsr.w	r3, r2, r3
 800875e:	4a07      	ldr	r2, [pc, #28]	; (800877c <HAL_RCC_GetHCLKFreq+0x58>)
 8008760:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008762:	4a07      	ldr	r2, [pc, #28]	; (8008780 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008768:	4b04      	ldr	r3, [pc, #16]	; (800877c <HAL_RCC_GetHCLKFreq+0x58>)
 800876a:	681b      	ldr	r3, [r3, #0]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	58024400 	.word	0x58024400
 8008778:	0800cc20 	.word	0x0800cc20
 800877c:	24000004 	.word	0x24000004
 8008780:	24000000 	.word	0x24000000

08008784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008788:	f7ff ffcc 	bl	8008724 <HAL_RCC_GetHCLKFreq>
 800878c:	4602      	mov	r2, r0
 800878e:	4b06      	ldr	r3, [pc, #24]	; (80087a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008790:	69db      	ldr	r3, [r3, #28]
 8008792:	091b      	lsrs	r3, r3, #4
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	4904      	ldr	r1, [pc, #16]	; (80087ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800879a:	5ccb      	ldrb	r3, [r1, r3]
 800879c:	f003 031f 	and.w	r3, r3, #31
 80087a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	bd80      	pop	{r7, pc}
 80087a8:	58024400 	.word	0x58024400
 80087ac:	0800cc20 	.word	0x0800cc20

080087b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80087b4:	f7ff ffb6 	bl	8008724 <HAL_RCC_GetHCLKFreq>
 80087b8:	4602      	mov	r2, r0
 80087ba:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	0a1b      	lsrs	r3, r3, #8
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	4904      	ldr	r1, [pc, #16]	; (80087d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80087c6:	5ccb      	ldrb	r3, [r1, r3]
 80087c8:	f003 031f 	and.w	r3, r3, #31
 80087cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	58024400 	.word	0x58024400
 80087d8:	0800cc20 	.word	0x0800cc20

080087dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80087e0:	b0ca      	sub	sp, #296	; 0x128
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80087e8:	2300      	movs	r3, #0
 80087ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80087ee:	2300      	movs	r3, #0
 80087f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80087f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fc:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008800:	2500      	movs	r5, #0
 8008802:	ea54 0305 	orrs.w	r3, r4, r5
 8008806:	d049      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800880c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800880e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008812:	d02f      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008814:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008818:	d828      	bhi.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800881a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800881e:	d01a      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008824:	d822      	bhi.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800882a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800882e:	d007      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008830:	e01c      	b.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008832:	4bb8      	ldr	r3, [pc, #736]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008836:	4ab7      	ldr	r2, [pc, #732]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800883c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800883e:	e01a      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008844:	3308      	adds	r3, #8
 8008846:	2102      	movs	r1, #2
 8008848:	4618      	mov	r0, r3
 800884a:	f002 fb61 	bl	800af10 <RCCEx_PLL2_Config>
 800884e:	4603      	mov	r3, r0
 8008850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008854:	e00f      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800885a:	3328      	adds	r3, #40	; 0x28
 800885c:	2102      	movs	r1, #2
 800885e:	4618      	mov	r0, r3
 8008860:	f002 fc08 	bl	800b074 <RCCEx_PLL3_Config>
 8008864:	4603      	mov	r3, r0
 8008866:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800886a:	e004      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008872:	e000      	b.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008874:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008876:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800887e:	4ba5      	ldr	r3, [pc, #660]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008882:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800888a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800888c:	4aa1      	ldr	r2, [pc, #644]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800888e:	430b      	orrs	r3, r1
 8008890:	6513      	str	r3, [r2, #80]	; 0x50
 8008892:	e003      	b.n	800889c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008894:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008898:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800889c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80088a8:	f04f 0900 	mov.w	r9, #0
 80088ac:	ea58 0309 	orrs.w	r3, r8, r9
 80088b0:	d047      	beq.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088b8:	2b04      	cmp	r3, #4
 80088ba:	d82a      	bhi.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80088bc:	a201      	add	r2, pc, #4	; (adr r2, 80088c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80088be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088c2:	bf00      	nop
 80088c4:	080088d9 	.word	0x080088d9
 80088c8:	080088e7 	.word	0x080088e7
 80088cc:	080088fd 	.word	0x080088fd
 80088d0:	0800891b 	.word	0x0800891b
 80088d4:	0800891b 	.word	0x0800891b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088d8:	4b8e      	ldr	r3, [pc, #568]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	4a8d      	ldr	r2, [pc, #564]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088e4:	e01a      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80088e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088ea:	3308      	adds	r3, #8
 80088ec:	2100      	movs	r1, #0
 80088ee:	4618      	mov	r0, r3
 80088f0:	f002 fb0e 	bl	800af10 <RCCEx_PLL2_Config>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088fa:	e00f      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008900:	3328      	adds	r3, #40	; 0x28
 8008902:	2100      	movs	r1, #0
 8008904:	4618      	mov	r0, r3
 8008906:	f002 fbb5 	bl	800b074 <RCCEx_PLL3_Config>
 800890a:	4603      	mov	r3, r0
 800890c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008910:	e004      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008918:	e000      	b.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800891a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800891c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008920:	2b00      	cmp	r3, #0
 8008922:	d10a      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008924:	4b7b      	ldr	r3, [pc, #492]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008928:	f023 0107 	bic.w	r1, r3, #7
 800892c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008932:	4a78      	ldr	r2, [pc, #480]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008934:	430b      	orrs	r3, r1
 8008936:	6513      	str	r3, [r2, #80]	; 0x50
 8008938:	e003      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800893e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800894e:	f04f 0b00 	mov.w	fp, #0
 8008952:	ea5a 030b 	orrs.w	r3, sl, fp
 8008956:	d04c      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800895c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800895e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008962:	d030      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008968:	d829      	bhi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800896a:	2bc0      	cmp	r3, #192	; 0xc0
 800896c:	d02d      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800896e:	2bc0      	cmp	r3, #192	; 0xc0
 8008970:	d825      	bhi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008972:	2b80      	cmp	r3, #128	; 0x80
 8008974:	d018      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008976:	2b80      	cmp	r3, #128	; 0x80
 8008978:	d821      	bhi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d002      	beq.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800897e:	2b40      	cmp	r3, #64	; 0x40
 8008980:	d007      	beq.n	8008992 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008982:	e01c      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008984:	4b63      	ldr	r3, [pc, #396]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	4a62      	ldr	r2, [pc, #392]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800898a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800898e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008990:	e01c      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008996:	3308      	adds	r3, #8
 8008998:	2100      	movs	r1, #0
 800899a:	4618      	mov	r0, r3
 800899c:	f002 fab8 	bl	800af10 <RCCEx_PLL2_Config>
 80089a0:	4603      	mov	r3, r0
 80089a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80089a6:	e011      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089ac:	3328      	adds	r3, #40	; 0x28
 80089ae:	2100      	movs	r1, #0
 80089b0:	4618      	mov	r0, r3
 80089b2:	f002 fb5f 	bl	800b074 <RCCEx_PLL3_Config>
 80089b6:	4603      	mov	r3, r0
 80089b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80089bc:	e006      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80089c4:	e002      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80089c6:	bf00      	nop
 80089c8:	e000      	b.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80089ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80089d4:	4b4f      	ldr	r3, [pc, #316]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80089dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e2:	4a4c      	ldr	r2, [pc, #304]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089e4:	430b      	orrs	r3, r1
 80089e6:	6513      	str	r3, [r2, #80]	; 0x50
 80089e8:	e003      	b.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80089f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089fa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80089fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008a02:	2300      	movs	r3, #0
 8008a04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008a08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	d053      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a1e:	d035      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008a20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008a24:	d82e      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a2a:	d031      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008a2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008a30:	d828      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a36:	d01a      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a3c:	d822      	bhi.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d003      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008a42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a46:	d007      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008a48:	e01c      	b.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a4a:	4b32      	ldr	r3, [pc, #200]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	4a31      	ldr	r2, [pc, #196]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a56:	e01c      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a5c:	3308      	adds	r3, #8
 8008a5e:	2100      	movs	r1, #0
 8008a60:	4618      	mov	r0, r3
 8008a62:	f002 fa55 	bl	800af10 <RCCEx_PLL2_Config>
 8008a66:	4603      	mov	r3, r0
 8008a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a6c:	e011      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a72:	3328      	adds	r3, #40	; 0x28
 8008a74:	2100      	movs	r1, #0
 8008a76:	4618      	mov	r0, r3
 8008a78:	f002 fafc 	bl	800b074 <RCCEx_PLL3_Config>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a82:	e006      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a8a:	e002      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008a8c:	bf00      	nop
 8008a8e:	e000      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008a9a:	4b1e      	ldr	r3, [pc, #120]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a9e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008aaa:	4a1a      	ldr	r2, [pc, #104]	; (8008b14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008aac:	430b      	orrs	r3, r1
 8008aae:	6593      	str	r3, [r2, #88]	; 0x58
 8008ab0:	e003      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ab6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008ac6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008aca:	2300      	movs	r3, #0
 8008acc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008ad0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	d056      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ade:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008ae2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ae6:	d038      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008ae8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008aec:	d831      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008aee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008af2:	d034      	beq.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008af4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008af8:	d82b      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008afa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008afe:	d01d      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008b00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b04:	d825      	bhi.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d006      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008b0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b0e:	d00a      	beq.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008b10:	e01f      	b.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b12:	bf00      	nop
 8008b14:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b18:	4ba2      	ldr	r3, [pc, #648]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	4aa1      	ldr	r2, [pc, #644]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b24:	e01c      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	2100      	movs	r1, #0
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f002 f9ee 	bl	800af10 <RCCEx_PLL2_Config>
 8008b34:	4603      	mov	r3, r0
 8008b36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008b3a:	e011      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b40:	3328      	adds	r3, #40	; 0x28
 8008b42:	2100      	movs	r1, #0
 8008b44:	4618      	mov	r0, r3
 8008b46:	f002 fa95 	bl	800b074 <RCCEx_PLL3_Config>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b50:	e006      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b58:	e002      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008b5a:	bf00      	nop
 8008b5c:	e000      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10b      	bne.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008b68:	4b8e      	ldr	r3, [pc, #568]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b78:	4a8a      	ldr	r2, [pc, #552]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b7a:	430b      	orrs	r3, r1
 8008b7c:	6593      	str	r3, [r2, #88]	; 0x58
 8008b7e:	e003      	b.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b90:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008b94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008b9e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	d03a      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bae:	2b30      	cmp	r3, #48	; 0x30
 8008bb0:	d01f      	beq.n	8008bf2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008bb2:	2b30      	cmp	r3, #48	; 0x30
 8008bb4:	d819      	bhi.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008bb6:	2b20      	cmp	r3, #32
 8008bb8:	d00c      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008bba:	2b20      	cmp	r3, #32
 8008bbc:	d815      	bhi.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d019      	beq.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d111      	bne.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bc6:	4b77      	ldr	r3, [pc, #476]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bca:	4a76      	ldr	r2, [pc, #472]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008bd2:	e011      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd8:	3308      	adds	r3, #8
 8008bda:	2102      	movs	r1, #2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f002 f997 	bl	800af10 <RCCEx_PLL2_Config>
 8008be2:	4603      	mov	r3, r0
 8008be4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008be8:	e006      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008bf0:	e002      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008bf2:	bf00      	nop
 8008bf4:	e000      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008bf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10a      	bne.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c00:	4b68      	ldr	r3, [pc, #416]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c04:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c0e:	4a65      	ldr	r2, [pc, #404]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c10:	430b      	orrs	r3, r1
 8008c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c14:	e003      	b.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c26:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008c2a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008c34:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	d051      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008c3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c48:	d035      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c4e:	d82e      	bhi.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c50:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c54:	d031      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008c56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c5a:	d828      	bhi.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c60:	d01a      	beq.n	8008c98 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008c62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c66:	d822      	bhi.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d003      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c70:	d007      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008c72:	e01c      	b.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c74:	4b4b      	ldr	r3, [pc, #300]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	4a4a      	ldr	r2, [pc, #296]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c80:	e01c      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c86:	3308      	adds	r3, #8
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f002 f940 	bl	800af10 <RCCEx_PLL2_Config>
 8008c90:	4603      	mov	r3, r0
 8008c92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008c96:	e011      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c9c:	3328      	adds	r3, #40	; 0x28
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f002 f9e7 	bl	800b074 <RCCEx_PLL3_Config>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008cac:	e006      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008cb4:	e002      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008cb6:	bf00      	nop
 8008cb8:	e000      	b.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008cc4:	4b37      	ldr	r3, [pc, #220]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cd2:	4a34      	ldr	r2, [pc, #208]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cd4:	430b      	orrs	r3, r1
 8008cd6:	6513      	str	r3, [r2, #80]	; 0x50
 8008cd8:	e003      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008cde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cea:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008cee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008cf8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	d056      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d0c:	d033      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d12:	d82c      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d18:	d02f      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d1e:	d826      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d20:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d24:	d02b      	beq.n	8008d7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008d26:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008d2a:	d820      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d30:	d012      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008d32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d36:	d81a      	bhi.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d022      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d40:	d115      	bne.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d46:	3308      	adds	r3, #8
 8008d48:	2101      	movs	r1, #1
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f002 f8e0 	bl	800af10 <RCCEx_PLL2_Config>
 8008d50:	4603      	mov	r3, r0
 8008d52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d56:	e015      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d5c:	3328      	adds	r3, #40	; 0x28
 8008d5e:	2101      	movs	r1, #1
 8008d60:	4618      	mov	r0, r3
 8008d62:	f002 f987 	bl	800b074 <RCCEx_PLL3_Config>
 8008d66:	4603      	mov	r3, r0
 8008d68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d6c:	e00a      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d74:	e006      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d76:	bf00      	nop
 8008d78:	e004      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d7a:	bf00      	nop
 8008d7c:	e002      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d7e:	bf00      	nop
 8008d80:	e000      	b.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10d      	bne.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d90:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d9a:	4a02      	ldr	r2, [pc, #8]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d9c:	430b      	orrs	r3, r1
 8008d9e:	6513      	str	r3, [r2, #80]	; 0x50
 8008da0:	e006      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008da2:	bf00      	nop
 8008da4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008da8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008dbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008dc6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008dca:	460b      	mov	r3, r1
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	d055      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ddc:	d033      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008de2:	d82c      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008de8:	d02f      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dee:	d826      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008df0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008df4:	d02b      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008df6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008dfa:	d820      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e00:	d012      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008e02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e06:	d81a      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d022      	beq.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008e0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e10:	d115      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e16:	3308      	adds	r3, #8
 8008e18:	2101      	movs	r1, #1
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f002 f878 	bl	800af10 <RCCEx_PLL2_Config>
 8008e20:	4603      	mov	r3, r0
 8008e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e26:	e015      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e2c:	3328      	adds	r3, #40	; 0x28
 8008e2e:	2101      	movs	r1, #1
 8008e30:	4618      	mov	r0, r3
 8008e32:	f002 f91f 	bl	800b074 <RCCEx_PLL3_Config>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e3c:	e00a      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e44:	e006      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e46:	bf00      	nop
 8008e48:	e004      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e4a:	bf00      	nop
 8008e4c:	e002      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e4e:	bf00      	nop
 8008e50:	e000      	b.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d10b      	bne.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e5c:	4ba3      	ldr	r3, [pc, #652]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e60:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e6c:	4a9f      	ldr	r2, [pc, #636]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	6593      	str	r3, [r2, #88]	; 0x58
 8008e72:	e003      	b.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e78:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008e88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8008e92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008e96:	460b      	mov	r3, r1
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	d037      	beq.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ea6:	d00e      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008eac:	d816      	bhi.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d018      	beq.n	8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008eb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008eb6:	d111      	bne.n	8008edc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008eb8:	4b8c      	ldr	r3, [pc, #560]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ebc:	4a8b      	ldr	r2, [pc, #556]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ebe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ec2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008ec4:	e00f      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eca:	3308      	adds	r3, #8
 8008ecc:	2101      	movs	r1, #1
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f002 f81e 	bl	800af10 <RCCEx_PLL2_Config>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008eda:	e004      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ee2:	e000      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d10a      	bne.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008eee:	4b7f      	ldr	r3, [pc, #508]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ef2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efc:	4a7b      	ldr	r2, [pc, #492]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008efe:	430b      	orrs	r3, r1
 8008f00:	6513      	str	r3, [r2, #80]	; 0x50
 8008f02:	e003      	b.n	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f14:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8008f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008f22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8008f26:	460b      	mov	r3, r1
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	d039      	beq.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f32:	2b03      	cmp	r3, #3
 8008f34:	d81c      	bhi.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008f36:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f79 	.word	0x08008f79
 8008f40:	08008f4d 	.word	0x08008f4d
 8008f44:	08008f5b 	.word	0x08008f5b
 8008f48:	08008f79 	.word	0x08008f79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f4c:	4b67      	ldr	r3, [pc, #412]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f50:	4a66      	ldr	r2, [pc, #408]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f58:	e00f      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f5e:	3308      	adds	r3, #8
 8008f60:	2102      	movs	r1, #2
 8008f62:	4618      	mov	r0, r3
 8008f64:	f001 ffd4 	bl	800af10 <RCCEx_PLL2_Config>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f6e:	e004      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f70:	2301      	movs	r3, #1
 8008f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f76:	e000      	b.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10a      	bne.n	8008f98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008f82:	4b5a      	ldr	r3, [pc, #360]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f86:	f023 0103 	bic.w	r1, r3, #3
 8008f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f90:	4a56      	ldr	r2, [pc, #344]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f92:	430b      	orrs	r3, r1
 8008f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f96:	e003      	b.n	8008fa0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8008fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fb6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	f000 809f 	beq.w	8009100 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fc2:	4b4b      	ldr	r3, [pc, #300]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a4a      	ldr	r2, [pc, #296]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fcc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008fce:	f7f9 fc21 	bl	8002814 <HAL_GetTick>
 8008fd2:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008fd6:	e00b      	b.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fd8:	f7f9 fc1c 	bl	8002814 <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	2b64      	cmp	r3, #100	; 0x64
 8008fe6:	d903      	bls.n	8008ff0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fee:	e005      	b.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008ff0:	4b3f      	ldr	r3, [pc, #252]	; (80090f0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d0ed      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009000:	2b00      	cmp	r3, #0
 8009002:	d179      	bne.n	80090f8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009004:	4b39      	ldr	r3, [pc, #228]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800900c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009010:	4053      	eors	r3, r2
 8009012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009016:	2b00      	cmp	r3, #0
 8009018:	d015      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800901a:	4b34      	ldr	r3, [pc, #208]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800901c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800901e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009022:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009026:	4b31      	ldr	r3, [pc, #196]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800902a:	4a30      	ldr	r2, [pc, #192]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800902c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009030:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009032:	4b2e      	ldr	r3, [pc, #184]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009036:	4a2d      	ldr	r2, [pc, #180]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800903c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800903e:	4a2b      	ldr	r2, [pc, #172]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009040:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009044:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800904a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800904e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009052:	d118      	bne.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009054:	f7f9 fbde 	bl	8002814 <HAL_GetTick>
 8009058:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800905c:	e00d      	b.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800905e:	f7f9 fbd9 	bl	8002814 <HAL_GetTick>
 8009062:	4602      	mov	r2, r0
 8009064:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009068:	1ad2      	subs	r2, r2, r3
 800906a:	f241 3388 	movw	r3, #5000	; 0x1388
 800906e:	429a      	cmp	r2, r3
 8009070:	d903      	bls.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009078:	e005      	b.n	8009086 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800907a:	4b1c      	ldr	r3, [pc, #112]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800907c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907e:	f003 0302 	and.w	r3, r3, #2
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0eb      	beq.n	800905e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800908a:	2b00      	cmp	r3, #0
 800908c:	d129      	bne.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800908e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009092:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800909a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800909e:	d10e      	bne.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80090a0:	4b12      	ldr	r3, [pc, #72]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a2:	691b      	ldr	r3, [r3, #16]
 80090a4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80090a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80090b0:	091a      	lsrs	r2, r3, #4
 80090b2:	4b10      	ldr	r3, [pc, #64]	; (80090f4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80090b4:	4013      	ands	r3, r2
 80090b6:	4a0d      	ldr	r2, [pc, #52]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090b8:	430b      	orrs	r3, r1
 80090ba:	6113      	str	r3, [r2, #16]
 80090bc:	e005      	b.n	80090ca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80090be:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	4a0a      	ldr	r2, [pc, #40]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80090c8:	6113      	str	r3, [r2, #16]
 80090ca:	4b08      	ldr	r3, [pc, #32]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090cc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80090ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80090d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090da:	4a04      	ldr	r2, [pc, #16]	; (80090ec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090dc:	430b      	orrs	r3, r1
 80090de:	6713      	str	r3, [r2, #112]	; 0x70
 80090e0:	e00e      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80090e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80090ea:	e009      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80090ec:	58024400 	.word	0x58024400
 80090f0:	58024800 	.word	0x58024800
 80090f4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009108:	f002 0301 	and.w	r3, r2, #1
 800910c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009110:	2300      	movs	r3, #0
 8009112:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009116:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800911a:	460b      	mov	r3, r1
 800911c:	4313      	orrs	r3, r2
 800911e:	f000 8089 	beq.w	8009234 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009122:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009128:	2b28      	cmp	r3, #40	; 0x28
 800912a:	d86b      	bhi.n	8009204 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800912c:	a201      	add	r2, pc, #4	; (adr r2, 8009134 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800912e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009132:	bf00      	nop
 8009134:	0800920d 	.word	0x0800920d
 8009138:	08009205 	.word	0x08009205
 800913c:	08009205 	.word	0x08009205
 8009140:	08009205 	.word	0x08009205
 8009144:	08009205 	.word	0x08009205
 8009148:	08009205 	.word	0x08009205
 800914c:	08009205 	.word	0x08009205
 8009150:	08009205 	.word	0x08009205
 8009154:	080091d9 	.word	0x080091d9
 8009158:	08009205 	.word	0x08009205
 800915c:	08009205 	.word	0x08009205
 8009160:	08009205 	.word	0x08009205
 8009164:	08009205 	.word	0x08009205
 8009168:	08009205 	.word	0x08009205
 800916c:	08009205 	.word	0x08009205
 8009170:	08009205 	.word	0x08009205
 8009174:	080091ef 	.word	0x080091ef
 8009178:	08009205 	.word	0x08009205
 800917c:	08009205 	.word	0x08009205
 8009180:	08009205 	.word	0x08009205
 8009184:	08009205 	.word	0x08009205
 8009188:	08009205 	.word	0x08009205
 800918c:	08009205 	.word	0x08009205
 8009190:	08009205 	.word	0x08009205
 8009194:	0800920d 	.word	0x0800920d
 8009198:	08009205 	.word	0x08009205
 800919c:	08009205 	.word	0x08009205
 80091a0:	08009205 	.word	0x08009205
 80091a4:	08009205 	.word	0x08009205
 80091a8:	08009205 	.word	0x08009205
 80091ac:	08009205 	.word	0x08009205
 80091b0:	08009205 	.word	0x08009205
 80091b4:	0800920d 	.word	0x0800920d
 80091b8:	08009205 	.word	0x08009205
 80091bc:	08009205 	.word	0x08009205
 80091c0:	08009205 	.word	0x08009205
 80091c4:	08009205 	.word	0x08009205
 80091c8:	08009205 	.word	0x08009205
 80091cc:	08009205 	.word	0x08009205
 80091d0:	08009205 	.word	0x08009205
 80091d4:	0800920d 	.word	0x0800920d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80091d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091dc:	3308      	adds	r3, #8
 80091de:	2101      	movs	r1, #1
 80091e0:	4618      	mov	r0, r3
 80091e2:	f001 fe95 	bl	800af10 <RCCEx_PLL2_Config>
 80091e6:	4603      	mov	r3, r0
 80091e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80091ec:	e00f      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f2:	3328      	adds	r3, #40	; 0x28
 80091f4:	2101      	movs	r1, #1
 80091f6:	4618      	mov	r0, r3
 80091f8:	f001 ff3c 	bl	800b074 <RCCEx_PLL3_Config>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009202:	e004      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800920a:	e000      	b.n	800920e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800920c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800920e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009212:	2b00      	cmp	r3, #0
 8009214:	d10a      	bne.n	800922c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009216:	4bbf      	ldr	r3, [pc, #764]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800921a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800921e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009222:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009224:	4abb      	ldr	r2, [pc, #748]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009226:	430b      	orrs	r3, r1
 8009228:	6553      	str	r3, [r2, #84]	; 0x54
 800922a:	e003      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800922c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009230:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923c:	f002 0302 	and.w	r3, r2, #2
 8009240:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009244:	2300      	movs	r3, #0
 8009246:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800924a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800924e:	460b      	mov	r3, r1
 8009250:	4313      	orrs	r3, r2
 8009252:	d041      	beq.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800925a:	2b05      	cmp	r3, #5
 800925c:	d824      	bhi.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800925e:	a201      	add	r2, pc, #4	; (adr r2, 8009264 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009264:	080092b1 	.word	0x080092b1
 8009268:	0800927d 	.word	0x0800927d
 800926c:	08009293 	.word	0x08009293
 8009270:	080092b1 	.word	0x080092b1
 8009274:	080092b1 	.word	0x080092b1
 8009278:	080092b1 	.word	0x080092b1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800927c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009280:	3308      	adds	r3, #8
 8009282:	2101      	movs	r1, #1
 8009284:	4618      	mov	r0, r3
 8009286:	f001 fe43 	bl	800af10 <RCCEx_PLL2_Config>
 800928a:	4603      	mov	r3, r0
 800928c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009290:	e00f      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009296:	3328      	adds	r3, #40	; 0x28
 8009298:	2101      	movs	r1, #1
 800929a:	4618      	mov	r0, r3
 800929c:	f001 feea 	bl	800b074 <RCCEx_PLL3_Config>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80092a6:	e004      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092a8:	2301      	movs	r3, #1
 80092aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092ae:	e000      	b.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80092b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10a      	bne.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092ba:	4b96      	ldr	r3, [pc, #600]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092be:	f023 0107 	bic.w	r1, r3, #7
 80092c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092c8:	4a92      	ldr	r2, [pc, #584]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092ca:	430b      	orrs	r3, r1
 80092cc:	6553      	str	r3, [r2, #84]	; 0x54
 80092ce:	e003      	b.n	80092d8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80092d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e0:	f002 0304 	and.w	r3, r2, #4
 80092e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80092e8:	2300      	movs	r3, #0
 80092ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092ee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4313      	orrs	r3, r2
 80092f6:	d044      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80092f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009300:	2b05      	cmp	r3, #5
 8009302:	d825      	bhi.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009304:	a201      	add	r2, pc, #4	; (adr r2, 800930c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930a:	bf00      	nop
 800930c:	08009359 	.word	0x08009359
 8009310:	08009325 	.word	0x08009325
 8009314:	0800933b 	.word	0x0800933b
 8009318:	08009359 	.word	0x08009359
 800931c:	08009359 	.word	0x08009359
 8009320:	08009359 	.word	0x08009359
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009324:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009328:	3308      	adds	r3, #8
 800932a:	2101      	movs	r1, #1
 800932c:	4618      	mov	r0, r3
 800932e:	f001 fdef 	bl	800af10 <RCCEx_PLL2_Config>
 8009332:	4603      	mov	r3, r0
 8009334:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009338:	e00f      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800933a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933e:	3328      	adds	r3, #40	; 0x28
 8009340:	2101      	movs	r1, #1
 8009342:	4618      	mov	r0, r3
 8009344:	f001 fe96 	bl	800b074 <RCCEx_PLL3_Config>
 8009348:	4603      	mov	r3, r0
 800934a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800934e:	e004      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009356:	e000      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800935a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800935e:	2b00      	cmp	r3, #0
 8009360:	d10b      	bne.n	800937a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009362:	4b6c      	ldr	r3, [pc, #432]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009366:	f023 0107 	bic.w	r1, r3, #7
 800936a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800936e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009372:	4a68      	ldr	r2, [pc, #416]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009374:	430b      	orrs	r3, r1
 8009376:	6593      	str	r3, [r2, #88]	; 0x58
 8009378:	e003      	b.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800937a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800937e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800938a:	f002 0320 	and.w	r3, r2, #32
 800938e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009392:	2300      	movs	r3, #0
 8009394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009398:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800939c:	460b      	mov	r3, r1
 800939e:	4313      	orrs	r3, r2
 80093a0:	d055      	beq.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80093a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ae:	d033      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80093b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093b4:	d82c      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ba:	d02f      	beq.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80093bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093c0:	d826      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093c6:	d02b      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80093c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093cc:	d820      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d2:	d012      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80093d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093d8:	d81a      	bhi.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d022      	beq.n	8009424 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80093de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093e2:	d115      	bne.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093e8:	3308      	adds	r3, #8
 80093ea:	2100      	movs	r1, #0
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 fd8f 	bl	800af10 <RCCEx_PLL2_Config>
 80093f2:	4603      	mov	r3, r0
 80093f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80093f8:	e015      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093fe:	3328      	adds	r3, #40	; 0x28
 8009400:	2102      	movs	r1, #2
 8009402:	4618      	mov	r0, r3
 8009404:	f001 fe36 	bl	800b074 <RCCEx_PLL3_Config>
 8009408:	4603      	mov	r3, r0
 800940a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800940e:	e00a      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009416:	e006      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009418:	bf00      	nop
 800941a:	e004      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800941c:	bf00      	nop
 800941e:	e002      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009420:	bf00      	nop
 8009422:	e000      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009426:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10b      	bne.n	8009446 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800942e:	4b39      	ldr	r3, [pc, #228]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009432:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009436:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800943a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800943e:	4a35      	ldr	r2, [pc, #212]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009440:	430b      	orrs	r3, r1
 8009442:	6553      	str	r3, [r2, #84]	; 0x54
 8009444:	e003      	b.n	800944e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800944a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800944e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009456:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800945a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800945e:	2300      	movs	r3, #0
 8009460:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009464:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009468:	460b      	mov	r3, r1
 800946a:	4313      	orrs	r3, r2
 800946c:	d058      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800946e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009472:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009476:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800947a:	d033      	beq.n	80094e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800947c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009480:	d82c      	bhi.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009486:	d02f      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800948c:	d826      	bhi.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800948e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009492:	d02b      	beq.n	80094ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009494:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009498:	d820      	bhi.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800949a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800949e:	d012      	beq.n	80094c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80094a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a4:	d81a      	bhi.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d022      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80094aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094ae:	d115      	bne.n	80094dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b4:	3308      	adds	r3, #8
 80094b6:	2100      	movs	r1, #0
 80094b8:	4618      	mov	r0, r3
 80094ba:	f001 fd29 	bl	800af10 <RCCEx_PLL2_Config>
 80094be:	4603      	mov	r3, r0
 80094c0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80094c4:	e015      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ca:	3328      	adds	r3, #40	; 0x28
 80094cc:	2102      	movs	r1, #2
 80094ce:	4618      	mov	r0, r3
 80094d0:	f001 fdd0 	bl	800b074 <RCCEx_PLL3_Config>
 80094d4:	4603      	mov	r3, r0
 80094d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80094da:	e00a      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094e2:	e006      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80094e4:	bf00      	nop
 80094e6:	e004      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80094e8:	bf00      	nop
 80094ea:	e002      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80094ec:	bf00      	nop
 80094ee:	e000      	b.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80094f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10e      	bne.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80094fa:	4b06      	ldr	r3, [pc, #24]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094fe:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009502:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800950a:	4a02      	ldr	r2, [pc, #8]	; (8009514 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800950c:	430b      	orrs	r3, r1
 800950e:	6593      	str	r3, [r2, #88]	; 0x58
 8009510:	e006      	b.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009512:	bf00      	nop
 8009514:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009518:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800951c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009528:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800952c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009530:	2300      	movs	r3, #0
 8009532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009536:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800953a:	460b      	mov	r3, r1
 800953c:	4313      	orrs	r3, r2
 800953e:	d055      	beq.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009540:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009544:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009548:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800954c:	d033      	beq.n	80095b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800954e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009552:	d82c      	bhi.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009558:	d02f      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800955a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800955e:	d826      	bhi.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009560:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009564:	d02b      	beq.n	80095be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009566:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800956a:	d820      	bhi.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800956c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009570:	d012      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009576:	d81a      	bhi.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009578:	2b00      	cmp	r3, #0
 800957a:	d022      	beq.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800957c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009580:	d115      	bne.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009582:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009586:	3308      	adds	r3, #8
 8009588:	2100      	movs	r1, #0
 800958a:	4618      	mov	r0, r3
 800958c:	f001 fcc0 	bl	800af10 <RCCEx_PLL2_Config>
 8009590:	4603      	mov	r3, r0
 8009592:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009596:	e015      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959c:	3328      	adds	r3, #40	; 0x28
 800959e:	2102      	movs	r1, #2
 80095a0:	4618      	mov	r0, r3
 80095a2:	f001 fd67 	bl	800b074 <RCCEx_PLL3_Config>
 80095a6:	4603      	mov	r3, r0
 80095a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80095ac:	e00a      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095b4:	e006      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095b6:	bf00      	nop
 80095b8:	e004      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095ba:	bf00      	nop
 80095bc:	e002      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095be:	bf00      	nop
 80095c0:	e000      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80095cc:	4ba1      	ldr	r3, [pc, #644]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095d0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80095d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80095dc:	4a9d      	ldr	r2, [pc, #628]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095de:	430b      	orrs	r3, r1
 80095e0:	6593      	str	r3, [r2, #88]	; 0x58
 80095e2:	e003      	b.n	80095ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80095ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	f002 0308 	and.w	r3, r2, #8
 80095f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80095fc:	2300      	movs	r3, #0
 80095fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009602:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009606:	460b      	mov	r3, r1
 8009608:	4313      	orrs	r3, r2
 800960a:	d01e      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800960c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009618:	d10c      	bne.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800961a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800961e:	3328      	adds	r3, #40	; 0x28
 8009620:	2102      	movs	r1, #2
 8009622:	4618      	mov	r0, r3
 8009624:	f001 fd26 	bl	800b074 <RCCEx_PLL3_Config>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d002      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800962e:	2301      	movs	r3, #1
 8009630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009634:	4b87      	ldr	r3, [pc, #540]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009638:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800963c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009640:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009644:	4a83      	ldr	r2, [pc, #524]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009646:	430b      	orrs	r3, r1
 8009648:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	f002 0310 	and.w	r3, r2, #16
 8009656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800965a:	2300      	movs	r3, #0
 800965c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009660:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009664:	460b      	mov	r3, r1
 8009666:	4313      	orrs	r3, r2
 8009668:	d01e      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800966a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800966e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009676:	d10c      	bne.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967c:	3328      	adds	r3, #40	; 0x28
 800967e:	2102      	movs	r1, #2
 8009680:	4618      	mov	r0, r3
 8009682:	f001 fcf7 	bl	800b074 <RCCEx_PLL3_Config>
 8009686:	4603      	mov	r3, r0
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009692:	4b70      	ldr	r3, [pc, #448]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009696:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800969a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800969e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80096a2:	4a6c      	ldr	r2, [pc, #432]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096a4:	430b      	orrs	r3, r1
 80096a6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80096b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096b8:	2300      	movs	r3, #0
 80096ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80096c2:	460b      	mov	r3, r1
 80096c4:	4313      	orrs	r3, r2
 80096c6:	d03e      	beq.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80096c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80096d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096d4:	d022      	beq.n	800971c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80096d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80096da:	d81b      	bhi.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d003      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80096e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096e4:	d00b      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80096e6:	e015      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ec:	3308      	adds	r3, #8
 80096ee:	2100      	movs	r1, #0
 80096f0:	4618      	mov	r0, r3
 80096f2:	f001 fc0d 	bl	800af10 <RCCEx_PLL2_Config>
 80096f6:	4603      	mov	r3, r0
 80096f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80096fc:	e00f      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009702:	3328      	adds	r3, #40	; 0x28
 8009704:	2102      	movs	r1, #2
 8009706:	4618      	mov	r0, r3
 8009708:	f001 fcb4 	bl	800b074 <RCCEx_PLL3_Config>
 800970c:	4603      	mov	r3, r0
 800970e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009712:	e004      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800971a:	e000      	b.n	800971e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800971c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800971e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009722:	2b00      	cmp	r3, #0
 8009724:	d10b      	bne.n	800973e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009726:	4b4b      	ldr	r3, [pc, #300]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800972a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800972e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009732:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009736:	4a47      	ldr	r2, [pc, #284]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009738:	430b      	orrs	r3, r1
 800973a:	6593      	str	r3, [r2, #88]	; 0x58
 800973c:	e003      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800973e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009742:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800974a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800974e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009752:	67bb      	str	r3, [r7, #120]	; 0x78
 8009754:	2300      	movs	r3, #0
 8009756:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009758:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800975c:	460b      	mov	r3, r1
 800975e:	4313      	orrs	r3, r2
 8009760:	d03b      	beq.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009762:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800976a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800976e:	d01f      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009770:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009774:	d818      	bhi.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009776:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800977a:	d003      	beq.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800977c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009780:	d007      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009782:	e011      	b.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009784:	4b33      	ldr	r3, [pc, #204]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009788:	4a32      	ldr	r2, [pc, #200]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800978a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800978e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009790:	e00f      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009796:	3328      	adds	r3, #40	; 0x28
 8009798:	2101      	movs	r1, #1
 800979a:	4618      	mov	r0, r3
 800979c:	f001 fc6a 	bl	800b074 <RCCEx_PLL3_Config>
 80097a0:	4603      	mov	r3, r0
 80097a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80097a6:	e004      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097ae:	e000      	b.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80097b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d10b      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097ba:	4b26      	ldr	r3, [pc, #152]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097be:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80097c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ca:	4a22      	ldr	r2, [pc, #136]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097cc:	430b      	orrs	r3, r1
 80097ce:	6553      	str	r3, [r2, #84]	; 0x54
 80097d0:	e003      	b.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80097da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80097e6:	673b      	str	r3, [r7, #112]	; 0x70
 80097e8:	2300      	movs	r3, #0
 80097ea:	677b      	str	r3, [r7, #116]	; 0x74
 80097ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80097f0:	460b      	mov	r3, r1
 80097f2:	4313      	orrs	r3, r2
 80097f4:	d034      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80097f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d003      	beq.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009804:	d007      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009806:	e011      	b.n	800982c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009808:	4b12      	ldr	r3, [pc, #72]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800980a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800980c:	4a11      	ldr	r2, [pc, #68]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800980e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009812:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009814:	e00e      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800981a:	3308      	adds	r3, #8
 800981c:	2102      	movs	r1, #2
 800981e:	4618      	mov	r0, r3
 8009820:	f001 fb76 	bl	800af10 <RCCEx_PLL2_Config>
 8009824:	4603      	mov	r3, r0
 8009826:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800982a:	e003      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009832:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009834:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009838:	2b00      	cmp	r3, #0
 800983a:	d10d      	bne.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800983c:	4b05      	ldr	r3, [pc, #20]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800983e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009840:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800984a:	4a02      	ldr	r2, [pc, #8]	; (8009854 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800984c:	430b      	orrs	r3, r1
 800984e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009850:	e006      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009852:	bf00      	nop
 8009854:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009858:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800985c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800986c:	66bb      	str	r3, [r7, #104]	; 0x68
 800986e:	2300      	movs	r3, #0
 8009870:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009872:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009876:	460b      	mov	r3, r1
 8009878:	4313      	orrs	r3, r2
 800987a:	d00c      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800987c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009880:	3328      	adds	r3, #40	; 0x28
 8009882:	2102      	movs	r1, #2
 8009884:	4618      	mov	r0, r3
 8009886:	f001 fbf5 	bl	800b074 <RCCEx_PLL3_Config>
 800988a:	4603      	mov	r3, r0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d002      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80098a2:	663b      	str	r3, [r7, #96]	; 0x60
 80098a4:	2300      	movs	r3, #0
 80098a6:	667b      	str	r3, [r7, #100]	; 0x64
 80098a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80098ac:	460b      	mov	r3, r1
 80098ae:	4313      	orrs	r3, r2
 80098b0:	d038      	beq.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80098b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098be:	d018      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80098c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098c4:	d811      	bhi.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80098c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098ca:	d014      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80098cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098d0:	d80b      	bhi.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d011      	beq.n	80098fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80098d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098da:	d106      	bne.n	80098ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80098dc:	4bc3      	ldr	r3, [pc, #780]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e0:	4ac2      	ldr	r2, [pc, #776]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80098e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80098e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80098e8:	e008      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098f0:	e004      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80098f2:	bf00      	nop
 80098f4:	e002      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80098f6:	bf00      	nop
 80098f8:	e000      	b.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80098fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009900:	2b00      	cmp	r3, #0
 8009902:	d10b      	bne.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009904:	4bb9      	ldr	r3, [pc, #740]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009908:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800990c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009910:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009914:	4ab5      	ldr	r2, [pc, #724]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009916:	430b      	orrs	r3, r1
 8009918:	6553      	str	r3, [r2, #84]	; 0x54
 800991a:	e003      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800991c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009920:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800992c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009930:	65bb      	str	r3, [r7, #88]	; 0x58
 8009932:	2300      	movs	r3, #0
 8009934:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009936:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800993a:	460b      	mov	r3, r1
 800993c:	4313      	orrs	r3, r2
 800993e:	d009      	beq.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009940:	4baa      	ldr	r3, [pc, #680]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009944:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009948:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800994c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800994e:	4aa7      	ldr	r2, [pc, #668]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009950:	430b      	orrs	r3, r1
 8009952:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009960:	653b      	str	r3, [r7, #80]	; 0x50
 8009962:	2300      	movs	r3, #0
 8009964:	657b      	str	r3, [r7, #84]	; 0x54
 8009966:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800996a:	460b      	mov	r3, r1
 800996c:	4313      	orrs	r3, r2
 800996e:	d00a      	beq.n	8009986 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009970:	4b9e      	ldr	r3, [pc, #632]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009972:	691b      	ldr	r3, [r3, #16]
 8009974:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009980:	4a9a      	ldr	r2, [pc, #616]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009982:	430b      	orrs	r3, r1
 8009984:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009986:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009992:	64bb      	str	r3, [r7, #72]	; 0x48
 8009994:	2300      	movs	r3, #0
 8009996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009998:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800999c:	460b      	mov	r3, r1
 800999e:	4313      	orrs	r3, r2
 80099a0:	d009      	beq.n	80099b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099a2:	4b92      	ldr	r3, [pc, #584]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80099aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099b0:	4a8e      	ldr	r2, [pc, #568]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099b2:	430b      	orrs	r3, r1
 80099b4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80099b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80099c2:	643b      	str	r3, [r7, #64]	; 0x40
 80099c4:	2300      	movs	r3, #0
 80099c6:	647b      	str	r3, [r7, #68]	; 0x44
 80099c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80099cc:	460b      	mov	r3, r1
 80099ce:	4313      	orrs	r3, r2
 80099d0:	d00e      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099d2:	4b86      	ldr	r3, [pc, #536]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	4a85      	ldr	r2, [pc, #532]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099dc:	6113      	str	r3, [r2, #16]
 80099de:	4b83      	ldr	r3, [pc, #524]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099e0:	6919      	ldr	r1, [r3, #16]
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80099ea:	4a80      	ldr	r2, [pc, #512]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ec:	430b      	orrs	r3, r1
 80099ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80099f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80099fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80099fe:	2300      	movs	r3, #0
 8009a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009a06:	460b      	mov	r3, r1
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	d009      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a0c:	4b77      	ldr	r3, [pc, #476]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a10:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1a:	4a74      	ldr	r2, [pc, #464]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a1c:	430b      	orrs	r3, r1
 8009a1e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009a2c:	633b      	str	r3, [r7, #48]	; 0x30
 8009a2e:	2300      	movs	r3, #0
 8009a30:	637b      	str	r3, [r7, #52]	; 0x34
 8009a32:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009a36:	460b      	mov	r3, r1
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	d00a      	beq.n	8009a52 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a3c:	4b6b      	ldr	r3, [pc, #428]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a40:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a4c:	4a67      	ldr	r2, [pc, #412]	; (8009bec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a4e:	430b      	orrs	r3, r1
 8009a50:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5a:	2100      	movs	r1, #0
 8009a5c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009a5e:	f003 0301 	and.w	r3, r3, #1
 8009a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a64:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009a68:	460b      	mov	r3, r1
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	d011      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a72:	3308      	adds	r3, #8
 8009a74:	2100      	movs	r1, #0
 8009a76:	4618      	mov	r0, r3
 8009a78:	f001 fa4a 	bl	800af10 <RCCEx_PLL2_Config>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009a82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	6239      	str	r1, [r7, #32]
 8009a9e:	f003 0302 	and.w	r3, r3, #2
 8009aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8009aa4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009aa8:	460b      	mov	r3, r1
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	d011      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab2:	3308      	adds	r3, #8
 8009ab4:	2101      	movs	r1, #1
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f001 fa2a 	bl	800af10 <RCCEx_PLL2_Config>
 8009abc:	4603      	mov	r3, r0
 8009abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009ac2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ace:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ada:	2100      	movs	r1, #0
 8009adc:	61b9      	str	r1, [r7, #24]
 8009ade:	f003 0304 	and.w	r3, r3, #4
 8009ae2:	61fb      	str	r3, [r7, #28]
 8009ae4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009ae8:	460b      	mov	r3, r1
 8009aea:	4313      	orrs	r3, r2
 8009aec:	d011      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af2:	3308      	adds	r3, #8
 8009af4:	2102      	movs	r1, #2
 8009af6:	4618      	mov	r0, r3
 8009af8:	f001 fa0a 	bl	800af10 <RCCEx_PLL2_Config>
 8009afc:	4603      	mov	r3, r0
 8009afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009b02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d003      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b0e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	2100      	movs	r1, #0
 8009b1c:	6139      	str	r1, [r7, #16]
 8009b1e:	f003 0308 	and.w	r3, r3, #8
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009b28:	460b      	mov	r3, r1
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	d011      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b32:	3328      	adds	r3, #40	; 0x28
 8009b34:	2100      	movs	r1, #0
 8009b36:	4618      	mov	r0, r3
 8009b38:	f001 fa9c 	bl	800b074 <RCCEx_PLL3_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d003      	beq.n	8009b52 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	f003 0310 	and.w	r3, r3, #16
 8009b62:	60fb      	str	r3, [r7, #12]
 8009b64:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	d011      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b72:	3328      	adds	r3, #40	; 0x28
 8009b74:	2101      	movs	r1, #1
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 fa7c 	bl	800b074 <RCCEx_PLL3_Config>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009b82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b9a:	2100      	movs	r1, #0
 8009b9c:	6039      	str	r1, [r7, #0]
 8009b9e:	f003 0320 	and.w	r3, r3, #32
 8009ba2:	607b      	str	r3, [r7, #4]
 8009ba4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4313      	orrs	r3, r2
 8009bac:	d011      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb2:	3328      	adds	r3, #40	; 0x28
 8009bb4:	2102      	movs	r1, #2
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f001 fa5c 	bl	800b074 <RCCEx_PLL3_Config>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009bc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009bd2:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	e000      	b.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009be6:	46bd      	mov	sp, r7
 8009be8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bec:	58024400 	.word	0x58024400

08009bf0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b090      	sub	sp, #64	; 0x40
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009bfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bfe:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009c02:	430b      	orrs	r3, r1
 8009c04:	f040 8094 	bne.w	8009d30 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009c08:	4b9e      	ldr	r3, [pc, #632]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c0c:	f003 0307 	and.w	r3, r3, #7
 8009c10:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c14:	2b04      	cmp	r3, #4
 8009c16:	f200 8087 	bhi.w	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009c1a:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c20:	08009c35 	.word	0x08009c35
 8009c24:	08009c5d 	.word	0x08009c5d
 8009c28:	08009c85 	.word	0x08009c85
 8009c2c:	08009d21 	.word	0x08009d21
 8009c30:	08009cad 	.word	0x08009cad
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c34:	4b93      	ldr	r3, [pc, #588]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c40:	d108      	bne.n	8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c46:	4618      	mov	r0, r3
 8009c48:	f001 f810 	bl	800ac6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c50:	f000 bd45 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c54:	2300      	movs	r3, #0
 8009c56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c58:	f000 bd41 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c5c:	4b89      	ldr	r3, [pc, #548]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c68:	d108      	bne.n	8009c7c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c6a:	f107 0318 	add.w	r3, r7, #24
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f000 fd54 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009c74:	69bb      	ldr	r3, [r7, #24]
 8009c76:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c78:	f000 bd31 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c80:	f000 bd2d 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009c84:	4b7f      	ldr	r3, [pc, #508]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c90:	d108      	bne.n	8009ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c92:	f107 030c 	add.w	r3, r7, #12
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 fe94 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ca0:	f000 bd1d 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ca8:	f000 bd19 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cac:	4b75      	ldr	r3, [pc, #468]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009cb4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009cb6:	4b73      	ldr	r3, [pc, #460]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0304 	and.w	r3, r3, #4
 8009cbe:	2b04      	cmp	r3, #4
 8009cc0:	d10c      	bne.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d109      	bne.n	8009cdc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cc8:	4b6e      	ldr	r3, [pc, #440]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	08db      	lsrs	r3, r3, #3
 8009cce:	f003 0303 	and.w	r3, r3, #3
 8009cd2:	4a6d      	ldr	r2, [pc, #436]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8009cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cda:	e01f      	b.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009cdc:	4b69      	ldr	r3, [pc, #420]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ce8:	d106      	bne.n	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cf0:	d102      	bne.n	8009cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009cf2:	4b66      	ldr	r3, [pc, #408]	; (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cf6:	e011      	b.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009cf8:	4b62      	ldr	r3, [pc, #392]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d04:	d106      	bne.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d0c:	d102      	bne.n	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d0e:	4b60      	ldr	r3, [pc, #384]	; (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d12:	e003      	b.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d14:	2300      	movs	r3, #0
 8009d16:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009d18:	f000 bce1 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d1c:	f000 bcdf 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d20:	4b5c      	ldr	r3, [pc, #368]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009d22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d24:	f000 bcdb 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d2c:	f000 bcd7 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d34:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009d38:	430b      	orrs	r3, r1
 8009d3a:	f040 80ad 	bne.w	8009e98 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009d3e:	4b51      	ldr	r3, [pc, #324]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d42:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009d46:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d4e:	d056      	beq.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d56:	f200 8090 	bhi.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5c:	2bc0      	cmp	r3, #192	; 0xc0
 8009d5e:	f000 8088 	beq.w	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	2bc0      	cmp	r3, #192	; 0xc0
 8009d66:	f200 8088 	bhi.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	2b80      	cmp	r3, #128	; 0x80
 8009d6e:	d032      	beq.n	8009dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	2b80      	cmp	r3, #128	; 0x80
 8009d74:	f200 8081 	bhi.w	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	2b40      	cmp	r3, #64	; 0x40
 8009d82:	d014      	beq.n	8009dae <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009d84:	e079      	b.n	8009e7a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009d86:	4b3f      	ldr	r3, [pc, #252]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009d92:	d108      	bne.n	8009da6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f000 ff67 	bl	800ac6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009da2:	f000 bc9c 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009daa:	f000 bc98 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dae:	4b35      	ldr	r3, [pc, #212]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009db6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009dba:	d108      	bne.n	8009dce <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dbc:	f107 0318 	add.w	r3, r7, #24
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 fcab 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009dc6:	69bb      	ldr	r3, [r7, #24]
 8009dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dca:	f000 bc88 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dd2:	f000 bc84 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009dd6:	4b2b      	ldr	r3, [pc, #172]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009de2:	d108      	bne.n	8009df6 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009de4:	f107 030c 	add.w	r3, r7, #12
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fdeb 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009df2:	f000 bc74 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009df6:	2300      	movs	r3, #0
 8009df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009dfa:	f000 bc70 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009dfe:	4b21      	ldr	r3, [pc, #132]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009e06:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e08:	4b1e      	ldr	r3, [pc, #120]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f003 0304 	and.w	r3, r3, #4
 8009e10:	2b04      	cmp	r3, #4
 8009e12:	d10c      	bne.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d109      	bne.n	8009e2e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e1a:	4b1a      	ldr	r3, [pc, #104]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	08db      	lsrs	r3, r3, #3
 8009e20:	f003 0303 	and.w	r3, r3, #3
 8009e24:	4a18      	ldr	r2, [pc, #96]	; (8009e88 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e26:	fa22 f303 	lsr.w	r3, r2, r3
 8009e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e2c:	e01f      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e2e:	4b15      	ldr	r3, [pc, #84]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e3a:	d106      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e42:	d102      	bne.n	8009e4a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e44:	4b11      	ldr	r3, [pc, #68]	; (8009e8c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009e46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e48:	e011      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e4a:	4b0e      	ldr	r3, [pc, #56]	; (8009e84 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e56:	d106      	bne.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e5e:	d102      	bne.n	8009e66 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e60:	4b0b      	ldr	r3, [pc, #44]	; (8009e90 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009e62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e64:	e003      	b.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e66:	2300      	movs	r3, #0
 8009e68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009e6a:	f000 bc38 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e6e:	f000 bc36 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e72:	4b08      	ldr	r3, [pc, #32]	; (8009e94 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009e74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e76:	f000 bc32 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e7e:	f000 bc2e 	b.w	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e82:	bf00      	nop
 8009e84:	58024400 	.word	0x58024400
 8009e88:	03d09000 	.word	0x03d09000
 8009e8c:	003d0900 	.word	0x003d0900
 8009e90:	016e3600 	.word	0x016e3600
 8009e94:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e9c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	f040 809c 	bne.w	8009fde <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009ea6:	4b9e      	ldr	r3, [pc, #632]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009eaa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8009eae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009eb6:	d054      	beq.n	8009f62 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009ebe:	f200 808b 	bhi.w	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ec8:	f000 8083 	beq.w	8009fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ece:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009ed2:	f200 8081 	bhi.w	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009edc:	d02f      	beq.n	8009f3e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ee4:	d878      	bhi.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d004      	beq.n	8009ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009ef2:	d012      	beq.n	8009f1a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009ef4:	e070      	b.n	8009fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ef6:	4b8a      	ldr	r3, [pc, #552]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f02:	d107      	bne.n	8009f14 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f000 feaf 	bl	800ac6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f12:	e3e4      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f18:	e3e1      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f1a:	4b81      	ldr	r3, [pc, #516]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f26:	d107      	bne.n	8009f38 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f28:	f107 0318 	add.w	r3, r7, #24
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f000 fbf5 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f36:	e3d2      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f3c:	e3cf      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f3e:	4b78      	ldr	r3, [pc, #480]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f4a:	d107      	bne.n	8009f5c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f4c:	f107 030c 	add.w	r3, r7, #12
 8009f50:	4618      	mov	r0, r3
 8009f52:	f000 fd37 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f5a:	e3c0      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f60:	e3bd      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f62:	4b6f      	ldr	r3, [pc, #444]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f6a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f6c:	4b6c      	ldr	r3, [pc, #432]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b04      	cmp	r3, #4
 8009f76:	d10c      	bne.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d109      	bne.n	8009f92 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f7e:	4b68      	ldr	r3, [pc, #416]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	08db      	lsrs	r3, r3, #3
 8009f84:	f003 0303 	and.w	r3, r3, #3
 8009f88:	4a66      	ldr	r2, [pc, #408]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8009f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f90:	e01e      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f92:	4b63      	ldr	r3, [pc, #396]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f9e:	d106      	bne.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009fa6:	d102      	bne.n	8009fae <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fa8:	4b5f      	ldr	r3, [pc, #380]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009faa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fac:	e010      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fae:	4b5c      	ldr	r3, [pc, #368]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009fba:	d106      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009fc2:	d102      	bne.n	8009fca <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fc4:	4b59      	ldr	r3, [pc, #356]	; (800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fc8:	e002      	b.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009fce:	e386      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fd0:	e385      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fd2:	4b57      	ldr	r3, [pc, #348]	; (800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8009fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fd6:	e382      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fdc:	e37f      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009fde:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fe2:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009fe6:	430b      	orrs	r3, r1
 8009fe8:	f040 80a7 	bne.w	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009fec:	4b4c      	ldr	r3, [pc, #304]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ff0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009ff4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ffc:	d055      	beq.n	800a0aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a004:	f200 8096 	bhi.w	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a00e:	f000 8084 	beq.w	800a11a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a018:	f200 808c 	bhi.w	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a022:	d030      	beq.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a02a:	f200 8083 	bhi.w	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a030:	2b00      	cmp	r3, #0
 800a032:	d004      	beq.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a03a:	d012      	beq.n	800a062 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a03c:	e07a      	b.n	800a134 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a03e:	4b38      	ldr	r3, [pc, #224]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a046:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a04a:	d107      	bne.n	800a05c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a04c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a050:	4618      	mov	r0, r3
 800a052:	f000 fe0b 	bl	800ac6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a05a:	e340      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a05c:	2300      	movs	r3, #0
 800a05e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a060:	e33d      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a062:	4b2f      	ldr	r3, [pc, #188]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a06a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a06e:	d107      	bne.n	800a080 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a070:	f107 0318 	add.w	r3, r7, #24
 800a074:	4618      	mov	r0, r3
 800a076:	f000 fb51 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a07a:	69bb      	ldr	r3, [r7, #24]
 800a07c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a07e:	e32e      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a080:	2300      	movs	r3, #0
 800a082:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a084:	e32b      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a086:	4b26      	ldr	r3, [pc, #152]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a08e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a092:	d107      	bne.n	800a0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a094:	f107 030c 	add.w	r3, r7, #12
 800a098:	4618      	mov	r0, r3
 800a09a:	f000 fc93 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0a2:	e31c      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a0a8:	e319      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0aa:	4b1d      	ldr	r3, [pc, #116]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a0b2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0b4:	4b1a      	ldr	r3, [pc, #104]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f003 0304 	and.w	r3, r3, #4
 800a0bc:	2b04      	cmp	r3, #4
 800a0be:	d10c      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a0c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d109      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0c6:	4b16      	ldr	r3, [pc, #88]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	08db      	lsrs	r3, r3, #3
 800a0cc:	f003 0303 	and.w	r3, r3, #3
 800a0d0:	4a14      	ldr	r2, [pc, #80]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a0d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0d8:	e01e      	b.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0da:	4b11      	ldr	r3, [pc, #68]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0e6:	d106      	bne.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0ee:	d102      	bne.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0f0:	4b0d      	ldr	r3, [pc, #52]	; (800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0f4:	e010      	b.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0f6:	4b0a      	ldr	r3, [pc, #40]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a102:	d106      	bne.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a106:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a10a:	d102      	bne.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a10c:	4b07      	ldr	r3, [pc, #28]	; (800a12c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a10e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a110:	e002      	b.n	800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a112:	2300      	movs	r3, #0
 800a114:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a116:	e2e2      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a118:	e2e1      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a11a:	4b05      	ldr	r3, [pc, #20]	; (800a130 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a11c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a11e:	e2de      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a120:	58024400 	.word	0x58024400
 800a124:	03d09000 	.word	0x03d09000
 800a128:	003d0900 	.word	0x003d0900
 800a12c:	016e3600 	.word	0x016e3600
 800a130:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a138:	e2d1      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a13a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a13e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a142:	430b      	orrs	r3, r1
 800a144:	f040 809c 	bne.w	800a280 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a148:	4b93      	ldr	r3, [pc, #588]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a14a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a14c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a150:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a154:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a158:	d054      	beq.n	800a204 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a160:	f200 808b 	bhi.w	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a166:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a16a:	f000 8083 	beq.w	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a170:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a174:	f200 8081 	bhi.w	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a17e:	d02f      	beq.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a182:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a186:	d878      	bhi.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d004      	beq.n	800a198 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a190:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a194:	d012      	beq.n	800a1bc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a196:	e070      	b.n	800a27a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a198:	4b7f      	ldr	r3, [pc, #508]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a1a4:	d107      	bne.n	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f000 fd5e 	bl	800ac6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1b4:	e293      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1ba:	e290      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1bc:	4b76      	ldr	r3, [pc, #472]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1c8:	d107      	bne.n	800a1da <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1ca:	f107 0318 	add.w	r3, r7, #24
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 faa4 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1d4:	69bb      	ldr	r3, [r7, #24]
 800a1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1d8:	e281      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1de:	e27e      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1e0:	4b6d      	ldr	r3, [pc, #436]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1ec:	d107      	bne.n	800a1fe <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1ee:	f107 030c 	add.w	r3, r7, #12
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f000 fbe6 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1fc:	e26f      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a202:	e26c      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a204:	4b64      	ldr	r3, [pc, #400]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a208:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a20c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a20e:	4b62      	ldr	r3, [pc, #392]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f003 0304 	and.w	r3, r3, #4
 800a216:	2b04      	cmp	r3, #4
 800a218:	d10c      	bne.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d109      	bne.n	800a234 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a220:	4b5d      	ldr	r3, [pc, #372]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	08db      	lsrs	r3, r3, #3
 800a226:	f003 0303 	and.w	r3, r3, #3
 800a22a:	4a5c      	ldr	r2, [pc, #368]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a22c:	fa22 f303 	lsr.w	r3, r2, r3
 800a230:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a232:	e01e      	b.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a234:	4b58      	ldr	r3, [pc, #352]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a23c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a240:	d106      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a248:	d102      	bne.n	800a250 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a24a:	4b55      	ldr	r3, [pc, #340]	; (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a24c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a24e:	e010      	b.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a250:	4b51      	ldr	r3, [pc, #324]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a25c:	d106      	bne.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a260:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a264:	d102      	bne.n	800a26c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a266:	4b4f      	ldr	r3, [pc, #316]	; (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a268:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a26a:	e002      	b.n	800a272 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a26c:	2300      	movs	r3, #0
 800a26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a270:	e235      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a272:	e234      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a274:	4b4c      	ldr	r3, [pc, #304]	; (800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a278:	e231      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a27a:	2300      	movs	r3, #0
 800a27c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a27e:	e22e      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a280:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a284:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a288:	430b      	orrs	r3, r1
 800a28a:	f040 808f 	bne.w	800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a28e:	4b42      	ldr	r3, [pc, #264]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a292:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a296:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a29e:	d06b      	beq.n	800a378 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a2a6:	d874      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2ae:	d056      	beq.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a2b6:	d86c      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a2be:	d03b      	beq.n	800a338 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a2c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a2c6:	d864      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2ce:	d021      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2d6:	d85c      	bhi.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d004      	beq.n	800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2e4:	d004      	beq.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a2e6:	e054      	b.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a2e8:	f7fe fa4c 	bl	8008784 <HAL_RCC_GetPCLK1Freq>
 800a2ec:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a2ee:	e1f6      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2f0:	4b29      	ldr	r3, [pc, #164]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2fc:	d107      	bne.n	800a30e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2fe:	f107 0318 	add.w	r3, r7, #24
 800a302:	4618      	mov	r0, r3
 800a304:	f000 fa0a 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a30c:	e1e7      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a30e:	2300      	movs	r3, #0
 800a310:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a312:	e1e4      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a314:	4b20      	ldr	r3, [pc, #128]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a31c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a320:	d107      	bne.n	800a332 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a322:	f107 030c 	add.w	r3, r7, #12
 800a326:	4618      	mov	r0, r3
 800a328:	f000 fb4c 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a330:	e1d5      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a332:	2300      	movs	r3, #0
 800a334:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a336:	e1d2      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a338:	4b17      	ldr	r3, [pc, #92]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b04      	cmp	r3, #4
 800a342:	d109      	bne.n	800a358 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a344:	4b14      	ldr	r3, [pc, #80]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	08db      	lsrs	r3, r3, #3
 800a34a:	f003 0303 	and.w	r3, r3, #3
 800a34e:	4a13      	ldr	r2, [pc, #76]	; (800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a350:	fa22 f303 	lsr.w	r3, r2, r3
 800a354:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a356:	e1c2      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a35c:	e1bf      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a35e:	4b0e      	ldr	r3, [pc, #56]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a366:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a36a:	d102      	bne.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a36c:	4b0c      	ldr	r3, [pc, #48]	; (800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a36e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a370:	e1b5      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a376:	e1b2      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a378:	4b07      	ldr	r3, [pc, #28]	; (800a398 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a384:	d102      	bne.n	800a38c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a386:	4b07      	ldr	r3, [pc, #28]	; (800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a388:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38a:	e1a8      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a38c:	2300      	movs	r3, #0
 800a38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a390:	e1a5      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a396:	e1a2      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a398:	58024400 	.word	0x58024400
 800a39c:	03d09000 	.word	0x03d09000
 800a3a0:	003d0900 	.word	0x003d0900
 800a3a4:	016e3600 	.word	0x016e3600
 800a3a8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a3ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3b0:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a3b4:	430b      	orrs	r3, r1
 800a3b6:	d173      	bne.n	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a3b8:	4b9c      	ldr	r3, [pc, #624]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a3c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3c8:	d02f      	beq.n	800a42a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a3d0:	d863      	bhi.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d004      	beq.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3de:	d012      	beq.n	800a406 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a3e0:	e05b      	b.n	800a49a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a3e2:	4b92      	ldr	r3, [pc, #584]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3ee:	d107      	bne.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3f0:	f107 0318 	add.w	r3, r7, #24
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f000 f991 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3fe:	e16e      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a404:	e16b      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a406:	4b89      	ldr	r3, [pc, #548]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a40e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a412:	d107      	bne.n	800a424 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a414:	f107 030c 	add.w	r3, r7, #12
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 fad3 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a422:	e15c      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a424:	2300      	movs	r3, #0
 800a426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a428:	e159      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a42a:	4b80      	ldr	r3, [pc, #512]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a42e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a432:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a434:	4b7d      	ldr	r3, [pc, #500]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d10c      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a446:	4b79      	ldr	r3, [pc, #484]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	08db      	lsrs	r3, r3, #3
 800a44c:	f003 0303 	and.w	r3, r3, #3
 800a450:	4a77      	ldr	r2, [pc, #476]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a452:	fa22 f303 	lsr.w	r3, r2, r3
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a458:	e01e      	b.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a45a:	4b74      	ldr	r3, [pc, #464]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a466:	d106      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a46a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a46e:	d102      	bne.n	800a476 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a470:	4b70      	ldr	r3, [pc, #448]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a474:	e010      	b.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a476:	4b6d      	ldr	r3, [pc, #436]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a47e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a482:	d106      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a48a:	d102      	bne.n	800a492 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a48c:	4b6a      	ldr	r3, [pc, #424]	; (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a48e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a490:	e002      	b.n	800a498 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a492:	2300      	movs	r3, #0
 800a494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a496:	e122      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a498:	e121      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a49a:	2300      	movs	r3, #0
 800a49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a49e:	e11e      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a4a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4a4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a4a8:	430b      	orrs	r3, r1
 800a4aa:	d133      	bne.n	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a4ac:	4b5f      	ldr	r3, [pc, #380]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d004      	beq.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c2:	d012      	beq.n	800a4ea <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a4c4:	e023      	b.n	800a50e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4c6:	4b59      	ldr	r3, [pc, #356]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4d2:	d107      	bne.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 fbc7 	bl	800ac6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4e2:	e0fc      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4e8:	e0f9      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4ea:	4b50      	ldr	r3, [pc, #320]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a4f6:	d107      	bne.n	800a508 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4f8:	f107 0318 	add.w	r3, r7, #24
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f000 f90d 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a506:	e0ea      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a508:	2300      	movs	r3, #0
 800a50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a50c:	e0e7      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a50e:	2300      	movs	r3, #0
 800a510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a512:	e0e4      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a514:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a518:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a51c:	430b      	orrs	r3, r1
 800a51e:	f040 808d 	bne.w	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a522:	4b42      	ldr	r3, [pc, #264]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a526:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a52a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a532:	d06b      	beq.n	800a60c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a536:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a53a:	d874      	bhi.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a542:	d056      	beq.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a54a:	d86c      	bhi.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a54c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a552:	d03b      	beq.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a55a:	d864      	bhi.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a562:	d021      	beq.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a566:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a56a:	d85c      	bhi.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d004      	beq.n	800a57c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a578:	d004      	beq.n	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a57a:	e054      	b.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a57c:	f000 f8b8 	bl	800a6f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a580:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a582:	e0ac      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a584:	4b29      	ldr	r3, [pc, #164]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a58c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a590:	d107      	bne.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a592:	f107 0318 	add.w	r3, r7, #24
 800a596:	4618      	mov	r0, r3
 800a598:	f000 f8c0 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5a0:	e09d      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5a6:	e09a      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5a8:	4b20      	ldr	r3, [pc, #128]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b4:	d107      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5b6:	f107 030c 	add.w	r3, r7, #12
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f000 fa02 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5c4:	e08b      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5ca:	e088      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5cc:	4b17      	ldr	r3, [pc, #92]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 0304 	and.w	r3, r3, #4
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	d109      	bne.n	800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d8:	4b14      	ldr	r3, [pc, #80]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	08db      	lsrs	r3, r3, #3
 800a5de:	f003 0303 	and.w	r3, r3, #3
 800a5e2:	4a13      	ldr	r2, [pc, #76]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a5e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ea:	e078      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5f0:	e075      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a5f2:	4b0e      	ldr	r3, [pc, #56]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5fe:	d102      	bne.n	800a606 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a600:	4b0c      	ldr	r3, [pc, #48]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a604:	e06b      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a606:	2300      	movs	r3, #0
 800a608:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a60a:	e068      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a60c:	4b07      	ldr	r3, [pc, #28]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a618:	d102      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a61a:	4b07      	ldr	r3, [pc, #28]	; (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61e:	e05e      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a624:	e05b      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a62a:	e058      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a62c:	58024400 	.word	0x58024400
 800a630:	03d09000 	.word	0x03d09000
 800a634:	003d0900 	.word	0x003d0900
 800a638:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a63c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a640:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a644:	430b      	orrs	r3, r1
 800a646:	d148      	bne.n	800a6da <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a648:	4b27      	ldr	r3, [pc, #156]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a64c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a650:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a658:	d02a      	beq.n	800a6b0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a660:	d838      	bhi.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	2b00      	cmp	r3, #0
 800a666:	d004      	beq.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a66e:	d00d      	beq.n	800a68c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a670:	e030      	b.n	800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a672:	4b1d      	ldr	r3, [pc, #116]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a67a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a67e:	d102      	bne.n	800a686 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a680:	4b1a      	ldr	r3, [pc, #104]	; (800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a682:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a684:	e02b      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a686:	2300      	movs	r3, #0
 800a688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a68a:	e028      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a68c:	4b16      	ldr	r3, [pc, #88]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a694:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a698:	d107      	bne.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a69a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a69e:	4618      	mov	r0, r3
 800a6a0:	f000 fae4 	bl	800ac6c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6a8:	e019      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6ae:	e016      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6b0:	4b0d      	ldr	r3, [pc, #52]	; (800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6bc:	d107      	bne.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6be:	f107 0318 	add.w	r3, r7, #24
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f82a 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6cc:	e007      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d2:	e004      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d8:	e001      	b.n	800a6de <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a6de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3740      	adds	r7, #64	; 0x40
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	58024400 	.word	0x58024400
 800a6ec:	016e3600 	.word	0x016e3600

0800a6f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a6f4:	f7fe f816 	bl	8008724 <HAL_RCC_GetHCLKFreq>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	4b06      	ldr	r3, [pc, #24]	; (800a714 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a6fc:	6a1b      	ldr	r3, [r3, #32]
 800a6fe:	091b      	lsrs	r3, r3, #4
 800a700:	f003 0307 	and.w	r3, r3, #7
 800a704:	4904      	ldr	r1, [pc, #16]	; (800a718 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a706:	5ccb      	ldrb	r3, [r1, r3]
 800a708:	f003 031f 	and.w	r3, r3, #31
 800a70c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a710:	4618      	mov	r0, r3
 800a712:	bd80      	pop	{r7, pc}
 800a714:	58024400 	.word	0x58024400
 800a718:	0800cc20 	.word	0x0800cc20

0800a71c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b089      	sub	sp, #36	; 0x24
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a724:	4ba1      	ldr	r3, [pc, #644]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a728:	f003 0303 	and.w	r3, r3, #3
 800a72c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a72e:	4b9f      	ldr	r3, [pc, #636]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a732:	0b1b      	lsrs	r3, r3, #12
 800a734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a738:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a73a:	4b9c      	ldr	r3, [pc, #624]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a73e:	091b      	lsrs	r3, r3, #4
 800a740:	f003 0301 	and.w	r3, r3, #1
 800a744:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a746:	4b99      	ldr	r3, [pc, #612]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a74a:	08db      	lsrs	r3, r3, #3
 800a74c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a750:	693a      	ldr	r2, [r7, #16]
 800a752:	fb02 f303 	mul.w	r3, r2, r3
 800a756:	ee07 3a90 	vmov	s15, r3
 800a75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a75e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2b00      	cmp	r3, #0
 800a766:	f000 8111 	beq.w	800a98c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	f000 8083 	beq.w	800a878 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a772:	69bb      	ldr	r3, [r7, #24]
 800a774:	2b02      	cmp	r3, #2
 800a776:	f200 80a1 	bhi.w	800a8bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d003      	beq.n	800a788 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d056      	beq.n	800a834 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a786:	e099      	b.n	800a8bc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a788:	4b88      	ldr	r3, [pc, #544]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f003 0320 	and.w	r3, r3, #32
 800a790:	2b00      	cmp	r3, #0
 800a792:	d02d      	beq.n	800a7f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a794:	4b85      	ldr	r3, [pc, #532]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	08db      	lsrs	r3, r3, #3
 800a79a:	f003 0303 	and.w	r3, r3, #3
 800a79e:	4a84      	ldr	r2, [pc, #528]	; (800a9b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a7a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	ee07 3a90 	vmov	s15, r3
 800a7ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	ee07 3a90 	vmov	s15, r3
 800a7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7be:	4b7b      	ldr	r3, [pc, #492]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a7ee:	e087      	b.n	800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	ee07 3a90 	vmov	s15, r3
 800a7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a802:	4b6a      	ldr	r3, [pc, #424]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a812:	ed97 6a03 	vldr	s12, [r7, #12]
 800a816:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a832:	e065      	b.n	800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	ee07 3a90 	vmov	s15, r3
 800a83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a846:	4b59      	ldr	r3, [pc, #356]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a84e:	ee07 3a90 	vmov	s15, r3
 800a852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a856:	ed97 6a03 	vldr	s12, [r7, #12]
 800a85a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a876:	e043      	b.n	800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	ee07 3a90 	vmov	s15, r3
 800a87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a882:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a9c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a88a:	4b48      	ldr	r3, [pc, #288]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a892:	ee07 3a90 	vmov	s15, r3
 800a896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a89a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a89e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8ba:	e021      	b.n	800a900 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	ee07 3a90 	vmov	s15, r3
 800a8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a9bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a8ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ce:	4b37      	ldr	r3, [pc, #220]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d6:	ee07 3a90 	vmov	s15, r3
 800a8da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8de:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8fe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a900:	4b2a      	ldr	r3, [pc, #168]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a904:	0a5b      	lsrs	r3, r3, #9
 800a906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a91a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a91e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a926:	ee17 2a90 	vmov	r2, s15
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a92e:	4b1f      	ldr	r3, [pc, #124]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a932:	0c1b      	lsrs	r3, r3, #16
 800a934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a938:	ee07 3a90 	vmov	s15, r3
 800a93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a944:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a948:	edd7 6a07 	vldr	s13, [r7, #28]
 800a94c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a954:	ee17 2a90 	vmov	r2, s15
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a95c:	4b13      	ldr	r3, [pc, #76]	; (800a9ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a960:	0e1b      	lsrs	r3, r3, #24
 800a962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a966:	ee07 3a90 	vmov	s15, r3
 800a96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a972:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a976:	edd7 6a07 	vldr	s13, [r7, #28]
 800a97a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a97e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a982:	ee17 2a90 	vmov	r2, s15
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a98a:	e008      	b.n	800a99e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2200      	movs	r2, #0
 800a99c:	609a      	str	r2, [r3, #8]
}
 800a99e:	bf00      	nop
 800a9a0:	3724      	adds	r7, #36	; 0x24
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a8:	4770      	bx	lr
 800a9aa:	bf00      	nop
 800a9ac:	58024400 	.word	0x58024400
 800a9b0:	03d09000 	.word	0x03d09000
 800a9b4:	46000000 	.word	0x46000000
 800a9b8:	4c742400 	.word	0x4c742400
 800a9bc:	4a742400 	.word	0x4a742400
 800a9c0:	4bb71b00 	.word	0x4bb71b00

0800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b089      	sub	sp, #36	; 0x24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9cc:	4ba1      	ldr	r3, [pc, #644]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9d0:	f003 0303 	and.w	r3, r3, #3
 800a9d4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a9d6:	4b9f      	ldr	r3, [pc, #636]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9da:	0d1b      	lsrs	r3, r3, #20
 800a9dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9e0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a9e2:	4b9c      	ldr	r3, [pc, #624]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9e6:	0a1b      	lsrs	r3, r3, #8
 800a9e8:	f003 0301 	and.w	r3, r3, #1
 800a9ec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a9ee:	4b99      	ldr	r3, [pc, #612]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f2:	08db      	lsrs	r3, r3, #3
 800a9f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	fb02 f303 	mul.w	r3, r2, r3
 800a9fe:	ee07 3a90 	vmov	s15, r3
 800aa02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 8111 	beq.w	800ac34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	2b02      	cmp	r3, #2
 800aa16:	f000 8083 	beq.w	800ab20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa1a:	69bb      	ldr	r3, [r7, #24]
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	f200 80a1 	bhi.w	800ab64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d003      	beq.n	800aa30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d056      	beq.n	800aadc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa2e:	e099      	b.n	800ab64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa30:	4b88      	ldr	r3, [pc, #544]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0320 	and.w	r3, r3, #32
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d02d      	beq.n	800aa98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa3c:	4b85      	ldr	r3, [pc, #532]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	08db      	lsrs	r3, r3, #3
 800aa42:	f003 0303 	and.w	r3, r3, #3
 800aa46:	4a84      	ldr	r2, [pc, #528]	; (800ac58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aa48:	fa22 f303 	lsr.w	r3, r2, r3
 800aa4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	ee07 3a90 	vmov	s15, r3
 800aa54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa58:	697b      	ldr	r3, [r7, #20]
 800aa5a:	ee07 3a90 	vmov	s15, r3
 800aa5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa66:	4b7b      	ldr	r3, [pc, #492]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa6e:	ee07 3a90 	vmov	s15, r3
 800aa72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa76:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa7a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aa7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa96:	e087      	b.n	800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	ee07 3a90 	vmov	s15, r3
 800aa9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaa2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aaa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaaa:	4b6a      	ldr	r3, [pc, #424]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aab2:	ee07 3a90 	vmov	s15, r3
 800aab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaba:	ed97 6a03 	vldr	s12, [r7, #12]
 800aabe:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aada:	e065      	b.n	800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aae6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800aaea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaee:	4b59      	ldr	r3, [pc, #356]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf6:	ee07 3a90 	vmov	s15, r3
 800aafa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aafe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab02:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab1e:	e043      	b.n	800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	ee07 3a90 	vmov	s15, r3
 800ab26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab2a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab32:	4b48      	ldr	r3, [pc, #288]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab3a:	ee07 3a90 	vmov	s15, r3
 800ab3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab46:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab62:	e021      	b.n	800aba8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	ee07 3a90 	vmov	s15, r3
 800ab6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab6e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab76:	4b37      	ldr	r3, [pc, #220]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab7e:	ee07 3a90 	vmov	s15, r3
 800ab82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab8a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aba2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aba6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800aba8:	4b2a      	ldr	r3, [pc, #168]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abac:	0a5b      	lsrs	r3, r3, #9
 800abae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abb2:	ee07 3a90 	vmov	s15, r3
 800abb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abce:	ee17 2a90 	vmov	r2, s15
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800abd6:	4b1f      	ldr	r3, [pc, #124]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abda:	0c1b      	lsrs	r3, r3, #16
 800abdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe0:	ee07 3a90 	vmov	s15, r3
 800abe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800abf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abfc:	ee17 2a90 	vmov	r2, s15
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ac04:	4b13      	ldr	r3, [pc, #76]	; (800ac54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac08:	0e1b      	lsrs	r3, r3, #24
 800ac0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac0e:	ee07 3a90 	vmov	s15, r3
 800ac12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac1e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac2a:	ee17 2a90 	vmov	r2, s15
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac32:	e008      	b.n	800ac46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	609a      	str	r2, [r3, #8]
}
 800ac46:	bf00      	nop
 800ac48:	3724      	adds	r7, #36	; 0x24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	58024400 	.word	0x58024400
 800ac58:	03d09000 	.word	0x03d09000
 800ac5c:	46000000 	.word	0x46000000
 800ac60:	4c742400 	.word	0x4c742400
 800ac64:	4a742400 	.word	0x4a742400
 800ac68:	4bb71b00 	.word	0x4bb71b00

0800ac6c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b089      	sub	sp, #36	; 0x24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac74:	4ba0      	ldr	r3, [pc, #640]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac78:	f003 0303 	and.w	r3, r3, #3
 800ac7c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ac7e:	4b9e      	ldr	r3, [pc, #632]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac82:	091b      	lsrs	r3, r3, #4
 800ac84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac88:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ac8a:	4b9b      	ldr	r3, [pc, #620]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac8e:	f003 0301 	and.w	r3, r3, #1
 800ac92:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac94:	4b98      	ldr	r3, [pc, #608]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ac96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac98:	08db      	lsrs	r3, r3, #3
 800ac9a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac9e:	693a      	ldr	r2, [r7, #16]
 800aca0:	fb02 f303 	mul.w	r3, r2, r3
 800aca4:	ee07 3a90 	vmov	s15, r3
 800aca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acac:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	f000 8111 	beq.w	800aeda <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	2b02      	cmp	r3, #2
 800acbc:	f000 8083 	beq.w	800adc6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	f200 80a1 	bhi.w	800ae0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d056      	beq.n	800ad82 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800acd4:	e099      	b.n	800ae0a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acd6:	4b88      	ldr	r3, [pc, #544]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 0320 	and.w	r3, r3, #32
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d02d      	beq.n	800ad3e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ace2:	4b85      	ldr	r3, [pc, #532]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	08db      	lsrs	r3, r3, #3
 800ace8:	f003 0303 	and.w	r3, r3, #3
 800acec:	4a83      	ldr	r2, [pc, #524]	; (800aefc <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800acee:	fa22 f303 	lsr.w	r3, r2, r3
 800acf2:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	ee07 3a90 	vmov	s15, r3
 800acfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	ee07 3a90 	vmov	s15, r3
 800ad04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad0c:	4b7a      	ldr	r3, [pc, #488]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad14:	ee07 3a90 	vmov	s15, r3
 800ad18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad1c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad20:	eddf 5a77 	vldr	s11, [pc, #476]	; 800af00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad38:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad3c:	e087      	b.n	800ae4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	ee07 3a90 	vmov	s15, r3
 800ad44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad48:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800af04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ad4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad50:	4b69      	ldr	r3, [pc, #420]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad58:	ee07 3a90 	vmov	s15, r3
 800ad5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad60:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad64:	eddf 5a66 	vldr	s11, [pc, #408]	; 800af00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad7c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad80:	e065      	b.n	800ae4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	ee07 3a90 	vmov	s15, r3
 800ad88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad8c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800af08 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ad90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad94:	4b58      	ldr	r3, [pc, #352]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad9c:	ee07 3a90 	vmov	s15, r3
 800ada0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ada4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ada8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800af00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800adac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adc0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adc4:	e043      	b.n	800ae4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	ee07 3a90 	vmov	s15, r3
 800adcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800add0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800af0c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800add4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800add8:	4b47      	ldr	r3, [pc, #284]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800addc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ade0:	ee07 3a90 	vmov	s15, r3
 800ade4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ade8:	ed97 6a03 	vldr	s12, [r7, #12]
 800adec:	eddf 5a44 	vldr	s11, [pc, #272]	; 800af00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800adf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae08:	e021      	b.n	800ae4e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	ee07 3a90 	vmov	s15, r3
 800ae10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae14:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800af04 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ae18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae1c:	4b36      	ldr	r3, [pc, #216]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae24:	ee07 3a90 	vmov	s15, r3
 800ae28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae2c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae30:	eddf 5a33 	vldr	s11, [pc, #204]	; 800af00 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae4c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ae4e:	4b2a      	ldr	r3, [pc, #168]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae52:	0a5b      	lsrs	r3, r3, #9
 800ae54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae58:	ee07 3a90 	vmov	s15, r3
 800ae5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae64:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae68:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae74:	ee17 2a90 	vmov	r2, s15
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ae7c:	4b1e      	ldr	r3, [pc, #120]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae80:	0c1b      	lsrs	r3, r3, #16
 800ae82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae86:	ee07 3a90 	vmov	s15, r3
 800ae8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae96:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aea2:	ee17 2a90 	vmov	r2, s15
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800aeaa:	4b13      	ldr	r3, [pc, #76]	; (800aef8 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeae:	0e1b      	lsrs	r3, r3, #24
 800aeb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aeb4:	ee07 3a90 	vmov	s15, r3
 800aeb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aebc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aec0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aec4:	edd7 6a07 	vldr	s13, [r7, #28]
 800aec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aed0:	ee17 2a90 	vmov	r2, s15
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800aed8:	e008      	b.n	800aeec <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2200      	movs	r2, #0
 800aede:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2200      	movs	r2, #0
 800aeea:	609a      	str	r2, [r3, #8]
}
 800aeec:	bf00      	nop
 800aeee:	3724      	adds	r7, #36	; 0x24
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	58024400 	.word	0x58024400
 800aefc:	03d09000 	.word	0x03d09000
 800af00:	46000000 	.word	0x46000000
 800af04:	4c742400 	.word	0x4c742400
 800af08:	4a742400 	.word	0x4a742400
 800af0c:	4bb71b00 	.word	0x4bb71b00

0800af10 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
 800af18:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af1a:	2300      	movs	r3, #0
 800af1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af1e:	4b53      	ldr	r3, [pc, #332]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800af20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af22:	f003 0303 	and.w	r3, r3, #3
 800af26:	2b03      	cmp	r3, #3
 800af28:	d101      	bne.n	800af2e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e099      	b.n	800b062 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800af2e:	4b4f      	ldr	r3, [pc, #316]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	4a4e      	ldr	r2, [pc, #312]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800af34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af3a:	f7f7 fc6b 	bl	8002814 <HAL_GetTick>
 800af3e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af40:	e008      	b.n	800af54 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af42:	f7f7 fc67 	bl	8002814 <HAL_GetTick>
 800af46:	4602      	mov	r2, r0
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	1ad3      	subs	r3, r2, r3
 800af4c:	2b02      	cmp	r3, #2
 800af4e:	d901      	bls.n	800af54 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af50:	2303      	movs	r3, #3
 800af52:	e086      	b.n	800b062 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af54:	4b45      	ldr	r3, [pc, #276]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1f0      	bne.n	800af42 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800af60:	4b42      	ldr	r3, [pc, #264]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800af62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af64:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	031b      	lsls	r3, r3, #12
 800af6e:	493f      	ldr	r1, [pc, #252]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800af70:	4313      	orrs	r3, r2
 800af72:	628b      	str	r3, [r1, #40]	; 0x28
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	3b01      	subs	r3, #1
 800af7a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	3b01      	subs	r3, #1
 800af84:	025b      	lsls	r3, r3, #9
 800af86:	b29b      	uxth	r3, r3
 800af88:	431a      	orrs	r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	3b01      	subs	r3, #1
 800af90:	041b      	lsls	r3, r3, #16
 800af92:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800af96:	431a      	orrs	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	061b      	lsls	r3, r3, #24
 800afa0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800afa4:	4931      	ldr	r1, [pc, #196]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800afa6:	4313      	orrs	r3, r2
 800afa8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800afaa:	4b30      	ldr	r3, [pc, #192]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800afac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	492d      	ldr	r1, [pc, #180]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800afb8:	4313      	orrs	r3, r2
 800afba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800afbc:	4b2b      	ldr	r3, [pc, #172]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800afbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc0:	f023 0220 	bic.w	r2, r3, #32
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	699b      	ldr	r3, [r3, #24]
 800afc8:	4928      	ldr	r1, [pc, #160]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800afca:	4313      	orrs	r3, r2
 800afcc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800afce:	4b27      	ldr	r3, [pc, #156]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800afd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd2:	4a26      	ldr	r2, [pc, #152]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800afd4:	f023 0310 	bic.w	r3, r3, #16
 800afd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800afda:	4b24      	ldr	r3, [pc, #144]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800afdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afde:	4b24      	ldr	r3, [pc, #144]	; (800b070 <RCCEx_PLL2_Config+0x160>)
 800afe0:	4013      	ands	r3, r2
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	69d2      	ldr	r2, [r2, #28]
 800afe6:	00d2      	lsls	r2, r2, #3
 800afe8:	4920      	ldr	r1, [pc, #128]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800afea:	4313      	orrs	r3, r2
 800afec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800afee:	4b1f      	ldr	r3, [pc, #124]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800aff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff2:	4a1e      	ldr	r2, [pc, #120]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800aff4:	f043 0310 	orr.w	r3, r3, #16
 800aff8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d106      	bne.n	800b00e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b000:	4b1a      	ldr	r3, [pc, #104]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800b002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b004:	4a19      	ldr	r2, [pc, #100]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800b006:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b00a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b00c:	e00f      	b.n	800b02e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d106      	bne.n	800b022 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b014:	4b15      	ldr	r3, [pc, #84]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	4a14      	ldr	r2, [pc, #80]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800b01a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b01e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b020:	e005      	b.n	800b02e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b022:	4b12      	ldr	r3, [pc, #72]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800b024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b026:	4a11      	ldr	r2, [pc, #68]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800b028:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b02c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b02e:	4b0f      	ldr	r3, [pc, #60]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a0e      	ldr	r2, [pc, #56]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800b034:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b03a:	f7f7 fbeb 	bl	8002814 <HAL_GetTick>
 800b03e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b040:	e008      	b.n	800b054 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b042:	f7f7 fbe7 	bl	8002814 <HAL_GetTick>
 800b046:	4602      	mov	r2, r0
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d901      	bls.n	800b054 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e006      	b.n	800b062 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b054:	4b05      	ldr	r3, [pc, #20]	; (800b06c <RCCEx_PLL2_Config+0x15c>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0f0      	beq.n	800b042 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b060:	7bfb      	ldrb	r3, [r7, #15]
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	58024400 	.word	0x58024400
 800b070:	ffff0007 	.word	0xffff0007

0800b074 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b07e:	2300      	movs	r3, #0
 800b080:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b082:	4b53      	ldr	r3, [pc, #332]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b086:	f003 0303 	and.w	r3, r3, #3
 800b08a:	2b03      	cmp	r3, #3
 800b08c:	d101      	bne.n	800b092 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b08e:	2301      	movs	r3, #1
 800b090:	e099      	b.n	800b1c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b092:	4b4f      	ldr	r3, [pc, #316]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a4e      	ldr	r2, [pc, #312]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b09c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b09e:	f7f7 fbb9 	bl	8002814 <HAL_GetTick>
 800b0a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0a4:	e008      	b.n	800b0b8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b0a6:	f7f7 fbb5 	bl	8002814 <HAL_GetTick>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	d901      	bls.n	800b0b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e086      	b.n	800b1c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0b8:	4b45      	ldr	r3, [pc, #276]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d1f0      	bne.n	800b0a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b0c4:	4b42      	ldr	r3, [pc, #264]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b0c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	051b      	lsls	r3, r3, #20
 800b0d2:	493f      	ldr	r1, [pc, #252]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	628b      	str	r3, [r1, #40]	; 0x28
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	685b      	ldr	r3, [r3, #4]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	689b      	ldr	r3, [r3, #8]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	025b      	lsls	r3, r3, #9
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	431a      	orrs	r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	041b      	lsls	r3, r3, #16
 800b0f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b0fa:	431a      	orrs	r2, r3
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	3b01      	subs	r3, #1
 800b102:	061b      	lsls	r3, r3, #24
 800b104:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b108:	4931      	ldr	r1, [pc, #196]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b10e:	4b30      	ldr	r3, [pc, #192]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b112:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	695b      	ldr	r3, [r3, #20]
 800b11a:	492d      	ldr	r1, [pc, #180]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b11c:	4313      	orrs	r3, r2
 800b11e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b120:	4b2b      	ldr	r3, [pc, #172]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b124:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	4928      	ldr	r1, [pc, #160]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b12e:	4313      	orrs	r3, r2
 800b130:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b132:	4b27      	ldr	r3, [pc, #156]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b136:	4a26      	ldr	r2, [pc, #152]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b13c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b13e:	4b24      	ldr	r3, [pc, #144]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b140:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b142:	4b24      	ldr	r3, [pc, #144]	; (800b1d4 <RCCEx_PLL3_Config+0x160>)
 800b144:	4013      	ands	r3, r2
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	69d2      	ldr	r2, [r2, #28]
 800b14a:	00d2      	lsls	r2, r2, #3
 800b14c:	4920      	ldr	r1, [pc, #128]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b14e:	4313      	orrs	r3, r2
 800b150:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b152:	4b1f      	ldr	r3, [pc, #124]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b156:	4a1e      	ldr	r2, [pc, #120]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b15c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d106      	bne.n	800b172 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b164:	4b1a      	ldr	r3, [pc, #104]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b168:	4a19      	ldr	r2, [pc, #100]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b16a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b16e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b170:	e00f      	b.n	800b192 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d106      	bne.n	800b186 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b178:	4b15      	ldr	r3, [pc, #84]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17c:	4a14      	ldr	r2, [pc, #80]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b17e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b182:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b184:	e005      	b.n	800b192 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b186:	4b12      	ldr	r3, [pc, #72]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18a:	4a11      	ldr	r2, [pc, #68]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b18c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b190:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b192:	4b0f      	ldr	r3, [pc, #60]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a0e      	ldr	r2, [pc, #56]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b19c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b19e:	f7f7 fb39 	bl	8002814 <HAL_GetTick>
 800b1a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1a4:	e008      	b.n	800b1b8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b1a6:	f7f7 fb35 	bl	8002814 <HAL_GetTick>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	2b02      	cmp	r3, #2
 800b1b2:	d901      	bls.n	800b1b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	e006      	b.n	800b1c6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1b8:	4b05      	ldr	r3, [pc, #20]	; (800b1d0 <RCCEx_PLL3_Config+0x15c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0f0      	beq.n	800b1a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3710      	adds	r7, #16
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	58024400 	.word	0x58024400
 800b1d4:	ffff0007 	.word	0xffff0007

0800b1d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	e08f      	b.n	800b30c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d106      	bne.n	800b206 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f7f6 fe31 	bl	8001e68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2202      	movs	r2, #2
 800b20a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	6899      	ldr	r1, [r3, #8]
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	4b3e      	ldr	r3, [pc, #248]	; (800b314 <HAL_TIM_Encoder_Init+0x13c>)
 800b21a:	400b      	ands	r3, r1
 800b21c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681a      	ldr	r2, [r3, #0]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	3304      	adds	r3, #4
 800b226:	4619      	mov	r1, r3
 800b228:	4610      	mov	r0, r2
 800b22a:	f000 fa39 	bl	800b6a0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	6a1b      	ldr	r3, [r3, #32]
 800b244:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	697a      	ldr	r2, [r7, #20]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	4b31      	ldr	r3, [pc, #196]	; (800b318 <HAL_TIM_Encoder_Init+0x140>)
 800b254:	4013      	ands	r3, r2
 800b256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	689a      	ldr	r2, [r3, #8]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	021b      	lsls	r3, r3, #8
 800b262:	4313      	orrs	r3, r2
 800b264:	693a      	ldr	r2, [r7, #16]
 800b266:	4313      	orrs	r3, r2
 800b268:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b26a:	693a      	ldr	r2, [r7, #16]
 800b26c:	4b2b      	ldr	r3, [pc, #172]	; (800b31c <HAL_TIM_Encoder_Init+0x144>)
 800b26e:	4013      	ands	r3, r2
 800b270:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	4b2a      	ldr	r3, [pc, #168]	; (800b320 <HAL_TIM_Encoder_Init+0x148>)
 800b276:	4013      	ands	r3, r2
 800b278:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b27a:	683b      	ldr	r3, [r7, #0]
 800b27c:	68da      	ldr	r2, [r3, #12]
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	69db      	ldr	r3, [r3, #28]
 800b282:	021b      	lsls	r3, r3, #8
 800b284:	4313      	orrs	r3, r2
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	4313      	orrs	r3, r2
 800b28a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	691b      	ldr	r3, [r3, #16]
 800b290:	011a      	lsls	r2, r3, #4
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	031b      	lsls	r3, r3, #12
 800b298:	4313      	orrs	r3, r2
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b2a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b2ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	695b      	ldr	r3, [r3, #20]
 800b2b8:	011b      	lsls	r3, r3, #4
 800b2ba:	4313      	orrs	r3, r2
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	697a      	ldr	r2, [r7, #20]
 800b2c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	693a      	ldr	r2, [r7, #16]
 800b2d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	68fa      	ldr	r2, [r7, #12]
 800b2d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2201      	movs	r2, #1
 800b2de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2201      	movs	r2, #1
 800b2e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2201      	movs	r2, #1
 800b2f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2201      	movs	r2, #1
 800b2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2201      	movs	r2, #1
 800b306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b30a:	2300      	movs	r3, #0
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	3718      	adds	r7, #24
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}
 800b314:	fffebff8 	.word	0xfffebff8
 800b318:	fffffcfc 	.word	0xfffffcfc
 800b31c:	fffff3f3 	.word	0xfffff3f3
 800b320:	ffff0f0f 	.word	0xffff0f0f

0800b324 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b334:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b33c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b344:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b34c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d110      	bne.n	800b376 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b354:	7bfb      	ldrb	r3, [r7, #15]
 800b356:	2b01      	cmp	r3, #1
 800b358:	d102      	bne.n	800b360 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b35a:	7b7b      	ldrb	r3, [r7, #13]
 800b35c:	2b01      	cmp	r3, #1
 800b35e:	d001      	beq.n	800b364 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b360:	2301      	movs	r3, #1
 800b362:	e069      	b.n	800b438 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2202      	movs	r2, #2
 800b368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2202      	movs	r2, #2
 800b370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b374:	e031      	b.n	800b3da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b04      	cmp	r3, #4
 800b37a:	d110      	bne.n	800b39e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b37c:	7bbb      	ldrb	r3, [r7, #14]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d102      	bne.n	800b388 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b382:	7b3b      	ldrb	r3, [r7, #12]
 800b384:	2b01      	cmp	r3, #1
 800b386:	d001      	beq.n	800b38c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e055      	b.n	800b438 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2202      	movs	r2, #2
 800b390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2202      	movs	r2, #2
 800b398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b39c:	e01d      	b.n	800b3da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b39e:	7bfb      	ldrb	r3, [r7, #15]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d108      	bne.n	800b3b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b3a4:	7bbb      	ldrb	r3, [r7, #14]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d105      	bne.n	800b3b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b3aa:	7b7b      	ldrb	r3, [r7, #13]
 800b3ac:	2b01      	cmp	r3, #1
 800b3ae:	d102      	bne.n	800b3b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b3b0:	7b3b      	ldrb	r3, [r7, #12]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d001      	beq.n	800b3ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e03e      	b.n	800b438 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2202      	movs	r2, #2
 800b3be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	2202      	movs	r2, #2
 800b3d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d003      	beq.n	800b3e8 <HAL_TIM_Encoder_Start+0xc4>
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	d008      	beq.n	800b3f8 <HAL_TIM_Encoder_Start+0xd4>
 800b3e6:	e00f      	b.n	800b408 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	f000 f9fb 	bl	800b7ec <TIM_CCxChannelCmd>
      break;
 800b3f6:	e016      	b.n	800b426 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	2104      	movs	r1, #4
 800b400:	4618      	mov	r0, r3
 800b402:	f000 f9f3 	bl	800b7ec <TIM_CCxChannelCmd>
      break;
 800b406:	e00e      	b.n	800b426 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2201      	movs	r2, #1
 800b40e:	2100      	movs	r1, #0
 800b410:	4618      	mov	r0, r3
 800b412:	f000 f9eb 	bl	800b7ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2201      	movs	r2, #1
 800b41c:	2104      	movs	r1, #4
 800b41e:	4618      	mov	r0, r3
 800b420:	f000 f9e4 	bl	800b7ec <TIM_CCxChannelCmd>
      break;
 800b424:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f042 0201 	orr.w	r2, r2, #1
 800b434:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b436:	2300      	movs	r3, #0
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b084      	sub	sp, #16
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	68db      	ldr	r3, [r3, #12]
 800b44e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	691b      	ldr	r3, [r3, #16]
 800b456:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	f003 0302 	and.w	r3, r3, #2
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d020      	beq.n	800b4a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	f003 0302 	and.w	r3, r3, #2
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d01b      	beq.n	800b4a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f06f 0202 	mvn.w	r2, #2
 800b474:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2201      	movs	r2, #1
 800b47a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	699b      	ldr	r3, [r3, #24]
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	2b00      	cmp	r3, #0
 800b488:	d003      	beq.n	800b492 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 f8e9 	bl	800b662 <HAL_TIM_IC_CaptureCallback>
 800b490:	e005      	b.n	800b49e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f000 f8db 	bl	800b64e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 f8ec 	bl	800b676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f003 0304 	and.w	r3, r3, #4
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d020      	beq.n	800b4f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	f003 0304 	and.w	r3, r3, #4
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d01b      	beq.n	800b4f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f06f 0204 	mvn.w	r2, #4
 800b4c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2202      	movs	r2, #2
 800b4c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	699b      	ldr	r3, [r3, #24]
 800b4ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d003      	beq.n	800b4de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f8c3 	bl	800b662 <HAL_TIM_IC_CaptureCallback>
 800b4dc:	e005      	b.n	800b4ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f8b5 	bl	800b64e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f8c6 	bl	800b676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	f003 0308 	and.w	r3, r3, #8
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d020      	beq.n	800b53c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f003 0308 	and.w	r3, r3, #8
 800b500:	2b00      	cmp	r3, #0
 800b502:	d01b      	beq.n	800b53c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f06f 0208 	mvn.w	r2, #8
 800b50c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2204      	movs	r2, #4
 800b512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	69db      	ldr	r3, [r3, #28]
 800b51a:	f003 0303 	and.w	r3, r3, #3
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f000 f89d 	bl	800b662 <HAL_TIM_IC_CaptureCallback>
 800b528:	e005      	b.n	800b536 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f000 f88f 	bl	800b64e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f000 f8a0 	bl	800b676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f003 0310 	and.w	r3, r3, #16
 800b542:	2b00      	cmp	r3, #0
 800b544:	d020      	beq.n	800b588 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f003 0310 	and.w	r3, r3, #16
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d01b      	beq.n	800b588 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f06f 0210 	mvn.w	r2, #16
 800b558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2208      	movs	r2, #8
 800b55e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	69db      	ldr	r3, [r3, #28]
 800b566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 f877 	bl	800b662 <HAL_TIM_IC_CaptureCallback>
 800b574:	e005      	b.n	800b582 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f869 	bl	800b64e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b57c:	6878      	ldr	r0, [r7, #4]
 800b57e:	f000 f87a 	bl	800b676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	f003 0301 	and.w	r3, r3, #1
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d00c      	beq.n	800b5ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d007      	beq.n	800b5ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f06f 0201 	mvn.w	r2, #1
 800b5a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f7f6 fce8 	bl	8001f7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d104      	bne.n	800b5c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d00c      	beq.n	800b5da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d007      	beq.n	800b5da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800b5d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f000 f9c7 	bl	800b968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00c      	beq.n	800b5fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d007      	beq.n	800b5fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b5f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f9bf 	bl	800b97c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00c      	beq.n	800b622 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d007      	beq.n	800b622 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b61a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f000 f834 	bl	800b68a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	f003 0320 	and.w	r3, r3, #32
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00c      	beq.n	800b646 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f003 0320 	and.w	r3, r3, #32
 800b632:	2b00      	cmp	r3, #0
 800b634:	d007      	beq.n	800b646 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f06f 0220 	mvn.w	r2, #32
 800b63e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b640:	6878      	ldr	r0, [r7, #4]
 800b642:	f000 f987 	bl	800b954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b646:	bf00      	nop
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b64e:	b480      	push	{r7}
 800b650:	b083      	sub	sp, #12
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b656:	bf00      	nop
 800b658:	370c      	adds	r7, #12
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr

0800b662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b662:	b480      	push	{r7}
 800b664:	b083      	sub	sp, #12
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b66a:	bf00      	nop
 800b66c:	370c      	adds	r7, #12
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b676:	b480      	push	{r7}
 800b678:	b083      	sub	sp, #12
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b67e:	bf00      	nop
 800b680:	370c      	adds	r7, #12
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b083      	sub	sp, #12
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b692:	bf00      	nop
 800b694:	370c      	adds	r7, #12
 800b696:	46bd      	mov	sp, r7
 800b698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69c:	4770      	bx	lr
	...

0800b6a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
 800b6a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	4a46      	ldr	r2, [pc, #280]	; (800b7cc <TIM_Base_SetConfig+0x12c>)
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	d013      	beq.n	800b6e0 <TIM_Base_SetConfig+0x40>
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6be:	d00f      	beq.n	800b6e0 <TIM_Base_SetConfig+0x40>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	4a43      	ldr	r2, [pc, #268]	; (800b7d0 <TIM_Base_SetConfig+0x130>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d00b      	beq.n	800b6e0 <TIM_Base_SetConfig+0x40>
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	4a42      	ldr	r2, [pc, #264]	; (800b7d4 <TIM_Base_SetConfig+0x134>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d007      	beq.n	800b6e0 <TIM_Base_SetConfig+0x40>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	4a41      	ldr	r2, [pc, #260]	; (800b7d8 <TIM_Base_SetConfig+0x138>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d003      	beq.n	800b6e0 <TIM_Base_SetConfig+0x40>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	4a40      	ldr	r2, [pc, #256]	; (800b7dc <TIM_Base_SetConfig+0x13c>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d108      	bne.n	800b6f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	68fa      	ldr	r2, [r7, #12]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	4a35      	ldr	r2, [pc, #212]	; (800b7cc <TIM_Base_SetConfig+0x12c>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d01f      	beq.n	800b73a <TIM_Base_SetConfig+0x9a>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b700:	d01b      	beq.n	800b73a <TIM_Base_SetConfig+0x9a>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a32      	ldr	r2, [pc, #200]	; (800b7d0 <TIM_Base_SetConfig+0x130>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d017      	beq.n	800b73a <TIM_Base_SetConfig+0x9a>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a31      	ldr	r2, [pc, #196]	; (800b7d4 <TIM_Base_SetConfig+0x134>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d013      	beq.n	800b73a <TIM_Base_SetConfig+0x9a>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a30      	ldr	r2, [pc, #192]	; (800b7d8 <TIM_Base_SetConfig+0x138>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d00f      	beq.n	800b73a <TIM_Base_SetConfig+0x9a>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a2f      	ldr	r2, [pc, #188]	; (800b7dc <TIM_Base_SetConfig+0x13c>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d00b      	beq.n	800b73a <TIM_Base_SetConfig+0x9a>
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a2e      	ldr	r2, [pc, #184]	; (800b7e0 <TIM_Base_SetConfig+0x140>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d007      	beq.n	800b73a <TIM_Base_SetConfig+0x9a>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a2d      	ldr	r2, [pc, #180]	; (800b7e4 <TIM_Base_SetConfig+0x144>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d003      	beq.n	800b73a <TIM_Base_SetConfig+0x9a>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a2c      	ldr	r2, [pc, #176]	; (800b7e8 <TIM_Base_SetConfig+0x148>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d108      	bne.n	800b74c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	4313      	orrs	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	695b      	ldr	r3, [r3, #20]
 800b756:	4313      	orrs	r3, r2
 800b758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	68fa      	ldr	r2, [r7, #12]
 800b75e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	689a      	ldr	r2, [r3, #8]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a16      	ldr	r2, [pc, #88]	; (800b7cc <TIM_Base_SetConfig+0x12c>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d00f      	beq.n	800b798 <TIM_Base_SetConfig+0xf8>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a18      	ldr	r2, [pc, #96]	; (800b7dc <TIM_Base_SetConfig+0x13c>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d00b      	beq.n	800b798 <TIM_Base_SetConfig+0xf8>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a17      	ldr	r2, [pc, #92]	; (800b7e0 <TIM_Base_SetConfig+0x140>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d007      	beq.n	800b798 <TIM_Base_SetConfig+0xf8>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a16      	ldr	r2, [pc, #88]	; (800b7e4 <TIM_Base_SetConfig+0x144>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d003      	beq.n	800b798 <TIM_Base_SetConfig+0xf8>
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	4a15      	ldr	r2, [pc, #84]	; (800b7e8 <TIM_Base_SetConfig+0x148>)
 800b794:	4293      	cmp	r3, r2
 800b796:	d103      	bne.n	800b7a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	691a      	ldr	r2, [r3, #16]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	691b      	ldr	r3, [r3, #16]
 800b7aa:	f003 0301 	and.w	r3, r3, #1
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d105      	bne.n	800b7be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	691b      	ldr	r3, [r3, #16]
 800b7b6:	f023 0201 	bic.w	r2, r3, #1
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	611a      	str	r2, [r3, #16]
  }
}
 800b7be:	bf00      	nop
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop
 800b7cc:	40010000 	.word	0x40010000
 800b7d0:	40000400 	.word	0x40000400
 800b7d4:	40000800 	.word	0x40000800
 800b7d8:	40000c00 	.word	0x40000c00
 800b7dc:	40010400 	.word	0x40010400
 800b7e0:	40014000 	.word	0x40014000
 800b7e4:	40014400 	.word	0x40014400
 800b7e8:	40014800 	.word	0x40014800

0800b7ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	f003 031f 	and.w	r3, r3, #31
 800b7fe:	2201      	movs	r2, #1
 800b800:	fa02 f303 	lsl.w	r3, r2, r3
 800b804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	6a1a      	ldr	r2, [r3, #32]
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	43db      	mvns	r3, r3
 800b80e:	401a      	ands	r2, r3
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6a1a      	ldr	r2, [r3, #32]
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f003 031f 	and.w	r3, r3, #31
 800b81e:	6879      	ldr	r1, [r7, #4]
 800b820:	fa01 f303 	lsl.w	r3, r1, r3
 800b824:	431a      	orrs	r2, r3
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	621a      	str	r2, [r3, #32]
}
 800b82a:	bf00      	nop
 800b82c:	371c      	adds	r7, #28
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
	...

0800b838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d101      	bne.n	800b850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b84c:	2302      	movs	r3, #2
 800b84e:	e06d      	b.n	800b92c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2202      	movs	r2, #2
 800b85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a30      	ldr	r2, [pc, #192]	; (800b938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d004      	beq.n	800b884 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a2f      	ldr	r2, [pc, #188]	; (800b93c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d108      	bne.n	800b896 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b88a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	4313      	orrs	r3, r2
 800b894:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b89c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4313      	orrs	r3, r2
 800b8a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68fa      	ldr	r2, [r7, #12]
 800b8ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a20      	ldr	r2, [pc, #128]	; (800b938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b8b6:	4293      	cmp	r3, r2
 800b8b8:	d022      	beq.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8c2:	d01d      	beq.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a1d      	ldr	r2, [pc, #116]	; (800b940 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d018      	beq.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a1c      	ldr	r2, [pc, #112]	; (800b944 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d013      	beq.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a1a      	ldr	r2, [pc, #104]	; (800b948 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d00e      	beq.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4a15      	ldr	r2, [pc, #84]	; (800b93c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b8e8:	4293      	cmp	r3, r2
 800b8ea:	d009      	beq.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	4a16      	ldr	r2, [pc, #88]	; (800b94c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d004      	beq.n	800b900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	4a15      	ldr	r2, [pc, #84]	; (800b950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b8fc:	4293      	cmp	r3, r2
 800b8fe:	d10c      	bne.n	800b91a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	4313      	orrs	r3, r2
 800b910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	68ba      	ldr	r2, [r7, #8]
 800b918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2201      	movs	r2, #1
 800b91e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2200      	movs	r2, #0
 800b926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3714      	adds	r7, #20
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr
 800b938:	40010000 	.word	0x40010000
 800b93c:	40010400 	.word	0x40010400
 800b940:	40000400 	.word	0x40000400
 800b944:	40000800 	.word	0x40000800
 800b948:	40000c00 	.word	0x40000c00
 800b94c:	40001800 	.word	0x40001800
 800b950:	40014000 	.word	0x40014000

0800b954 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b954:	b480      	push	{r7}
 800b956:	b083      	sub	sp, #12
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b95c:	bf00      	nop
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b966:	4770      	bx	lr

0800b968 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b970:	bf00      	nop
 800b972:	370c      	adds	r7, #12
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b984:	bf00      	nop
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b082      	sub	sp, #8
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d101      	bne.n	800b9a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e042      	b.n	800ba28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d106      	bne.n	800b9ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7f6 fd75 	bl	80024a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2224      	movs	r2, #36	; 0x24
 800b9be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f022 0201 	bic.w	r2, r2, #1
 800b9d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d002      	beq.n	800b9e0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fd90 	bl	800c500 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 f825 	bl	800ba30 <UART_SetConfig>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b01      	cmp	r3, #1
 800b9ea:	d101      	bne.n	800b9f0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e01b      	b.n	800ba28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	685a      	ldr	r2, [r3, #4]
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b9fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	689a      	ldr	r2, [r3, #8]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ba0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	f042 0201 	orr.w	r2, r2, #1
 800ba1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fe0f 	bl	800c644 <UART_CheckIdleState>
 800ba26:	4603      	mov	r3, r0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	3708      	adds	r7, #8
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bd80      	pop	{r7, pc}

0800ba30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba34:	b092      	sub	sp, #72	; 0x48
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	689a      	ldr	r2, [r3, #8]
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	431a      	orrs	r2, r3
 800ba4a:	697b      	ldr	r3, [r7, #20]
 800ba4c:	695b      	ldr	r3, [r3, #20]
 800ba4e:	431a      	orrs	r2, r3
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	69db      	ldr	r3, [r3, #28]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba58:	697b      	ldr	r3, [r7, #20]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	4bbe      	ldr	r3, [pc, #760]	; (800bd58 <UART_SetConfig+0x328>)
 800ba60:	4013      	ands	r3, r2
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	6812      	ldr	r2, [r2, #0]
 800ba66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ba68:	430b      	orrs	r3, r1
 800ba6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	68da      	ldr	r2, [r3, #12]
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	430a      	orrs	r2, r1
 800ba80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	4ab3      	ldr	r2, [pc, #716]	; (800bd5c <UART_SetConfig+0x32c>)
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	d004      	beq.n	800ba9c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	689a      	ldr	r2, [r3, #8]
 800baa2:	4baf      	ldr	r3, [pc, #700]	; (800bd60 <UART_SetConfig+0x330>)
 800baa4:	4013      	ands	r3, r2
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	6812      	ldr	r2, [r2, #0]
 800baaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800baac:	430b      	orrs	r3, r1
 800baae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab6:	f023 010f 	bic.w	r1, r3, #15
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	430a      	orrs	r2, r1
 800bac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4aa6      	ldr	r2, [pc, #664]	; (800bd64 <UART_SetConfig+0x334>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d177      	bne.n	800bbc0 <UART_SetConfig+0x190>
 800bad0:	4ba5      	ldr	r3, [pc, #660]	; (800bd68 <UART_SetConfig+0x338>)
 800bad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bad4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bad8:	2b28      	cmp	r3, #40	; 0x28
 800bada:	d86d      	bhi.n	800bbb8 <UART_SetConfig+0x188>
 800badc:	a201      	add	r2, pc, #4	; (adr r2, 800bae4 <UART_SetConfig+0xb4>)
 800bade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae2:	bf00      	nop
 800bae4:	0800bb89 	.word	0x0800bb89
 800bae8:	0800bbb9 	.word	0x0800bbb9
 800baec:	0800bbb9 	.word	0x0800bbb9
 800baf0:	0800bbb9 	.word	0x0800bbb9
 800baf4:	0800bbb9 	.word	0x0800bbb9
 800baf8:	0800bbb9 	.word	0x0800bbb9
 800bafc:	0800bbb9 	.word	0x0800bbb9
 800bb00:	0800bbb9 	.word	0x0800bbb9
 800bb04:	0800bb91 	.word	0x0800bb91
 800bb08:	0800bbb9 	.word	0x0800bbb9
 800bb0c:	0800bbb9 	.word	0x0800bbb9
 800bb10:	0800bbb9 	.word	0x0800bbb9
 800bb14:	0800bbb9 	.word	0x0800bbb9
 800bb18:	0800bbb9 	.word	0x0800bbb9
 800bb1c:	0800bbb9 	.word	0x0800bbb9
 800bb20:	0800bbb9 	.word	0x0800bbb9
 800bb24:	0800bb99 	.word	0x0800bb99
 800bb28:	0800bbb9 	.word	0x0800bbb9
 800bb2c:	0800bbb9 	.word	0x0800bbb9
 800bb30:	0800bbb9 	.word	0x0800bbb9
 800bb34:	0800bbb9 	.word	0x0800bbb9
 800bb38:	0800bbb9 	.word	0x0800bbb9
 800bb3c:	0800bbb9 	.word	0x0800bbb9
 800bb40:	0800bbb9 	.word	0x0800bbb9
 800bb44:	0800bba1 	.word	0x0800bba1
 800bb48:	0800bbb9 	.word	0x0800bbb9
 800bb4c:	0800bbb9 	.word	0x0800bbb9
 800bb50:	0800bbb9 	.word	0x0800bbb9
 800bb54:	0800bbb9 	.word	0x0800bbb9
 800bb58:	0800bbb9 	.word	0x0800bbb9
 800bb5c:	0800bbb9 	.word	0x0800bbb9
 800bb60:	0800bbb9 	.word	0x0800bbb9
 800bb64:	0800bba9 	.word	0x0800bba9
 800bb68:	0800bbb9 	.word	0x0800bbb9
 800bb6c:	0800bbb9 	.word	0x0800bbb9
 800bb70:	0800bbb9 	.word	0x0800bbb9
 800bb74:	0800bbb9 	.word	0x0800bbb9
 800bb78:	0800bbb9 	.word	0x0800bbb9
 800bb7c:	0800bbb9 	.word	0x0800bbb9
 800bb80:	0800bbb9 	.word	0x0800bbb9
 800bb84:	0800bbb1 	.word	0x0800bbb1
 800bb88:	2301      	movs	r3, #1
 800bb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb8e:	e222      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bb90:	2304      	movs	r3, #4
 800bb92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb96:	e21e      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bb98:	2308      	movs	r3, #8
 800bb9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb9e:	e21a      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bba0:	2310      	movs	r3, #16
 800bba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bba6:	e216      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bba8:	2320      	movs	r3, #32
 800bbaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbae:	e212      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bbb0:	2340      	movs	r3, #64	; 0x40
 800bbb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbb6:	e20e      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bbb8:	2380      	movs	r3, #128	; 0x80
 800bbba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbbe:	e20a      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bbc0:	697b      	ldr	r3, [r7, #20]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	4a69      	ldr	r2, [pc, #420]	; (800bd6c <UART_SetConfig+0x33c>)
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d130      	bne.n	800bc2c <UART_SetConfig+0x1fc>
 800bbca:	4b67      	ldr	r3, [pc, #412]	; (800bd68 <UART_SetConfig+0x338>)
 800bbcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbce:	f003 0307 	and.w	r3, r3, #7
 800bbd2:	2b05      	cmp	r3, #5
 800bbd4:	d826      	bhi.n	800bc24 <UART_SetConfig+0x1f4>
 800bbd6:	a201      	add	r2, pc, #4	; (adr r2, 800bbdc <UART_SetConfig+0x1ac>)
 800bbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbdc:	0800bbf5 	.word	0x0800bbf5
 800bbe0:	0800bbfd 	.word	0x0800bbfd
 800bbe4:	0800bc05 	.word	0x0800bc05
 800bbe8:	0800bc0d 	.word	0x0800bc0d
 800bbec:	0800bc15 	.word	0x0800bc15
 800bbf0:	0800bc1d 	.word	0x0800bc1d
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbfa:	e1ec      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bbfc:	2304      	movs	r3, #4
 800bbfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc02:	e1e8      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc04:	2308      	movs	r3, #8
 800bc06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc0a:	e1e4      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc0c:	2310      	movs	r3, #16
 800bc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc12:	e1e0      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc14:	2320      	movs	r3, #32
 800bc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc1a:	e1dc      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc1c:	2340      	movs	r3, #64	; 0x40
 800bc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc22:	e1d8      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc24:	2380      	movs	r3, #128	; 0x80
 800bc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc2a:	e1d4      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a4f      	ldr	r2, [pc, #316]	; (800bd70 <UART_SetConfig+0x340>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d130      	bne.n	800bc98 <UART_SetConfig+0x268>
 800bc36:	4b4c      	ldr	r3, [pc, #304]	; (800bd68 <UART_SetConfig+0x338>)
 800bc38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3a:	f003 0307 	and.w	r3, r3, #7
 800bc3e:	2b05      	cmp	r3, #5
 800bc40:	d826      	bhi.n	800bc90 <UART_SetConfig+0x260>
 800bc42:	a201      	add	r2, pc, #4	; (adr r2, 800bc48 <UART_SetConfig+0x218>)
 800bc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc48:	0800bc61 	.word	0x0800bc61
 800bc4c:	0800bc69 	.word	0x0800bc69
 800bc50:	0800bc71 	.word	0x0800bc71
 800bc54:	0800bc79 	.word	0x0800bc79
 800bc58:	0800bc81 	.word	0x0800bc81
 800bc5c:	0800bc89 	.word	0x0800bc89
 800bc60:	2300      	movs	r3, #0
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc66:	e1b6      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc68:	2304      	movs	r3, #4
 800bc6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc6e:	e1b2      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc70:	2308      	movs	r3, #8
 800bc72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc76:	e1ae      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc78:	2310      	movs	r3, #16
 800bc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc7e:	e1aa      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc80:	2320      	movs	r3, #32
 800bc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc86:	e1a6      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc88:	2340      	movs	r3, #64	; 0x40
 800bc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc8e:	e1a2      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc90:	2380      	movs	r3, #128	; 0x80
 800bc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc96:	e19e      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bc98:	697b      	ldr	r3, [r7, #20]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a35      	ldr	r2, [pc, #212]	; (800bd74 <UART_SetConfig+0x344>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d130      	bne.n	800bd04 <UART_SetConfig+0x2d4>
 800bca2:	4b31      	ldr	r3, [pc, #196]	; (800bd68 <UART_SetConfig+0x338>)
 800bca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca6:	f003 0307 	and.w	r3, r3, #7
 800bcaa:	2b05      	cmp	r3, #5
 800bcac:	d826      	bhi.n	800bcfc <UART_SetConfig+0x2cc>
 800bcae:	a201      	add	r2, pc, #4	; (adr r2, 800bcb4 <UART_SetConfig+0x284>)
 800bcb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcb4:	0800bccd 	.word	0x0800bccd
 800bcb8:	0800bcd5 	.word	0x0800bcd5
 800bcbc:	0800bcdd 	.word	0x0800bcdd
 800bcc0:	0800bce5 	.word	0x0800bce5
 800bcc4:	0800bced 	.word	0x0800bced
 800bcc8:	0800bcf5 	.word	0x0800bcf5
 800bccc:	2300      	movs	r3, #0
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcd2:	e180      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bcd4:	2304      	movs	r3, #4
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcda:	e17c      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bcdc:	2308      	movs	r3, #8
 800bcde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bce2:	e178      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bce4:	2310      	movs	r3, #16
 800bce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcea:	e174      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bcec:	2320      	movs	r3, #32
 800bcee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcf2:	e170      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bcf4:	2340      	movs	r3, #64	; 0x40
 800bcf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcfa:	e16c      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bcfc:	2380      	movs	r3, #128	; 0x80
 800bcfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd02:	e168      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a1b      	ldr	r2, [pc, #108]	; (800bd78 <UART_SetConfig+0x348>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d142      	bne.n	800bd94 <UART_SetConfig+0x364>
 800bd0e:	4b16      	ldr	r3, [pc, #88]	; (800bd68 <UART_SetConfig+0x338>)
 800bd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd12:	f003 0307 	and.w	r3, r3, #7
 800bd16:	2b05      	cmp	r3, #5
 800bd18:	d838      	bhi.n	800bd8c <UART_SetConfig+0x35c>
 800bd1a:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <UART_SetConfig+0x2f0>)
 800bd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd20:	0800bd39 	.word	0x0800bd39
 800bd24:	0800bd41 	.word	0x0800bd41
 800bd28:	0800bd49 	.word	0x0800bd49
 800bd2c:	0800bd51 	.word	0x0800bd51
 800bd30:	0800bd7d 	.word	0x0800bd7d
 800bd34:	0800bd85 	.word	0x0800bd85
 800bd38:	2300      	movs	r3, #0
 800bd3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd3e:	e14a      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bd40:	2304      	movs	r3, #4
 800bd42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd46:	e146      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bd48:	2308      	movs	r3, #8
 800bd4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd4e:	e142      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bd50:	2310      	movs	r3, #16
 800bd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd56:	e13e      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bd58:	cfff69f3 	.word	0xcfff69f3
 800bd5c:	58000c00 	.word	0x58000c00
 800bd60:	11fff4ff 	.word	0x11fff4ff
 800bd64:	40011000 	.word	0x40011000
 800bd68:	58024400 	.word	0x58024400
 800bd6c:	40004400 	.word	0x40004400
 800bd70:	40004800 	.word	0x40004800
 800bd74:	40004c00 	.word	0x40004c00
 800bd78:	40005000 	.word	0x40005000
 800bd7c:	2320      	movs	r3, #32
 800bd7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd82:	e128      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bd84:	2340      	movs	r3, #64	; 0x40
 800bd86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd8a:	e124      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bd8c:	2380      	movs	r3, #128	; 0x80
 800bd8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bd92:	e120      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4acb      	ldr	r2, [pc, #812]	; (800c0c8 <UART_SetConfig+0x698>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d176      	bne.n	800be8c <UART_SetConfig+0x45c>
 800bd9e:	4bcb      	ldr	r3, [pc, #812]	; (800c0cc <UART_SetConfig+0x69c>)
 800bda0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bda2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bda6:	2b28      	cmp	r3, #40	; 0x28
 800bda8:	d86c      	bhi.n	800be84 <UART_SetConfig+0x454>
 800bdaa:	a201      	add	r2, pc, #4	; (adr r2, 800bdb0 <UART_SetConfig+0x380>)
 800bdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb0:	0800be55 	.word	0x0800be55
 800bdb4:	0800be85 	.word	0x0800be85
 800bdb8:	0800be85 	.word	0x0800be85
 800bdbc:	0800be85 	.word	0x0800be85
 800bdc0:	0800be85 	.word	0x0800be85
 800bdc4:	0800be85 	.word	0x0800be85
 800bdc8:	0800be85 	.word	0x0800be85
 800bdcc:	0800be85 	.word	0x0800be85
 800bdd0:	0800be5d 	.word	0x0800be5d
 800bdd4:	0800be85 	.word	0x0800be85
 800bdd8:	0800be85 	.word	0x0800be85
 800bddc:	0800be85 	.word	0x0800be85
 800bde0:	0800be85 	.word	0x0800be85
 800bde4:	0800be85 	.word	0x0800be85
 800bde8:	0800be85 	.word	0x0800be85
 800bdec:	0800be85 	.word	0x0800be85
 800bdf0:	0800be65 	.word	0x0800be65
 800bdf4:	0800be85 	.word	0x0800be85
 800bdf8:	0800be85 	.word	0x0800be85
 800bdfc:	0800be85 	.word	0x0800be85
 800be00:	0800be85 	.word	0x0800be85
 800be04:	0800be85 	.word	0x0800be85
 800be08:	0800be85 	.word	0x0800be85
 800be0c:	0800be85 	.word	0x0800be85
 800be10:	0800be6d 	.word	0x0800be6d
 800be14:	0800be85 	.word	0x0800be85
 800be18:	0800be85 	.word	0x0800be85
 800be1c:	0800be85 	.word	0x0800be85
 800be20:	0800be85 	.word	0x0800be85
 800be24:	0800be85 	.word	0x0800be85
 800be28:	0800be85 	.word	0x0800be85
 800be2c:	0800be85 	.word	0x0800be85
 800be30:	0800be75 	.word	0x0800be75
 800be34:	0800be85 	.word	0x0800be85
 800be38:	0800be85 	.word	0x0800be85
 800be3c:	0800be85 	.word	0x0800be85
 800be40:	0800be85 	.word	0x0800be85
 800be44:	0800be85 	.word	0x0800be85
 800be48:	0800be85 	.word	0x0800be85
 800be4c:	0800be85 	.word	0x0800be85
 800be50:	0800be7d 	.word	0x0800be7d
 800be54:	2301      	movs	r3, #1
 800be56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be5a:	e0bc      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800be5c:	2304      	movs	r3, #4
 800be5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be62:	e0b8      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800be64:	2308      	movs	r3, #8
 800be66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be6a:	e0b4      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800be6c:	2310      	movs	r3, #16
 800be6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be72:	e0b0      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800be74:	2320      	movs	r3, #32
 800be76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be7a:	e0ac      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800be7c:	2340      	movs	r3, #64	; 0x40
 800be7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be82:	e0a8      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800be84:	2380      	movs	r3, #128	; 0x80
 800be86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be8a:	e0a4      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a8f      	ldr	r2, [pc, #572]	; (800c0d0 <UART_SetConfig+0x6a0>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d130      	bne.n	800bef8 <UART_SetConfig+0x4c8>
 800be96:	4b8d      	ldr	r3, [pc, #564]	; (800c0cc <UART_SetConfig+0x69c>)
 800be98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be9a:	f003 0307 	and.w	r3, r3, #7
 800be9e:	2b05      	cmp	r3, #5
 800bea0:	d826      	bhi.n	800bef0 <UART_SetConfig+0x4c0>
 800bea2:	a201      	add	r2, pc, #4	; (adr r2, 800bea8 <UART_SetConfig+0x478>)
 800bea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea8:	0800bec1 	.word	0x0800bec1
 800beac:	0800bec9 	.word	0x0800bec9
 800beb0:	0800bed1 	.word	0x0800bed1
 800beb4:	0800bed9 	.word	0x0800bed9
 800beb8:	0800bee1 	.word	0x0800bee1
 800bebc:	0800bee9 	.word	0x0800bee9
 800bec0:	2300      	movs	r3, #0
 800bec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bec6:	e086      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bec8:	2304      	movs	r3, #4
 800beca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bece:	e082      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bed0:	2308      	movs	r3, #8
 800bed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bed6:	e07e      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bed8:	2310      	movs	r3, #16
 800beda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bede:	e07a      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bee0:	2320      	movs	r3, #32
 800bee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bee6:	e076      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bee8:	2340      	movs	r3, #64	; 0x40
 800beea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beee:	e072      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bef0:	2380      	movs	r3, #128	; 0x80
 800bef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef6:	e06e      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a75      	ldr	r2, [pc, #468]	; (800c0d4 <UART_SetConfig+0x6a4>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d130      	bne.n	800bf64 <UART_SetConfig+0x534>
 800bf02:	4b72      	ldr	r3, [pc, #456]	; (800c0cc <UART_SetConfig+0x69c>)
 800bf04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	2b05      	cmp	r3, #5
 800bf0c:	d826      	bhi.n	800bf5c <UART_SetConfig+0x52c>
 800bf0e:	a201      	add	r2, pc, #4	; (adr r2, 800bf14 <UART_SetConfig+0x4e4>)
 800bf10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf14:	0800bf2d 	.word	0x0800bf2d
 800bf18:	0800bf35 	.word	0x0800bf35
 800bf1c:	0800bf3d 	.word	0x0800bf3d
 800bf20:	0800bf45 	.word	0x0800bf45
 800bf24:	0800bf4d 	.word	0x0800bf4d
 800bf28:	0800bf55 	.word	0x0800bf55
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf32:	e050      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bf34:	2304      	movs	r3, #4
 800bf36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf3a:	e04c      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bf3c:	2308      	movs	r3, #8
 800bf3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf42:	e048      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bf44:	2310      	movs	r3, #16
 800bf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf4a:	e044      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bf4c:	2320      	movs	r3, #32
 800bf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf52:	e040      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bf54:	2340      	movs	r3, #64	; 0x40
 800bf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf5a:	e03c      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bf5c:	2380      	movs	r3, #128	; 0x80
 800bf5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf62:	e038      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bf64:	697b      	ldr	r3, [r7, #20]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4a5b      	ldr	r2, [pc, #364]	; (800c0d8 <UART_SetConfig+0x6a8>)
 800bf6a:	4293      	cmp	r3, r2
 800bf6c:	d130      	bne.n	800bfd0 <UART_SetConfig+0x5a0>
 800bf6e:	4b57      	ldr	r3, [pc, #348]	; (800c0cc <UART_SetConfig+0x69c>)
 800bf70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf72:	f003 0307 	and.w	r3, r3, #7
 800bf76:	2b05      	cmp	r3, #5
 800bf78:	d826      	bhi.n	800bfc8 <UART_SetConfig+0x598>
 800bf7a:	a201      	add	r2, pc, #4	; (adr r2, 800bf80 <UART_SetConfig+0x550>)
 800bf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf80:	0800bf99 	.word	0x0800bf99
 800bf84:	0800bfa1 	.word	0x0800bfa1
 800bf88:	0800bfa9 	.word	0x0800bfa9
 800bf8c:	0800bfb1 	.word	0x0800bfb1
 800bf90:	0800bfb9 	.word	0x0800bfb9
 800bf94:	0800bfc1 	.word	0x0800bfc1
 800bf98:	2302      	movs	r3, #2
 800bf9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9e:	e01a      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bfa0:	2304      	movs	r3, #4
 800bfa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa6:	e016      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bfa8:	2308      	movs	r3, #8
 800bfaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfae:	e012      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bfb0:	2310      	movs	r3, #16
 800bfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb6:	e00e      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bfb8:	2320      	movs	r3, #32
 800bfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfbe:	e00a      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bfc0:	2340      	movs	r3, #64	; 0x40
 800bfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfc6:	e006      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bfc8:	2380      	movs	r3, #128	; 0x80
 800bfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfce:	e002      	b.n	800bfd6 <UART_SetConfig+0x5a6>
 800bfd0:	2380      	movs	r3, #128	; 0x80
 800bfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfd6:	697b      	ldr	r3, [r7, #20]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4a3f      	ldr	r2, [pc, #252]	; (800c0d8 <UART_SetConfig+0x6a8>)
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	f040 80f8 	bne.w	800c1d2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bfe2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bfe6:	2b20      	cmp	r3, #32
 800bfe8:	dc46      	bgt.n	800c078 <UART_SetConfig+0x648>
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	f2c0 8082 	blt.w	800c0f4 <UART_SetConfig+0x6c4>
 800bff0:	3b02      	subs	r3, #2
 800bff2:	2b1e      	cmp	r3, #30
 800bff4:	d87e      	bhi.n	800c0f4 <UART_SetConfig+0x6c4>
 800bff6:	a201      	add	r2, pc, #4	; (adr r2, 800bffc <UART_SetConfig+0x5cc>)
 800bff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bffc:	0800c07f 	.word	0x0800c07f
 800c000:	0800c0f5 	.word	0x0800c0f5
 800c004:	0800c087 	.word	0x0800c087
 800c008:	0800c0f5 	.word	0x0800c0f5
 800c00c:	0800c0f5 	.word	0x0800c0f5
 800c010:	0800c0f5 	.word	0x0800c0f5
 800c014:	0800c097 	.word	0x0800c097
 800c018:	0800c0f5 	.word	0x0800c0f5
 800c01c:	0800c0f5 	.word	0x0800c0f5
 800c020:	0800c0f5 	.word	0x0800c0f5
 800c024:	0800c0f5 	.word	0x0800c0f5
 800c028:	0800c0f5 	.word	0x0800c0f5
 800c02c:	0800c0f5 	.word	0x0800c0f5
 800c030:	0800c0f5 	.word	0x0800c0f5
 800c034:	0800c0a7 	.word	0x0800c0a7
 800c038:	0800c0f5 	.word	0x0800c0f5
 800c03c:	0800c0f5 	.word	0x0800c0f5
 800c040:	0800c0f5 	.word	0x0800c0f5
 800c044:	0800c0f5 	.word	0x0800c0f5
 800c048:	0800c0f5 	.word	0x0800c0f5
 800c04c:	0800c0f5 	.word	0x0800c0f5
 800c050:	0800c0f5 	.word	0x0800c0f5
 800c054:	0800c0f5 	.word	0x0800c0f5
 800c058:	0800c0f5 	.word	0x0800c0f5
 800c05c:	0800c0f5 	.word	0x0800c0f5
 800c060:	0800c0f5 	.word	0x0800c0f5
 800c064:	0800c0f5 	.word	0x0800c0f5
 800c068:	0800c0f5 	.word	0x0800c0f5
 800c06c:	0800c0f5 	.word	0x0800c0f5
 800c070:	0800c0f5 	.word	0x0800c0f5
 800c074:	0800c0e7 	.word	0x0800c0e7
 800c078:	2b40      	cmp	r3, #64	; 0x40
 800c07a:	d037      	beq.n	800c0ec <UART_SetConfig+0x6bc>
 800c07c:	e03a      	b.n	800c0f4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c07e:	f7fe fb37 	bl	800a6f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800c082:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c084:	e03c      	b.n	800c100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fe fb46 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c094:	e034      	b.n	800c100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c096:	f107 0318 	add.w	r3, r7, #24
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fe fc92 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c0a0:	69fb      	ldr	r3, [r7, #28]
 800c0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a4:	e02c      	b.n	800c100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0a6:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <UART_SetConfig+0x69c>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f003 0320 	and.w	r3, r3, #32
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d016      	beq.n	800c0e0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c0b2:	4b06      	ldr	r3, [pc, #24]	; (800c0cc <UART_SetConfig+0x69c>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	08db      	lsrs	r3, r3, #3
 800c0b8:	f003 0303 	and.w	r3, r3, #3
 800c0bc:	4a07      	ldr	r2, [pc, #28]	; (800c0dc <UART_SetConfig+0x6ac>)
 800c0be:	fa22 f303 	lsr.w	r3, r2, r3
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c0c4:	e01c      	b.n	800c100 <UART_SetConfig+0x6d0>
 800c0c6:	bf00      	nop
 800c0c8:	40011400 	.word	0x40011400
 800c0cc:	58024400 	.word	0x58024400
 800c0d0:	40007800 	.word	0x40007800
 800c0d4:	40007c00 	.word	0x40007c00
 800c0d8:	58000c00 	.word	0x58000c00
 800c0dc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c0e0:	4b9d      	ldr	r3, [pc, #628]	; (800c358 <UART_SetConfig+0x928>)
 800c0e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0e4:	e00c      	b.n	800c100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c0e6:	4b9d      	ldr	r3, [pc, #628]	; (800c35c <UART_SetConfig+0x92c>)
 800c0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ea:	e009      	b.n	800c100 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c0ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f2:	e005      	b.n	800c100 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c0fe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c102:	2b00      	cmp	r3, #0
 800c104:	f000 81de 	beq.w	800c4c4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10c:	4a94      	ldr	r2, [pc, #592]	; (800c360 <UART_SetConfig+0x930>)
 800c10e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c112:	461a      	mov	r2, r3
 800c114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c116:	fbb3 f3f2 	udiv	r3, r3, r2
 800c11a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	685a      	ldr	r2, [r3, #4]
 800c120:	4613      	mov	r3, r2
 800c122:	005b      	lsls	r3, r3, #1
 800c124:	4413      	add	r3, r2
 800c126:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c128:	429a      	cmp	r2, r3
 800c12a:	d305      	bcc.n	800c138 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c12c:	697b      	ldr	r3, [r7, #20]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c134:	429a      	cmp	r2, r3
 800c136:	d903      	bls.n	800c140 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c13e:	e1c1      	b.n	800c4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c142:	2200      	movs	r2, #0
 800c144:	60bb      	str	r3, [r7, #8]
 800c146:	60fa      	str	r2, [r7, #12]
 800c148:	697b      	ldr	r3, [r7, #20]
 800c14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c14c:	4a84      	ldr	r2, [pc, #528]	; (800c360 <UART_SetConfig+0x930>)
 800c14e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c152:	b29b      	uxth	r3, r3
 800c154:	2200      	movs	r2, #0
 800c156:	603b      	str	r3, [r7, #0]
 800c158:	607a      	str	r2, [r7, #4]
 800c15a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c15e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c162:	f7f4 f8b9 	bl	80002d8 <__aeabi_uldivmod>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	4610      	mov	r0, r2
 800c16c:	4619      	mov	r1, r3
 800c16e:	f04f 0200 	mov.w	r2, #0
 800c172:	f04f 0300 	mov.w	r3, #0
 800c176:	020b      	lsls	r3, r1, #8
 800c178:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c17c:	0202      	lsls	r2, r0, #8
 800c17e:	6979      	ldr	r1, [r7, #20]
 800c180:	6849      	ldr	r1, [r1, #4]
 800c182:	0849      	lsrs	r1, r1, #1
 800c184:	2000      	movs	r0, #0
 800c186:	460c      	mov	r4, r1
 800c188:	4605      	mov	r5, r0
 800c18a:	eb12 0804 	adds.w	r8, r2, r4
 800c18e:	eb43 0905 	adc.w	r9, r3, r5
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	469a      	mov	sl, r3
 800c19a:	4693      	mov	fp, r2
 800c19c:	4652      	mov	r2, sl
 800c19e:	465b      	mov	r3, fp
 800c1a0:	4640      	mov	r0, r8
 800c1a2:	4649      	mov	r1, r9
 800c1a4:	f7f4 f898 	bl	80002d8 <__aeabi_uldivmod>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	460b      	mov	r3, r1
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1b6:	d308      	bcc.n	800c1ca <UART_SetConfig+0x79a>
 800c1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c1be:	d204      	bcs.n	800c1ca <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1c6:	60da      	str	r2, [r3, #12]
 800c1c8:	e17c      	b.n	800c4c4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c1d0:	e178      	b.n	800c4c4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	69db      	ldr	r3, [r3, #28]
 800c1d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1da:	f040 80c5 	bne.w	800c368 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c1de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c1e2:	2b20      	cmp	r3, #32
 800c1e4:	dc48      	bgt.n	800c278 <UART_SetConfig+0x848>
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	db7b      	blt.n	800c2e2 <UART_SetConfig+0x8b2>
 800c1ea:	2b20      	cmp	r3, #32
 800c1ec:	d879      	bhi.n	800c2e2 <UART_SetConfig+0x8b2>
 800c1ee:	a201      	add	r2, pc, #4	; (adr r2, 800c1f4 <UART_SetConfig+0x7c4>)
 800c1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f4:	0800c27f 	.word	0x0800c27f
 800c1f8:	0800c287 	.word	0x0800c287
 800c1fc:	0800c2e3 	.word	0x0800c2e3
 800c200:	0800c2e3 	.word	0x0800c2e3
 800c204:	0800c28f 	.word	0x0800c28f
 800c208:	0800c2e3 	.word	0x0800c2e3
 800c20c:	0800c2e3 	.word	0x0800c2e3
 800c210:	0800c2e3 	.word	0x0800c2e3
 800c214:	0800c29f 	.word	0x0800c29f
 800c218:	0800c2e3 	.word	0x0800c2e3
 800c21c:	0800c2e3 	.word	0x0800c2e3
 800c220:	0800c2e3 	.word	0x0800c2e3
 800c224:	0800c2e3 	.word	0x0800c2e3
 800c228:	0800c2e3 	.word	0x0800c2e3
 800c22c:	0800c2e3 	.word	0x0800c2e3
 800c230:	0800c2e3 	.word	0x0800c2e3
 800c234:	0800c2af 	.word	0x0800c2af
 800c238:	0800c2e3 	.word	0x0800c2e3
 800c23c:	0800c2e3 	.word	0x0800c2e3
 800c240:	0800c2e3 	.word	0x0800c2e3
 800c244:	0800c2e3 	.word	0x0800c2e3
 800c248:	0800c2e3 	.word	0x0800c2e3
 800c24c:	0800c2e3 	.word	0x0800c2e3
 800c250:	0800c2e3 	.word	0x0800c2e3
 800c254:	0800c2e3 	.word	0x0800c2e3
 800c258:	0800c2e3 	.word	0x0800c2e3
 800c25c:	0800c2e3 	.word	0x0800c2e3
 800c260:	0800c2e3 	.word	0x0800c2e3
 800c264:	0800c2e3 	.word	0x0800c2e3
 800c268:	0800c2e3 	.word	0x0800c2e3
 800c26c:	0800c2e3 	.word	0x0800c2e3
 800c270:	0800c2e3 	.word	0x0800c2e3
 800c274:	0800c2d5 	.word	0x0800c2d5
 800c278:	2b40      	cmp	r3, #64	; 0x40
 800c27a:	d02e      	beq.n	800c2da <UART_SetConfig+0x8aa>
 800c27c:	e031      	b.n	800c2e2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c27e:	f7fc fa81 	bl	8008784 <HAL_RCC_GetPCLK1Freq>
 800c282:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c284:	e033      	b.n	800c2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c286:	f7fc fa93 	bl	80087b0 <HAL_RCC_GetPCLK2Freq>
 800c28a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c28c:	e02f      	b.n	800c2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c28e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c292:	4618      	mov	r0, r3
 800c294:	f7fe fa42 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c29c:	e027      	b.n	800c2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c29e:	f107 0318 	add.w	r3, r7, #24
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fe fb8e 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ac:	e01f      	b.n	800c2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c2ae:	4b2d      	ldr	r3, [pc, #180]	; (800c364 <UART_SetConfig+0x934>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f003 0320 	and.w	r3, r3, #32
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d009      	beq.n	800c2ce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c2ba:	4b2a      	ldr	r3, [pc, #168]	; (800c364 <UART_SetConfig+0x934>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	08db      	lsrs	r3, r3, #3
 800c2c0:	f003 0303 	and.w	r3, r3, #3
 800c2c4:	4a24      	ldr	r2, [pc, #144]	; (800c358 <UART_SetConfig+0x928>)
 800c2c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c2ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c2cc:	e00f      	b.n	800c2ee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c2ce:	4b22      	ldr	r3, [pc, #136]	; (800c358 <UART_SetConfig+0x928>)
 800c2d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d2:	e00c      	b.n	800c2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c2d4:	4b21      	ldr	r3, [pc, #132]	; (800c35c <UART_SetConfig+0x92c>)
 800c2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d8:	e009      	b.n	800c2ee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c2da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c2de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e0:	e005      	b.n	800c2ee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c2ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c2ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f000 80e7 	beq.w	800c4c4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2fa:	4a19      	ldr	r2, [pc, #100]	; (800c360 <UART_SetConfig+0x930>)
 800c2fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c300:	461a      	mov	r2, r3
 800c302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c304:	fbb3 f3f2 	udiv	r3, r3, r2
 800c308:	005a      	lsls	r2, r3, #1
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	685b      	ldr	r3, [r3, #4]
 800c30e:	085b      	lsrs	r3, r3, #1
 800c310:	441a      	add	r2, r3
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	fbb2 f3f3 	udiv	r3, r2, r3
 800c31a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31e:	2b0f      	cmp	r3, #15
 800c320:	d916      	bls.n	800c350 <UART_SetConfig+0x920>
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c328:	d212      	bcs.n	800c350 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c32c:	b29b      	uxth	r3, r3
 800c32e:	f023 030f 	bic.w	r3, r3, #15
 800c332:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c336:	085b      	lsrs	r3, r3, #1
 800c338:	b29b      	uxth	r3, r3
 800c33a:	f003 0307 	and.w	r3, r3, #7
 800c33e:	b29a      	uxth	r2, r3
 800c340:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c342:	4313      	orrs	r3, r2
 800c344:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c34c:	60da      	str	r2, [r3, #12]
 800c34e:	e0b9      	b.n	800c4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c350:	2301      	movs	r3, #1
 800c352:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c356:	e0b5      	b.n	800c4c4 <UART_SetConfig+0xa94>
 800c358:	03d09000 	.word	0x03d09000
 800c35c:	003d0900 	.word	0x003d0900
 800c360:	0800cc38 	.word	0x0800cc38
 800c364:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c368:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c36c:	2b20      	cmp	r3, #32
 800c36e:	dc49      	bgt.n	800c404 <UART_SetConfig+0x9d4>
 800c370:	2b00      	cmp	r3, #0
 800c372:	db7c      	blt.n	800c46e <UART_SetConfig+0xa3e>
 800c374:	2b20      	cmp	r3, #32
 800c376:	d87a      	bhi.n	800c46e <UART_SetConfig+0xa3e>
 800c378:	a201      	add	r2, pc, #4	; (adr r2, 800c380 <UART_SetConfig+0x950>)
 800c37a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c37e:	bf00      	nop
 800c380:	0800c40b 	.word	0x0800c40b
 800c384:	0800c413 	.word	0x0800c413
 800c388:	0800c46f 	.word	0x0800c46f
 800c38c:	0800c46f 	.word	0x0800c46f
 800c390:	0800c41b 	.word	0x0800c41b
 800c394:	0800c46f 	.word	0x0800c46f
 800c398:	0800c46f 	.word	0x0800c46f
 800c39c:	0800c46f 	.word	0x0800c46f
 800c3a0:	0800c42b 	.word	0x0800c42b
 800c3a4:	0800c46f 	.word	0x0800c46f
 800c3a8:	0800c46f 	.word	0x0800c46f
 800c3ac:	0800c46f 	.word	0x0800c46f
 800c3b0:	0800c46f 	.word	0x0800c46f
 800c3b4:	0800c46f 	.word	0x0800c46f
 800c3b8:	0800c46f 	.word	0x0800c46f
 800c3bc:	0800c46f 	.word	0x0800c46f
 800c3c0:	0800c43b 	.word	0x0800c43b
 800c3c4:	0800c46f 	.word	0x0800c46f
 800c3c8:	0800c46f 	.word	0x0800c46f
 800c3cc:	0800c46f 	.word	0x0800c46f
 800c3d0:	0800c46f 	.word	0x0800c46f
 800c3d4:	0800c46f 	.word	0x0800c46f
 800c3d8:	0800c46f 	.word	0x0800c46f
 800c3dc:	0800c46f 	.word	0x0800c46f
 800c3e0:	0800c46f 	.word	0x0800c46f
 800c3e4:	0800c46f 	.word	0x0800c46f
 800c3e8:	0800c46f 	.word	0x0800c46f
 800c3ec:	0800c46f 	.word	0x0800c46f
 800c3f0:	0800c46f 	.word	0x0800c46f
 800c3f4:	0800c46f 	.word	0x0800c46f
 800c3f8:	0800c46f 	.word	0x0800c46f
 800c3fc:	0800c46f 	.word	0x0800c46f
 800c400:	0800c461 	.word	0x0800c461
 800c404:	2b40      	cmp	r3, #64	; 0x40
 800c406:	d02e      	beq.n	800c466 <UART_SetConfig+0xa36>
 800c408:	e031      	b.n	800c46e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c40a:	f7fc f9bb 	bl	8008784 <HAL_RCC_GetPCLK1Freq>
 800c40e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c410:	e033      	b.n	800c47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c412:	f7fc f9cd 	bl	80087b0 <HAL_RCC_GetPCLK2Freq>
 800c416:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c418:	e02f      	b.n	800c47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c41a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe f97c 	bl	800a71c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c428:	e027      	b.n	800c47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c42a:	f107 0318 	add.w	r3, r7, #24
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe fac8 	bl	800a9c4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c438:	e01f      	b.n	800c47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c43a:	4b2d      	ldr	r3, [pc, #180]	; (800c4f0 <UART_SetConfig+0xac0>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 0320 	and.w	r3, r3, #32
 800c442:	2b00      	cmp	r3, #0
 800c444:	d009      	beq.n	800c45a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c446:	4b2a      	ldr	r3, [pc, #168]	; (800c4f0 <UART_SetConfig+0xac0>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	08db      	lsrs	r3, r3, #3
 800c44c:	f003 0303 	and.w	r3, r3, #3
 800c450:	4a28      	ldr	r2, [pc, #160]	; (800c4f4 <UART_SetConfig+0xac4>)
 800c452:	fa22 f303 	lsr.w	r3, r2, r3
 800c456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c458:	e00f      	b.n	800c47a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c45a:	4b26      	ldr	r3, [pc, #152]	; (800c4f4 <UART_SetConfig+0xac4>)
 800c45c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c45e:	e00c      	b.n	800c47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c460:	4b25      	ldr	r3, [pc, #148]	; (800c4f8 <UART_SetConfig+0xac8>)
 800c462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c464:	e009      	b.n	800c47a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c466:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c46c:	e005      	b.n	800c47a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c46e:	2300      	movs	r3, #0
 800c470:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c478:	bf00      	nop
    }

    if (pclk != 0U)
 800c47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d021      	beq.n	800c4c4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c484:	4a1d      	ldr	r2, [pc, #116]	; (800c4fc <UART_SetConfig+0xacc>)
 800c486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c48a:	461a      	mov	r2, r3
 800c48c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c48e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	085b      	lsrs	r3, r3, #1
 800c498:	441a      	add	r2, r3
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	2b0f      	cmp	r3, #15
 800c4a8:	d909      	bls.n	800c4be <UART_SetConfig+0xa8e>
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4b0:	d205      	bcs.n	800c4be <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	60da      	str	r2, [r3, #12]
 800c4bc:	e002      	b.n	800c4c4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c4e0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3748      	adds	r7, #72	; 0x48
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4ee:	bf00      	nop
 800c4f0:	58024400 	.word	0x58024400
 800c4f4:	03d09000 	.word	0x03d09000
 800c4f8:	003d0900 	.word	0x003d0900
 800c4fc:	0800cc38 	.word	0x0800cc38

0800c500 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50c:	f003 0308 	and.w	r3, r3, #8
 800c510:	2b00      	cmp	r3, #0
 800c512:	d00a      	beq.n	800c52a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	430a      	orrs	r2, r1
 800c528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c52e:	f003 0301 	and.w	r3, r3, #1
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00a      	beq.n	800c54c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	685b      	ldr	r3, [r3, #4]
 800c53c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	430a      	orrs	r2, r1
 800c54a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c550:	f003 0302 	and.w	r3, r3, #2
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00a      	beq.n	800c56e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	430a      	orrs	r2, r1
 800c56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c572:	f003 0304 	and.w	r3, r3, #4
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00a      	beq.n	800c590 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	685b      	ldr	r3, [r3, #4]
 800c580:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	430a      	orrs	r2, r1
 800c58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c594:	f003 0310 	and.w	r3, r3, #16
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00a      	beq.n	800c5b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	689b      	ldr	r3, [r3, #8]
 800c5a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	430a      	orrs	r2, r1
 800c5b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b6:	f003 0320 	and.w	r3, r3, #32
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00a      	beq.n	800c5d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	689b      	ldr	r3, [r3, #8]
 800c5c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d01a      	beq.n	800c616 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	685b      	ldr	r3, [r3, #4]
 800c5e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5fe:	d10a      	bne.n	800c616 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	685b      	ldr	r3, [r3, #4]
 800c606:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	430a      	orrs	r2, r1
 800c614:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c61a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00a      	beq.n	800c638 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	685b      	ldr	r3, [r3, #4]
 800c628:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	430a      	orrs	r2, r1
 800c636:	605a      	str	r2, [r3, #4]
  }
}
 800c638:	bf00      	nop
 800c63a:	370c      	adds	r7, #12
 800c63c:	46bd      	mov	sp, r7
 800c63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b098      	sub	sp, #96	; 0x60
 800c648:	af02      	add	r7, sp, #8
 800c64a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c654:	f7f6 f8de 	bl	8002814 <HAL_GetTick>
 800c658:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f003 0308 	and.w	r3, r3, #8
 800c664:	2b08      	cmp	r3, #8
 800c666:	d12f      	bne.n	800c6c8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c668:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c670:	2200      	movs	r2, #0
 800c672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f88e 	bl	800c798 <UART_WaitOnFlagUntilTimeout>
 800c67c:	4603      	mov	r3, r0
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d022      	beq.n	800c6c8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c68a:	e853 3f00 	ldrex	r3, [r3]
 800c68e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c692:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c696:	653b      	str	r3, [r7, #80]	; 0x50
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	461a      	mov	r2, r3
 800c69e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c6a0:	647b      	str	r3, [r7, #68]	; 0x44
 800c6a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c6a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c6a8:	e841 2300 	strex	r3, r2, [r1]
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1e6      	bne.n	800c682 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2220      	movs	r2, #32
 800c6b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e063      	b.n	800c790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0304 	and.w	r3, r3, #4
 800c6d2:	2b04      	cmp	r3, #4
 800c6d4:	d149      	bne.n	800c76a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c6da:	9300      	str	r3, [sp, #0]
 800c6dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6de:	2200      	movs	r2, #0
 800c6e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f000 f857 	bl	800c798 <UART_WaitOnFlagUntilTimeout>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d03c      	beq.n	800c76a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f8:	e853 3f00 	ldrex	r3, [r3]
 800c6fc:	623b      	str	r3, [r7, #32]
   return(result);
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c704:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	461a      	mov	r2, r3
 800c70c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c70e:	633b      	str	r3, [r7, #48]	; 0x30
 800c710:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c716:	e841 2300 	strex	r3, r2, [r1]
 800c71a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1e6      	bne.n	800c6f0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	3308      	adds	r3, #8
 800c728:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	e853 3f00 	ldrex	r3, [r3]
 800c730:	60fb      	str	r3, [r7, #12]
   return(result);
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	f023 0301 	bic.w	r3, r3, #1
 800c738:	64bb      	str	r3, [r7, #72]	; 0x48
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	3308      	adds	r3, #8
 800c740:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c742:	61fa      	str	r2, [r7, #28]
 800c744:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c746:	69b9      	ldr	r1, [r7, #24]
 800c748:	69fa      	ldr	r2, [r7, #28]
 800c74a:	e841 2300 	strex	r3, r2, [r1]
 800c74e:	617b      	str	r3, [r7, #20]
   return(result);
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d1e5      	bne.n	800c722 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2220      	movs	r2, #32
 800c75a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c766:	2303      	movs	r3, #3
 800c768:	e012      	b.n	800c790 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2220      	movs	r2, #32
 800c76e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2220      	movs	r2, #32
 800c776:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2200      	movs	r2, #0
 800c77e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2200      	movs	r2, #0
 800c78a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c78e:	2300      	movs	r3, #0
}
 800c790:	4618      	mov	r0, r3
 800c792:	3758      	adds	r7, #88	; 0x58
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	603b      	str	r3, [r7, #0]
 800c7a4:	4613      	mov	r3, r2
 800c7a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7a8:	e04f      	b.n	800c84a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b0:	d04b      	beq.n	800c84a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c7b2:	f7f6 f82f 	bl	8002814 <HAL_GetTick>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	1ad3      	subs	r3, r2, r3
 800c7bc:	69ba      	ldr	r2, [r7, #24]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d302      	bcc.n	800c7c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c7c8:	2303      	movs	r3, #3
 800c7ca:	e04e      	b.n	800c86a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 0304 	and.w	r3, r3, #4
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d037      	beq.n	800c84a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	2b80      	cmp	r3, #128	; 0x80
 800c7de:	d034      	beq.n	800c84a <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2b40      	cmp	r3, #64	; 0x40
 800c7e4:	d031      	beq.n	800c84a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	69db      	ldr	r3, [r3, #28]
 800c7ec:	f003 0308 	and.w	r3, r3, #8
 800c7f0:	2b08      	cmp	r3, #8
 800c7f2:	d110      	bne.n	800c816 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2208      	movs	r2, #8
 800c7fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7fc:	68f8      	ldr	r0, [r7, #12]
 800c7fe:	f000 f839 	bl	800c874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2208      	movs	r2, #8
 800c806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2200      	movs	r2, #0
 800c80e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c812:	2301      	movs	r3, #1
 800c814:	e029      	b.n	800c86a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	69db      	ldr	r3, [r3, #28]
 800c81c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c824:	d111      	bne.n	800c84a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c82e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c830:	68f8      	ldr	r0, [r7, #12]
 800c832:	f000 f81f 	bl	800c874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	2220      	movs	r2, #32
 800c83a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	2200      	movs	r2, #0
 800c842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c846:	2303      	movs	r3, #3
 800c848:	e00f      	b.n	800c86a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	69da      	ldr	r2, [r3, #28]
 800c850:	68bb      	ldr	r3, [r7, #8]
 800c852:	4013      	ands	r3, r2
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	429a      	cmp	r2, r3
 800c858:	bf0c      	ite	eq
 800c85a:	2301      	moveq	r3, #1
 800c85c:	2300      	movne	r3, #0
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	461a      	mov	r2, r3
 800c862:	79fb      	ldrb	r3, [r7, #7]
 800c864:	429a      	cmp	r2, r3
 800c866:	d0a0      	beq.n	800c7aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c868:	2300      	movs	r3, #0
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c874:	b480      	push	{r7}
 800c876:	b095      	sub	sp, #84	; 0x54
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c884:	e853 3f00 	ldrex	r3, [r3]
 800c888:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c890:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	461a      	mov	r2, r3
 800c898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c89a:	643b      	str	r3, [r7, #64]	; 0x40
 800c89c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8a2:	e841 2300 	strex	r3, r2, [r1]
 800c8a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1e6      	bne.n	800c87c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3308      	adds	r3, #8
 800c8b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b6:	6a3b      	ldr	r3, [r7, #32]
 800c8b8:	e853 3f00 	ldrex	r3, [r3]
 800c8bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8be:	69fa      	ldr	r2, [r7, #28]
 800c8c0:	4b1e      	ldr	r3, [pc, #120]	; (800c93c <UART_EndRxTransfer+0xc8>)
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	3308      	adds	r3, #8
 800c8cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8d6:	e841 2300 	strex	r3, r2, [r1]
 800c8da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1e5      	bne.n	800c8ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8e6:	2b01      	cmp	r3, #1
 800c8e8:	d118      	bne.n	800c91c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	e853 3f00 	ldrex	r3, [r3]
 800c8f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	f023 0310 	bic.w	r3, r3, #16
 800c8fe:	647b      	str	r3, [r7, #68]	; 0x44
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	461a      	mov	r2, r3
 800c906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c908:	61bb      	str	r3, [r7, #24]
 800c90a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c90c:	6979      	ldr	r1, [r7, #20]
 800c90e:	69ba      	ldr	r2, [r7, #24]
 800c910:	e841 2300 	strex	r3, r2, [r1]
 800c914:	613b      	str	r3, [r7, #16]
   return(result);
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1e6      	bne.n	800c8ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	2220      	movs	r2, #32
 800c920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2200      	movs	r2, #0
 800c92e:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c930:	bf00      	nop
 800c932:	3754      	adds	r7, #84	; 0x54
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr
 800c93c:	effffffe 	.word	0xeffffffe

0800c940 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c940:	b480      	push	{r7}
 800c942:	b085      	sub	sp, #20
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c94e:	2b01      	cmp	r3, #1
 800c950:	d101      	bne.n	800c956 <HAL_UARTEx_DisableFifoMode+0x16>
 800c952:	2302      	movs	r3, #2
 800c954:	e027      	b.n	800c9a6 <HAL_UARTEx_DisableFifoMode+0x66>
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	2224      	movs	r2, #36	; 0x24
 800c962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f022 0201 	bic.w	r2, r2, #1
 800c97c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c984:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	68fa      	ldr	r2, [r7, #12]
 800c992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2220      	movs	r2, #32
 800c998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3714      	adds	r7, #20
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c9b2:	b580      	push	{r7, lr}
 800c9b4:	b084      	sub	sp, #16
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d101      	bne.n	800c9ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	e02d      	b.n	800ca26 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2224      	movs	r2, #36	; 0x24
 800c9d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	681a      	ldr	r2, [r3, #0]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	f022 0201 	bic.w	r2, r2, #1
 800c9f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	683a      	ldr	r2, [r7, #0]
 800ca02:	430a      	orrs	r2, r1
 800ca04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 f850 	bl	800caac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	68fa      	ldr	r2, [r7, #12]
 800ca12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2220      	movs	r2, #32
 800ca18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}

0800ca2e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca2e:	b580      	push	{r7, lr}
 800ca30:	b084      	sub	sp, #16
 800ca32:	af00      	add	r7, sp, #0
 800ca34:	6078      	str	r0, [r7, #4]
 800ca36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d101      	bne.n	800ca46 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca42:	2302      	movs	r3, #2
 800ca44:	e02d      	b.n	800caa2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2224      	movs	r2, #36	; 0x24
 800ca52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681a      	ldr	r2, [r3, #0]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f022 0201 	bic.w	r2, r2, #1
 800ca6c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	430a      	orrs	r2, r1
 800ca80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f000 f812 	bl	800caac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2220      	movs	r2, #32
 800ca94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800caa0:	2300      	movs	r3, #0
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
	...

0800caac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d108      	bne.n	800cace <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2201      	movs	r2, #1
 800cac0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2201      	movs	r2, #1
 800cac8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cacc:	e031      	b.n	800cb32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cace:	2310      	movs	r3, #16
 800cad0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cad2:	2310      	movs	r3, #16
 800cad4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	689b      	ldr	r3, [r3, #8]
 800cadc:	0e5b      	lsrs	r3, r3, #25
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	f003 0307 	and.w	r3, r3, #7
 800cae4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	689b      	ldr	r3, [r3, #8]
 800caec:	0f5b      	lsrs	r3, r3, #29
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	f003 0307 	and.w	r3, r3, #7
 800caf4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800caf6:	7bbb      	ldrb	r3, [r7, #14]
 800caf8:	7b3a      	ldrb	r2, [r7, #12]
 800cafa:	4911      	ldr	r1, [pc, #68]	; (800cb40 <UARTEx_SetNbDataToProcess+0x94>)
 800cafc:	5c8a      	ldrb	r2, [r1, r2]
 800cafe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cb02:	7b3a      	ldrb	r2, [r7, #12]
 800cb04:	490f      	ldr	r1, [pc, #60]	; (800cb44 <UARTEx_SetNbDataToProcess+0x98>)
 800cb06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cb08:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb0c:	b29a      	uxth	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb14:	7bfb      	ldrb	r3, [r7, #15]
 800cb16:	7b7a      	ldrb	r2, [r7, #13]
 800cb18:	4909      	ldr	r1, [pc, #36]	; (800cb40 <UARTEx_SetNbDataToProcess+0x94>)
 800cb1a:	5c8a      	ldrb	r2, [r1, r2]
 800cb1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb20:	7b7a      	ldrb	r2, [r7, #13]
 800cb22:	4908      	ldr	r1, [pc, #32]	; (800cb44 <UARTEx_SetNbDataToProcess+0x98>)
 800cb24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb26:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb2a:	b29a      	uxth	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cb32:	bf00      	nop
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	0800cc50 	.word	0x0800cc50
 800cb44:	0800cc58 	.word	0x0800cc58

0800cb48 <memset>:
 800cb48:	4402      	add	r2, r0
 800cb4a:	4603      	mov	r3, r0
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d100      	bne.n	800cb52 <memset+0xa>
 800cb50:	4770      	bx	lr
 800cb52:	f803 1b01 	strb.w	r1, [r3], #1
 800cb56:	e7f9      	b.n	800cb4c <memset+0x4>

0800cb58 <__libc_init_array>:
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	4d0d      	ldr	r5, [pc, #52]	; (800cb90 <__libc_init_array+0x38>)
 800cb5c:	4c0d      	ldr	r4, [pc, #52]	; (800cb94 <__libc_init_array+0x3c>)
 800cb5e:	1b64      	subs	r4, r4, r5
 800cb60:	10a4      	asrs	r4, r4, #2
 800cb62:	2600      	movs	r6, #0
 800cb64:	42a6      	cmp	r6, r4
 800cb66:	d109      	bne.n	800cb7c <__libc_init_array+0x24>
 800cb68:	4d0b      	ldr	r5, [pc, #44]	; (800cb98 <__libc_init_array+0x40>)
 800cb6a:	4c0c      	ldr	r4, [pc, #48]	; (800cb9c <__libc_init_array+0x44>)
 800cb6c:	f000 f826 	bl	800cbbc <_init>
 800cb70:	1b64      	subs	r4, r4, r5
 800cb72:	10a4      	asrs	r4, r4, #2
 800cb74:	2600      	movs	r6, #0
 800cb76:	42a6      	cmp	r6, r4
 800cb78:	d105      	bne.n	800cb86 <__libc_init_array+0x2e>
 800cb7a:	bd70      	pop	{r4, r5, r6, pc}
 800cb7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb80:	4798      	blx	r3
 800cb82:	3601      	adds	r6, #1
 800cb84:	e7ee      	b.n	800cb64 <__libc_init_array+0xc>
 800cb86:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb8a:	4798      	blx	r3
 800cb8c:	3601      	adds	r6, #1
 800cb8e:	e7f2      	b.n	800cb76 <__libc_init_array+0x1e>
 800cb90:	0800cc68 	.word	0x0800cc68
 800cb94:	0800cc68 	.word	0x0800cc68
 800cb98:	0800cc68 	.word	0x0800cc68
 800cb9c:	0800cc6c 	.word	0x0800cc6c

0800cba0 <memcpy>:
 800cba0:	440a      	add	r2, r1
 800cba2:	4291      	cmp	r1, r2
 800cba4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cba8:	d100      	bne.n	800cbac <memcpy+0xc>
 800cbaa:	4770      	bx	lr
 800cbac:	b510      	push	{r4, lr}
 800cbae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbb6:	4291      	cmp	r1, r2
 800cbb8:	d1f9      	bne.n	800cbae <memcpy+0xe>
 800cbba:	bd10      	pop	{r4, pc}

0800cbbc <_init>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	bf00      	nop
 800cbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc2:	bc08      	pop	{r3}
 800cbc4:	469e      	mov	lr, r3
 800cbc6:	4770      	bx	lr

0800cbc8 <_fini>:
 800cbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbca:	bf00      	nop
 800cbcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbce:	bc08      	pop	{r3}
 800cbd0:	469e      	mov	lr, r3
 800cbd2:	4770      	bx	lr

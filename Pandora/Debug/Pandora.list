
Pandora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9a8  08000298  08000298  00001298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800dc40  0800dc40  0000ec40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800dccc  0800dccc  0000eccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800dcd4  0800dcd4  0000ecd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800dcd8  0800dcd8  0000ecd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000c8  24000000  0800dcdc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240000c8  0800dda4  0000f0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000128  0800de04  0000f128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  24000188  0800de64  0000f188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000a14  0800de64  0000fa14  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ee4f  00000000  00000000  0000f1b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c7  00000000  00000000  0003e005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f30  00000000  00000000  000430d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001868  00000000  00000000  00045000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ee59  00000000  00000000  00046868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e3e3  00000000  00000000  000856c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018ae93  00000000  00000000  000b3aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023e937  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008538  00000000  00000000  0023e97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00246eb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000188 	.word	0x24000188
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800dc28 	.word	0x0800dc28

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400018c 	.word	0x2400018c
 80002d4:	0800dc28 	.word	0x0800dc28

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b08a      	sub	sp, #40	@ 0x28
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000616:	463b      	mov	r3, r7
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000628:	4b2f      	ldr	r3, [pc, #188]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 800062a:	4a30      	ldr	r2, [pc, #192]	@ (80006ec <MX_ADC1_Init+0xe8>)
 800062c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800062e:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 8000630:	2200      	movs	r2, #0
 8000632:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000634:	4b2c      	ldr	r3, [pc, #176]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063a:	4b2b      	ldr	r3, [pc, #172]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000640:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 8000642:	2204      	movs	r2, #4
 8000644:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 8000648:	2200      	movs	r2, #0
 800064a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800064c:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 800064e:	2201      	movs	r2, #1
 8000650:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000652:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 8000654:	2201      	movs	r2, #1
 8000656:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 800065a:	2200      	movs	r2, #0
 800065c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800065e:	4b22      	ldr	r3, [pc, #136]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 8000660:	2200      	movs	r2, #0
 8000662:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000664:	4b20      	ldr	r3, [pc, #128]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 8000666:	2200      	movs	r2, #0
 8000668:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800066a:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 800066c:	2200      	movs	r2, #0
 800066e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000670:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 8000672:	2200      	movs	r2, #0
 8000674:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000676:	4b1c      	ldr	r3, [pc, #112]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800067c:	4b1a      	ldr	r3, [pc, #104]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000684:	4818      	ldr	r0, [pc, #96]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 8000686:	f003 f8b5 	bl	80037f4 <HAL_ADC_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000690:	f001 fc6a 	bl	8001f68 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000694:	2300      	movs	r3, #0
 8000696:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	4619      	mov	r1, r3
 800069e:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 80006a0:	f004 f8d8 	bl	8004854 <HAL_ADCEx_MultiModeConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80006aa:	f001 fc5d 	bl	8001f68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <MX_ADC1_Init+0xec>)
 80006b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b2:	2306      	movs	r3, #6
 80006b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ba:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80006be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006c0:	2304      	movs	r3, #4
 80006c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_ADC1_Init+0xe4>)
 80006d2:	f003 fb13 	bl	8003cfc <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006dc:	f001 fc44 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	3728      	adds	r7, #40	@ 0x28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	240001a4 	.word	0x240001a4
 80006ec:	40022000 	.word	0x40022000
 80006f0:	08600004 	.word	0x08600004

080006f4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]
 8000706:	611a      	str	r2, [r3, #16]
 8000708:	615a      	str	r2, [r3, #20]
 800070a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800070c:	4b29      	ldr	r3, [pc, #164]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800070e:	4a2a      	ldr	r2, [pc, #168]	@ (80007b8 <MX_ADC2_Init+0xc4>)
 8000710:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000712:	4b28      	ldr	r3, [pc, #160]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071e:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000724:	4b23      	ldr	r3, [pc, #140]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000726:	2204      	movs	r2, #4
 8000728:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800072a:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000730:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000732:	2201      	movs	r2, #1
 8000734:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000738:	2201      	movs	r2, #1
 800073a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800073c:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800073e:	2200      	movs	r2, #0
 8000740:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000742:	4b1c      	ldr	r3, [pc, #112]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000744:	2200      	movs	r2, #0
 8000746:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000748:	4b1a      	ldr	r3, [pc, #104]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000754:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000756:	2200      	movs	r2, #0
 8000758:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800075c:	2200      	movs	r2, #0
 800075e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000760:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 8000762:	2200      	movs	r2, #0
 8000764:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000768:	4812      	ldr	r0, [pc, #72]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800076a:	f003 f843 	bl	80037f4 <HAL_ADC_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000774:	f001 fbf8 	bl	8001f68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_ADC2_Init+0xc8>)
 800077a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800077c:	2306      	movs	r3, #6
 800077e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000780:	2300      	movs	r3, #0
 8000782:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000784:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000788:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800078a:	2304      	movs	r3, #4
 800078c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <MX_ADC2_Init+0xc0>)
 800079c:	f003 faae 	bl	8003cfc <HAL_ADC_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80007a6:	f001 fbdf 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3720      	adds	r7, #32
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	24000208 	.word	0x24000208
 80007b8:	40022100 	.word	0x40022100
 80007bc:	08600004 	.word	0x08600004

080007c0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	605a      	str	r2, [r3, #4]
 80007ce:	609a      	str	r2, [r3, #8]
 80007d0:	60da      	str	r2, [r3, #12]
 80007d2:	611a      	str	r2, [r3, #16]
 80007d4:	615a      	str	r2, [r3, #20]
 80007d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007d8:	4b29      	ldr	r3, [pc, #164]	@ (8000880 <MX_ADC3_Init+0xc0>)
 80007da:	4a2a      	ldr	r2, [pc, #168]	@ (8000884 <MX_ADC3_Init+0xc4>)
 80007dc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007de:	4b28      	ldr	r3, [pc, #160]	@ (8000880 <MX_ADC3_Init+0xc0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007e4:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <MX_ADC3_Init+0xc0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <MX_ADC3_Init+0xc0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b23      	ldr	r3, [pc, #140]	@ (8000880 <MX_ADC3_Init+0xc0>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007f6:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_ADC3_Init+0xc0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007fc:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_ADC3_Init+0xc0>)
 80007fe:	2201      	movs	r2, #1
 8000800:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC3_Init+0xc0>)
 8000804:	2201      	movs	r2, #1
 8000806:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000808:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_ADC3_Init+0xc0>)
 800080a:	2200      	movs	r2, #0
 800080c:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_ADC3_Init+0xc0>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_ADC3_Init+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800081a:	4b19      	ldr	r3, [pc, #100]	@ (8000880 <MX_ADC3_Init+0xc0>)
 800081c:	2200      	movs	r2, #0
 800081e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000820:	4b17      	ldr	r3, [pc, #92]	@ (8000880 <MX_ADC3_Init+0xc0>)
 8000822:	2200      	movs	r2, #0
 8000824:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_ADC3_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_ADC3_Init+0xc0>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000834:	4812      	ldr	r0, [pc, #72]	@ (8000880 <MX_ADC3_Init+0xc0>)
 8000836:	f002 ffdd 	bl	80037f4 <HAL_ADC_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000840:	f001 fb92 	bl	8001f68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000844:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_ADC3_Init+0xc8>)
 8000846:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000848:	2306      	movs	r3, #6
 800084a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000850:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000854:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000856:	2304      	movs	r3, #4
 8000858:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_ADC3_Init+0xc0>)
 8000868:	f003 fa48 	bl	8003cfc <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000872:	f001 fb79 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3720      	adds	r7, #32
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	2400026c 	.word	0x2400026c
 8000884:	58026000 	.word	0x58026000
 8000888:	21800100 	.word	0x21800100

0800088c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	@ 0x38
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a99      	ldr	r2, [pc, #612]	@ (8000b10 <HAL_ADC_MspInit+0x284>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d164      	bne.n	8000978 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ae:	4b99      	ldr	r3, [pc, #612]	@ (8000b14 <HAL_ADC_MspInit+0x288>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a97      	ldr	r2, [pc, #604]	@ (8000b14 <HAL_ADC_MspInit+0x288>)
 80008b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008b8:	4b96      	ldr	r3, [pc, #600]	@ (8000b14 <HAL_ADC_MspInit+0x288>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d10e      	bne.n	80008de <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008c0:	4b95      	ldr	r3, [pc, #596]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 80008c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008c6:	4a94      	ldr	r2, [pc, #592]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 80008c8:	f043 0320 	orr.w	r3, r3, #32
 80008cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008d0:	4b91      	ldr	r3, [pc, #580]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 80008d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	623b      	str	r3, [r7, #32]
 80008dc:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008de:	4b8e      	ldr	r3, [pc, #568]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	4a8c      	ldr	r2, [pc, #560]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 80008e6:	f043 0320 	orr.w	r3, r3, #32
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ee:	4b8a      	ldr	r3, [pc, #552]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f4:	f003 0320 	and.w	r3, r3, #32
 80008f8:	61fb      	str	r3, [r7, #28]
 80008fa:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = EOS_CURRENT_Pin|KKU_CURRENT_Pin;
 80008fc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000900:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800090a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800090e:	4619      	mov	r1, r3
 8000910:	4882      	ldr	r0, [pc, #520]	@ (8000b1c <HAL_ADC_MspInit+0x290>)
 8000912:	f007 f9fd 	bl	8007d10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000916:	4b82      	ldr	r3, [pc, #520]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 8000918:	4a82      	ldr	r2, [pc, #520]	@ (8000b24 <HAL_ADC_MspInit+0x298>)
 800091a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800091c:	4b80      	ldr	r3, [pc, #512]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 800091e:	2209      	movs	r2, #9
 8000920:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000922:	4b7f      	ldr	r3, [pc, #508]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000928:	4b7d      	ldr	r3, [pc, #500]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800092e:	4b7c      	ldr	r3, [pc, #496]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 8000930:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000934:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000936:	4b7a      	ldr	r3, [pc, #488]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 8000938:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800093c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800093e:	4b78      	ldr	r3, [pc, #480]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 8000940:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000944:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000946:	4b76      	ldr	r3, [pc, #472]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 8000948:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800094c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800094e:	4b74      	ldr	r3, [pc, #464]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000954:	4b72      	ldr	r3, [pc, #456]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800095a:	4871      	ldr	r0, [pc, #452]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 800095c:	f004 f968 	bl	8004c30 <HAL_DMA_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000966:	f001 faff 	bl	8001f68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a6c      	ldr	r2, [pc, #432]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 800096e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000970:	4a6b      	ldr	r2, [pc, #428]	@ (8000b20 <HAL_ADC_MspInit+0x294>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000976:	e0c6      	b.n	8000b06 <HAL_ADC_MspInit+0x27a>
  else if(adcHandle->Instance==ADC2)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a6a      	ldr	r2, [pc, #424]	@ (8000b28 <HAL_ADC_MspInit+0x29c>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d164      	bne.n	8000a4c <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000982:	4b64      	ldr	r3, [pc, #400]	@ (8000b14 <HAL_ADC_MspInit+0x288>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	4a62      	ldr	r2, [pc, #392]	@ (8000b14 <HAL_ADC_MspInit+0x288>)
 800098a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800098c:	4b61      	ldr	r3, [pc, #388]	@ (8000b14 <HAL_ADC_MspInit+0x288>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d10e      	bne.n	80009b2 <HAL_ADC_MspInit+0x126>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000994:	4b60      	ldr	r3, [pc, #384]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 8000996:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800099a:	4a5f      	ldr	r2, [pc, #380]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80009a4:	4b5c      	ldr	r3, [pc, #368]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 80009a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b2:	4b59      	ldr	r3, [pc, #356]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	4a57      	ldr	r2, [pc, #348]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 80009ba:	f043 0320 	orr.w	r3, r3, #32
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c2:	4b55      	ldr	r3, [pc, #340]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	f003 0320 	and.w	r3, r3, #32
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AKB_CURRENT_Pin|SERVO_CURRENT_Pin;
 80009d0:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d6:	2303      	movs	r3, #3
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009e2:	4619      	mov	r1, r3
 80009e4:	484d      	ldr	r0, [pc, #308]	@ (8000b1c <HAL_ADC_MspInit+0x290>)
 80009e6:	f007 f993 	bl	8007d10 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 80009ea:	4b50      	ldr	r3, [pc, #320]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 80009ec:	4a50      	ldr	r2, [pc, #320]	@ (8000b30 <HAL_ADC_MspInit+0x2a4>)
 80009ee:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009f0:	4b4e      	ldr	r3, [pc, #312]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 80009f2:	220a      	movs	r2, #10
 80009f4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009f6:	4b4d      	ldr	r3, [pc, #308]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009fc:	4b4b      	ldr	r3, [pc, #300]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a02:	4b4a      	ldr	r3, [pc, #296]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 8000a04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a08:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a0a:	4b48      	ldr	r3, [pc, #288]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 8000a0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a10:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a12:	4b46      	ldr	r3, [pc, #280]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 8000a14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a18:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a1a:	4b44      	ldr	r3, [pc, #272]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 8000a1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a20:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a22:	4b42      	ldr	r3, [pc, #264]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a28:	4b40      	ldr	r3, [pc, #256]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a2e:	483f      	ldr	r0, [pc, #252]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 8000a30:	f004 f8fe 	bl	8004c30 <HAL_DMA_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8000a3a:	f001 fa95 	bl	8001f68 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a3a      	ldr	r2, [pc, #232]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 8000a42:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a44:	4a39      	ldr	r2, [pc, #228]	@ (8000b2c <HAL_ADC_MspInit+0x2a0>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000a4a:	e05c      	b.n	8000b06 <HAL_ADC_MspInit+0x27a>
  else if(adcHandle->Instance==ADC3)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a38      	ldr	r2, [pc, #224]	@ (8000b34 <HAL_ADC_MspInit+0x2a8>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d157      	bne.n	8000b06 <HAL_ADC_MspInit+0x27a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a56:	4b30      	ldr	r3, [pc, #192]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 8000a58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a5c:	4a2e      	ldr	r2, [pc, #184]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 8000a5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a66:	4b2c      	ldr	r3, [pc, #176]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 8000a68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a74:	4b28      	ldr	r3, [pc, #160]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 8000a76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a7a:	4a27      	ldr	r2, [pc, #156]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 8000a7c:	f043 0320 	orr.w	r3, r3, #32
 8000a80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a84:	4b24      	ldr	r3, [pc, #144]	@ (8000b18 <HAL_ADC_MspInit+0x28c>)
 8000a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a8a:	f003 0320 	and.w	r3, r3, #32
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAIN_POWER_VOLTAGE_Pin|MAIN_POWER_CURRENT_Pin|SOLENOID_CURRENT_Pin|COCKING_HANDLE_CURRENT_Pin;
 8000a92:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481d      	ldr	r0, [pc, #116]	@ (8000b1c <HAL_ADC_MspInit+0x290>)
 8000aa8:	f007 f932 	bl	8007d10 <HAL_GPIO_Init>
    hdma_adc3.Instance = BDMA_Channel0;
 8000aac:	4b22      	ldr	r3, [pc, #136]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000aae:	4a23      	ldr	r2, [pc, #140]	@ (8000b3c <HAL_ADC_MspInit+0x2b0>)
 8000ab0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8000ab2:	4b21      	ldr	r3, [pc, #132]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000ab4:	2211      	movs	r2, #17
 8000ab6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000ac6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aca:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000acc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000ace:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ad2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000ad6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ada:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000adc:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000ade:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ae2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000ae4:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000aea:	4813      	ldr	r0, [pc, #76]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000aec:	f004 f8a0 	bl	8004c30 <HAL_DMA_Init>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <HAL_ADC_MspInit+0x26e>
      Error_Handler();
 8000af6:	f001 fa37 	bl	8001f68 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000afe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b00:	4a0d      	ldr	r2, [pc, #52]	@ (8000b38 <HAL_ADC_MspInit+0x2ac>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8000b06:	bf00      	nop
 8000b08:	3738      	adds	r7, #56	@ 0x38
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40022000 	.word	0x40022000
 8000b14:	24000438 	.word	0x24000438
 8000b18:	58024400 	.word	0x58024400
 8000b1c:	58021400 	.word	0x58021400
 8000b20:	240002d0 	.word	0x240002d0
 8000b24:	40020010 	.word	0x40020010
 8000b28:	40022100 	.word	0x40022100
 8000b2c:	24000348 	.word	0x24000348
 8000b30:	40020028 	.word	0x40020028
 8000b34:	58026000 	.word	0x58026000
 8000b38:	240003c0 	.word	0x240003c0
 8000b3c:	58025408 	.word	0x58025408

08000b40 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000b46:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <MX_BDMA_Init+0x3c>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b7c <MX_BDMA_Init+0x3c>)
 8000b4e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_BDMA_Init+0x3c>)
 8000b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2100      	movs	r1, #0
 8000b68:	2081      	movs	r0, #129	@ 0x81
 8000b6a:	f004 f82c 	bl	8004bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000b6e:	2081      	movs	r0, #129	@ 0x81
 8000b70:	f004 f843 	bl	8004bfa <HAL_NVIC_EnableIRQ>

}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	58024400 	.word	0x58024400

08000b80 <functionCockingMotorDrive>:

// variables needed for just cocking_handle_maingun.c not global
int32_t lastCount = 0;

void functionCockingMotorDrive(bool direction)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	if(direction == FORWARD)
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d00d      	beq.n	8000bac <functionCockingMotorDrive+0x2c>
	{
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,OFF);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2102      	movs	r1, #2
 8000b94:	4811      	ldr	r0, [pc, #68]	@ (8000bdc <functionCockingMotorDrive+0x5c>)
 8000b96:	f007 fa83 	bl	80080a0 <HAL_GPIO_WritePin>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,ON);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2104      	movs	r1, #4
 8000b9e:	480f      	ldr	r0, [pc, #60]	@ (8000bdc <functionCockingMotorDrive+0x5c>)
 8000ba0:	f007 fa7e 	bl	80080a0 <HAL_GPIO_WritePin>

		pandora.gun.cockingHandle.motorState = FORWARD;
 8000ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8000be0 <functionCockingMotorDrive+0x60>)
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	715a      	strb	r2, [r3, #5]
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,ON);

		pandora.gun.cockingHandle.motorState = BACKWARD;
	}
}
 8000baa:	e012      	b.n	8000bd2 <functionCockingMotorDrive+0x52>
	else if(direction == BACKWARD)
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	f083 0301 	eor.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d00c      	beq.n	8000bd2 <functionCockingMotorDrive+0x52>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2104      	movs	r1, #4
 8000bbc:	4807      	ldr	r0, [pc, #28]	@ (8000bdc <functionCockingMotorDrive+0x5c>)
 8000bbe:	f007 fa6f 	bl	80080a0 <HAL_GPIO_WritePin>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,ON);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	2102      	movs	r1, #2
 8000bc6:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <functionCockingMotorDrive+0x5c>)
 8000bc8:	f007 fa6a 	bl	80080a0 <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.motorState = BACKWARD;
 8000bcc:	4b04      	ldr	r3, [pc, #16]	@ (8000be0 <functionCockingMotorDrive+0x60>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	715a      	strb	r2, [r3, #5]
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	58021800 	.word	0x58021800
 8000be0:	24000624 	.word	0x24000624

08000be4 <functionCockingMotorBrake>:

void functionCockingMotorBrake (bool state)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	if(state == ON)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d009      	beq.n	8000c08 <functionCockingMotorBrake+0x24>
	{
		MOTOR_CONTROL(BRAKE_DRV_28V,ON);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bfa:	480d      	ldr	r0, [pc, #52]	@ (8000c30 <functionCockingMotorBrake+0x4c>)
 8000bfc:	f007 fa50 	bl	80080a0 <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.brakeState = ON;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <functionCockingMotorBrake+0x50>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	719a      	strb	r2, [r3, #6]
	{
		MOTOR_CONTROL(BRAKE_DRV_28V,OFF);
		pandora.gun.cockingHandle.brakeState = OFF;
	}

}
 8000c06:	e00e      	b.n	8000c26 <functionCockingMotorBrake+0x42>
	else if (state == OFF)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f083 0301 	eor.w	r3, r3, #1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d008      	beq.n	8000c26 <functionCockingMotorBrake+0x42>
		MOTOR_CONTROL(BRAKE_DRV_28V,OFF);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c1a:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <functionCockingMotorBrake+0x4c>)
 8000c1c:	f007 fa40 	bl	80080a0 <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.brakeState = OFF;
 8000c20:	4b04      	ldr	r3, [pc, #16]	@ (8000c34 <functionCockingMotorBrake+0x50>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	719a      	strb	r2, [r3, #6]
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	58020c00 	.word	0x58020c00
 8000c34:	24000624 	.word	0x24000624

08000c38 <functionCockingMotorStop>:

void functionCockingMotorStop(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,OFF);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2102      	movs	r1, #2
 8000c40:	4806      	ldr	r0, [pc, #24]	@ (8000c5c <functionCockingMotorStop+0x24>)
 8000c42:	f007 fa2d 	bl	80080a0 <HAL_GPIO_WritePin>
	MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4804      	ldr	r0, [pc, #16]	@ (8000c5c <functionCockingMotorStop+0x24>)
 8000c4c:	f007 fa28 	bl	80080a0 <HAL_GPIO_WritePin>

	pandora.gun.cockingHandle.motorState = IDLE;
 8000c50:	4b03      	ldr	r3, [pc, #12]	@ (8000c60 <functionCockingMotorStop+0x28>)
 8000c52:	2202      	movs	r2, #2
 8000c54:	715a      	strb	r2, [r3, #5]
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	58021800 	.word	0x58021800
 8000c60:	24000624 	.word	0x24000624

08000c64 <functionCockingHandleGoSafe>:
	pandora.gun.cockingHandle.safe  = false;
	pandora.gun.cockingHandle.home  = true;
}

void functionCockingHandleGoSafe (void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	if(!pandora.switches.switches_cocking_handle_home)
 8000c68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce4 <functionCockingHandleGoSafe+0x80>)
 8000c6a:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8000c6e:	f083 0301 	eor.w	r3, r3, #1
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d00f      	beq.n	8000c98 <functionCockingHandleGoSafe+0x34>
	{
		functionCockingMotorBrake(OFF);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff ffb3 	bl	8000be4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff ff7e 	bl	8000b80 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000c84:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <functionCockingHandleGoSafe+0x80>)
 8000c86:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f7      	bne.n	8000c7e <functionCockingHandleGoSafe+0x1a>

		functionCockingMotorStop();
 8000c8e:	f7ff ffd3 	bl	8000c38 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000c92:	2001      	movs	r0, #1
 8000c94:	f7ff ffa6 	bl	8000be4 <functionCockingMotorBrake>
	}

	if(pandora.switches.switches_cocking_handle_home)
 8000c98:	4b12      	ldr	r3, [pc, #72]	@ (8000ce4 <functionCockingHandleGoSafe+0x80>)
 8000c9a:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d014      	beq.n	8000ccc <functionCockingHandleGoSafe+0x68>
	{
		functionCockingMotorBrake(OFF);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff ff9e 	bl	8000be4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(FORWARD);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff ff69 	bl	8000b80 <functionCockingMotorDrive>
		}
		while(!functionCountEncoderPulse(SAFE_POSITION));
 8000cae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cb2:	f000 f873 	bl	8000d9c <functionCountEncoderPulse>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f083 0301 	eor.w	r3, r3, #1
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1f2      	bne.n	8000ca8 <functionCockingHandleGoSafe+0x44>

		functionCockingMotorStop();
 8000cc2:	f7ff ffb9 	bl	8000c38 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff ff8c 	bl	8000be4 <functionCockingMotorBrake>
	}

	pandora.gun.cockingHandle.armed = false;
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <functionCockingHandleGoSafe+0x80>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	71da      	strb	r2, [r3, #7]
	pandora.gun.cockingHandle.safe  = true;
 8000cd2:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <functionCockingHandleGoSafe+0x80>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	721a      	strb	r2, [r3, #8]
	pandora.gun.cockingHandle.home  = true;
 8000cd8:	4b02      	ldr	r3, [pc, #8]	@ (8000ce4 <functionCockingHandleGoSafe+0x80>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	725a      	strb	r2, [r3, #9]
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	24000624 	.word	0x24000624

08000ce8 <functionCockingHandleGoArm>:

void functionCockingHandleGoArm (void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	if(!pandora.switches.switches_cocking_handle_home)
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <functionCockingHandleGoArm+0xb0>)
 8000cee:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8000cf2:	f083 0301 	eor.w	r3, r3, #1
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d00f      	beq.n	8000d1c <functionCockingHandleGoArm+0x34>
	{
		functionCockingMotorBrake(OFF);
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff ff71 	bl	8000be4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff ff3c 	bl	8000b80 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000d08:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <functionCockingHandleGoArm+0xb0>)
 8000d0a:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1f7      	bne.n	8000d02 <functionCockingHandleGoArm+0x1a>

		functionCockingMotorStop();
 8000d12:	f7ff ff91 	bl	8000c38 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000d16:	2001      	movs	r0, #1
 8000d18:	f7ff ff64 	bl	8000be4 <functionCockingMotorBrake>
	}

	if(pandora.switches.switches_cocking_handle_home)
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <functionCockingHandleGoArm+0xb0>)
 8000d1e:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d014      	beq.n	8000d50 <functionCockingHandleGoArm+0x68>
	{
		functionCockingMotorBrake(OFF);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff ff5c 	bl	8000be4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(FORWARD);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff ff27 	bl	8000b80 <functionCockingMotorDrive>
		}
		while(!functionCountEncoderPulse(ARM_POSITION));
 8000d32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d36:	f000 f831 	bl	8000d9c <functionCountEncoderPulse>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f083 0301 	eor.w	r3, r3, #1
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f2      	bne.n	8000d2c <functionCockingHandleGoArm+0x44>

		functionCockingMotorStop();
 8000d46:	f7ff ff77 	bl	8000c38 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff ff4a 	bl	8000be4 <functionCockingMotorBrake>
	}

	if(!pandora.switches.switches_cocking_handle_home)
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <functionCockingHandleGoArm+0xb0>)
 8000d52:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8000d56:	f083 0301 	eor.w	r3, r3, #1
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d00f      	beq.n	8000d80 <functionCockingHandleGoArm+0x98>
	{
		functionCockingMotorBrake(OFF);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ff3f 	bl	8000be4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000d66:	2000      	movs	r0, #0
 8000d68:	f7ff ff0a 	bl	8000b80 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <functionCockingHandleGoArm+0xb0>)
 8000d6e:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f7      	bne.n	8000d66 <functionCockingHandleGoArm+0x7e>


		functionCockingMotorStop();
 8000d76:	f7ff ff5f 	bl	8000c38 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f7ff ff32 	bl	8000be4 <functionCockingMotorBrake>
	}

	pandora.gun.cockingHandle.armed = true;
 8000d80:	4b05      	ldr	r3, [pc, #20]	@ (8000d98 <functionCockingHandleGoArm+0xb0>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	71da      	strb	r2, [r3, #7]
	pandora.gun.cockingHandle.safe  = false;
 8000d86:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <functionCockingHandleGoArm+0xb0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	721a      	strb	r2, [r3, #8]
	pandora.gun.cockingHandle.home  = true;
 8000d8c:	4b02      	ldr	r3, [pc, #8]	@ (8000d98 <functionCockingHandleGoArm+0xb0>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	725a      	strb	r2, [r3, #9]
}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	24000624 	.word	0x24000624

08000d9c <functionCountEncoderPulse>:

bool functionCountEncoderPulse(uint32_t position)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	if(pandora.gun.cockingHandle.encoderCounter <= position)								// main içerisinde functionEncoderCounter saymalı..! OK #huzeyfe
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <functionCountEncoderPulse+0x28>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	461a      	mov	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d301      	bcc.n	8000db4 <functionCountEncoderPulse+0x18>
		return true;
 8000db0:	2301      	movs	r3, #1
 8000db2:	e000      	b.n	8000db6 <functionCountEncoderPulse+0x1a>
	else
		return false;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	24000624 	.word	0x24000624

08000dc8 <functionEncoderRead>:

void functionEncoderRead(TIM_HandleTypeDef *htim)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b085      	sub	sp, #20
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
	int32_t currentCount = __HAL_TIM_GET_COUNTER(htim);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd6:	60fb      	str	r3, [r7, #12]
	int32_t difference = currentCount - lastCount;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <functionEncoderRead+0x74>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	60bb      	str	r3, [r7, #8]

	if(pandora.switches.switches_cocking_handle_home)
 8000de2:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <functionEncoderRead+0x78>)
 8000de4:	f893 305e 	ldrb.w	r3, [r3, #94]	@ 0x5e
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d005      	beq.n	8000df8 <functionEncoderRead+0x30>
	{
		currentCount = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
		lastCount = 0;
 8000df0:	4b12      	ldr	r3, [pc, #72]	@ (8000e3c <functionEncoderRead+0x74>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]

		return;
 8000df6:	e01b      	b.n	8000e30 <functionEncoderRead+0x68>
	}

	if(difference > 0)
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	dd09      	ble.n	8000e12 <functionEncoderRead+0x4a>
	{
		pandora.gun.cockingHandle.encoderRotation = FORWARD;
 8000dfe:	4b10      	ldr	r3, [pc, #64]	@ (8000e40 <functionEncoderRead+0x78>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	711a      	strb	r2, [r3, #4]
		pandora.gun.cockingHandle.encoderCounter += difference;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	@ (8000e40 <functionEncoderRead+0x78>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e40 <functionEncoderRead+0x78>)
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e00b      	b.n	8000e2a <functionEncoderRead+0x62>
	}

	else if (difference < 0)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	da08      	bge.n	8000e2a <functionEncoderRead+0x62>
	{
		pandora.gun.cockingHandle.encoderRotation = BACKWARD;
 8000e18:	4b09      	ldr	r3, [pc, #36]	@ (8000e40 <functionEncoderRead+0x78>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	711a      	strb	r2, [r3, #4]
		pandora.gun.cockingHandle.encoderCounter += difference;
 8000e1e:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <functionEncoderRead+0x78>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a06      	ldr	r2, [pc, #24]	@ (8000e40 <functionEncoderRead+0x78>)
 8000e28:	6013      	str	r3, [r2, #0]

	}

	lastCount = currentCount;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <functionEncoderRead+0x74>)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6013      	str	r3, [r2, #0]
}
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	2400043c 	.word	0x2400043c
 8000e40:	24000624 	.word	0x24000624

08000e44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_DMA_Init+0x4c>)
 8000e4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e50:	4a0f      	ldr	r2, [pc, #60]	@ (8000e90 <MX_DMA_Init+0x4c>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <MX_DMA_Init+0x4c>)
 8000e5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	200b      	movs	r0, #11
 8000e6e:	f003 feaa 	bl	8004bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e72:	200b      	movs	r0, #11
 8000e74:	f003 fec1 	bl	8004bfa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	200c      	movs	r0, #12
 8000e7e:	f003 fea2 	bl	8004bc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e82:	200c      	movs	r0, #12
 8000e84:	f003 feb9 	bl	8004bfa <HAL_NVIC_EnableIRQ>

}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	58024400 	.word	0x58024400

08000e94 <functionErrorCurrentVoltageCheck>:
#include "power_management.h"

extern pandoraStructer pandora;

void functionErrorCurrentVoltageCheck (void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
	pandora.error.solenoidCurrentHigh		= (pandora.powerManagement.SCurrent		 	> AMPER_5) 	? true : false;
 8000e98:	4b2f      	ldr	r3, [pc, #188]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	bf8c      	ite	hi
 8000ea2:	2301      	movhi	r3, #1
 8000ea4:	2300      	movls	r3, #0
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000eaa:	745a      	strb	r2, [r3, #17]
	pandora.error.cockingHandleCurrentHigh	= (pandora.powerManagement.CHCurrent		> AMPER_5) 	? true : false;
 8000eac:	4b2a      	ldr	r3, [pc, #168]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000eae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	bf8c      	ite	hi
 8000eb6:	2301      	movhi	r3, #1
 8000eb8:	2300      	movls	r3, #0
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ebe:	74da      	strb	r2, [r3, #19]
	pandora.error.herculeCurrentHigh 		= (pandora.powerManagement.HERCULECurrent 	> AMPER_5) 	? true : false;
 8000ec0:	4b25      	ldr	r3, [pc, #148]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ec2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8000ec6:	2b05      	cmp	r3, #5
 8000ec8:	bf8c      	ite	hi
 8000eca:	2301      	movhi	r3, #1
 8000ecc:	2300      	movls	r3, #0
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ed2:	755a      	strb	r2, [r3, #21]
	pandora.error.kkuCurrentHigh 			= (pandora.powerManagement.KKUCurrent 		> AMPER_5) 	? true : false;
 8000ed4:	4b20      	ldr	r3, [pc, #128]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ed6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8000eda:	2b05      	cmp	r3, #5
 8000edc:	bf8c      	ite	hi
 8000ede:	2301      	movhi	r3, #1
 8000ee0:	2300      	movls	r3, #0
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ee6:	765a      	strb	r2, [r3, #25]
	pandora.error.akbCurrentHigh 			= (pandora.powerManagement.AKBCurrent 		> AMPER_5) 	? true : false;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000eea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8000eee:	2b05      	cmp	r3, #5
 8000ef0:	bf8c      	ite	hi
 8000ef2:	2301      	movhi	r3, #1
 8000ef4:	2300      	movls	r3, #0
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000efa:	75da      	strb	r2, [r3, #23]
	pandora.error.gdbCurrentHigh 			= (pandora.powerManagement.GDBCurrent 		> AMPER_5) 	? true : false;
 8000efc:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8000f02:	2b05      	cmp	r3, #5
 8000f04:	bf8c      	ite	hi
 8000f06:	2301      	movhi	r3, #1
 8000f08:	2300      	movls	r3, #0
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f0e:	775a      	strb	r2, [r3, #29]
	pandora.error.eosCurrentHigh 			= (pandora.powerManagement.EOSCurrent 		> AMPER_5) 	? true : false;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	bf8c      	ite	hi
 8000f1a:	2301      	movhi	r3, #1
 8000f1c:	2300      	movls	r3, #0
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f22:	76da      	strb	r2, [r3, #27]
	pandora.error.gdbVoltageHigh 			= (pandora.powerManagement.BATVoltage 		> VOLT_28) 	? true : false;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f26:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8000f2a:	2b1c      	cmp	r3, #28
 8000f2c:	bf8c      	ite	hi
 8000f2e:	2301      	movhi	r3, #1
 8000f30:	2300      	movls	r3, #0
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b08      	ldr	r3, [pc, #32]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f36:	77da      	strb	r2, [r3, #31]
	pandora.error.gdbVoltageLow	 			= (pandora.powerManagement.BATVoltage 		< VOLT_22) 	? true : false;
 8000f38:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8000f3e:	2b15      	cmp	r3, #21
 8000f40:	bf94      	ite	ls
 8000f42:	2301      	movls	r3, #1
 8000f44:	2300      	movhi	r3, #0
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f4a:	779a      	strb	r2, [r3, #30]
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	24000624 	.word	0x24000624

08000f5c <functionErrorMosfetCheck>:

void functionErrorMosfetCheck (void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
	if((pandora.switches.switches_fire_order 	== true)	&&
 8000f60:	4b49      	ldr	r3, [pc, #292]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000f62:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d014      	beq.n	8000f94 <functionErrorMosfetCheck+0x38>
	   (pandora.states.firing 					== true )   &&
 8000f6a:	4b47      	ldr	r3, [pc, #284]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
	if((pandora.switches.switches_fire_order 	== true)	&&
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00f      	beq.n	8000f94 <functionErrorMosfetCheck+0x38>
	   (pandora.powerManagement.SCurrent 		< AMPER_1)  &&
 8000f74:	4b44      	ldr	r3, [pc, #272]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
	   (pandora.states.firing 					== true )   &&
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10a      	bne.n	8000f94 <functionErrorMosfetCheck+0x38>
	   (pandora.error.system 					== false))
 8000f7e:	4b42      	ldr	r3, [pc, #264]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000f80:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.SCurrent 		< AMPER_1)  &&
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d002      	beq.n	8000f94 <functionErrorMosfetCheck+0x38>
	{
		pandora.error.solenoidCurrentLow = true; // mosfet hatası. LOOP kontrolü var olduğu için atış durumunda akım çekmiyorsa mosfet arızalıdır.
 8000f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	741a      	strb	r2, [r3, #16]
	}

	if((pandora.switches.switches_cocking_handle_order 	== true    )	&&
 8000f94:	4b3c      	ldr	r3, [pc, #240]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000f96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d01a      	beq.n	8000fd4 <functionErrorMosfetCheck+0x78>
	   (pandora.gun.cockingHandle.brakeState 			== OFF     )	&&
 8000f9e:	4b3a      	ldr	r3, [pc, #232]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000fa0:	799b      	ldrb	r3, [r3, #6]
 8000fa2:	f083 0301 	eor.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
	if((pandora.switches.switches_cocking_handle_order 	== true    )	&&
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d013      	beq.n	8000fd4 <functionErrorMosfetCheck+0x78>
	   (pandora.gun.cockingHandle.motorState 			!= IDLE    )	&&
 8000fac:	4b36      	ldr	r3, [pc, #216]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000fae:	795b      	ldrb	r3, [r3, #5]
	   (pandora.gun.cockingHandle.brakeState 			== OFF     )	&&
 8000fb0:	2b02      	cmp	r3, #2
 8000fb2:	d00f      	beq.n	8000fd4 <functionErrorMosfetCheck+0x78>
	   (pandora.powerManagement.CHCurrent				<  AMPER_1 ) 	&&
 8000fb4:	4b34      	ldr	r3, [pc, #208]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000fb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
	   (pandora.gun.cockingHandle.motorState 			!= IDLE    )	&&
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10a      	bne.n	8000fd4 <functionErrorMosfetCheck+0x78>
	   (pandora.error.system 							== false   ))
 8000fbe:	4b32      	ldr	r3, [pc, #200]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000fc0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000fc4:	f083 0301 	eor.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.CHCurrent				<  AMPER_1 ) 	&&
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <functionErrorMosfetCheck+0x78>
	{
		pandora.error.cockingHandleCurrentLow = true; // mosfet hatası. LOOP kontrolü var olduğu için atış durumunda akım çekmiyorsa mosfet arızalıdır.
 8000fce:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	749a      	strb	r2, [r3, #18]
	}

	if((pandora.states.AKBPowerOnOff				 	== true    )	&&
 8000fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000fd6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00f      	beq.n	8000ffe <functionErrorMosfetCheck+0xa2>
	   (pandora.powerManagement.AKBCurrent				<  AMPER_1 ) 	&&
 8000fde:	4b2a      	ldr	r3, [pc, #168]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000fe0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
	if((pandora.states.AKBPowerOnOff				 	== true    )	&&
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10a      	bne.n	8000ffe <functionErrorMosfetCheck+0xa2>
	   (pandora.error.system 							== false   ))
 8000fe8:	4b27      	ldr	r3, [pc, #156]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000fea:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8000fee:	f083 0301 	eor.w	r3, r3, #1
 8000ff2:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.AKBCurrent				<  AMPER_1 ) 	&&
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d002      	beq.n	8000ffe <functionErrorMosfetCheck+0xa2>
	{
		pandora.error.akbCurrentLow = true;
 8000ff8:	4b23      	ldr	r3, [pc, #140]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	759a      	strb	r2, [r3, #22]
	}

	if((pandora.states.KKBPowerOnOff				 	== true    )	&&
 8000ffe:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8001000:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00f      	beq.n	8001028 <functionErrorMosfetCheck+0xcc>
	   (pandora.powerManagement.KKUCurrent				<  AMPER_1 ) 	&&
 8001008:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 800100a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
	if((pandora.states.KKBPowerOnOff				 	== true    )	&&
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10a      	bne.n	8001028 <functionErrorMosfetCheck+0xcc>
	   (pandora.error.system 							== false   ))
 8001012:	4b1d      	ldr	r3, [pc, #116]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8001014:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001018:	f083 0301 	eor.w	r3, r3, #1
 800101c:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.KKUCurrent				<  AMPER_1 ) 	&&
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <functionErrorMosfetCheck+0xcc>
	{
		pandora.error.kkuCurrentLow = true;
 8001022:	4b19      	ldr	r3, [pc, #100]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8001024:	2201      	movs	r2, #1
 8001026:	761a      	strb	r2, [r3, #24]
	}

	if((pandora.states.EOSPowerOnOff				 	== true    )	&&
 8001028:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 800102a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00f      	beq.n	8001052 <functionErrorMosfetCheck+0xf6>
	   (pandora.powerManagement.EOSCurrent				<  AMPER_1 ) 	&&
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8001034:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
	if((pandora.states.EOSPowerOnOff				 	== true    )	&&
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10a      	bne.n	8001052 <functionErrorMosfetCheck+0xf6>
	   (pandora.error.system 							== false   ))
 800103c:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 800103e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001042:	f083 0301 	eor.w	r3, r3, #1
 8001046:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.EOSCurrent				<  AMPER_1 ) 	&&
 8001048:	2b00      	cmp	r3, #0
 800104a:	d002      	beq.n	8001052 <functionErrorMosfetCheck+0xf6>
	{
		pandora.error.eosCurrentLow = true;
 800104c:	4b0e      	ldr	r3, [pc, #56]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 800104e:	2201      	movs	r2, #1
 8001050:	769a      	strb	r2, [r3, #26]
	}

	if((pandora.states.HERCULEPowerOnOff				== true    )	&&
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8001054:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00f      	beq.n	800107c <functionErrorMosfetCheck+0x120>
	   (pandora.powerManagement.HERCULECurrent			<  AMPER_1 ) 	&&
 800105c:	4b0a      	ldr	r3, [pc, #40]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 800105e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
	if((pandora.states.HERCULEPowerOnOff				== true    )	&&
 8001062:	2b00      	cmp	r3, #0
 8001064:	d10a      	bne.n	800107c <functionErrorMosfetCheck+0x120>
	   (pandora.error.system 							== false   ))
 8001066:	4b08      	ldr	r3, [pc, #32]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8001068:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800106c:	f083 0301 	eor.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.HERCULECurrent			<  AMPER_1 ) 	&&
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <functionErrorMosfetCheck+0x120>
	{
		pandora.error.herculeCurrentLow = true;
 8001076:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <functionErrorMosfetCheck+0x12c>)
 8001078:	2201      	movs	r2, #1
 800107a:	751a      	strb	r2, [r3, #20]
	}
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	24000624 	.word	0x24000624

0800108c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001090:	4b1e      	ldr	r3, [pc, #120]	@ (800110c <MX_ETH_Init+0x80>)
 8001092:	4a1f      	ldr	r2, [pc, #124]	@ (8001110 <MX_ETH_Init+0x84>)
 8001094:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <MX_ETH_Init+0x88>)
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800109c:	4b1d      	ldr	r3, [pc, #116]	@ (8001114 <MX_ETH_Init+0x88>)
 800109e:	2280      	movs	r2, #128	@ 0x80
 80010a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001114 <MX_ETH_Init+0x88>)
 80010a4:	22e1      	movs	r2, #225	@ 0xe1
 80010a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <MX_ETH_Init+0x88>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80010ae:	4b19      	ldr	r3, [pc, #100]	@ (8001114 <MX_ETH_Init+0x88>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MX_ETH_Init+0x88>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <MX_ETH_Init+0x80>)
 80010bc:	4a15      	ldr	r2, [pc, #84]	@ (8001114 <MX_ETH_Init+0x88>)
 80010be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <MX_ETH_Init+0x80>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80010c6:	4b11      	ldr	r3, [pc, #68]	@ (800110c <MX_ETH_Init+0x80>)
 80010c8:	4a13      	ldr	r2, [pc, #76]	@ (8001118 <MX_ETH_Init+0x8c>)
 80010ca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <MX_ETH_Init+0x80>)
 80010ce:	4a13      	ldr	r2, [pc, #76]	@ (800111c <MX_ETH_Init+0x90>)
 80010d0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010d2:	4b0e      	ldr	r3, [pc, #56]	@ (800110c <MX_ETH_Init+0x80>)
 80010d4:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80010d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010da:	480c      	ldr	r0, [pc, #48]	@ (800110c <MX_ETH_Init+0x80>)
 80010dc:	f005 fe80 	bl	8006de0 <HAL_ETH_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80010e6:	f000 ff3f 	bl	8001f68 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010ea:	2238      	movs	r2, #56	@ 0x38
 80010ec:	2100      	movs	r1, #0
 80010ee:	480c      	ldr	r0, [pc, #48]	@ (8001120 <MX_ETH_Init+0x94>)
 80010f0:	f00c fd60 	bl	800dbb4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001120 <MX_ETH_Init+0x94>)
 80010f6:	2221      	movs	r2, #33	@ 0x21
 80010f8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010fa:	4b09      	ldr	r3, [pc, #36]	@ (8001120 <MX_ETH_Init+0x94>)
 80010fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001100:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001102:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <MX_ETH_Init+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	24000478 	.word	0x24000478
 8001110:	40028000 	.word	0x40028000
 8001114:	24000528 	.word	0x24000528
 8001118:	24000128 	.word	0x24000128
 800111c:	240000c8 	.word	0x240000c8
 8001120:	24000440 	.word	0x24000440

08001124 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08e      	sub	sp, #56	@ 0x38
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a49      	ldr	r2, [pc, #292]	@ (8001268 <HAL_ETH_MspInit+0x144>)
 8001142:	4293      	cmp	r3, r2
 8001144:	f040 808b 	bne.w	800125e <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001148:	4b48      	ldr	r3, [pc, #288]	@ (800126c <HAL_ETH_MspInit+0x148>)
 800114a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800114e:	4a47      	ldr	r2, [pc, #284]	@ (800126c <HAL_ETH_MspInit+0x148>)
 8001150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001154:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001158:	4b44      	ldr	r3, [pc, #272]	@ (800126c <HAL_ETH_MspInit+0x148>)
 800115a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800115e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001162:	623b      	str	r3, [r7, #32]
 8001164:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001166:	4b41      	ldr	r3, [pc, #260]	@ (800126c <HAL_ETH_MspInit+0x148>)
 8001168:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800116c:	4a3f      	ldr	r2, [pc, #252]	@ (800126c <HAL_ETH_MspInit+0x148>)
 800116e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001172:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001176:	4b3d      	ldr	r3, [pc, #244]	@ (800126c <HAL_ETH_MspInit+0x148>)
 8001178:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800117c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001184:	4b39      	ldr	r3, [pc, #228]	@ (800126c <HAL_ETH_MspInit+0x148>)
 8001186:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800118a:	4a38      	ldr	r2, [pc, #224]	@ (800126c <HAL_ETH_MspInit+0x148>)
 800118c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001190:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001194:	4b35      	ldr	r3, [pc, #212]	@ (800126c <HAL_ETH_MspInit+0x148>)
 8001196:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a2:	4b32      	ldr	r3, [pc, #200]	@ (800126c <HAL_ETH_MspInit+0x148>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a8:	4a30      	ldr	r2, [pc, #192]	@ (800126c <HAL_ETH_MspInit+0x148>)
 80011aa:	f043 0304 	orr.w	r3, r3, #4
 80011ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b2:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <HAL_ETH_MspInit+0x148>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <HAL_ETH_MspInit+0x148>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c6:	4a29      	ldr	r2, [pc, #164]	@ (800126c <HAL_ETH_MspInit+0x148>)
 80011c8:	f043 0301 	orr.w	r3, r3, #1
 80011cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011d0:	4b26      	ldr	r3, [pc, #152]	@ (800126c <HAL_ETH_MspInit+0x148>)
 80011d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b23      	ldr	r3, [pc, #140]	@ (800126c <HAL_ETH_MspInit+0x148>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e4:	4a21      	ldr	r2, [pc, #132]	@ (800126c <HAL_ETH_MspInit+0x148>)
 80011e6:	f043 0302 	orr.w	r3, r3, #2
 80011ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011ee:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <HAL_ETH_MspInit+0x148>)
 80011f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80011fc:	2332      	movs	r3, #50	@ 0x32
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120c:	230b      	movs	r3, #11
 800120e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001214:	4619      	mov	r1, r3
 8001216:	4816      	ldr	r0, [pc, #88]	@ (8001270 <HAL_ETH_MspInit+0x14c>)
 8001218:	f006 fd7a 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800121c:	2386      	movs	r3, #134	@ 0x86
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800122c:	230b      	movs	r3, #11
 800122e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001234:	4619      	mov	r1, r3
 8001236:	480f      	ldr	r0, [pc, #60]	@ (8001274 <HAL_ETH_MspInit+0x150>)
 8001238:	f006 fd6a 	bl	8007d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800123c:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800124e:	230b      	movs	r3, #11
 8001250:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001256:	4619      	mov	r1, r3
 8001258:	4807      	ldr	r0, [pc, #28]	@ (8001278 <HAL_ETH_MspInit+0x154>)
 800125a:	f006 fd59 	bl	8007d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800125e:	bf00      	nop
 8001260:	3738      	adds	r7, #56	@ 0x38
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40028000 	.word	0x40028000
 800126c:	58024400 	.word	0x58024400
 8001270:	58020800 	.word	0x58020800
 8001274:	58020000 	.word	0x58020000
 8001278:	58020400 	.word	0x58020400

0800127c <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001280:	4b2e      	ldr	r3, [pc, #184]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 8001282:	4a2f      	ldr	r2, [pc, #188]	@ (8001340 <MX_FDCAN2_Init+0xc4>)
 8001284:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001286:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800128c:	4b2b      	ldr	r3, [pc, #172]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001292:	4b2a      	ldr	r3, [pc, #168]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 8001294:	2200      	movs	r2, #0
 8001296:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001298:	4b28      	ldr	r3, [pc, #160]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 800129a:	2200      	movs	r2, #0
 800129c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800129e:	4b27      	ldr	r3, [pc, #156]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 80012a4:	4b25      	ldr	r3, [pc, #148]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012a6:	2210      	movs	r2, #16
 80012a8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80012aa:	4b24      	ldr	r3, [pc, #144]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80012b0:	4b22      	ldr	r3, [pc, #136]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012b2:	2202      	movs	r2, #2
 80012b4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80012b6:	4b21      	ldr	r3, [pc, #132]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012b8:	2202      	movs	r2, #2
 80012ba:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80012bc:	4b1f      	ldr	r3, [pc, #124]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012be:	2201      	movs	r2, #1
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80012c2:	4b1e      	ldr	r3, [pc, #120]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012c4:	2201      	movs	r2, #1
 80012c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80012c8:	4b1c      	ldr	r3, [pc, #112]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012ca:	2201      	movs	r2, #1
 80012cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80012ce:	4b1b      	ldr	r3, [pc, #108]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80012d4:	4b19      	ldr	r3, [pc, #100]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80012da:	4b18      	ldr	r3, [pc, #96]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80012e0:	4b16      	ldr	r3, [pc, #88]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80012ec:	4b13      	ldr	r3, [pc, #76]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012ee:	2204      	movs	r2, #4
 80012f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80012f8:	4b10      	ldr	r3, [pc, #64]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 80012fa:	2204      	movs	r2, #4
 80012fc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 8001300:	2200      	movs	r2, #0
 8001302:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001304:	4b0d      	ldr	r3, [pc, #52]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 8001306:	2204      	movs	r2, #4
 8001308:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 800130c:	2200      	movs	r2, #0
 800130e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8001310:	4b0a      	ldr	r3, [pc, #40]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 8001312:	2200      	movs	r2, #0
 8001314:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 8001318:	2200      	movs	r2, #0
 800131a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 800131e:	2200      	movs	r2, #0
 8001320:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 8001324:	2204      	movs	r2, #4
 8001326:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	@ (800133c <MX_FDCAN2_Init+0xc0>)
 800132a:	f006 f98d 	bl	8007648 <HAL_FDCAN_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001334:	f000 fe18 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	24000530 	.word	0x24000530
 8001340:	4000a400 	.word	0x4000a400

08001344 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b0ba      	sub	sp, #232	@ 0xe8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	f107 0310 	add.w	r3, r7, #16
 8001360:	22c0      	movs	r2, #192	@ 0xc0
 8001362:	2100      	movs	r1, #0
 8001364:	4618      	mov	r0, r3
 8001366:	f00c fc25 	bl	800dbb4 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a27      	ldr	r2, [pc, #156]	@ (800140c <HAL_FDCAN_MspInit+0xc8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d146      	bne.n	8001402 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001374:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001380:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001384:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001388:	f107 0310 	add.w	r3, r7, #16
 800138c:	4618      	mov	r0, r3
 800138e:	f007 fff5 	bl	800937c <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001398:	f000 fde6 	bl	8001f68 <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800139c:	4b1c      	ldr	r3, [pc, #112]	@ (8001410 <HAL_FDCAN_MspInit+0xcc>)
 800139e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80013a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001410 <HAL_FDCAN_MspInit+0xcc>)
 80013a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a8:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80013ac:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <HAL_FDCAN_MspInit+0xcc>)
 80013ae:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80013b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_FDCAN_MspInit+0xcc>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c0:	4a13      	ldr	r2, [pc, #76]	@ (8001410 <HAL_FDCAN_MspInit+0xcc>)
 80013c2:	f043 0302 	orr.w	r3, r3, #2
 80013c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_FDCAN_MspInit+0xcc>)
 80013cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013d8:	2360      	movs	r3, #96	@ 0x60
 80013da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ea:	2300      	movs	r3, #0
 80013ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80013f0:	2309      	movs	r3, #9
 80013f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	@ (8001414 <HAL_FDCAN_MspInit+0xd0>)
 80013fe:	f006 fc87 	bl	8007d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 8001402:	bf00      	nop
 8001404:	37e8      	adds	r7, #232	@ 0xe8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	4000a400 	.word	0x4000a400
 8001410:	58024400 	.word	0x58024400
 8001414:	58020400 	.word	0x58020400

08001418 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08e      	sub	sp, #56	@ 0x38
 800141c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800142e:	4b6b      	ldr	r3, [pc, #428]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001434:	4a69      	ldr	r2, [pc, #420]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800143e:	4b67      	ldr	r3, [pc, #412]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 8001440:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	623b      	str	r3, [r7, #32]
 800144a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144c:	4b63      	ldr	r3, [pc, #396]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001452:	4a62      	ldr	r2, [pc, #392]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001458:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800145c:	4b5f      	ldr	r3, [pc, #380]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	4b5c      	ldr	r3, [pc, #368]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001470:	4a5a      	ldr	r2, [pc, #360]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 8001472:	f043 0304 	orr.w	r3, r3, #4
 8001476:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147a:	4b58      	ldr	r3, [pc, #352]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001480:	f003 0304 	and.w	r3, r3, #4
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001488:	4b54      	ldr	r3, [pc, #336]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800148e:	4a53      	ldr	r2, [pc, #332]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001498:	4b50      	ldr	r3, [pc, #320]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 800149a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	617b      	str	r3, [r7, #20]
 80014a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014a6:	4b4d      	ldr	r3, [pc, #308]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ac:	4a4b      	ldr	r2, [pc, #300]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 80014ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014b6:	4b49      	ldr	r3, [pc, #292]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 80014b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014c4:	4b45      	ldr	r3, [pc, #276]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ca:	4a44      	ldr	r2, [pc, #272]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014d4:	4b41      	ldr	r3, [pc, #260]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 80014d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e8:	4a3c      	ldr	r2, [pc, #240]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 80014ea:	f043 0302 	orr.w	r3, r3, #2
 80014ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014f2:	4b3a      	ldr	r3, [pc, #232]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 80014f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001500:	4b36      	ldr	r3, [pc, #216]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001506:	4a35      	ldr	r2, [pc, #212]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001510:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <MX_GPIO_Init+0x1c4>)
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, COCKING_HANDLE_DRV_H_BACKWARD_Pin|COCKING_HANDLE_DRV_H_FORWARD_Pin|COCKING_HANDLE_POWER_Pin|SOLENOID_POWER_Pin
 800151e:	2200      	movs	r2, #0
 8001520:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001524:	482e      	ldr	r0, [pc, #184]	@ (80015e0 <MX_GPIO_Init+0x1c8>)
 8001526:	f006 fdbb 	bl	80080a0 <HAL_GPIO_WritePin>
                          |SOLENOID_DRV_2_Pin|SOLENOID_DRV_1_Pin|SOLENOID_DRV_H_REVERSE_Pin|SOLENOID_DRV_H_FORWARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CASE_LED_GPIO_Port, CASE_LED_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001530:	482c      	ldr	r0, [pc, #176]	@ (80015e4 <MX_GPIO_Init+0x1cc>)
 8001532:	f006 fdb5 	bl	80080a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EOS_POWER_Pin|SERVO_POWER_Pin|AKB_POWER_Pin|KKU_POWER_Pin
 8001536:	2200      	movs	r2, #0
 8001538:	f64d 6121 	movw	r1, #56865	@ 0xde21
 800153c:	482a      	ldr	r0, [pc, #168]	@ (80015e8 <MX_GPIO_Init+0x1d0>)
 800153e:	f006 fdaf 	bl	80080a0 <HAL_GPIO_WritePin>
                          |BRAKE_DRV_12V_Pin|BRAKE_DRV_28V_Pin|EMERGENCY_STOP_RESET_Pin|SYSTEM_ON_OFFD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = COCKING_HANDLE_DRV_H_BACKWARD_Pin|COCKING_HANDLE_DRV_H_FORWARD_Pin|COCKING_HANDLE_POWER_Pin|SOLENOID_POWER_Pin
 8001542:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 8001546:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SOLENOID_DRV_2_Pin|SOLENOID_DRV_1_Pin|SOLENOID_DRV_H_REVERSE_Pin|SOLENOID_DRV_H_FORWARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	4821      	ldr	r0, [pc, #132]	@ (80015e0 <MX_GPIO_Init+0x1c8>)
 800155c:	f006 fbd8 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CASE_LED_Pin;
 8001560:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(CASE_LED_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	481a      	ldr	r0, [pc, #104]	@ (80015e4 <MX_GPIO_Init+0x1cc>)
 800157a:	f006 fbc9 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = EOS_POWER_Pin|SERVO_POWER_Pin|AKB_POWER_Pin|KKU_POWER_Pin
 800157e:	f64d 6321 	movw	r3, #56865	@ 0xde21
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
                          |BRAKE_DRV_12V_Pin|BRAKE_DRV_28V_Pin|EMERGENCY_STOP_RESET_Pin|SYSTEM_ON_OFFD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001584:	2301      	movs	r3, #1
 8001586:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001588:	2300      	movs	r3, #0
 800158a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2300      	movs	r3, #0
 800158e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	4814      	ldr	r0, [pc, #80]	@ (80015e8 <MX_GPIO_Init+0x1d0>)
 8001598:	f006 fbba 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_FEEDBACK_Pin|SYSTEM_ON_OFF_Pin|SWITCHES_FIRE_ORDER_Pin|SWITCHES_SAFETY_Pin
 800159c:	23de      	movs	r3, #222	@ 0xde
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SWITCHES_COCKING_HANDLE_ORDER_Pin|SWITCHES_MOVEMENT_ALLOWED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015a0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ae:	4619      	mov	r1, r3
 80015b0:	480d      	ldr	r0, [pc, #52]	@ (80015e8 <MX_GPIO_Init+0x1d0>)
 80015b2:	f006 fbad 	bl	8007d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = SWITCHES_SMGA_Pin|SWITCHES_SYSTEM_ON_OFF_Pin|SWITCHES_CREW_1_Pin|SWITCHES_CREW_2_Pin
 80015b6:	f44f 5378 	mov.w	r3, #15872	@ 0x3e00
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SWITCHES_COCKING_HANDLE_HOME_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ca:	4619      	mov	r1, r3
 80015cc:	4804      	ldr	r0, [pc, #16]	@ (80015e0 <MX_GPIO_Init+0x1c8>)
 80015ce:	f006 fb9f 	bl	8007d10 <HAL_GPIO_Init>

}
 80015d2:	bf00      	nop
 80015d4:	3738      	adds	r7, #56	@ 0x38
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	58024400 	.word	0x58024400
 80015e0:	58021800 	.word	0x58021800
 80015e4:	58021000 	.word	0x58021000
 80015e8:	58020c00 	.word	0x58020c00

080015ec <functionGunControlGetShotInterval>:

// global structer
extern pandoraStructer pandora;

static uint32_t functionGunControlGetShotInterval(uint16_t rpm)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
    return 60000 / rpm;
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80015fc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <functionGunControlInit>:

void functionGunControlInit(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	SOLENOID(SOLENOID_DRV_1,OFF);
 8001610:	2200      	movs	r2, #0
 8001612:	2140      	movs	r1, #64	@ 0x40
 8001614:	480b      	ldr	r0, [pc, #44]	@ (8001644 <functionGunControlInit+0x38>)
 8001616:	f006 fd43 	bl	80080a0 <HAL_GPIO_WritePin>
//	pandora.configurations.solenoidTime 		= pandora.eeprom.solenoidTime;
//	pandora.configurations.solenoidActiveTime  	= pandora.eeprom.solenoidActiveTime;
//	pandora.configurations.solenoidPassiveTime 	= pandora.eeprom.solenoidPassiveTime;
//	pandora.configurations.solenoidFireMode 	= pandora.eeprom.fireMode;

	pandora.states.solenoidActive 		= false;
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <functionGunControlInit+0x3c>)
 800161c:	2200      	movs	r2, #0
 800161e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	pandora.states.triggerHeld 			= false;
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <functionGunControlInit+0x3c>)
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	pandora.states.changeTime 			= 0;
 800162a:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <functionGunControlInit+0x3c>)
 800162c:	2200      	movs	r2, #0
 800162e:	645a      	str	r2, [r3, #68]	@ 0x44
	pandora.states.burstCounter 		= 0;
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <functionGunControlInit+0x3c>)
 8001632:	2200      	movs	r2, #0
 8001634:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	pandora.states.ammoCounter			= 0;
 8001638:	4b03      	ldr	r3, [pc, #12]	@ (8001648 <functionGunControlInit+0x3c>)
 800163a:	2200      	movs	r2, #0
 800163c:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	58021800 	.word	0x58021800
 8001648:	24000624 	.word	0x24000624

0800164c <functionGunControlTriggerPressed>:

void functionGunControlTriggerPressed(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
    pandora.states.triggerHeld = true;
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <functionGunControlTriggerPressed+0x68>)
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    pandora.states.burstCounter = 0;
 8001658:	4b16      	ldr	r3, [pc, #88]	@ (80016b4 <functionGunControlTriggerPressed+0x68>)
 800165a:	2200      	movs	r2, #0
 800165c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pandora.states.changeTime = HAL_GetTick();
 8001660:	f001 feb4 	bl	80033cc <HAL_GetTick>
 8001664:	4603      	mov	r3, r0
 8001666:	4a13      	ldr	r2, [pc, #76]	@ (80016b4 <functionGunControlTriggerPressed+0x68>)
 8001668:	6453      	str	r3, [r2, #68]	@ 0x44

    if (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_SINGLE)
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <functionGunControlTriggerPressed+0x68>)
 800166c:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001670:	2b00      	cmp	r3, #0
 8001672:	d109      	bne.n	8001688 <functionGunControlTriggerPressed+0x3c>
    {
        SOLENOID(SOLENOID_DRV_1,ON);
 8001674:	2201      	movs	r2, #1
 8001676:	2140      	movs	r1, #64	@ 0x40
 8001678:	480f      	ldr	r0, [pc, #60]	@ (80016b8 <functionGunControlTriggerPressed+0x6c>)
 800167a:	f006 fd11 	bl	80080a0 <HAL_GPIO_WritePin>
        pandora.states.solenoidActive = true;
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <functionGunControlTriggerPressed+0x68>)
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    else if (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_3 || pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_5)
    {
        pandora.states.solenoidActive = true;
        SOLENOID(SOLENOID_DRV_1,ON);
    }
}
 8001686:	e012      	b.n	80016ae <functionGunControlTriggerPressed+0x62>
    else if (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_3 || pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_5)
 8001688:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <functionGunControlTriggerPressed+0x68>)
 800168a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800168e:	2b02      	cmp	r3, #2
 8001690:	d004      	beq.n	800169c <functionGunControlTriggerPressed+0x50>
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <functionGunControlTriggerPressed+0x68>)
 8001694:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001698:	2b03      	cmp	r3, #3
 800169a:	d108      	bne.n	80016ae <functionGunControlTriggerPressed+0x62>
        pandora.states.solenoidActive = true;
 800169c:	4b05      	ldr	r3, [pc, #20]	@ (80016b4 <functionGunControlTriggerPressed+0x68>)
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        SOLENOID(SOLENOID_DRV_1,ON);
 80016a4:	2201      	movs	r2, #1
 80016a6:	2140      	movs	r1, #64	@ 0x40
 80016a8:	4803      	ldr	r0, [pc, #12]	@ (80016b8 <functionGunControlTriggerPressed+0x6c>)
 80016aa:	f006 fcf9 	bl	80080a0 <HAL_GPIO_WritePin>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	24000624 	.word	0x24000624
 80016b8:	58021800 	.word	0x58021800

080016bc <functionGunControlTriggerReleased>:

void functionGunControlTriggerReleased(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
    pandora.states.triggerHeld = false;
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <functionGunControlTriggerReleased+0x2c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    pandora.states.solenoidActive = false;
 80016c8:	4b07      	ldr	r3, [pc, #28]	@ (80016e8 <functionGunControlTriggerReleased+0x2c>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    pandora.states.burstCounter = 0;
 80016d0:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <functionGunControlTriggerReleased+0x2c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    SOLENOID(SOLENOID_DRV_1,OFF);
 80016d8:	2200      	movs	r2, #0
 80016da:	2140      	movs	r1, #64	@ 0x40
 80016dc:	4803      	ldr	r0, [pc, #12]	@ (80016ec <functionGunControlTriggerReleased+0x30>)
 80016de:	f006 fcdf 	bl	80080a0 <HAL_GPIO_WritePin>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	24000624 	.word	0x24000624
 80016ec:	58021800 	.word	0x58021800

080016f0 <functionGunControlProcess>:

void functionGunControlProcess(uint32_t now)
{
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    if (!pandora.states.triggerHeld && pandora.canMessages.AKB.commandFireMode != FIRE_MODE_SINGLE) return;
 80016f8:	4bab      	ldr	r3, [pc, #684]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80016fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016fe:	f083 0301 	eor.w	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d005      	beq.n	8001714 <functionGunControlProcess+0x24>
 8001708:	4ba7      	ldr	r3, [pc, #668]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800170a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 813c 	bne.w	800198c <functionGunControlProcess+0x29c>

    switch (pandora.canMessages.AKB.commandFireMode)
 8001714:	4ba4      	ldr	r3, [pc, #656]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001716:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800171a:	2b06      	cmp	r3, #6
 800171c:	f200 8138 	bhi.w	8001990 <functionGunControlProcess+0x2a0>
 8001720:	a201      	add	r2, pc, #4	@ (adr r2, 8001728 <functionGunControlProcess+0x38>)
 8001722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001726:	bf00      	nop
 8001728:	08001745 	.word	0x08001745
 800172c:	08001783 	.word	0x08001783
 8001730:	080017fd 	.word	0x080017fd
 8001734:	080017fd 	.word	0x080017fd
 8001738:	08001861 	.word	0x08001861
 800173c:	080018df 	.word	0x080018df
 8001740:	080018df 	.word	0x080018df
    {
        case FIRE_MODE_SINGLE:
            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidTime)
 8001744:	4b98      	ldr	r3, [pc, #608]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001746:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800174a:	2b00      	cmp	r3, #0
 800174c:	f000 8122 	beq.w	8001994 <functionGunControlProcess+0x2a4>
 8001750:	4b95      	ldr	r3, [pc, #596]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	4a93      	ldr	r2, [pc, #588]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800175a:	f892 207a 	ldrb.w	r2, [r2, #122]	@ 0x7a
 800175e:	4293      	cmp	r3, r2
 8001760:	f0c0 8118 	bcc.w	8001994 <functionGunControlProcess+0x2a4>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001764:	2200      	movs	r2, #0
 8001766:	2140      	movs	r1, #64	@ 0x40
 8001768:	4890      	ldr	r0, [pc, #576]	@ (80019ac <functionGunControlProcess+0x2bc>)
 800176a:	f006 fc99 	bl	80080a0 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 800176e:	4b8e      	ldr	r3, [pc, #568]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
                pandora.states.ammoCounter++;
 8001776:	4b8c      	ldr	r3, [pc, #560]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800177a:	3301      	adds	r3, #1
 800177c:	4a8a      	ldr	r2, [pc, #552]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800177e:	64d3      	str	r3, [r2, #76]	@ 0x4c
            }
            break;
 8001780:	e108      	b.n	8001994 <functionGunControlProcess+0x2a4>

        case FIRE_MODE_FAST_AUTO:
            if (pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidActiveTime)
 8001782:	4b89      	ldr	r3, [pc, #548]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001784:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001788:	2b00      	cmp	r3, #0
 800178a:	d01a      	beq.n	80017c2 <functionGunControlProcess+0xd2>
 800178c:	4b86      	ldr	r3, [pc, #536]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800178e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	4a84      	ldr	r2, [pc, #528]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001796:	f892 207b 	ldrb.w	r2, [r2, #123]	@ 0x7b
 800179a:	4293      	cmp	r3, r2
 800179c:	d311      	bcc.n	80017c2 <functionGunControlProcess+0xd2>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 800179e:	2200      	movs	r2, #0
 80017a0:	2140      	movs	r1, #64	@ 0x40
 80017a2:	4882      	ldr	r0, [pc, #520]	@ (80019ac <functionGunControlProcess+0x2bc>)
 80017a4:	f006 fc7c 	bl	80080a0 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 80017a8:	4b7f      	ldr	r3, [pc, #508]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
                pandora.states.ammoCounter++;
 80017b0:	4b7d      	ldr	r3, [pc, #500]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80017b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a7c      	ldr	r2, [pc, #496]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80017b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
                pandora.states.changeTime = now;
 80017ba:	4a7b      	ldr	r2, [pc, #492]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6453      	str	r3, [r2, #68]	@ 0x44
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
                pandora.states.solenoidActive = true;
                pandora.states.changeTime = now;
            }
            break;
 80017c0:	e0ea      	b.n	8001998 <functionGunControlProcess+0x2a8>
            else if (!pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidPassiveTime)
 80017c2:	4b79      	ldr	r3, [pc, #484]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80017c4:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 80e5 	bne.w	8001998 <functionGunControlProcess+0x2a8>
 80017ce:	4b76      	ldr	r3, [pc, #472]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	4a74      	ldr	r2, [pc, #464]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80017d8:	f892 207c 	ldrb.w	r2, [r2, #124]	@ 0x7c
 80017dc:	4293      	cmp	r3, r2
 80017de:	f0c0 80db 	bcc.w	8001998 <functionGunControlProcess+0x2a8>
            	SOLENOID(SOLENOID_DRV_1,ON);
 80017e2:	2201      	movs	r2, #1
 80017e4:	2140      	movs	r1, #64	@ 0x40
 80017e6:	4871      	ldr	r0, [pc, #452]	@ (80019ac <functionGunControlProcess+0x2bc>)
 80017e8:	f006 fc5a 	bl	80080a0 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 80017ec:	4b6e      	ldr	r3, [pc, #440]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
                pandora.states.changeTime = now;
 80017f4:	4a6c      	ldr	r2, [pc, #432]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 80017fa:	e0cd      	b.n	8001998 <functionGunControlProcess+0x2a8>

        case FIRE_MODE_FAST_BURST_3:
        case FIRE_MODE_FAST_BURST_5:
        {
            uint8_t target = (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_3) ? 3 : 5;
 80017fc:	4b6a      	ldr	r3, [pc, #424]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80017fe:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001802:	2b02      	cmp	r3, #2
 8001804:	d101      	bne.n	800180a <functionGunControlProcess+0x11a>
 8001806:	2303      	movs	r3, #3
 8001808:	e000      	b.n	800180c <functionGunControlProcess+0x11c>
 800180a:	2305      	movs	r3, #5
 800180c:	73bb      	strb	r3, [r7, #14]
            uint32_t burst_duration = functionGunControlGetShotInterval(pandora.canMessages.AKB.solenoidFastRpm) * target;
 800180e:	4b66      	ldr	r3, [pc, #408]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001810:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fee9 	bl	80015ec <functionGunControlGetShotInterval>
 800181a:	4602      	mov	r2, r0
 800181c:	7bbb      	ldrb	r3, [r7, #14]
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	60bb      	str	r3, [r7, #8]

            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= burst_duration)
 8001824:	4b60      	ldr	r3, [pc, #384]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80b6 	beq.w	800199c <functionGunControlProcess+0x2ac>
 8001830:	4b5d      	ldr	r3, [pc, #372]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	429a      	cmp	r2, r3
 800183c:	f200 80ae 	bhi.w	800199c <functionGunControlProcess+0x2ac>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001840:	2200      	movs	r2, #0
 8001842:	2140      	movs	r1, #64	@ 0x40
 8001844:	4859      	ldr	r0, [pc, #356]	@ (80019ac <functionGunControlProcess+0x2bc>)
 8001846:	f006 fc2b 	bl	80080a0 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 800184a:	4b57      	ldr	r3, [pc, #348]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
                pandora.states.ammoCounter += target;
 8001852:	4b55      	ldr	r3, [pc, #340]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001854:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001856:	7bbb      	ldrb	r3, [r7, #14]
 8001858:	4413      	add	r3, r2
 800185a:	4a53      	ldr	r2, [pc, #332]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800185c:	64d3      	str	r3, [r2, #76]	@ 0x4c
            }
            break;
 800185e:	e09d      	b.n	800199c <functionGunControlProcess+0x2ac>
        }

        case FIRE_MODE_SLOW_AUTO:
            if (!pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= functionGunControlGetShotInterval(pandora.canMessages.AKB.solenoidSlowRpm))
 8001860:	4b51      	ldr	r3, [pc, #324]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001862:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <functionGunControlProcess+0x1ae>
 800186a:	4b4f      	ldr	r3, [pc, #316]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	1ad4      	subs	r4, r2, r3
 8001872:	4b4d      	ldr	r3, [pc, #308]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001874:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff feb7 	bl	80015ec <functionGunControlGetShotInterval>
 800187e:	4603      	mov	r3, r0
 8001880:	429c      	cmp	r4, r3
 8001882:	d30c      	bcc.n	800189e <functionGunControlProcess+0x1ae>
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
 8001884:	2201      	movs	r2, #1
 8001886:	2140      	movs	r1, #64	@ 0x40
 8001888:	4848      	ldr	r0, [pc, #288]	@ (80019ac <functionGunControlProcess+0x2bc>)
 800188a:	f006 fc09 	bl	80080a0 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 800188e:	4b46      	ldr	r3, [pc, #280]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001890:	2201      	movs	r2, #1
 8001892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
                pandora.states.changeTime = now;
 8001896:	4a44      	ldr	r2, [pc, #272]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6453      	str	r3, [r2, #68]	@ 0x44
            	SOLENOID(SOLENOID_DRV_1,OFF);
                pandora.states.solenoidActive = false;
                pandora.states.ammoCounter++;
                pandora.states.changeTime = now;
            }
            break;
 800189c:	e080      	b.n	80019a0 <functionGunControlProcess+0x2b0>
            else if (pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidTime)
 800189e:	4b42      	ldr	r3, [pc, #264]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80018a0:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d07b      	beq.n	80019a0 <functionGunControlProcess+0x2b0>
 80018a8:	4b3f      	ldr	r3, [pc, #252]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80018aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4a3d      	ldr	r2, [pc, #244]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80018b2:	f892 207a 	ldrb.w	r2, [r2, #122]	@ 0x7a
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d372      	bcc.n	80019a0 <functionGunControlProcess+0x2b0>
            	SOLENOID(SOLENOID_DRV_1,OFF);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2140      	movs	r1, #64	@ 0x40
 80018be:	483b      	ldr	r0, [pc, #236]	@ (80019ac <functionGunControlProcess+0x2bc>)
 80018c0:	f006 fbee 	bl	80080a0 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 80018c4:	4b38      	ldr	r3, [pc, #224]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
                pandora.states.ammoCounter++;
 80018cc:	4b36      	ldr	r3, [pc, #216]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80018ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d0:	3301      	adds	r3, #1
 80018d2:	4a35      	ldr	r2, [pc, #212]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80018d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
                pandora.states.changeTime = now;
 80018d6:	4a34      	ldr	r2, [pc, #208]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 80018dc:	e060      	b.n	80019a0 <functionGunControlProcess+0x2b0>

        case FIRE_MODE_SLOW_BURST_3:
        case FIRE_MODE_SLOW_BURST_5:
        {
            uint8_t target = (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_SLOW_BURST_3) ? 3 : 5;
 80018de:	4b32      	ldr	r3, [pc, #200]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80018e0:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d101      	bne.n	80018ec <functionGunControlProcess+0x1fc>
 80018e8:	2303      	movs	r3, #3
 80018ea:	e000      	b.n	80018ee <functionGunControlProcess+0x1fe>
 80018ec:	2305      	movs	r3, #5
 80018ee:	73fb      	strb	r3, [r7, #15]
            if (pandora.states.burstCounter >= target) break;
 80018f0:	4b2d      	ldr	r3, [pc, #180]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 80018f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d252      	bcs.n	80019a4 <functionGunControlProcess+0x2b4>

            if (!pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= functionGunControlGetShotInterval(pandora.canMessages.AKB.solenoidSlowRpm))
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001900:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001904:	2b00      	cmp	r3, #0
 8001906:	d119      	bne.n	800193c <functionGunControlProcess+0x24c>
 8001908:	4b27      	ldr	r3, [pc, #156]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800190a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	1ad4      	subs	r4, r2, r3
 8001910:	4b25      	ldr	r3, [pc, #148]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001912:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fe68 	bl	80015ec <functionGunControlGetShotInterval>
 800191c:	4603      	mov	r3, r0
 800191e:	429c      	cmp	r4, r3
 8001920:	d30c      	bcc.n	800193c <functionGunControlProcess+0x24c>
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
 8001922:	2201      	movs	r2, #1
 8001924:	2140      	movs	r1, #64	@ 0x40
 8001926:	4821      	ldr	r0, [pc, #132]	@ (80019ac <functionGunControlProcess+0x2bc>)
 8001928:	f006 fbba 	bl	80080a0 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 800192c:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
                pandora.states.changeTime = now;
 8001934:	4a1c      	ldr	r2, [pc, #112]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6453      	str	r3, [r2, #68]	@ 0x44
                pandora.states.solenoidActive = false;
                pandora.states.ammoCounter++;
                pandora.states.burstCounter++;
                pandora.states.changeTime = now;
            }
            break;
 800193a:	e039      	b.n	80019b0 <functionGunControlProcess+0x2c0>
            else if (pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidTime)
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800193e:	f893 307b 	ldrb.w	r3, [r3, #123]	@ 0x7b
 8001942:	2b00      	cmp	r3, #0
 8001944:	d034      	beq.n	80019b0 <functionGunControlProcess+0x2c0>
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4a16      	ldr	r2, [pc, #88]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001950:	f892 207a 	ldrb.w	r2, [r2, #122]	@ 0x7a
 8001954:	4293      	cmp	r3, r2
 8001956:	d32b      	bcc.n	80019b0 <functionGunControlProcess+0x2c0>
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001958:	2200      	movs	r2, #0
 800195a:	2140      	movs	r1, #64	@ 0x40
 800195c:	4813      	ldr	r0, [pc, #76]	@ (80019ac <functionGunControlProcess+0x2bc>)
 800195e:	f006 fb9f 	bl	80080a0 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
                pandora.states.ammoCounter++;
 800196a:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 800196c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800196e:	3301      	adds	r3, #1
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001972:	64d3      	str	r3, [r2, #76]	@ 0x4c
                pandora.states.burstCounter++;
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001976:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800197a:	3301      	adds	r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001980:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                pandora.states.changeTime = now;
 8001984:	4a08      	ldr	r2, [pc, #32]	@ (80019a8 <functionGunControlProcess+0x2b8>)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 800198a:	e011      	b.n	80019b0 <functionGunControlProcess+0x2c0>
    if (!pandora.states.triggerHeld && pandora.canMessages.AKB.commandFireMode != FIRE_MODE_SINGLE) return;
 800198c:	bf00      	nop
 800198e:	e010      	b.n	80019b2 <functionGunControlProcess+0x2c2>
        }

        default:
            break;
 8001990:	bf00      	nop
 8001992:	e00e      	b.n	80019b2 <functionGunControlProcess+0x2c2>
            break;
 8001994:	bf00      	nop
 8001996:	e00c      	b.n	80019b2 <functionGunControlProcess+0x2c2>
            break;
 8001998:	bf00      	nop
 800199a:	e00a      	b.n	80019b2 <functionGunControlProcess+0x2c2>
            break;
 800199c:	bf00      	nop
 800199e:	e008      	b.n	80019b2 <functionGunControlProcess+0x2c2>
            break;
 80019a0:	bf00      	nop
 80019a2:	e006      	b.n	80019b2 <functionGunControlProcess+0x2c2>
            if (pandora.states.burstCounter >= target) break;
 80019a4:	bf00      	nop
 80019a6:	e004      	b.n	80019b2 <functionGunControlProcess+0x2c2>
 80019a8:	24000624 	.word	0x24000624
 80019ac:	58021800 	.word	0x58021800
            break;
 80019b0:	bf00      	nop
    }
}
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd90      	pop	{r4, r7, pc}

080019b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019bc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_I2C1_Init+0x74>)
 80019be:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <MX_I2C1_Init+0x78>)
 80019c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80019c2:	4b1a      	ldr	r3, [pc, #104]	@ (8001a2c <MX_I2C1_Init+0x74>)
 80019c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a34 <MX_I2C1_Init+0x7c>)
 80019c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019c8:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <MX_I2C1_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ce:	4b17      	ldr	r3, [pc, #92]	@ (8001a2c <MX_I2C1_Init+0x74>)
 80019d0:	2201      	movs	r2, #1
 80019d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019d4:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <MX_I2C1_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019da:	4b14      	ldr	r3, [pc, #80]	@ (8001a2c <MX_I2C1_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019e0:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <MX_I2C1_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e6:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <MX_I2C1_Init+0x74>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <MX_I2C1_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f2:	480e      	ldr	r0, [pc, #56]	@ (8001a2c <MX_I2C1_Init+0x74>)
 80019f4:	f006 fb6e 	bl	80080d4 <HAL_I2C_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019fe:	f000 fab3 	bl	8001f68 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a02:	2100      	movs	r1, #0
 8001a04:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <MX_I2C1_Init+0x74>)
 8001a06:	f006 fc01 	bl	800820c <HAL_I2CEx_ConfigAnalogFilter>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a10:	f000 faaa 	bl	8001f68 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a14:	2100      	movs	r1, #0
 8001a16:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <MX_I2C1_Init+0x74>)
 8001a18:	f006 fc43 	bl	80082a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a22:	f000 faa1 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	240005d0 	.word	0x240005d0
 8001a30:	40005400 	.word	0x40005400
 8001a34:	307075b1 	.word	0x307075b1

08001a38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b0ba      	sub	sp, #232	@ 0xe8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	22c0      	movs	r2, #192	@ 0xc0
 8001a56:	2100      	movs	r1, #0
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f00c f8ab 	bl	800dbb4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a27      	ldr	r2, [pc, #156]	@ (8001b00 <HAL_I2C_MspInit+0xc8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d146      	bne.n	8001af6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a68:	f04f 0208 	mov.w	r2, #8
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f007 fc7c 	bl	800937c <HAL_RCCEx_PeriphCLKConfig>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001a8a:	f000 fa6d 	bl	8001f68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a94:	4a1b      	ldr	r2, [pc, #108]	@ (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001a96:	f043 0302 	orr.w	r3, r3, #2
 8001a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a9e:	4b19      	ldr	r3, [pc, #100]	@ (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa4:	f003 0302 	and.w	r3, r3, #2
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = RTC_I2C_SDA_Pin|RTC_I2C_SCL_Pin;
 8001aac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001ab0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab4:	2312      	movs	r3, #18
 8001ab6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ac6:	2304      	movs	r3, #4
 8001ac8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	480d      	ldr	r0, [pc, #52]	@ (8001b08 <HAL_I2C_MspInit+0xd0>)
 8001ad4:	f006 f91c 	bl	8007d10 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001ada:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ade:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001ae0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ae4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <HAL_I2C_MspInit+0xcc>)
 8001aea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001af6:	bf00      	nop
 8001af8:	37e8      	adds	r7, #232	@ 0xe8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40005400 	.word	0x40005400
 8001b04:	58024400 	.word	0x58024400
 8001b08:	58020400 	.word	0x58020400

08001b0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b10:	f001 fbd6 	bl	80032c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b14:	f000 f94a 	bl	8001dac <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001b18:	f000 f9f6 	bl	8001f08 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b1c:	f7ff fc7c 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b20:	f7ff f990 	bl	8000e44 <MX_DMA_Init>
  MX_BDMA_Init();
 8001b24:	f7ff f80c 	bl	8000b40 <MX_BDMA_Init>
  MX_TIM1_Init();
 8001b28:	f000 fdde 	bl	80026e8 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001b2c:	f7fe fde2 	bl	80006f4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001b30:	f7fe fe46 	bl	80007c0 <MX_ADC3_Init>
  MX_ETH_Init();
 8001b34:	f7ff faaa 	bl	800108c <MX_ETH_Init>
  MX_FDCAN2_Init();
 8001b38:	f7ff fba0 	bl	800127c <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001b3c:	f7ff ff3c 	bl	80019b8 <MX_I2C1_Init>
  MX_UART4_Init();
 8001b40:	f001 f9a8 	bl	8002e94 <MX_UART4_Init>
  MX_UART7_Init();
 8001b44:	f001 f9f2 	bl	8002f2c <MX_UART7_Init>
  MX_ADC1_Init();
 8001b48:	f7fe fd5c 	bl	8000604 <MX_ADC1_Init>
  MX_UART8_Init();
 8001b4c:	f001 fa3a 	bl	8002fc4 <MX_UART8_Init>
  MX_TIM3_Init();
 8001b50:	f000 fe72 	bl	8002838 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001b54:	f000 fe22 	bl	800279c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b58:	f000 fec4 	bl	80028e4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001b5c:	4888      	ldr	r0, [pc, #544]	@ (8001d80 <main+0x274>)
 8001b5e:	f00a f963 	bl	800be28 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001b62:	4888      	ldr	r0, [pc, #544]	@ (8001d84 <main+0x278>)
 8001b64:	f00a f960 	bl	800be28 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, pandora.analogDigitalConverter.hadc1Buffer, 1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4987      	ldr	r1, [pc, #540]	@ (8001d88 <main+0x27c>)
 8001b6c:	4887      	ldr	r0, [pc, #540]	@ (8001d8c <main+0x280>)
 8001b6e:	f001 ffe3 	bl	8003b38 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, pandora.analogDigitalConverter.hadc2Buffer, 1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	4986      	ldr	r1, [pc, #536]	@ (8001d90 <main+0x284>)
 8001b76:	4887      	ldr	r0, [pc, #540]	@ (8001d94 <main+0x288>)
 8001b78:	f001 ffde 	bl	8003b38 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, pandora.analogDigitalConverter.hadc3Buffer, 1);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4986      	ldr	r1, [pc, #536]	@ (8001d98 <main+0x28c>)
 8001b80:	4886      	ldr	r0, [pc, #536]	@ (8001d9c <main+0x290>)
 8001b82:	f001 ffd9 	bl	8003b38 <HAL_ADC_Start_DMA>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b86:	213c      	movs	r1, #60	@ 0x3c
 8001b88:	4885      	ldr	r0, [pc, #532]	@ (8001da0 <main+0x294>)
 8001b8a:	f00a fa6b 	bl	800c064 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim3,0);
 8001b8e:	4b84      	ldr	r3, [pc, #528]	@ (8001da0 <main+0x294>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2200      	movs	r2, #0
 8001b94:	625a      	str	r2, [r3, #36]	@ 0x24
//  pandora.error.isPluggedAKB 	 = (pandora.powerManagement.actualAKBOK 	|| pandora.configurations.overrideAKBOK); // takılı olmadan da çalışabilmesi için override'a bak
//  pandora.error.isPluggedEOS	 = (pandora.powerManagement.actualEOSOK 	|| pandora.configurations.overrideEOSOK);
//  pandora.error.isPluggedHERCULE = (pandora.powerManagement.actualHERCULEOK || pandora.configurations.overrideHERCULEOK);
//  pandora.error.isPluggedKKU	 = (pandora.powerManagement.actualKKUOK	    || pandora.configurations.overrideKKUOK);

  pandora.error.system 			 =!(pandora.error.AKBOK &&
 8001b96:	4b83      	ldr	r3, [pc, #524]	@ (8001da4 <main+0x298>)
 8001b98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d11f      	bne.n	8001be6 <main+0xda>
										pandora.error.EOSOK &&
 8001ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8001da4 <main+0x298>)
 8001ba8:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
  pandora.error.system 			 =!(pandora.error.AKBOK &&
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d117      	bne.n	8001be6 <main+0xda>
											pandora.error.GDBOK &&
 8001bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8001da4 <main+0x298>)
 8001bb8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
										pandora.error.EOSOK &&
 8001bbc:	f083 0301 	eor.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10f      	bne.n	8001be6 <main+0xda>
												pandora.error.HERCULEOK &&
 8001bc6:	4b77      	ldr	r3, [pc, #476]	@ (8001da4 <main+0x298>)
 8001bc8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
											pandora.error.GDBOK &&
 8001bcc:	f083 0301 	eor.w	r3, r3, #1
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d107      	bne.n	8001be6 <main+0xda>
													pandora.error.KKUOK);
 8001bd6:	4b73      	ldr	r3, [pc, #460]	@ (8001da4 <main+0x298>)
 8001bd8:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
												pandora.error.HERCULEOK &&
 8001bdc:	f083 0301 	eor.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
  pandora.error.system 			 =!(pandora.error.AKBOK &&
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <main+0xde>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <main+0xe0>
 8001bea:	2300      	movs	r3, #0
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4b6c      	ldr	r3, [pc, #432]	@ (8001da4 <main+0x298>)
 8001bf4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /*
   * 	SWITCHES CHECK
   */

  pandora.states.firePermission = !pandora.switches.switches_smga;
 8001bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8001da4 <main+0x298>)
 8001bfa:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf14      	ite	ne
 8001c02:	2301      	movne	r3, #1
 8001c04:	2300      	moveq	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f083 0301 	eor.w	r3, r3, #1
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	4b63      	ldr	r3, [pc, #396]	@ (8001da4 <main+0x298>)
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /*
   * 	SYSTEM CHECK
   */
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  functionGunControlInit();
 8001c1a:	f7ff fcf7 	bl	800160c <functionGunControlInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startTimeScanFlags();
 8001c1e:	f001 f86b 	bl	8002cf8 <startTimeScanFlags>

	  functionReadFilteredDigitalInputs();
 8001c22:	f000 f9a7 	bl	8001f74 <functionReadFilteredDigitalInputs>

	  if(_100msFlag)
 8001c26:	4b60      	ldr	r3, [pc, #384]	@ (8001da8 <main+0x29c>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <main+0x132>
	  {
		  //huzeyfepiroglu
		  functionMeasureVoltage();
 8001c2e:	f000 fb4f 	bl	80022d0 <functionMeasureVoltage>
		  functionMeasureCurrent();
 8001c32:	f000 fb81 	bl	8002338 <functionMeasureCurrent>

		  functionErrorCurrentVoltageCheck();
 8001c36:	f7ff f92d 	bl	8000e94 <functionErrorCurrentVoltageCheck>
		  functionErrorMosfetCheck();
 8001c3a:	f7ff f98f 	bl	8000f5c <functionErrorMosfetCheck>
	  }

	  if(!pandora.error.system 						&&
 8001c3e:	4b59      	ldr	r3, [pc, #356]	@ (8001da4 <main+0x298>)
 8001c40:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001c44:	f083 0301 	eor.w	r3, r3, #1
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d039      	beq.n	8001cc2 <main+0x1b6>
		 pandora.gun.cockingHandle.armed 			&&
 8001c4e:	4b55      	ldr	r3, [pc, #340]	@ (8001da4 <main+0x298>)
 8001c50:	79db      	ldrb	r3, [r3, #7]
	  if(!pandora.error.system 						&&
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d035      	beq.n	8001cc2 <main+0x1b6>
	  	 pandora.switches.switches_movement_allowed &&
 8001c56:	4b53      	ldr	r3, [pc, #332]	@ (8001da4 <main+0x298>)
 8001c58:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
		 pandora.gun.cockingHandle.armed 			&&
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d030      	beq.n	8001cc2 <main+0x1b6>
		 pandora.switches.switches_safety 			&&
 8001c60:	4b50      	ldr	r3, [pc, #320]	@ (8001da4 <main+0x298>)
 8001c62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
	  	 pandora.switches.switches_movement_allowed &&
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d02b      	beq.n	8001cc2 <main+0x1b6>
		 (!pandora.switches.switches_smga || pandora.canMessages.AKB.commandSmgaOveride) &&
 8001c6a:	4b4e      	ldr	r3, [pc, #312]	@ (8001da4 <main+0x298>)
 8001c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
		 pandora.switches.switches_safety 			&&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d104      	bne.n	8001c84 <main+0x178>
		 (!pandora.switches.switches_smga || pandora.canMessages.AKB.commandSmgaOveride) &&
 8001c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001da4 <main+0x298>)
 8001c7c:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01e      	beq.n	8001cc2 <main+0x1b6>
		 pandora.switches.switches_fire_order 		&&
 8001c84:	4b47      	ldr	r3, [pc, #284]	@ (8001da4 <main+0x298>)
 8001c86:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
		 (!pandora.switches.switches_smga || pandora.canMessages.AKB.commandSmgaOveride) &&
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d019      	beq.n	8001cc2 <main+0x1b6>
		 !pandora.canMessages.AKB.commandEmergencyStop 				&&
 8001c8e:	4b45      	ldr	r3, [pc, #276]	@ (8001da4 <main+0x298>)
 8001c90:	f893 3067 	ldrb.w	r3, [r3, #103]	@ 0x67
 8001c94:	f083 0301 	eor.w	r3, r3, #1
 8001c98:	b2db      	uxtb	r3, r3
		 pandora.switches.switches_fire_order 		&&
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d011      	beq.n	8001cc2 <main+0x1b6>
		 (!pandora.canMessages.AKB.commandFireBlockedArea || pandora.canMessages.AKB.commandFireBlockedAreaOveride))
 8001c9e:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <main+0x298>)
 8001ca0:	f893 3071 	ldrb.w	r3, [r3, #113]	@ 0x71
 8001ca4:	f083 0301 	eor.w	r3, r3, #1
 8001ca8:	b2db      	uxtb	r3, r3
		 !pandora.canMessages.AKB.commandEmergencyStop 				&&
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d104      	bne.n	8001cb8 <main+0x1ac>
		 (!pandora.canMessages.AKB.commandFireBlockedArea || pandora.canMessages.AKB.commandFireBlockedAreaOveride))
 8001cae:	4b3d      	ldr	r3, [pc, #244]	@ (8001da4 <main+0x298>)
 8001cb0:	f893 3063 	ldrb.w	r3, [r3, #99]	@ 0x63
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d004      	beq.n	8001cc2 <main+0x1b6>
	  {
		  pandora.states.firePermission = true;
 8001cb8:	4b3a      	ldr	r3, [pc, #232]	@ (8001da4 <main+0x298>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cc0:	e003      	b.n	8001cca <main+0x1be>
	  }
	  else
	  {
		  pandora.states.firePermission = false;
 8001cc2:	4b38      	ldr	r3, [pc, #224]	@ (8001da4 <main+0x298>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	  }

	  /* COCKING HANDLE LOOP BEGIN */
	  if(pandora.gun.cockingHandle.motorState != IDLE)
 8001cca:	4b36      	ldr	r3, [pc, #216]	@ (8001da4 <main+0x298>)
 8001ccc:	795b      	ldrb	r3, [r3, #5]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d002      	beq.n	8001cd8 <main+0x1cc>
	  {
		  functionEncoderRead(&htim3);
 8001cd2:	4833      	ldr	r0, [pc, #204]	@ (8001da0 <main+0x294>)
 8001cd4:	f7ff f878 	bl	8000dc8 <functionEncoderRead>
	  }

	  if(pandora.switches.switches_cocking_handle_order && pandora.switches.switches_safety && !pandora.gun.cockingHandle.armed)
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <main+0x298>)
 8001cda:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00e      	beq.n	8001d00 <main+0x1f4>
 8001ce2:	4b30      	ldr	r3, [pc, #192]	@ (8001da4 <main+0x298>)
 8001ce4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d009      	beq.n	8001d00 <main+0x1f4>
 8001cec:	4b2d      	ldr	r3, [pc, #180]	@ (8001da4 <main+0x298>)
 8001cee:	79db      	ldrb	r3, [r3, #7]
 8001cf0:	f083 0301 	eor.w	r3, r3, #1
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <main+0x1f4>
	  {
		  functionCockingHandleGoArm();
 8001cfa:	f7fe fff5 	bl	8000ce8 <functionCockingHandleGoArm>
 8001cfe:	e010      	b.n	8001d22 <main+0x216>
	  }

	  else if (!pandora.switches.switches_safety && !pandora.gun.cockingHandle.safe)
 8001d00:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <main+0x298>)
 8001d02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001d06:	f083 0301 	eor.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <main+0x216>
 8001d10:	4b24      	ldr	r3, [pc, #144]	@ (8001da4 <main+0x298>)
 8001d12:	7a1b      	ldrb	r3, [r3, #8]
 8001d14:	f083 0301 	eor.w	r3, r3, #1
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <main+0x216>
	  {
		  functionCockingHandleGoSafe();
 8001d1e:	f7fe ffa1 	bl	8000c64 <functionCockingHandleGoSafe>
	  }
	  /* COCKING HANDLE LOOP END */

	  /* SOLENOID LOOP BEGIN */
	  functionGunControlProcess(HAL_GetTick());
 8001d22:	f001 fb53 	bl	80033cc <HAL_GetTick>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fce1 	bl	80016f0 <functionGunControlProcess>

	  if((pandora.switches.switches_fire_order ||  pandora.canMessages.AKB.commandGunFireOveride)		&&   // ama bence tehlikeli
 8001d2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001da4 <main+0x298>)
 8001d30:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d104      	bne.n	8001d42 <main+0x236>
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <main+0x298>)
 8001d3a:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d019      	beq.n	8001d76 <main+0x26a>
		 pandora.switches.switches_safety 			&&
 8001d42:	4b18      	ldr	r3, [pc, #96]	@ (8001da4 <main+0x298>)
 8001d44:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
	  if((pandora.switches.switches_fire_order ||  pandora.canMessages.AKB.commandGunFireOveride)		&&   // ama bence tehlikeli
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d014      	beq.n	8001d76 <main+0x26a>
		 pandora.switches.switches_movement_allowed &&
 8001d4c:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <main+0x298>)
 8001d4e:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
		 pandora.switches.switches_safety 			&&
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00f      	beq.n	8001d76 <main+0x26a>
		(!pandora.switches.switches_smga || pandora.states.overrideSmga)) // atış emniyet anahtarı ve hareket anahtarı
 8001d56:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <main+0x298>)
 8001d58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001d5c:	f083 0301 	eor.w	r3, r3, #1
 8001d60:	b2db      	uxtb	r3, r3
		 pandora.switches.switches_movement_allowed &&
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d104      	bne.n	8001d70 <main+0x264>
		(!pandora.switches.switches_smga || pandora.states.overrideSmga)) // atış emniyet anahtarı ve hareket anahtarı
 8001d66:	4b0f      	ldr	r3, [pc, #60]	@ (8001da4 <main+0x298>)
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <main+0x26a>
	  {
		  functionGunControlTriggerPressed();
 8001d70:	f7ff fc6c 	bl	800164c <functionGunControlTriggerPressed>
 8001d74:	e001      	b.n	8001d7a <main+0x26e>
	  }
	  else
	  {
		  functionGunControlTriggerReleased();
 8001d76:	f7ff fca1 	bl	80016bc <functionGunControlTriggerReleased>
	  }
	  /* SOLENOID LOOP END */

	  clearTimeScanFlags();
 8001d7a:	f001 f851 	bl	8002e20 <clearTimeScanFlags>
	  startTimeScanFlags();
 8001d7e:	e74e      	b.n	8001c1e <main+0x112>
 8001d80:	2400074c 	.word	0x2400074c
 8001d84:	240007e4 	.word	0x240007e4
 8001d88:	240006e0 	.word	0x240006e0
 8001d8c:	240001a4 	.word	0x240001a4
 8001d90:	240006e8 	.word	0x240006e8
 8001d94:	24000208 	.word	0x24000208
 8001d98:	240006f0 	.word	0x240006f0
 8001d9c:	2400026c 	.word	0x2400026c
 8001da0:	24000798 	.word	0x24000798
 8001da4:	24000624 	.word	0x24000624
 8001da8:	2400084d 	.word	0x2400084d

08001dac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b09e      	sub	sp, #120	@ 0x78
 8001db0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001db6:	224c      	movs	r2, #76	@ 0x4c
 8001db8:	2100      	movs	r1, #0
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f00b fefa 	bl	800dbb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f00b fef3 	bl	800dbb4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f006 fab4 	bl	800833c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	4b48      	ldr	r3, [pc, #288]	@ (8001efc <SystemClock_Config+0x150>)
 8001dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ddc:	4a47      	ldr	r2, [pc, #284]	@ (8001efc <SystemClock_Config+0x150>)
 8001dde:	f023 0301 	bic.w	r3, r3, #1
 8001de2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001de4:	4b45      	ldr	r3, [pc, #276]	@ (8001efc <SystemClock_Config+0x150>)
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b44      	ldr	r3, [pc, #272]	@ (8001f00 <SystemClock_Config+0x154>)
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	4a43      	ldr	r2, [pc, #268]	@ (8001f00 <SystemClock_Config+0x154>)
 8001df4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001df8:	6193      	str	r3, [r2, #24]
 8001dfa:	4b41      	ldr	r3, [pc, #260]	@ (8001f00 <SystemClock_Config+0x154>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e06:	bf00      	nop
 8001e08:	4b3d      	ldr	r3, [pc, #244]	@ (8001f00 <SystemClock_Config+0x154>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e14:	d1f8      	bne.n	8001e08 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e16:	4b3b      	ldr	r3, [pc, #236]	@ (8001f04 <SystemClock_Config+0x158>)
 8001e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e1c:	4a39      	ldr	r2, [pc, #228]	@ (8001f04 <SystemClock_Config+0x158>)
 8001e1e:	f043 0302 	orr.w	r3, r3, #2
 8001e22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e26:	4b37      	ldr	r3, [pc, #220]	@ (8001f04 <SystemClock_Config+0x158>)
 8001e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001e34:	2300      	movs	r3, #0
 8001e36:	603b      	str	r3, [r7, #0]
 8001e38:	4b31      	ldr	r3, [pc, #196]	@ (8001f00 <SystemClock_Config+0x154>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	4a30      	ldr	r2, [pc, #192]	@ (8001f00 <SystemClock_Config+0x154>)
 8001e3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e42:	6193      	str	r3, [r2, #24]
 8001e44:	4b2e      	ldr	r3, [pc, #184]	@ (8001f00 <SystemClock_Config+0x154>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001efc <SystemClock_Config+0x150>)
 8001e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e52:	4a2a      	ldr	r2, [pc, #168]	@ (8001efc <SystemClock_Config+0x150>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001e5a:	4b28      	ldr	r3, [pc, #160]	@ (8001efc <SystemClock_Config+0x150>)
 8001e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e66:	bf00      	nop
 8001e68:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <SystemClock_Config+0x154>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001e74:	d1f8      	bne.n	8001e68 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e76:	2301      	movs	r3, #1
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e80:	2302      	movs	r3, #2
 8001e82:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e84:	2302      	movs	r3, #2
 8001e86:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001e8c:	2350      	movs	r3, #80	@ 0x50
 8001e8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001e94:	2308      	movs	r3, #8
 8001e96:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e9c:	230c      	movs	r3, #12
 8001e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eac:	4618      	mov	r0, r3
 8001eae:	f006 fa7f 	bl	80083b0 <HAL_RCC_OscConfig>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001eb8:	f000 f856 	bl	8001f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ebc:	233f      	movs	r3, #63	@ 0x3f
 8001ebe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001ec8:	2308      	movs	r3, #8
 8001eca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ecc:	2340      	movs	r3, #64	@ 0x40
 8001ece:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001ed0:	2340      	movs	r3, #64	@ 0x40
 8001ed2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ed4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001eda:	2340      	movs	r3, #64	@ 0x40
 8001edc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ede:	f107 030c 	add.w	r3, r7, #12
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f006 febd 	bl	8008c64 <HAL_RCC_ClockConfig>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001ef0:	f000 f83a 	bl	8001f68 <Error_Handler>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3778      	adds	r7, #120	@ 0x78
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	58000400 	.word	0x58000400
 8001f00:	58024800 	.word	0x58024800
 8001f04:	58024400 	.word	0x58024400

08001f08 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0b0      	sub	sp, #192	@ 0xc0
 8001f0c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0e:	463b      	mov	r3, r7
 8001f10:	22c0      	movs	r2, #192	@ 0xc0
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f00b fe4d 	bl	800dbb4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001f1a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001f26:	2302      	movs	r3, #2
 8001f28:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001f2a:	230c      	movs	r3, #12
 8001f2c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f32:	2302      	movs	r3, #2
 8001f34:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f3a:	23c0      	movs	r3, #192	@ 0xc0
 8001f3c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f4e:	463b      	mov	r3, r7
 8001f50:	4618      	mov	r0, r3
 8001f52:	f007 fa13 	bl	800937c <HAL_RCCEx_PeriphCLKConfig>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001f5c:	f000 f804 	bl	8001f68 <Error_Handler>
  }
}
 8001f60:	bf00      	nop
 8001f62:	37c0      	adds	r7, #192	@ 0xc0
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f6c:	b672      	cpsid	i
}
 8001f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f70:	bf00      	nop
 8001f72:	e7fd      	b.n	8001f70 <Error_Handler+0x8>

08001f74 <functionReadFilteredDigitalInputs>:


//digitalInput switchesArray[BUTTON_COUNT];   // Global tanım

void functionReadFilteredDigitalInputs(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
    for(uint32_t i = 0; i < SWITCHES_COUNT; i++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
 8001f7e:	e0f8      	b.n	8002172 <functionReadFilteredDigitalInputs+0x1fe>
    {
        if(switchesArray[i].readFlag == true)
 8001f80:	49b1      	ldr	r1, [pc, #708]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	3301      	adds	r3, #1
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80ea 	beq.w	800216c <functionReadFilteredDigitalInputs+0x1f8>
        {
            if(switchesArray[i].readState == false)
 8001f98:	49ab      	ldr	r1, [pc, #684]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3308      	adds	r3, #8
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d165      	bne.n	800207a <functionReadFilteredDigitalInputs+0x106>
            {
                if(switchesArray[i].inputVal == false)
 8001fae:	49a6      	ldr	r1, [pc, #664]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d150      	bne.n	8002064 <functionReadFilteredDigitalInputs+0xf0>
                {
                    if(switchesArray[i].debounceTimer < switchesArray[i].debounceFactor)
 8001fc2:	49a1      	ldr	r1, [pc, #644]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	330c      	adds	r3, #12
 8001fd2:	6819      	ldr	r1, [r3, #0]
 8001fd4:	489c      	ldr	r0, [pc, #624]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	4413      	add	r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4403      	add	r3, r0
 8001fe2:	3310      	adds	r3, #16
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4299      	cmp	r1, r3
 8001fe8:	d212      	bcs.n	8002010 <functionReadFilteredDigitalInputs+0x9c>
                    {
                        switchesArray[i].debounceTimer++;
 8001fea:	4997      	ldr	r1, [pc, #604]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1c59      	adds	r1, r3, #1
 8001ffe:	4892      	ldr	r0, [pc, #584]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002000:	687a      	ldr	r2, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4403      	add	r3, r0
 800200c:	330c      	adds	r3, #12
 800200e:	6019      	str	r1, [r3, #0]
                    }
                    if(switchesArray[i].debounceTimer >= switchesArray[i].debounceFactor)
 8002010:	498d      	ldr	r1, [pc, #564]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	440b      	add	r3, r1
 800201e:	330c      	adds	r3, #12
 8002020:	6819      	ldr	r1, [r3, #0]
 8002022:	4889      	ldr	r0, [pc, #548]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4403      	add	r3, r0
 8002030:	3310      	adds	r3, #16
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4299      	cmp	r1, r3
 8002036:	f0c0 808f 	bcc.w	8002158 <functionReadFilteredDigitalInputs+0x1e4>
                    {
                        switchesArray[i].debounceTimer = 0;
 800203a:	4983      	ldr	r1, [pc, #524]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	330c      	adds	r3, #12
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
                        switchesArray[i].readState = true;
 800204e:	497e      	ldr	r1, [pc, #504]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3308      	adds	r3, #8
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
 8002062:	e079      	b.n	8002158 <functionReadFilteredDigitalInputs+0x1e4>
                    }
                }
                else
                {
                    switchesArray[i].debounceTimer = 0;
 8002064:	4978      	ldr	r1, [pc, #480]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	330c      	adds	r3, #12
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	e06e      	b.n	8002158 <functionReadFilteredDigitalInputs+0x1e4>
                }
            }
            else if(switchesArray[i].readState == true)
 800207a:	4973      	ldr	r1, [pc, #460]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	3308      	adds	r3, #8
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d163      	bne.n	8002158 <functionReadFilteredDigitalInputs+0x1e4>
            {
                if(switchesArray[i].inputVal == true)
 8002090:	496d      	ldr	r1, [pc, #436]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d14f      	bne.n	8002144 <functionReadFilteredDigitalInputs+0x1d0>
                {
                    if(switchesArray[i].debounceTimer < switchesArray[i].debounceFactor)
 80020a4:	4968      	ldr	r1, [pc, #416]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	330c      	adds	r3, #12
 80020b4:	6819      	ldr	r1, [r3, #0]
 80020b6:	4864      	ldr	r0, [pc, #400]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4403      	add	r3, r0
 80020c4:	3310      	adds	r3, #16
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4299      	cmp	r1, r3
 80020ca:	d212      	bcs.n	80020f2 <functionReadFilteredDigitalInputs+0x17e>
                    {
                        switchesArray[i].debounceTimer++;
 80020cc:	495e      	ldr	r1, [pc, #376]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	330c      	adds	r3, #12
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	1c59      	adds	r1, r3, #1
 80020e0:	4859      	ldr	r0, [pc, #356]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4403      	add	r3, r0
 80020ee:	330c      	adds	r3, #12
 80020f0:	6019      	str	r1, [r3, #0]
                    }
                    if(switchesArray[i].debounceTimer >= switchesArray[i].debounceFactor)
 80020f2:	4955      	ldr	r1, [pc, #340]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	330c      	adds	r3, #12
 8002102:	6819      	ldr	r1, [r3, #0]
 8002104:	4850      	ldr	r0, [pc, #320]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	4613      	mov	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4403      	add	r3, r0
 8002112:	3310      	adds	r3, #16
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4299      	cmp	r1, r3
 8002118:	d31e      	bcc.n	8002158 <functionReadFilteredDigitalInputs+0x1e4>
                    {
                        switchesArray[i].debounceTimer = 0;
 800211a:	494b      	ldr	r1, [pc, #300]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	330c      	adds	r3, #12
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
                        switchesArray[i].readState = false;
 800212e:	4946      	ldr	r1, [pc, #280]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	3308      	adds	r3, #8
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]
 8002142:	e009      	b.n	8002158 <functionReadFilteredDigitalInputs+0x1e4>
                    }
                }
                else
                {
                    switchesArray[i].debounceTimer = 0;
 8002144:	4940      	ldr	r1, [pc, #256]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	330c      	adds	r3, #12
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
                }
            }

            switchesArray[i].readFlag = false;
 8002158:	493b      	ldr	r1, [pc, #236]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3301      	adds	r3, #1
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
    for(uint32_t i = 0; i < SWITCHES_COUNT; i++)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3301      	adds	r3, #1
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b08      	cmp	r3, #8
 8002176:	f67f af03 	bls.w	8001f80 <functionReadFilteredDigitalInputs+0xc>
        }
    }

    pandora.switches.switches_safety 				= switchesArray[FIRE_SAFETY_SWITCH			].readState;
 800217a:	4b33      	ldr	r3, [pc, #204]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 800217c:	7a1b      	ldrb	r3, [r3, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	bf14      	ite	ne
 8002182:	2301      	movne	r3, #1
 8002184:	2300      	moveq	r3, #0
 8002186:	b2da      	uxtb	r2, r3
 8002188:	4b30      	ldr	r3, [pc, #192]	@ (800224c <functionReadFilteredDigitalInputs+0x2d8>)
 800218a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    pandora.switches.switches_cocking_handle_order 	= switchesArray[COCKING_HANDLE_SWITCH		].readState;
 800218e:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002190:	7f1b      	ldrb	r3, [r3, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	bf14      	ite	ne
 8002196:	2301      	movne	r3, #1
 8002198:	2300      	moveq	r3, #0
 800219a:	b2da      	uxtb	r2, r3
 800219c:	4b2b      	ldr	r3, [pc, #172]	@ (800224c <functionReadFilteredDigitalInputs+0x2d8>)
 800219e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
    pandora.switches.switches_movement_allowed 		= switchesArray[MOVEMENT_SWITCH				].readState;
 80021a2:	4b29      	ldr	r3, [pc, #164]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 80021a4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf14      	ite	ne
 80021ac:	2301      	movne	r3, #1
 80021ae:	2300      	moveq	r3, #0
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	4b26      	ldr	r3, [pc, #152]	@ (800224c <functionReadFilteredDigitalInputs+0x2d8>)
 80021b4:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    pandora.switches.switches_fire_order 			= switchesArray[FIRE_ORDER_SWITCH			].readState;
 80021b8:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 80021ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80021be:	2b00      	cmp	r3, #0
 80021c0:	bf14      	ite	ne
 80021c2:	2301      	movne	r3, #1
 80021c4:	2300      	moveq	r3, #0
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b20      	ldr	r3, [pc, #128]	@ (800224c <functionReadFilteredDigitalInputs+0x2d8>)
 80021ca:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    pandora.switches.switches_system_on_off 		= switchesArray[SYSTEM_ON_OFF_SWITCH		].readState;
 80021ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 80021d0:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	bf14      	ite	ne
 80021d8:	2301      	movne	r3, #1
 80021da:	2300      	moveq	r3, #0
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b1b      	ldr	r3, [pc, #108]	@ (800224c <functionReadFilteredDigitalInputs+0x2d8>)
 80021e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    pandora.switches.switches_smga 					= switchesArray[SMGA_SWITCH					].readState;
 80021e4:	4b18      	ldr	r3, [pc, #96]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 80021e6:	f893 306c 	ldrb.w	r3, [r3, #108]	@ 0x6c
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	bf14      	ite	ne
 80021ee:	2301      	movne	r3, #1
 80021f0:	2300      	moveq	r3, #0
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	4b15      	ldr	r3, [pc, #84]	@ (800224c <functionReadFilteredDigitalInputs+0x2d8>)
 80021f6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    pandora.switches.switches_cocking_handle_home 	= switchesArray[COCKING_HANDLE_HOME_SWITCH	].readState;
 80021fa:	4b13      	ldr	r3, [pc, #76]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 80021fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8002200:	2b00      	cmp	r3, #0
 8002202:	bf14      	ite	ne
 8002204:	2301      	movne	r3, #1
 8002206:	2300      	moveq	r3, #0
 8002208:	b2da      	uxtb	r2, r3
 800220a:	4b10      	ldr	r3, [pc, #64]	@ (800224c <functionReadFilteredDigitalInputs+0x2d8>)
 800220c:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    pandora.switches.switches_crew_1 				= switchesArray[CREW_1_SWITCH				].readState;
 8002210:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002212:	f893 3094 	ldrb.w	r3, [r3, #148]	@ 0x94
 8002216:	2b00      	cmp	r3, #0
 8002218:	bf14      	ite	ne
 800221a:	2301      	movne	r3, #1
 800221c:	2300      	moveq	r3, #0
 800221e:	b2da      	uxtb	r2, r3
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <functionReadFilteredDigitalInputs+0x2d8>)
 8002222:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
    pandora.switches.switches_crew_2 				= switchesArray[CREW_2_SWITCH				].readState;
 8002226:	4b08      	ldr	r3, [pc, #32]	@ (8002248 <functionReadFilteredDigitalInputs+0x2d4>)
 8002228:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf14      	ite	ne
 8002230:	2301      	movne	r3, #1
 8002232:	2300      	moveq	r3, #0
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4b05      	ldr	r3, [pc, #20]	@ (800224c <functionReadFilteredDigitalInputs+0x2d8>)
 8002238:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

}
 800223c:	bf00      	nop
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	24000000 	.word	0x24000000
 800224c:	24000624 	.word	0x24000624

08002250 <functionReadDigitalInputs>:

void functionReadDigitalInputs(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
    for(uint32_t i = 0; i < SWITCHES_COUNT; i++)
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	e02c      	b.n	80022b6 <functionReadDigitalInputs+0x66>
    {
        switchesArray[i].inputVal = HAL_GPIO_ReadPin(switchesArray[i].inputPort, switchesArray[i].inputPin);
 800225c:	491a      	ldr	r1, [pc, #104]	@ (80022c8 <functionReadDigitalInputs+0x78>)
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	440b      	add	r3, r1
 800226a:	3304      	adds	r3, #4
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	4916      	ldr	r1, [pc, #88]	@ (80022c8 <functionReadDigitalInputs+0x78>)
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	440b      	add	r3, r1
 800227c:	3302      	adds	r3, #2
 800227e:	881b      	ldrh	r3, [r3, #0]
 8002280:	4619      	mov	r1, r3
 8002282:	f005 fef5 	bl	8008070 <HAL_GPIO_ReadPin>
 8002286:	4603      	mov	r3, r0
 8002288:	4618      	mov	r0, r3
 800228a:	490f      	ldr	r1, [pc, #60]	@ (80022c8 <functionReadDigitalInputs+0x78>)
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	4602      	mov	r2, r0
 800229a:	701a      	strb	r2, [r3, #0]
        switchesArray[i].readFlag = true;
 800229c:	490a      	ldr	r1, [pc, #40]	@ (80022c8 <functionReadDigitalInputs+0x78>)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	3301      	adds	r3, #1
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
    for(uint32_t i = 0; i < SWITCHES_COUNT; i++)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3301      	adds	r3, #1
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2b08      	cmp	r3, #8
 80022ba:	d9cf      	bls.n	800225c <functionReadDigitalInputs+0xc>
    }
}
 80022bc:	bf00      	nop
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	24000000 	.word	0x24000000
 80022cc:	00000000 	.word	0x00000000

080022d0 <functionMeasureVoltage>:
 * 28 Volt için 0.935 Volt #28/0.935#=29.94652 				Katsayı
 * #3.3/65535# = 0.000050354 								1 Bite Gelen Volt Değeri
 * VOLTAGE = ((ADC_VALUE * 3.3)/65535)*(28/0.935)			Formül
 */
void functionMeasureVoltage(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
	pandora.powerManagement.BATVoltage = (((pandora.analogDigitalConverter.hadc3Buffer[3])*3.3)/65535)*(28/0.935);
 80022d4:	4b16      	ldr	r3, [pc, #88]	@ (8002330 <functionMeasureVoltage+0x60>)
 80022d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80022e2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8002318 <functionMeasureVoltage+0x48>
 80022e6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80022ea:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 8002320 <functionMeasureVoltage+0x50>
 80022ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80022f2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8002328 <functionMeasureVoltage+0x58>
 80022f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80022fe:	ee17 2a90 	vmov	r2, s15
 8002302:	4b0b      	ldr	r3, [pc, #44]	@ (8002330 <functionMeasureVoltage+0x60>)
 8002304:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	f3af 8000 	nop.w
 8002318:	66666666 	.word	0x66666666
 800231c:	400a6666 	.word	0x400a6666
 8002320:	00000000 	.word	0x00000000
 8002324:	40efffe0 	.word	0x40efffe0
 8002328:	66ac7df2 	.word	0x66ac7df2
 800232c:	403df24f 	.word	0x403df24f
 8002330:	24000624 	.word	0x24000624
 8002334:	00000000 	.word	0x00000000

08002338 <functionMeasureCurrent>:
 * CURRENT = ((ADC_VALUE * 3.3)/65535)*(5/0.8)				Formül
 */


void functionMeasureCurrent(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
	pandora.powerManagement.SCurrent 				= ((pandora.analogDigitalConverter.hadc3Buffer[2] * 3.3)/65535)*(5/0.8); // #DÜZENLE KESME DEĞERLERİNİ
 800233c:	4b62      	ldr	r3, [pc, #392]	@ (80024c8 <functionMeasureCurrent+0x190>)
 800233e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8002342:	ee07 3a90 	vmov	s15, r3
 8002346:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800234a:	ed9f 6b5b 	vldr	d6, [pc, #364]	@ 80024b8 <functionMeasureCurrent+0x180>
 800234e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002352:	ed9f 5b5b 	vldr	d5, [pc, #364]	@ 80024c0 <functionMeasureCurrent+0x188>
 8002356:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800235a:	eeb1 6b09 	vmov.f64	d6, #25	@ 0x40c80000  6.250
 800235e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002362:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002366:	ee17 2a90 	vmov	r2, s15
 800236a:	4b57      	ldr	r3, [pc, #348]	@ (80024c8 <functionMeasureCurrent+0x190>)
 800236c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	pandora.powerManagement.CHCurrent 				= ((pandora.analogDigitalConverter.hadc3Buffer[0] * 3.3)/65535)*(5/0.8);
 8002370:	4b55      	ldr	r3, [pc, #340]	@ (80024c8 <functionMeasureCurrent+0x190>)
 8002372:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002376:	ee07 3a90 	vmov	s15, r3
 800237a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800237e:	ed9f 6b4e 	vldr	d6, [pc, #312]	@ 80024b8 <functionMeasureCurrent+0x180>
 8002382:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002386:	ed9f 5b4e 	vldr	d5, [pc, #312]	@ 80024c0 <functionMeasureCurrent+0x188>
 800238a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800238e:	eeb1 6b09 	vmov.f64	d6, #25	@ 0x40c80000  6.250
 8002392:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002396:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800239a:	ee17 2a90 	vmov	r2, s15
 800239e:	4b4a      	ldr	r3, [pc, #296]	@ (80024c8 <functionMeasureCurrent+0x190>)
 80023a0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
	pandora.powerManagement.HERCULECurrent 			= ((pandora.analogDigitalConverter.hadc2Buffer[1] * 3.3)/65535)*(5/0.8);
 80023a4:	4b48      	ldr	r3, [pc, #288]	@ (80024c8 <functionMeasureCurrent+0x190>)
 80023a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023b2:	ed9f 6b41 	vldr	d6, [pc, #260]	@ 80024b8 <functionMeasureCurrent+0x180>
 80023b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023ba:	ed9f 5b41 	vldr	d5, [pc, #260]	@ 80024c0 <functionMeasureCurrent+0x188>
 80023be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023c2:	eeb1 6b09 	vmov.f64	d6, #25	@ 0x40c80000  6.250
 80023c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023ca:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80023ce:	ee17 2a90 	vmov	r2, s15
 80023d2:	4b3d      	ldr	r3, [pc, #244]	@ (80024c8 <functionMeasureCurrent+0x190>)
 80023d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
	pandora.powerManagement.AKBCurrent 				= ((pandora.analogDigitalConverter.hadc2Buffer[0] * 3.3)/65535)*(5/0.8);
 80023d8:	4b3b      	ldr	r3, [pc, #236]	@ (80024c8 <functionMeasureCurrent+0x190>)
 80023da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80023de:	ee07 3a90 	vmov	s15, r3
 80023e2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80023e6:	ed9f 6b34 	vldr	d6, [pc, #208]	@ 80024b8 <functionMeasureCurrent+0x180>
 80023ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80023ee:	ed9f 5b34 	vldr	d5, [pc, #208]	@ 80024c0 <functionMeasureCurrent+0x188>
 80023f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80023f6:	eeb1 6b09 	vmov.f64	d6, #25	@ 0x40c80000  6.250
 80023fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002402:	ee17 2a90 	vmov	r2, s15
 8002406:	4b30      	ldr	r3, [pc, #192]	@ (80024c8 <functionMeasureCurrent+0x190>)
 8002408:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	pandora.powerManagement.EOSCurrent 				= ((pandora.analogDigitalConverter.hadc1Buffer[0] * 3.3)/65535)*(5/0.8);
 800240c:	4b2e      	ldr	r3, [pc, #184]	@ (80024c8 <functionMeasureCurrent+0x190>)
 800240e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8002412:	ee07 3a90 	vmov	s15, r3
 8002416:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800241a:	ed9f 6b27 	vldr	d6, [pc, #156]	@ 80024b8 <functionMeasureCurrent+0x180>
 800241e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002422:	ed9f 5b27 	vldr	d5, [pc, #156]	@ 80024c0 <functionMeasureCurrent+0x188>
 8002426:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800242a:	eeb1 6b09 	vmov.f64	d6, #25	@ 0x40c80000  6.250
 800242e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002432:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002436:	ee17 2a90 	vmov	r2, s15
 800243a:	4b23      	ldr	r3, [pc, #140]	@ (80024c8 <functionMeasureCurrent+0x190>)
 800243c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	pandora.powerManagement.GDBCurrent 				= ((pandora.analogDigitalConverter.hadc3Buffer[0] * 3.3)/65535)*(5/0.8);
 8002440:	4b21      	ldr	r3, [pc, #132]	@ (80024c8 <functionMeasureCurrent+0x190>)
 8002442:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800244e:	ed9f 6b1a 	vldr	d6, [pc, #104]	@ 80024b8 <functionMeasureCurrent+0x180>
 8002452:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002456:	ed9f 5b1a 	vldr	d5, [pc, #104]	@ 80024c0 <functionMeasureCurrent+0x188>
 800245a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800245e:	eeb1 6b09 	vmov.f64	d6, #25	@ 0x40c80000  6.250
 8002462:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002466:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800246a:	ee17 2a90 	vmov	r2, s15
 800246e:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <functionMeasureCurrent+0x190>)
 8002470:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	pandora.powerManagement.KKUCurrent 				= ((pandora.analogDigitalConverter.hadc1Buffer[1] * 3.3)/65535)*(5/0.8);
 8002474:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <functionMeasureCurrent+0x190>)
 8002476:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800247a:	ee07 3a90 	vmov	s15, r3
 800247e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002482:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 80024b8 <functionMeasureCurrent+0x180>
 8002486:	ee27 6b06 	vmul.f64	d6, d7, d6
 800248a:	ed9f 5b0d 	vldr	d5, [pc, #52]	@ 80024c0 <functionMeasureCurrent+0x188>
 800248e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002492:	eeb1 6b09 	vmov.f64	d6, #25	@ 0x40c80000  6.250
 8002496:	ee27 7b06 	vmul.f64	d7, d7, d6
 800249a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800249e:	ee17 2a90 	vmov	r2, s15
 80024a2:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <functionMeasureCurrent+0x190>)
 80024a4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	f3af 8000 	nop.w
 80024b8:	66666666 	.word	0x66666666
 80024bc:	400a6666 	.word	0x400a6666
 80024c0:	00000000 	.word	0x00000000
 80024c4:	40efffe0 	.word	0x40efffe0
 80024c8:	24000624 	.word	0x24000624

080024cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d2:	4b0a      	ldr	r3, [pc, #40]	@ (80024fc <HAL_MspInit+0x30>)
 80024d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024d8:	4a08      	ldr	r2, [pc, #32]	@ (80024fc <HAL_MspInit+0x30>)
 80024da:	f043 0302 	orr.w	r3, r3, #2
 80024de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <HAL_MspInit+0x30>)
 80024e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	58024400 	.word	0x58024400

08002500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <NMI_Handler+0x4>

08002508 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <HardFault_Handler+0x4>

08002510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002514:	bf00      	nop
 8002516:	e7fd      	b.n	8002514 <MemManage_Handler+0x4>

08002518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800251c:	bf00      	nop
 800251e:	e7fd      	b.n	800251c <BusFault_Handler+0x4>

08002520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <UsageFault_Handler+0x4>

08002528 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002548:	bf00      	nop
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002556:	f000 ff25 	bl	80033a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002564:	4802      	ldr	r0, [pc, #8]	@ (8002570 <DMA1_Stream0_IRQHandler+0x10>)
 8002566:	f003 f929 	bl	80057bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	240002d0 	.word	0x240002d0

08002574 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002578:	4802      	ldr	r0, [pc, #8]	@ (8002584 <DMA1_Stream1_IRQHandler+0x10>)
 800257a:	f003 f91f 	bl	80057bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	24000348 	.word	0x24000348

08002588 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800258c:	4802      	ldr	r0, [pc, #8]	@ (8002598 <TIM2_IRQHandler+0x10>)
 800258e:	f009 fdf7 	bl	800c180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	2400074c 	.word	0x2400074c

0800259c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025a0:	4802      	ldr	r0, [pc, #8]	@ (80025ac <TIM3_IRQHandler+0x10>)
 80025a2:	f009 fded 	bl	800c180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	24000798 	.word	0x24000798

080025b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <TIM4_IRQHandler+0x10>)
 80025b6:	f009 fde3 	bl	800c180 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	240007e4 	.word	0x240007e4

080025c4 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <BDMA_Channel0_IRQHandler+0x10>)
 80025ca:	f003 f8f7 	bl	80057bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	240003c0 	.word	0x240003c0

080025d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025dc:	4b37      	ldr	r3, [pc, #220]	@ (80026bc <SystemInit+0xe4>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	4a36      	ldr	r2, [pc, #216]	@ (80026bc <SystemInit+0xe4>)
 80025e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80025ec:	4b34      	ldr	r3, [pc, #208]	@ (80026c0 <SystemInit+0xe8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	2b06      	cmp	r3, #6
 80025f6:	d807      	bhi.n	8002608 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80025f8:	4b31      	ldr	r3, [pc, #196]	@ (80026c0 <SystemInit+0xe8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 030f 	bic.w	r3, r3, #15
 8002600:	4a2f      	ldr	r2, [pc, #188]	@ (80026c0 <SystemInit+0xe8>)
 8002602:	f043 0307 	orr.w	r3, r3, #7
 8002606:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002608:	4b2e      	ldr	r3, [pc, #184]	@ (80026c4 <SystemInit+0xec>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2d      	ldr	r2, [pc, #180]	@ (80026c4 <SystemInit+0xec>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002614:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <SystemInit+0xec>)
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800261a:	4b2a      	ldr	r3, [pc, #168]	@ (80026c4 <SystemInit+0xec>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4929      	ldr	r1, [pc, #164]	@ (80026c4 <SystemInit+0xec>)
 8002620:	4b29      	ldr	r3, [pc, #164]	@ (80026c8 <SystemInit+0xf0>)
 8002622:	4013      	ands	r3, r2
 8002624:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002626:	4b26      	ldr	r3, [pc, #152]	@ (80026c0 <SystemInit+0xe8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002632:	4b23      	ldr	r3, [pc, #140]	@ (80026c0 <SystemInit+0xe8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 030f 	bic.w	r3, r3, #15
 800263a:	4a21      	ldr	r2, [pc, #132]	@ (80026c0 <SystemInit+0xe8>)
 800263c:	f043 0307 	orr.w	r3, r3, #7
 8002640:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002642:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <SystemInit+0xec>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002648:	4b1e      	ldr	r3, [pc, #120]	@ (80026c4 <SystemInit+0xec>)
 800264a:	2200      	movs	r2, #0
 800264c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800264e:	4b1d      	ldr	r3, [pc, #116]	@ (80026c4 <SystemInit+0xec>)
 8002650:	2200      	movs	r2, #0
 8002652:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002654:	4b1b      	ldr	r3, [pc, #108]	@ (80026c4 <SystemInit+0xec>)
 8002656:	4a1d      	ldr	r2, [pc, #116]	@ (80026cc <SystemInit+0xf4>)
 8002658:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <SystemInit+0xec>)
 800265c:	4a1c      	ldr	r2, [pc, #112]	@ (80026d0 <SystemInit+0xf8>)
 800265e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002660:	4b18      	ldr	r3, [pc, #96]	@ (80026c4 <SystemInit+0xec>)
 8002662:	4a1c      	ldr	r2, [pc, #112]	@ (80026d4 <SystemInit+0xfc>)
 8002664:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002666:	4b17      	ldr	r3, [pc, #92]	@ (80026c4 <SystemInit+0xec>)
 8002668:	2200      	movs	r2, #0
 800266a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800266c:	4b15      	ldr	r3, [pc, #84]	@ (80026c4 <SystemInit+0xec>)
 800266e:	4a19      	ldr	r2, [pc, #100]	@ (80026d4 <SystemInit+0xfc>)
 8002670:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002672:	4b14      	ldr	r3, [pc, #80]	@ (80026c4 <SystemInit+0xec>)
 8002674:	2200      	movs	r2, #0
 8002676:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002678:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <SystemInit+0xec>)
 800267a:	4a16      	ldr	r2, [pc, #88]	@ (80026d4 <SystemInit+0xfc>)
 800267c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800267e:	4b11      	ldr	r3, [pc, #68]	@ (80026c4 <SystemInit+0xec>)
 8002680:	2200      	movs	r2, #0
 8002682:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002684:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <SystemInit+0xec>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0e      	ldr	r2, [pc, #56]	@ (80026c4 <SystemInit+0xec>)
 800268a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800268e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <SystemInit+0xec>)
 8002692:	2200      	movs	r2, #0
 8002694:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <SystemInit+0x100>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <SystemInit+0x104>)
 800269c:	4013      	ands	r3, r2
 800269e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026a2:	d202      	bcs.n	80026aa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80026a4:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <SystemInit+0x108>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80026aa:	4b0e      	ldr	r3, [pc, #56]	@ (80026e4 <SystemInit+0x10c>)
 80026ac:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80026b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80026b2:	bf00      	nop
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00
 80026c0:	52002000 	.word	0x52002000
 80026c4:	58024400 	.word	0x58024400
 80026c8:	eaf6ed7f 	.word	0xeaf6ed7f
 80026cc:	02020200 	.word	0x02020200
 80026d0:	01ff0000 	.word	0x01ff0000
 80026d4:	01010280 	.word	0x01010280
 80026d8:	5c001000 	.word	0x5c001000
 80026dc:	ffff0000 	.word	0xffff0000
 80026e0:	51008108 	.word	0x51008108
 80026e4:	52004000 	.word	0x52004000

080026e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	@ 0x30
 80026ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80026ee:	f107 030c 	add.w	r3, r7, #12
 80026f2:	2224      	movs	r2, #36	@ 0x24
 80026f4:	2100      	movs	r1, #0
 80026f6:	4618      	mov	r0, r3
 80026f8:	f00b fa5c 	bl	800dbb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026fc:	463b      	mov	r3, r7
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <MX_TIM1_Init+0xac>)
 8002708:	4a23      	ldr	r2, [pc, #140]	@ (8002798 <MX_TIM1_Init+0xb0>)
 800270a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800270c:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <MX_TIM1_Init+0xac>)
 800270e:	2200      	movs	r2, #0
 8002710:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <MX_TIM1_Init+0xac>)
 8002714:	2200      	movs	r2, #0
 8002716:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002718:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <MX_TIM1_Init+0xac>)
 800271a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800271e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002720:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <MX_TIM1_Init+0xac>)
 8002722:	2200      	movs	r2, #0
 8002724:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002726:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <MX_TIM1_Init+0xac>)
 8002728:	2200      	movs	r2, #0
 800272a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272c:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <MX_TIM1_Init+0xac>)
 800272e:	2200      	movs	r2, #0
 8002730:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002732:	2301      	movs	r3, #1
 8002734:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800273a:	2301      	movs	r3, #1
 800273c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002746:	2300      	movs	r3, #0
 8002748:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800274a:	2301      	movs	r3, #1
 800274c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800274e:	2300      	movs	r3, #0
 8002750:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002756:	f107 030c 	add.w	r3, r7, #12
 800275a:	4619      	mov	r1, r3
 800275c:	480d      	ldr	r0, [pc, #52]	@ (8002794 <MX_TIM1_Init+0xac>)
 800275e:	f009 fbdb 	bl	800bf18 <HAL_TIM_Encoder_Init>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002768:	f7ff fbfe 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276c:	2300      	movs	r3, #0
 800276e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002770:	2300      	movs	r3, #0
 8002772:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002778:	463b      	mov	r3, r7
 800277a:	4619      	mov	r1, r3
 800277c:	4805      	ldr	r0, [pc, #20]	@ (8002794 <MX_TIM1_Init+0xac>)
 800277e:	f00a f891 	bl	800c8a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002788:	f7ff fbee 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	3730      	adds	r7, #48	@ 0x30
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	24000700 	.word	0x24000700
 8002798:	40010000 	.word	0x40010000

0800279c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a2:	f107 0310 	add.w	r3, r7, #16
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 80027c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027c4:	22ef      	movs	r2, #239	@ 0xef
 80027c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80027ce:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d6:	4b17      	ldr	r3, [pc, #92]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027d8:	2200      	movs	r2, #0
 80027da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027dc:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027de:	2200      	movs	r2, #0
 80027e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027e2:	4814      	ldr	r0, [pc, #80]	@ (8002834 <MX_TIM2_Init+0x98>)
 80027e4:	f009 fac8 	bl	800bd78 <HAL_TIM_Base_Init>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80027ee:	f7ff fbbb 	bl	8001f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027f8:	f107 0310 	add.w	r3, r7, #16
 80027fc:	4619      	mov	r1, r3
 80027fe:	480d      	ldr	r0, [pc, #52]	@ (8002834 <MX_TIM2_Init+0x98>)
 8002800:	f009 fdc6 	bl	800c390 <HAL_TIM_ConfigClockSource>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800280a:	f7ff fbad 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800280e:	2300      	movs	r3, #0
 8002810:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002816:	1d3b      	adds	r3, r7, #4
 8002818:	4619      	mov	r1, r3
 800281a:	4806      	ldr	r0, [pc, #24]	@ (8002834 <MX_TIM2_Init+0x98>)
 800281c:	f00a f842 	bl	800c8a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002826:	f7ff fb9f 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800282a:	bf00      	nop
 800282c:	3720      	adds	r7, #32
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	2400074c 	.word	0x2400074c

08002838 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08c      	sub	sp, #48	@ 0x30
 800283c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	2224      	movs	r2, #36	@ 0x24
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f00b f9b4 	bl	800dbb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800284c:	463b      	mov	r3, r7
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	605a      	str	r2, [r3, #4]
 8002854:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002856:	4b21      	ldr	r3, [pc, #132]	@ (80028dc <MX_TIM3_Init+0xa4>)
 8002858:	4a21      	ldr	r2, [pc, #132]	@ (80028e0 <MX_TIM3_Init+0xa8>)
 800285a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800285c:	4b1f      	ldr	r3, [pc, #124]	@ (80028dc <MX_TIM3_Init+0xa4>)
 800285e:	2200      	movs	r2, #0
 8002860:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002862:	4b1e      	ldr	r3, [pc, #120]	@ (80028dc <MX_TIM3_Init+0xa4>)
 8002864:	2200      	movs	r2, #0
 8002866:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002868:	4b1c      	ldr	r3, [pc, #112]	@ (80028dc <MX_TIM3_Init+0xa4>)
 800286a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800286e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002870:	4b1a      	ldr	r3, [pc, #104]	@ (80028dc <MX_TIM3_Init+0xa4>)
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002876:	4b19      	ldr	r3, [pc, #100]	@ (80028dc <MX_TIM3_Init+0xa4>)
 8002878:	2200      	movs	r2, #0
 800287a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800287c:	2301      	movs	r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002884:	2301      	movs	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002894:	2301      	movs	r3, #1
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002898:	2300      	movs	r3, #0
 800289a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4619      	mov	r1, r3
 80028a6:	480d      	ldr	r0, [pc, #52]	@ (80028dc <MX_TIM3_Init+0xa4>)
 80028a8:	f009 fb36 	bl	800bf18 <HAL_TIM_Encoder_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80028b2:	f7ff fb59 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b6:	2300      	movs	r3, #0
 80028b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80028be:	463b      	mov	r3, r7
 80028c0:	4619      	mov	r1, r3
 80028c2:	4806      	ldr	r0, [pc, #24]	@ (80028dc <MX_TIM3_Init+0xa4>)
 80028c4:	f009 ffee 	bl	800c8a4 <HAL_TIMEx_MasterConfigSynchronization>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80028ce:	f7ff fb4b 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80028d2:	bf00      	nop
 80028d4:	3730      	adds	r7, #48	@ 0x30
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	24000798 	.word	0x24000798
 80028e0:	40000400 	.word	0x40000400

080028e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028ea:	f107 0310 	add.w	r3, r7, #16
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
 80028f4:	609a      	str	r2, [r3, #8]
 80028f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028f8:	1d3b      	adds	r3, r7, #4
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002902:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <MX_TIM4_Init+0x94>)
 8002904:	4a1d      	ldr	r2, [pc, #116]	@ (800297c <MX_TIM4_Init+0x98>)
 8002906:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 239;
 8002908:	4b1b      	ldr	r3, [pc, #108]	@ (8002978 <MX_TIM4_Init+0x94>)
 800290a:	22ef      	movs	r2, #239	@ 0xef
 800290c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800290e:	4b1a      	ldr	r3, [pc, #104]	@ (8002978 <MX_TIM4_Init+0x94>)
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002914:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <MX_TIM4_Init+0x94>)
 8002916:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800291a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800291c:	4b16      	ldr	r3, [pc, #88]	@ (8002978 <MX_TIM4_Init+0x94>)
 800291e:	2200      	movs	r2, #0
 8002920:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <MX_TIM4_Init+0x94>)
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002928:	4813      	ldr	r0, [pc, #76]	@ (8002978 <MX_TIM4_Init+0x94>)
 800292a:	f009 fa25 	bl	800bd78 <HAL_TIM_Base_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002934:	f7ff fb18 	bl	8001f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800293c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800293e:	f107 0310 	add.w	r3, r7, #16
 8002942:	4619      	mov	r1, r3
 8002944:	480c      	ldr	r0, [pc, #48]	@ (8002978 <MX_TIM4_Init+0x94>)
 8002946:	f009 fd23 	bl	800c390 <HAL_TIM_ConfigClockSource>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002950:	f7ff fb0a 	bl	8001f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002954:	2300      	movs	r3, #0
 8002956:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800295c:	1d3b      	adds	r3, r7, #4
 800295e:	4619      	mov	r1, r3
 8002960:	4805      	ldr	r0, [pc, #20]	@ (8002978 <MX_TIM4_Init+0x94>)
 8002962:	f009 ff9f 	bl	800c8a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002966:	4603      	mov	r3, r0
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800296c:	f7ff fafc 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002970:	bf00      	nop
 8002972:	3720      	adds	r7, #32
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	240007e4 	.word	0x240007e4
 800297c:	40000800 	.word	0x40000800

08002980 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08c      	sub	sp, #48	@ 0x30
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 031c 	add.w	r3, r7, #28
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a38      	ldr	r2, [pc, #224]	@ (8002a80 <HAL_TIM_Encoder_MspInit+0x100>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12f      	bne.n	8002a02 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029a2:	4b38      	ldr	r3, [pc, #224]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 80029a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029a8:	4a36      	ldr	r2, [pc, #216]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 80029aa:	f043 0301 	orr.w	r3, r3, #1
 80029ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80029b2:	4b34      	ldr	r3, [pc, #208]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 80029b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c0:	4b30      	ldr	r3, [pc, #192]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 80029c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80029d0:	4b2c      	ldr	r3, [pc, #176]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 80029d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	617b      	str	r3, [r7, #20]
 80029dc:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_2_PHASE_A_Pin|ENCODER_2_PHASE_B_Pin;
 80029de:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e4:	2302      	movs	r3, #2
 80029e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029f0:	2301      	movs	r3, #1
 80029f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 031c 	add.w	r3, r7, #28
 80029f8:	4619      	mov	r1, r3
 80029fa:	4823      	ldr	r0, [pc, #140]	@ (8002a88 <HAL_TIM_Encoder_MspInit+0x108>)
 80029fc:	f005 f988 	bl	8007d10 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002a00:	e03a      	b.n	8002a78 <HAL_TIM_Encoder_MspInit+0xf8>
  else if(tim_encoderHandle->Instance==TIM3)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a21      	ldr	r2, [pc, #132]	@ (8002a8c <HAL_TIM_Encoder_MspInit+0x10c>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d135      	bne.n	8002a78 <HAL_TIM_Encoder_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 8002a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a12:	4a1c      	ldr	r2, [pc, #112]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002a1c:	4b19      	ldr	r3, [pc, #100]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 8002a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	613b      	str	r3, [r7, #16]
 8002a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2a:	4b16      	ldr	r3, [pc, #88]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 8002a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a30:	4a14      	ldr	r2, [pc, #80]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002a3a:	4b12      	ldr	r3, [pc, #72]	@ (8002a84 <HAL_TIM_Encoder_MspInit+0x104>)
 8002a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002a40:	f003 0304 	and.w	r3, r3, #4
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_1_PHASE_A_Pin|ENCODER_1_PHASE_B_Pin;
 8002a48:	23c0      	movs	r3, #192	@ 0xc0
 8002a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a54:	2300      	movs	r3, #0
 8002a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	4619      	mov	r1, r3
 8002a62:	480b      	ldr	r0, [pc, #44]	@ (8002a90 <HAL_TIM_Encoder_MspInit+0x110>)
 8002a64:	f005 f954 	bl	8007d10 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	201d      	movs	r0, #29
 8002a6e:	f002 f8aa 	bl	8004bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a72:	201d      	movs	r0, #29
 8002a74:	f002 f8c1 	bl	8004bfa <HAL_NVIC_EnableIRQ>
}
 8002a78:	bf00      	nop
 8002a7a:	3730      	adds	r7, #48	@ 0x30
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40010000 	.word	0x40010000
 8002a84:	58024400 	.word	0x58024400
 8002a88:	58020000 	.word	0x58020000
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	58020800 	.word	0x58020800

08002a94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa4:	d117      	bne.n	8002ad6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002b18 <HAL_TIM_Base_MspInit+0x84>)
 8002aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002aac:	4a1a      	ldr	r2, [pc, #104]	@ (8002b18 <HAL_TIM_Base_MspInit+0x84>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ab6:	4b18      	ldr	r3, [pc, #96]	@ (8002b18 <HAL_TIM_Base_MspInit+0x84>)
 8002ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	201c      	movs	r0, #28
 8002aca:	f002 f87c 	bl	8004bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ace:	201c      	movs	r0, #28
 8002ad0:	f002 f893 	bl	8004bfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002ad4:	e01b      	b.n	8002b0e <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM4)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a10      	ldr	r2, [pc, #64]	@ (8002b1c <HAL_TIM_Base_MspInit+0x88>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d116      	bne.n	8002b0e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <HAL_TIM_Base_MspInit+0x84>)
 8002ae2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <HAL_TIM_Base_MspInit+0x84>)
 8002ae8:	f043 0304 	orr.w	r3, r3, #4
 8002aec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002af0:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_TIM_Base_MspInit+0x84>)
 8002af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	60bb      	str	r3, [r7, #8]
 8002afc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	201e      	movs	r0, #30
 8002b04:	f002 f85f 	bl	8004bc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b08:	201e      	movs	r0, #30
 8002b0a:	f002 f876 	bl	8004bfa <HAL_NVIC_EnableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	58024400 	.word	0x58024400
 8002b1c:	40000800 	.word	0x40000800

08002b20 <HAL_TIM_PeriodElapsedCallback>:
bool _500msFlag		 		= false;
bool _1sFlag				= false;
bool _10sFlag				= false;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b30:	d101      	bne.n	8002b36 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        // 1 ms’de bir gelecek yer
        // örn: tick say, LED toggle, task scheduler vs.
    	functionReadDigitalInputs();
 8002b32:	f7ff fb8d 	bl	8002250 <functionReadDigitalInputs>
    }

    if (htim->Instance == TIM4)   // şuan 50ms 1msye  ayarla
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a58      	ldr	r2, [pc, #352]	@ (8002c9c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	f040 80a9 	bne.w	8002c94 <HAL_TIM_PeriodElapsedCallback+0x174>
    {
    	functionEncoderRead(&htim3);		// her ms değerinde çağrılır. IDLE durumunda çağrılmayabilir #huzeyfe
 8002b42:	4857      	ldr	r0, [pc, #348]	@ (8002ca0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002b44:	f7fe f940 	bl	8000dc8 <functionEncoderRead>

    	_configurableCounter++;
 8002b48:	4b56      	ldr	r3, [pc, #344]	@ (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	4b54      	ldr	r3, [pc, #336]	@ (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002b52:	701a      	strb	r2, [r3, #0]
    	if(_configurableCounter>configurableTime)
 8002b54:	4b53      	ldr	r3, [pc, #332]	@ (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002b56:	781a      	ldrb	r2, [r3, #0]
 8002b58:	4b53      	ldr	r3, [pc, #332]	@ (8002ca8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d905      	bls.n	8002b6c <HAL_TIM_PeriodElapsedCallback+0x4c>
    	{
    		_configurableFlagScanStart = true;
 8002b60:	4b52      	ldr	r3, [pc, #328]	@ (8002cac <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	701a      	strb	r2, [r3, #0]
    		_configurableCounter = 0;
 8002b66:	4b4f      	ldr	r3, [pc, #316]	@ (8002ca4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
    	}

    	_1msCounter++;
 8002b6c:	4b50      	ldr	r3, [pc, #320]	@ (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	4b4e      	ldr	r3, [pc, #312]	@ (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b76:	701a      	strb	r2, [r3, #0]
    	if(_1msCounter>0)
 8002b78:	4b4d      	ldr	r3, [pc, #308]	@ (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_TIM_PeriodElapsedCallback+0x6c>
    	{
    		_1msFlagScanStart = true;
 8002b80:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
    		_1msCounter = 0;
 8002b86:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
    	}


    	_10msCounter++;
 8002b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	3301      	adds	r3, #1
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	4b48      	ldr	r3, [pc, #288]	@ (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002b96:	701a      	strb	r2, [r3, #0]
    	if(_10msCounter>9)
 8002b98:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b09      	cmp	r3, #9
 8002b9e:	d905      	bls.n	8002bac <HAL_TIM_PeriodElapsedCallback+0x8c>
    	{
    		_10msFlagScanStart = true;
 8002ba0:	4b46      	ldr	r3, [pc, #280]	@ (8002cbc <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	701a      	strb	r2, [r3, #0]
    		_10msCounter = 0;
 8002ba6:	4b44      	ldr	r3, [pc, #272]	@ (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
    	}

    	_25msCounter++;
 8002bac:	4b44      	ldr	r3, [pc, #272]	@ (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b42      	ldr	r3, [pc, #264]	@ (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002bb6:	701a      	strb	r2, [r3, #0]
    	if(_25msCounter>24)
 8002bb8:	4b41      	ldr	r3, [pc, #260]	@ (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b18      	cmp	r3, #24
 8002bbe:	d905      	bls.n	8002bcc <HAL_TIM_PeriodElapsedCallback+0xac>
    	{
    		_25msFlagScanStart = true;
 8002bc0:	4b40      	ldr	r3, [pc, #256]	@ (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	701a      	strb	r2, [r3, #0]
    		_25msCounter = 0;
 8002bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	701a      	strb	r2, [r3, #0]
    	}

    	_50msCounter++;
 8002bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	4b3c      	ldr	r3, [pc, #240]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002bd6:	701a      	strb	r2, [r3, #0]
    	if(_50msCounter>49)
 8002bd8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b31      	cmp	r3, #49	@ 0x31
 8002bde:	d905      	bls.n	8002bec <HAL_TIM_PeriodElapsedCallback+0xcc>
    	{
    		_50msFlagScanStart = true;
 8002be0:	4b3a      	ldr	r3, [pc, #232]	@ (8002ccc <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	701a      	strb	r2, [r3, #0]
    		_50msCounter = 0;
 8002be6:	4b38      	ldr	r3, [pc, #224]	@ (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	701a      	strb	r2, [r3, #0]
    	}

    	_100msCounter++;
 8002bec:	4b38      	ldr	r3, [pc, #224]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b36      	ldr	r3, [pc, #216]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bf6:	701a      	strb	r2, [r3, #0]
    	if(_100msCounter>99)
 8002bf8:	4b35      	ldr	r3, [pc, #212]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b63      	cmp	r3, #99	@ 0x63
 8002bfe:	d905      	bls.n	8002c0c <HAL_TIM_PeriodElapsedCallback+0xec>
    	{
    		_100msFlagScanStart = true;
 8002c00:	4b34      	ldr	r3, [pc, #208]	@ (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
    		_100msCounter = 0;
 8002c06:	4b32      	ldr	r3, [pc, #200]	@ (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]

    	}

    	_250msCounter++;
 8002c0c:	4b32      	ldr	r3, [pc, #200]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b30      	ldr	r3, [pc, #192]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002c16:	701a      	strb	r2, [r3, #0]
    	if(_250msCounter>249)
 8002c18:	4b2f      	ldr	r3, [pc, #188]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2bf9      	cmp	r3, #249	@ 0xf9
 8002c1e:	d905      	bls.n	8002c2c <HAL_TIM_PeriodElapsedCallback+0x10c>
    	{
    		_250msFlagScanStart = true;
 8002c20:	4b2e      	ldr	r3, [pc, #184]	@ (8002cdc <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002c22:	2201      	movs	r2, #1
 8002c24:	701a      	strb	r2, [r3, #0]
    		_250msCounter = 0;
 8002c26:	4b2c      	ldr	r3, [pc, #176]	@ (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
    	}

    	_500msCounter++;
 8002c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002c2e:	881b      	ldrh	r3, [r3, #0]
 8002c30:	3301      	adds	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	4b2a      	ldr	r3, [pc, #168]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002c36:	801a      	strh	r2, [r3, #0]
    	if(_500msCounter>499)
 8002c38:	4b29      	ldr	r3, [pc, #164]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002c3a:	881b      	ldrh	r3, [r3, #0]
 8002c3c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002c40:	d305      	bcc.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0x12e>
    	{
    		_500msFlagScanStart = true;
 8002c42:	4b28      	ldr	r3, [pc, #160]	@ (8002ce4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	701a      	strb	r2, [r3, #0]
    		_500msCounter = 0;
 8002c48:	4b25      	ldr	r3, [pc, #148]	@ (8002ce0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	801a      	strh	r2, [r3, #0]
    	}

    	_1sCounter++;
 8002c4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002c50:	881b      	ldrh	r3, [r3, #0]
 8002c52:	3301      	adds	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	4b24      	ldr	r3, [pc, #144]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002c58:	801a      	strh	r2, [r3, #0]
    	if(_1sCounter>999)
 8002c5a:	4b23      	ldr	r3, [pc, #140]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c62:	d305      	bcc.n	8002c70 <HAL_TIM_PeriodElapsedCallback+0x150>
    	{
    		_1sFlagScanStart = true;
 8002c64:	4b21      	ldr	r3, [pc, #132]	@ (8002cec <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002c66:	2201      	movs	r2, #1
 8002c68:	701a      	strb	r2, [r3, #0]
    		_1sCounter = 0;
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	801a      	strh	r2, [r3, #0]
    	}

    	_10sCounter++;
 8002c70:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c7a:	801a      	strh	r2, [r3, #0]
    	if(_10sCounter>9999)
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d905      	bls.n	8002c94 <HAL_TIM_PeriodElapsedCallback+0x174>
    	{
    		_10sFlagScanStart = true;
 8002c88:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf4 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	701a      	strb	r2, [r3, #0]
    		_10sCounter = 0;
 8002c8e:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40000800 	.word	0x40000800
 8002ca0:	24000798 	.word	0x24000798
 8002ca4:	24000830 	.word	0x24000830
 8002ca8:	240000bc 	.word	0x240000bc
 8002cac:	2400083e 	.word	0x2400083e
 8002cb0:	24000831 	.word	0x24000831
 8002cb4:	2400083f 	.word	0x2400083f
 8002cb8:	24000832 	.word	0x24000832
 8002cbc:	24000840 	.word	0x24000840
 8002cc0:	24000833 	.word	0x24000833
 8002cc4:	24000841 	.word	0x24000841
 8002cc8:	24000834 	.word	0x24000834
 8002ccc:	24000842 	.word	0x24000842
 8002cd0:	24000835 	.word	0x24000835
 8002cd4:	24000843 	.word	0x24000843
 8002cd8:	24000836 	.word	0x24000836
 8002cdc:	24000844 	.word	0x24000844
 8002ce0:	24000838 	.word	0x24000838
 8002ce4:	24000845 	.word	0x24000845
 8002ce8:	2400083a 	.word	0x2400083a
 8002cec:	24000846 	.word	0x24000846
 8002cf0:	2400083c 	.word	0x2400083c
 8002cf4:	24000847 	.word	0x24000847

08002cf8 <startTimeScanFlags>:

void startTimeScanFlags(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
	if(_configurableFlagScanStart)
 8002cfc:	4b34      	ldr	r3, [pc, #208]	@ (8002dd0 <startTimeScanFlags+0xd8>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <startTimeScanFlags+0x18>
	{
		_configurableFlag = true;
 8002d04:	4b33      	ldr	r3, [pc, #204]	@ (8002dd4 <startTimeScanFlags+0xdc>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
		_configurableFlagScanStart = false;
 8002d0a:	4b31      	ldr	r3, [pc, #196]	@ (8002dd0 <startTimeScanFlags+0xd8>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
	}
	if(_1msFlagScanStart)
 8002d10:	4b31      	ldr	r3, [pc, #196]	@ (8002dd8 <startTimeScanFlags+0xe0>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d005      	beq.n	8002d24 <startTimeScanFlags+0x2c>
	{
		_1msFlag = true;
 8002d18:	4b30      	ldr	r3, [pc, #192]	@ (8002ddc <startTimeScanFlags+0xe4>)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]
		_1msFlagScanStart = false;
 8002d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd8 <startTimeScanFlags+0xe0>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
	}
	if(_10msFlagScanStart)
 8002d24:	4b2e      	ldr	r3, [pc, #184]	@ (8002de0 <startTimeScanFlags+0xe8>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <startTimeScanFlags+0x40>
	{
		_10msFlag = true;
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002de4 <startTimeScanFlags+0xec>)
 8002d2e:	2201      	movs	r2, #1
 8002d30:	701a      	strb	r2, [r3, #0]
		_10msFlagScanStart = false;
 8002d32:	4b2b      	ldr	r3, [pc, #172]	@ (8002de0 <startTimeScanFlags+0xe8>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
	}
	if(_25msFlagScanStart)
 8002d38:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <startTimeScanFlags+0xf0>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <startTimeScanFlags+0x54>
	{
		_25msFlag = true;
 8002d40:	4b2a      	ldr	r3, [pc, #168]	@ (8002dec <startTimeScanFlags+0xf4>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
		_25msFlagScanStart = false;
 8002d46:	4b28      	ldr	r3, [pc, #160]	@ (8002de8 <startTimeScanFlags+0xf0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
	}
	if(_50msFlagScanStart)
 8002d4c:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <startTimeScanFlags+0xf8>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <startTimeScanFlags+0x68>
	{
		_50msFlag = true;
 8002d54:	4b27      	ldr	r3, [pc, #156]	@ (8002df4 <startTimeScanFlags+0xfc>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
		_50msFlagScanStart = false;
 8002d5a:	4b25      	ldr	r3, [pc, #148]	@ (8002df0 <startTimeScanFlags+0xf8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
	}
	if(_100msFlagScanStart)
 8002d60:	4b25      	ldr	r3, [pc, #148]	@ (8002df8 <startTimeScanFlags+0x100>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <startTimeScanFlags+0x7c>
	{
		_100msFlag = true;
 8002d68:	4b24      	ldr	r3, [pc, #144]	@ (8002dfc <startTimeScanFlags+0x104>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
		_100msFlagScanStart = false;
 8002d6e:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <startTimeScanFlags+0x100>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
	}
	if(_250msFlagScanStart)
 8002d74:	4b22      	ldr	r3, [pc, #136]	@ (8002e00 <startTimeScanFlags+0x108>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d005      	beq.n	8002d88 <startTimeScanFlags+0x90>
	{
		_250msFlag = true;
 8002d7c:	4b21      	ldr	r3, [pc, #132]	@ (8002e04 <startTimeScanFlags+0x10c>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
		_250msFlagScanStart = false;
 8002d82:	4b1f      	ldr	r3, [pc, #124]	@ (8002e00 <startTimeScanFlags+0x108>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
	}
	if(_500msFlagScanStart)
 8002d88:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <startTimeScanFlags+0x110>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <startTimeScanFlags+0xa4>
	{
		_500msFlag = true;
 8002d90:	4b1e      	ldr	r3, [pc, #120]	@ (8002e0c <startTimeScanFlags+0x114>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
		_500msFlagScanStart = false;
 8002d96:	4b1c      	ldr	r3, [pc, #112]	@ (8002e08 <startTimeScanFlags+0x110>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	701a      	strb	r2, [r3, #0]
	}
	if(_1sFlagScanStart)
 8002d9c:	4b1c      	ldr	r3, [pc, #112]	@ (8002e10 <startTimeScanFlags+0x118>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <startTimeScanFlags+0xb8>
	{
		_1sFlag = true;
 8002da4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e14 <startTimeScanFlags+0x11c>)
 8002da6:	2201      	movs	r2, #1
 8002da8:	701a      	strb	r2, [r3, #0]
		_1sFlagScanStart = false;
 8002daa:	4b19      	ldr	r3, [pc, #100]	@ (8002e10 <startTimeScanFlags+0x118>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	701a      	strb	r2, [r3, #0]
	}
	if(_10sFlagScanStart)
 8002db0:	4b19      	ldr	r3, [pc, #100]	@ (8002e18 <startTimeScanFlags+0x120>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <startTimeScanFlags+0xcc>
	{
		_10sFlag = true;
 8002db8:	4b18      	ldr	r3, [pc, #96]	@ (8002e1c <startTimeScanFlags+0x124>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	701a      	strb	r2, [r3, #0]
		_10sFlagScanStart = false;
 8002dbe:	4b16      	ldr	r3, [pc, #88]	@ (8002e18 <startTimeScanFlags+0x120>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]
	}
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	2400083e 	.word	0x2400083e
 8002dd4:	24000848 	.word	0x24000848
 8002dd8:	2400083f 	.word	0x2400083f
 8002ddc:	24000849 	.word	0x24000849
 8002de0:	24000840 	.word	0x24000840
 8002de4:	2400084a 	.word	0x2400084a
 8002de8:	24000841 	.word	0x24000841
 8002dec:	2400084b 	.word	0x2400084b
 8002df0:	24000842 	.word	0x24000842
 8002df4:	2400084c 	.word	0x2400084c
 8002df8:	24000843 	.word	0x24000843
 8002dfc:	2400084d 	.word	0x2400084d
 8002e00:	24000844 	.word	0x24000844
 8002e04:	2400084e 	.word	0x2400084e
 8002e08:	24000845 	.word	0x24000845
 8002e0c:	2400084f 	.word	0x2400084f
 8002e10:	24000846 	.word	0x24000846
 8002e14:	24000850 	.word	0x24000850
 8002e18:	24000847 	.word	0x24000847
 8002e1c:	24000851 	.word	0x24000851

08002e20 <clearTimeScanFlags>:

void clearTimeScanFlags(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
	_configurableFlag 	= false;
 8002e24:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <clearTimeScanFlags+0x4c>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	701a      	strb	r2, [r3, #0]
	_1msFlag 	= false;
 8002e2a:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <clearTimeScanFlags+0x50>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
	_10msFlag 	= false;
 8002e30:	4b10      	ldr	r3, [pc, #64]	@ (8002e74 <clearTimeScanFlags+0x54>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
	_25msFlag 	= false;
 8002e36:	4b10      	ldr	r3, [pc, #64]	@ (8002e78 <clearTimeScanFlags+0x58>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
	_50msFlag 	= false;
 8002e3c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e7c <clearTimeScanFlags+0x5c>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]
	_100msFlag 	= false;
 8002e42:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <clearTimeScanFlags+0x60>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	701a      	strb	r2, [r3, #0]
	_250msFlag 	= false;
 8002e48:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <clearTimeScanFlags+0x64>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	701a      	strb	r2, [r3, #0]
	_500msFlag 	= false;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e88 <clearTimeScanFlags+0x68>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
	_1sFlag 	= false;
 8002e54:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <clearTimeScanFlags+0x6c>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
	_10sFlag 	= false;
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <clearTimeScanFlags+0x70>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	24000848 	.word	0x24000848
 8002e70:	24000849 	.word	0x24000849
 8002e74:	2400084a 	.word	0x2400084a
 8002e78:	2400084b 	.word	0x2400084b
 8002e7c:	2400084c 	.word	0x2400084c
 8002e80:	2400084d 	.word	0x2400084d
 8002e84:	2400084e 	.word	0x2400084e
 8002e88:	2400084f 	.word	0x2400084f
 8002e8c:	24000850 	.word	0x24000850
 8002e90:	24000851 	.word	0x24000851

08002e94 <MX_UART4_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e98:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002e9a:	4a23      	ldr	r2, [pc, #140]	@ (8002f28 <MX_UART4_Init+0x94>)
 8002e9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002e9e:	4b21      	ldr	r3, [pc, #132]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002ea0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ea4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002eac:	4b1d      	ldr	r3, [pc, #116]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002eb2:	4b1c      	ldr	r3, [pc, #112]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002eba:	220c      	movs	r2, #12
 8002ebc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ebe:	4b19      	ldr	r3, [pc, #100]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec4:	4b17      	ldr	r3, [pc, #92]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002eca:	4b16      	ldr	r3, [pc, #88]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ed0:	4b14      	ldr	r3, [pc, #80]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ed6:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002edc:	4811      	ldr	r0, [pc, #68]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002ede:	f009 fd8d 	bl	800c9fc <HAL_UART_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002ee8:	f7ff f83e 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eec:	2100      	movs	r1, #0
 8002eee:	480d      	ldr	r0, [pc, #52]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002ef0:	f00a fd95 	bl	800da1e <HAL_UARTEx_SetTxFifoThreshold>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002efa:	f7ff f835 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002efe:	2100      	movs	r1, #0
 8002f00:	4808      	ldr	r0, [pc, #32]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002f02:	f00a fdca 	bl	800da9a <HAL_UARTEx_SetRxFifoThreshold>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002f0c:	f7ff f82c 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002f10:	4804      	ldr	r0, [pc, #16]	@ (8002f24 <MX_UART4_Init+0x90>)
 8002f12:	f00a fd4b 	bl	800d9ac <HAL_UARTEx_DisableFifoMode>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002f1c:	f7ff f824 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002f20:	bf00      	nop
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	24000854 	.word	0x24000854
 8002f28:	40004c00 	.word	0x40004c00

08002f2c <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002f30:	4b22      	ldr	r3, [pc, #136]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f32:	4a23      	ldr	r2, [pc, #140]	@ (8002fc0 <MX_UART7_Init+0x94>)
 8002f34:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002f36:	4b21      	ldr	r3, [pc, #132]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f3c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002f44:	4b1d      	ldr	r3, [pc, #116]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002f50:	4b1a      	ldr	r3, [pc, #104]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f52:	220c      	movs	r2, #12
 8002f54:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f56:	4b19      	ldr	r3, [pc, #100]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f62:	4b16      	ldr	r3, [pc, #88]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f68:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f6e:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002f74:	4811      	ldr	r0, [pc, #68]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f76:	f009 fd41 	bl	800c9fc <HAL_UART_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002f80:	f7fe fff2 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f84:	2100      	movs	r1, #0
 8002f86:	480d      	ldr	r0, [pc, #52]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f88:	f00a fd49 	bl	800da1e <HAL_UARTEx_SetTxFifoThreshold>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002f92:	f7fe ffe9 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f96:	2100      	movs	r1, #0
 8002f98:	4808      	ldr	r0, [pc, #32]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002f9a:	f00a fd7e 	bl	800da9a <HAL_UARTEx_SetRxFifoThreshold>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002fa4:	f7fe ffe0 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002fa8:	4804      	ldr	r0, [pc, #16]	@ (8002fbc <MX_UART7_Init+0x90>)
 8002faa:	f00a fcff 	bl	800d9ac <HAL_UARTEx_DisableFifoMode>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002fb4:	f7fe ffd8 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002fb8:	bf00      	nop
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	240008e8 	.word	0x240008e8
 8002fc0:	40007800 	.word	0x40007800

08002fc4 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002fc8:	4b22      	ldr	r3, [pc, #136]	@ (8003054 <MX_UART8_Init+0x90>)
 8002fca:	4a23      	ldr	r2, [pc, #140]	@ (8003058 <MX_UART8_Init+0x94>)
 8002fcc:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002fce:	4b21      	ldr	r3, [pc, #132]	@ (8003054 <MX_UART8_Init+0x90>)
 8002fd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fd4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003054 <MX_UART8_Init+0x90>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003054 <MX_UART8_Init+0x90>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8003054 <MX_UART8_Init+0x90>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8003054 <MX_UART8_Init+0x90>)
 8002fea:	220c      	movs	r2, #12
 8002fec:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fee:	4b19      	ldr	r3, [pc, #100]	@ (8003054 <MX_UART8_Init+0x90>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff4:	4b17      	ldr	r3, [pc, #92]	@ (8003054 <MX_UART8_Init+0x90>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ffa:	4b16      	ldr	r3, [pc, #88]	@ (8003054 <MX_UART8_Init+0x90>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003000:	4b14      	ldr	r3, [pc, #80]	@ (8003054 <MX_UART8_Init+0x90>)
 8003002:	2200      	movs	r2, #0
 8003004:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003006:	4b13      	ldr	r3, [pc, #76]	@ (8003054 <MX_UART8_Init+0x90>)
 8003008:	2200      	movs	r2, #0
 800300a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800300c:	4811      	ldr	r0, [pc, #68]	@ (8003054 <MX_UART8_Init+0x90>)
 800300e:	f009 fcf5 	bl	800c9fc <HAL_UART_Init>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8003018:	f7fe ffa6 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800301c:	2100      	movs	r1, #0
 800301e:	480d      	ldr	r0, [pc, #52]	@ (8003054 <MX_UART8_Init+0x90>)
 8003020:	f00a fcfd 	bl	800da1e <HAL_UARTEx_SetTxFifoThreshold>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800302a:	f7fe ff9d 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800302e:	2100      	movs	r1, #0
 8003030:	4808      	ldr	r0, [pc, #32]	@ (8003054 <MX_UART8_Init+0x90>)
 8003032:	f00a fd32 	bl	800da9a <HAL_UARTEx_SetRxFifoThreshold>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 800303c:	f7fe ff94 	bl	8001f68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8003040:	4804      	ldr	r0, [pc, #16]	@ (8003054 <MX_UART8_Init+0x90>)
 8003042:	f00a fcb3 	bl	800d9ac <HAL_UARTEx_DisableFifoMode>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 800304c:	f7fe ff8c 	bl	8001f68 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}
 8003054:	2400097c 	.word	0x2400097c
 8003058:	40007c00 	.word	0x40007c00

0800305c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b0be      	sub	sp, #248	@ 0xf8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003064:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	605a      	str	r2, [r3, #4]
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	60da      	str	r2, [r3, #12]
 8003072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003074:	f107 0320 	add.w	r3, r7, #32
 8003078:	22c0      	movs	r2, #192	@ 0xc0
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f00a fd99 	bl	800dbb4 <memset>
  if(uartHandle->Instance==UART4)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a73      	ldr	r2, [pc, #460]	@ (8003254 <HAL_UART_MspInit+0x1f8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d147      	bne.n	800311c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800308c:	f04f 0202 	mov.w	r2, #2
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800309e:	f107 0320 	add.w	r3, r7, #32
 80030a2:	4618      	mov	r0, r3
 80030a4:	f006 f96a 	bl	800937c <HAL_RCCEx_PeriphCLKConfig>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80030ae:	f7fe ff5b 	bl	8001f68 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80030b2:	4b69      	ldr	r3, [pc, #420]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 80030b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030b8:	4a67      	ldr	r2, [pc, #412]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 80030ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80030be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030c2:	4b65      	ldr	r3, [pc, #404]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 80030c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d0:	4b61      	ldr	r3, [pc, #388]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 80030d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030d6:	4a60      	ldr	r2, [pc, #384]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 80030d8:	f043 0304 	orr.w	r3, r3, #4
 80030dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80030e0:	4b5d      	ldr	r3, [pc, #372]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 80030e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	61bb      	str	r3, [r7, #24]
 80030ec:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = RS422_TX_1_Pin|RS422_RX_1_Pin;
 80030ee:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80030f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f6:	2302      	movs	r3, #2
 80030f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003102:	2300      	movs	r3, #0
 8003104:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003108:	2308      	movs	r3, #8
 800310a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800310e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003112:	4619      	mov	r1, r3
 8003114:	4851      	ldr	r0, [pc, #324]	@ (800325c <HAL_UART_MspInit+0x200>)
 8003116:	f004 fdfb 	bl	8007d10 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 800311a:	e097      	b.n	800324c <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==UART7)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a4f      	ldr	r2, [pc, #316]	@ (8003260 <HAL_UART_MspInit+0x204>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d147      	bne.n	80031b6 <HAL_UART_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003126:	f04f 0202 	mov.w	r2, #2
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003132:	2300      	movs	r3, #0
 8003134:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003138:	f107 0320 	add.w	r3, r7, #32
 800313c:	4618      	mov	r0, r3
 800313e:	f006 f91d 	bl	800937c <HAL_RCCEx_PeriphCLKConfig>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003148:	f7fe ff0e 	bl	8001f68 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800314c:	4b42      	ldr	r3, [pc, #264]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 800314e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003152:	4a41      	ldr	r2, [pc, #260]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 8003154:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003158:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800315c:	4b3e      	ldr	r3, [pc, #248]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 800315e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003162:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003166:	617b      	str	r3, [r7, #20]
 8003168:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800316a:	4b3b      	ldr	r3, [pc, #236]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 800316c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003170:	4a39      	ldr	r2, [pc, #228]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 8003172:	f043 0310 	orr.w	r3, r3, #16
 8003176:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800317a:	4b37      	ldr	r3, [pc, #220]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 800317c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003180:	f003 0310 	and.w	r3, r3, #16
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RS422_RX_2_Pin|RS422_TX_2_Pin;
 8003188:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800318c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003190:	2302      	movs	r3, #2
 8003192:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003196:	2300      	movs	r3, #0
 8003198:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319c:	2300      	movs	r3, #0
 800319e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 80031a2:	2307      	movs	r3, #7
 80031a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031a8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80031ac:	4619      	mov	r1, r3
 80031ae:	482d      	ldr	r0, [pc, #180]	@ (8003264 <HAL_UART_MspInit+0x208>)
 80031b0:	f004 fdae 	bl	8007d10 <HAL_GPIO_Init>
}
 80031b4:	e04a      	b.n	800324c <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==UART8)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2b      	ldr	r2, [pc, #172]	@ (8003268 <HAL_UART_MspInit+0x20c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d145      	bne.n	800324c <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80031c0:	f04f 0202 	mov.w	r2, #2
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031d2:	f107 0320 	add.w	r3, r7, #32
 80031d6:	4618      	mov	r0, r3
 80031d8:	f006 f8d0 	bl	800937c <HAL_RCCEx_PeriphCLKConfig>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_UART_MspInit+0x18a>
      Error_Handler();
 80031e2:	f7fe fec1 	bl	8001f68 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80031e6:	4b1c      	ldr	r3, [pc, #112]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 80031e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 80031ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80031f6:	4b18      	ldr	r3, [pc, #96]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 80031f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80031fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003200:	60fb      	str	r3, [r7, #12]
 8003202:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003204:	4b14      	ldr	r3, [pc, #80]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 8003206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800320a:	4a13      	ldr	r2, [pc, #76]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 800320c:	f043 0310 	orr.w	r3, r3, #16
 8003210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003214:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <HAL_UART_MspInit+0x1fc>)
 8003216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 8003222:	2303      	movs	r3, #3
 8003224:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	2302      	movs	r3, #2
 800322a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800323a:	2308      	movs	r3, #8
 800323c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003240:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8003244:	4619      	mov	r1, r3
 8003246:	4807      	ldr	r0, [pc, #28]	@ (8003264 <HAL_UART_MspInit+0x208>)
 8003248:	f004 fd62 	bl	8007d10 <HAL_GPIO_Init>
}
 800324c:	bf00      	nop
 800324e:	37f8      	adds	r7, #248	@ 0xf8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40004c00 	.word	0x40004c00
 8003258:	58024400 	.word	0x58024400
 800325c:	58020800 	.word	0x58020800
 8003260:	40007800 	.word	0x40007800
 8003264:	58021000 	.word	0x58021000
 8003268:	40007c00 	.word	0x40007c00

0800326c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800326c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032a4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003270:	f7ff f9b2 	bl	80025d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003274:	480c      	ldr	r0, [pc, #48]	@ (80032a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003276:	490d      	ldr	r1, [pc, #52]	@ (80032ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003278:	4a0d      	ldr	r2, [pc, #52]	@ (80032b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800327a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800327c:	e002      	b.n	8003284 <LoopCopyDataInit>

0800327e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800327e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003282:	3304      	adds	r3, #4

08003284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003288:	d3f9      	bcc.n	800327e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800328a:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800328c:	4c0a      	ldr	r4, [pc, #40]	@ (80032b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800328e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003290:	e001      	b.n	8003296 <LoopFillZerobss>

08003292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003294:	3204      	adds	r2, #4

08003296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003298:	d3fb      	bcc.n	8003292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800329a:	f00a fc93 	bl	800dbc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800329e:	f7fe fc35 	bl	8001b0c <main>
  bx  lr
 80032a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032a4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80032a8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80032ac:	240000c8 	.word	0x240000c8
  ldr r2, =_sidata
 80032b0:	0800dcdc 	.word	0x0800dcdc
  ldr r2, =_sbss
 80032b4:	24000188 	.word	0x24000188
  ldr r4, =_ebss
 80032b8:	24000a14 	.word	0x24000a14

080032bc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032bc:	e7fe      	b.n	80032bc <ADC3_IRQHandler>
	...

080032c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032c6:	2003      	movs	r0, #3
 80032c8:	f001 fc72 	bl	8004bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032cc:	f005 fe80 	bl	8008fd0 <HAL_RCC_GetSysClockFreq>
 80032d0:	4602      	mov	r2, r0
 80032d2:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <HAL_Init+0x68>)
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	0a1b      	lsrs	r3, r3, #8
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	4913      	ldr	r1, [pc, #76]	@ (800332c <HAL_Init+0x6c>)
 80032de:	5ccb      	ldrb	r3, [r1, r3]
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
 80032e8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003328 <HAL_Init+0x68>)
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	4a0e      	ldr	r2, [pc, #56]	@ (800332c <HAL_Init+0x6c>)
 80032f4:	5cd3      	ldrb	r3, [r2, r3]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003300:	4a0b      	ldr	r2, [pc, #44]	@ (8003330 <HAL_Init+0x70>)
 8003302:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003304:	4a0b      	ldr	r2, [pc, #44]	@ (8003334 <HAL_Init+0x74>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800330a:	200f      	movs	r0, #15
 800330c:	f000 f814 	bl	8003338 <HAL_InitTick>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e002      	b.n	8003320 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800331a:	f7ff f8d7 	bl	80024cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	58024400 	.word	0x58024400
 800332c:	0800dc8c 	.word	0x0800dc8c
 8003330:	240000b8 	.word	0x240000b8
 8003334:	240000b4 	.word	0x240000b4

08003338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003340:	4b15      	ldr	r3, [pc, #84]	@ (8003398 <HAL_InitTick+0x60>)
 8003342:	781b      	ldrb	r3, [r3, #0]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d101      	bne.n	800334c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e021      	b.n	8003390 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800334c:	4b13      	ldr	r3, [pc, #76]	@ (800339c <HAL_InitTick+0x64>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b11      	ldr	r3, [pc, #68]	@ (8003398 <HAL_InitTick+0x60>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	4619      	mov	r1, r3
 8003356:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800335a:	fbb3 f3f1 	udiv	r3, r3, r1
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	4618      	mov	r0, r3
 8003364:	f001 fc57 	bl	8004c16 <HAL_SYSTICK_Config>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e00e      	b.n	8003390 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b0f      	cmp	r3, #15
 8003376:	d80a      	bhi.n	800338e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003378:	2200      	movs	r2, #0
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	f04f 30ff 	mov.w	r0, #4294967295
 8003380:	f001 fc21 	bl	8004bc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003384:	4a06      	ldr	r2, [pc, #24]	@ (80033a0 <HAL_InitTick+0x68>)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
 800338c:	e000      	b.n	8003390 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
}
 8003390:	4618      	mov	r0, r3
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	240000c4 	.word	0x240000c4
 800339c:	240000b4 	.word	0x240000b4
 80033a0:	240000c0 	.word	0x240000c0

080033a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80033a8:	4b06      	ldr	r3, [pc, #24]	@ (80033c4 <HAL_IncTick+0x20>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b06      	ldr	r3, [pc, #24]	@ (80033c8 <HAL_IncTick+0x24>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4413      	add	r3, r2
 80033b4:	4a04      	ldr	r2, [pc, #16]	@ (80033c8 <HAL_IncTick+0x24>)
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	240000c4 	.word	0x240000c4
 80033c8:	24000a10 	.word	0x24000a10

080033cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	af00      	add	r7, sp, #0
  return uwTick;
 80033d0:	4b03      	ldr	r3, [pc, #12]	@ (80033e0 <HAL_GetTick+0x14>)
 80033d2:	681b      	ldr	r3, [r3, #0]
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	24000a10 	.word	0x24000a10

080033e4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80033e4:	b480      	push	{r7}
 80033e6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80033e8:	4b03      	ldr	r3, [pc, #12]	@ (80033f8 <HAL_GetREVID+0x14>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	0c1b      	lsrs	r3, r3, #16
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	5c001000 	.word	0x5c001000

080033fc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003404:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800340c:	4904      	ldr	r1, [pc, #16]	@ (8003420 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4313      	orrs	r3, r2
 8003412:	604b      	str	r3, [r1, #4]
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	58000400 	.word	0x58000400

08003424 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	431a      	orrs	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	609a      	str	r2, [r3, #8]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
 8003452:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	609a      	str	r2, [r3, #8]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	3360      	adds	r3, #96	@ 0x60
 800349e:	461a      	mov	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	431a      	orrs	r2, r3
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f003 031f 	and.w	r3, r3, #31
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	431a      	orrs	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	611a      	str	r2, [r3, #16]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80034fe:	b480      	push	{r7}
 8003500:	b087      	sub	sp, #28
 8003502:	af00      	add	r7, sp, #0
 8003504:	60f8      	str	r0, [r7, #12]
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3360      	adds	r3, #96	@ 0x60
 800350e:	461a      	mov	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	4413      	add	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	431a      	orrs	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	601a      	str	r2, [r3, #0]
  }
}
 8003528:	bf00      	nop
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003548:	2301      	movs	r3, #1
 800354a:	e000      	b.n	800354e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800355a:	b480      	push	{r7}
 800355c:	b087      	sub	sp, #28
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	3330      	adds	r3, #48	@ 0x30
 800356a:	461a      	mov	r2, r3
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	0a1b      	lsrs	r3, r3, #8
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	4413      	add	r3, r2
 8003578:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	211f      	movs	r1, #31
 8003586:	fa01 f303 	lsl.w	r3, r1, r3
 800358a:	43db      	mvns	r3, r3
 800358c:	401a      	ands	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	0e9b      	lsrs	r3, r3, #26
 8003592:	f003 011f 	and.w	r1, r3, #31
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	431a      	orrs	r2, r3
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f023 0203 	bic.w	r2, r3, #3
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	60da      	str	r2, [r3, #12]
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	3314      	adds	r3, #20
 80035e8:	461a      	mov	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	0e5b      	lsrs	r3, r3, #25
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	4413      	add	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	0d1b      	lsrs	r3, r3, #20
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2107      	movs	r1, #7
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	401a      	ands	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	0d1b      	lsrs	r3, r3, #20
 8003612:	f003 031f 	and.w	r3, r3, #31
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	fa01 f303 	lsl.w	r3, r1, r3
 800361c:	431a      	orrs	r2, r3
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003622:	bf00      	nop
 8003624:	371c      	adds	r7, #28
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
	...

08003630 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003648:	43db      	mvns	r3, r3
 800364a:	401a      	ands	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f003 0318 	and.w	r3, r3, #24
 8003652:	4908      	ldr	r1, [pc, #32]	@ (8003674 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003654:	40d9      	lsrs	r1, r3
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	400b      	ands	r3, r1
 800365a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	000fffff 	.word	0x000fffff

08003678 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 031f 	and.w	r3, r3, #31
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	4b04      	ldr	r3, [pc, #16]	@ (80036b4 <LL_ADC_DisableDeepPowerDown+0x20>)
 80036a2:	4013      	ands	r3, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6093      	str	r3, [r2, #8]
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr
 80036b4:	5fffffc0 	.word	0x5fffffc0

080036b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036cc:	d101      	bne.n	80036d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	4b05      	ldr	r3, [pc, #20]	@ (8003704 <LL_ADC_EnableInternalRegulator+0x24>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	6fffffc0 	.word	0x6fffffc0

08003708 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800371c:	d101      	bne.n	8003722 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	4b05      	ldr	r3, [pc, #20]	@ (8003754 <LL_ADC_Enable+0x24>)
 800373e:	4013      	ands	r3, r2
 8003740:	f043 0201 	orr.w	r2, r3, #1
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	7fffffc0 	.word	0x7fffffc0

08003758 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <LL_ADC_IsEnabled+0x18>
 800376c:	2301      	movs	r3, #1
 800376e:	e000      	b.n	8003772 <LL_ADC_IsEnabled+0x1a>
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <LL_ADC_REG_StartConversion+0x24>)
 800378e:	4013      	ands	r3, r2
 8003790:	f043 0204 	orr.w	r2, r3, #4
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr
 80037a4:	7fffffc0 	.word	0x7fffffc0

080037a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d101      	bne.n	80037c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d101      	bne.n	80037e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037f4:	b590      	push	{r4, r7, lr}
 80037f6:	b089      	sub	sp, #36	@ 0x24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e18f      	b.n	8003b2e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f7fd f835 	bl	800088c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff3f 	bl	80036b8 <LL_ADC_IsDeepPowerDownEnabled>
 800383a:	4603      	mov	r3, r0
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff ff25 	bl	8003694 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff5a 	bl	8003708 <LL_ADC_IsInternalRegulatorEnabled>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d114      	bne.n	8003884 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff ff3e 	bl	80036e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003864:	4b87      	ldr	r3, [pc, #540]	@ (8003a84 <HAL_ADC_Init+0x290>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	4a87      	ldr	r2, [pc, #540]	@ (8003a88 <HAL_ADC_Init+0x294>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	3301      	adds	r3, #1
 8003874:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003876:	e002      	b.n	800387e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	3b01      	subs	r3, #1
 800387c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1f9      	bne.n	8003878 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ff3d 	bl	8003708 <LL_ADC_IsInternalRegulatorEnabled>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10d      	bne.n	80038b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003898:	f043 0210 	orr.w	r2, r3, #16
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ff77 	bl	80037a8 <LL_ADC_REG_IsConversionOngoing>
 80038ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f040 8129 	bne.w	8003b1c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f040 8125 	bne.w	8003b1c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038da:	f043 0202 	orr.w	r2, r3, #2
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff36 	bl	8003758 <LL_ADC_IsEnabled>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d136      	bne.n	8003960 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a65      	ldr	r2, [pc, #404]	@ (8003a8c <HAL_ADC_Init+0x298>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_ADC_Init+0x112>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a63      	ldr	r2, [pc, #396]	@ (8003a90 <HAL_ADC_Init+0x29c>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d10e      	bne.n	8003924 <HAL_ADC_Init+0x130>
 8003906:	4861      	ldr	r0, [pc, #388]	@ (8003a8c <HAL_ADC_Init+0x298>)
 8003908:	f7ff ff26 	bl	8003758 <LL_ADC_IsEnabled>
 800390c:	4604      	mov	r4, r0
 800390e:	4860      	ldr	r0, [pc, #384]	@ (8003a90 <HAL_ADC_Init+0x29c>)
 8003910:	f7ff ff22 	bl	8003758 <LL_ADC_IsEnabled>
 8003914:	4603      	mov	r3, r0
 8003916:	4323      	orrs	r3, r4
 8003918:	2b00      	cmp	r3, #0
 800391a:	bf0c      	ite	eq
 800391c:	2301      	moveq	r3, #1
 800391e:	2300      	movne	r3, #0
 8003920:	b2db      	uxtb	r3, r3
 8003922:	e008      	b.n	8003936 <HAL_ADC_Init+0x142>
 8003924:	485b      	ldr	r0, [pc, #364]	@ (8003a94 <HAL_ADC_Init+0x2a0>)
 8003926:	f7ff ff17 	bl	8003758 <LL_ADC_IsEnabled>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf0c      	ite	eq
 8003930:	2301      	moveq	r3, #1
 8003932:	2300      	movne	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d012      	beq.n	8003960 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a53      	ldr	r2, [pc, #332]	@ (8003a8c <HAL_ADC_Init+0x298>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_ADC_Init+0x15a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a51      	ldr	r2, [pc, #324]	@ (8003a90 <HAL_ADC_Init+0x29c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <HAL_ADC_Init+0x15e>
 800394e:	4a52      	ldr	r2, [pc, #328]	@ (8003a98 <HAL_ADC_Init+0x2a4>)
 8003950:	e000      	b.n	8003954 <HAL_ADC_Init+0x160>
 8003952:	4a52      	ldr	r2, [pc, #328]	@ (8003a9c <HAL_ADC_Init+0x2a8>)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f7ff fd62 	bl	8003424 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003960:	f7ff fd40 	bl	80033e4 <HAL_GetREVID>
 8003964:	4603      	mov	r3, r0
 8003966:	f241 0203 	movw	r2, #4099	@ 0x1003
 800396a:	4293      	cmp	r3, r2
 800396c:	d914      	bls.n	8003998 <HAL_ADC_Init+0x1a4>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b10      	cmp	r3, #16
 8003974:	d110      	bne.n	8003998 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	7d5b      	ldrb	r3, [r3, #21]
 800397a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003980:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003986:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	7f1b      	ldrb	r3, [r3, #28]
 800398c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800398e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003990:	f043 030c 	orr.w	r3, r3, #12
 8003994:	61bb      	str	r3, [r7, #24]
 8003996:	e00d      	b.n	80039b4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	7d5b      	ldrb	r3, [r3, #21]
 800399c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039a2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80039a8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	7f1b      	ldrb	r3, [r3, #28]
 80039ae:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	7f1b      	ldrb	r3, [r3, #28]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	045b      	lsls	r3, r3, #17
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa0 <HAL_ADC_Init+0x2ac>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6812      	ldr	r2, [r2, #0]
 80039f4:	69b9      	ldr	r1, [r7, #24]
 80039f6:	430b      	orrs	r3, r1
 80039f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fed2 	bl	80037a8 <LL_ADC_REG_IsConversionOngoing>
 8003a04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff fedf 	bl	80037ce <LL_ADC_INJ_IsConversionOngoing>
 8003a10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d15f      	bne.n	8003ad8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d15c      	bne.n	8003ad8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	7d1b      	ldrb	r3, [r3, #20]
 8003a22:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68da      	ldr	r2, [r3, #12]
 8003a32:	4b1c      	ldr	r3, [pc, #112]	@ (8003aa4 <HAL_ADC_Init+0x2b0>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	69b9      	ldr	r1, [r7, #24]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d130      	bne.n	8003aac <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	4b14      	ldr	r3, [pc, #80]	@ (8003aa8 <HAL_ADC_Init+0x2b4>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a5e:	3a01      	subs	r2, #1
 8003a60:	0411      	lsls	r1, r2, #16
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003a66:	4311      	orrs	r1, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a72:	430a      	orrs	r2, r1
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f042 0201 	orr.w	r2, r2, #1
 8003a7e:	611a      	str	r2, [r3, #16]
 8003a80:	e01c      	b.n	8003abc <HAL_ADC_Init+0x2c8>
 8003a82:	bf00      	nop
 8003a84:	240000b4 	.word	0x240000b4
 8003a88:	053e2d63 	.word	0x053e2d63
 8003a8c:	40022000 	.word	0x40022000
 8003a90:	40022100 	.word	0x40022100
 8003a94:	58026000 	.word	0x58026000
 8003a98:	40022300 	.word	0x40022300
 8003a9c:	58026300 	.word	0x58026300
 8003aa0:	fff0c003 	.word	0xfff0c003
 8003aa4:	ffffbffc 	.word	0xffffbffc
 8003aa8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	691a      	ldr	r2, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0201 	bic.w	r2, r2, #1
 8003aba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 fd8c 	bl	80045f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d10c      	bne.n	8003afa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae6:	f023 010f 	bic.w	r1, r3, #15
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	1e5a      	subs	r2, r3, #1
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	631a      	str	r2, [r3, #48]	@ 0x30
 8003af8:	e007      	b.n	8003b0a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 020f 	bic.w	r2, r2, #15
 8003b08:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	f043 0201 	orr.w	r2, r3, #1
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	655a      	str	r2, [r3, #84]	@ 0x54
 8003b1a:	e007      	b.n	8003b2c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b20:	f043 0210 	orr.w	r2, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003b2c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3724      	adds	r7, #36	@ 0x24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd90      	pop	{r4, r7, pc}
 8003b36:	bf00      	nop

08003b38 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a55      	ldr	r2, [pc, #340]	@ (8003ca0 <HAL_ADC_Start_DMA+0x168>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <HAL_ADC_Start_DMA+0x20>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a54      	ldr	r2, [pc, #336]	@ (8003ca4 <HAL_ADC_Start_DMA+0x16c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_ADC_Start_DMA+0x24>
 8003b58:	4b53      	ldr	r3, [pc, #332]	@ (8003ca8 <HAL_ADC_Start_DMA+0x170>)
 8003b5a:	e000      	b.n	8003b5e <HAL_ADC_Start_DMA+0x26>
 8003b5c:	4b53      	ldr	r3, [pc, #332]	@ (8003cac <HAL_ADC_Start_DMA+0x174>)
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fd8a 	bl	8003678 <LL_ADC_GetMultimode>
 8003b64:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff fe1c 	bl	80037a8 <LL_ADC_REG_IsConversionOngoing>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f040 808c 	bne.w	8003c90 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_ADC_Start_DMA+0x4e>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e087      	b.n	8003c96 <HAL_ADC_Start_DMA+0x15e>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d005      	beq.n	8003ba0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	2b05      	cmp	r3, #5
 8003b98:	d002      	beq.n	8003ba0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b09      	cmp	r3, #9
 8003b9e:	d170      	bne.n	8003c82 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 fc07 	bl	80043b4 <ADC_Enable>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d163      	bne.n	8003c78 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bb4:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb0 <HAL_ADC_Start_DMA+0x178>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a37      	ldr	r2, [pc, #220]	@ (8003ca4 <HAL_ADC_Start_DMA+0x16c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d002      	beq.n	8003bd0 <HAL_ADC_Start_DMA+0x98>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	e000      	b.n	8003bd2 <HAL_ADC_Start_DMA+0x9a>
 8003bd0:	4b33      	ldr	r3, [pc, #204]	@ (8003ca0 <HAL_ADC_Start_DMA+0x168>)
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	6812      	ldr	r2, [r2, #0]
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d002      	beq.n	8003be0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d105      	bne.n	8003bec <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003be4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfc:	f023 0206 	bic.w	r2, r3, #6
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c04:	e002      	b.n	8003c0c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c10:	4a28      	ldr	r2, [pc, #160]	@ (8003cb4 <HAL_ADC_Start_DMA+0x17c>)
 8003c12:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c18:	4a27      	ldr	r2, [pc, #156]	@ (8003cb8 <HAL_ADC_Start_DMA+0x180>)
 8003c1a:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c20:	4a26      	ldr	r2, [pc, #152]	@ (8003cbc <HAL_ADC_Start_DMA+0x184>)
 8003c22:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	221c      	movs	r2, #28
 8003c2a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685a      	ldr	r2, [r3, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f042 0210 	orr.w	r2, r2, #16
 8003c42:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f7ff fcaf 	bl	80035b2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3340      	adds	r3, #64	@ 0x40
 8003c5e:	4619      	mov	r1, r3
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f001 fb40 	bl	80052e8 <HAL_DMA_Start_IT>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7ff fd85 	bl	8003780 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c76:	e00d      	b.n	8003c94 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 8003c80:	e008      	b.n	8003c94 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003c8e:	e001      	b.n	8003c94 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
 8003c92:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40022000 	.word	0x40022000
 8003ca4:	40022100 	.word	0x40022100
 8003ca8:	40022300 	.word	0x40022300
 8003cac:	58026300 	.word	0x58026300
 8003cb0:	fffff0fe 	.word	0xfffff0fe
 8003cb4:	080044c9 	.word	0x080044c9
 8003cb8:	080045a1 	.word	0x080045a1
 8003cbc:	080045bd 	.word	0x080045bd

08003cc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	b0a1      	sub	sp, #132	@ 0x84
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	4a65      	ldr	r2, [pc, #404]	@ (8003eac <HAL_ADC_ConfigChannel+0x1b0>)
 8003d16:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d101      	bne.n	8003d26 <HAL_ADC_ConfigChannel+0x2a>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e32e      	b.n	8004384 <HAL_ADC_ConfigChannel+0x688>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fd38 	bl	80037a8 <LL_ADC_REG_IsConversionOngoing>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f040 8313 	bne.w	8004366 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	db2c      	blt.n	8003da2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d108      	bne.n	8003d66 <HAL_ADC_ConfigChannel+0x6a>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	0e9b      	lsrs	r3, r3, #26
 8003d5a:	f003 031f 	and.w	r3, r3, #31
 8003d5e:	2201      	movs	r2, #1
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	e016      	b.n	8003d94 <HAL_ADC_ConfigChannel+0x98>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	663b      	str	r3, [r7, #96]	@ 0x60
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d6e:	fa93 f3a3 	rbit	r3, r3
 8003d72:	667b      	str	r3, [r7, #100]	@ 0x64
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d76:	65fb      	str	r3, [r7, #92]	@ 0x5c
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d78:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003d7e:	2320      	movs	r3, #32
 8003d80:	e003      	b.n	8003d8a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8003d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d84:	fab3 f383 	clz	r3, r3
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	f003 031f 	and.w	r3, r3, #31
 8003d8e:	2201      	movs	r2, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	69d1      	ldr	r1, [r2, #28]
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6812      	ldr	r2, [r2, #0]
 8003d9e:	430b      	orrs	r3, r1
 8003da0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6859      	ldr	r1, [r3, #4]
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	f7ff fbd3 	bl	800355a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff fcf5 	bl	80037a8 <LL_ADC_REG_IsConversionOngoing>
 8003dbe:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff fd02 	bl	80037ce <LL_ADC_INJ_IsConversionOngoing>
 8003dca:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f040 80b8 	bne.w	8003f44 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003dd4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 80b4 	bne.w	8003f44 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6819      	ldr	r1, [r3, #0]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	461a      	mov	r2, r3
 8003dea:	f7ff fbf5 	bl	80035d8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003dee:	4b30      	ldr	r3, [pc, #192]	@ (8003eb0 <HAL_ADC_ConfigChannel+0x1b4>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dfa:	d10b      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x118>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	089b      	lsrs	r3, r3, #2
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e12:	e01d      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x154>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 0310 	and.w	r3, r3, #16
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <HAL_ADC_ConfigChannel+0x13e>
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	fa02 f303 	lsl.w	r3, r2, r3
 8003e38:	e00a      	b.n	8003e50 <HAL_ADC_ConfigChannel+0x154>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e50:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d02c      	beq.n	8003eb4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6818      	ldr	r0, [r3, #0]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	6919      	ldr	r1, [r3, #16]
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e68:	f7ff fb10 	bl	800348c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6818      	ldr	r0, [r3, #0]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6919      	ldr	r1, [r3, #16]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	7e5b      	ldrb	r3, [r3, #25]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d102      	bne.n	8003e82 <HAL_ADC_ConfigChannel+0x186>
 8003e7c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e80:	e000      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x188>
 8003e82:	2300      	movs	r3, #0
 8003e84:	461a      	mov	r2, r3
 8003e86:	f7ff fb3a 	bl	80034fe <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6919      	ldr	r1, [r3, #16]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	7e1b      	ldrb	r3, [r3, #24]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d102      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x1a4>
 8003e9a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e9e:	e000      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x1a6>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f7ff fb12 	bl	80034cc <LL_ADC_SetDataRightShift>
 8003ea8:	e04c      	b.n	8003f44 <HAL_ADC_ConfigChannel+0x248>
 8003eaa:	bf00      	nop
 8003eac:	47ff0000 	.word	0x47ff0000
 8003eb0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003eba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	069b      	lsls	r3, r3, #26
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d107      	bne.n	8003ed8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003ed6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ede:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	069b      	lsls	r3, r3, #26
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d107      	bne.n	8003efc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003efa:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f02:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	069b      	lsls	r3, r3, #26
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d107      	bne.n	8003f20 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f1e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f26:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	069b      	lsls	r3, r3, #26
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d107      	bne.n	8003f44 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003f42:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fc05 	bl	8003758 <LL_ADC_IsEnabled>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f040 8211 	bne.w	8004378 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6819      	ldr	r1, [r3, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f7ff fb64 	bl	8003630 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	4aa1      	ldr	r2, [pc, #644]	@ (80041f4 <HAL_ADC_ConfigChannel+0x4f8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	f040 812e 	bne.w	80041d0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x2a0>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	0e9b      	lsrs	r3, r3, #26
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	2b09      	cmp	r3, #9
 8003f92:	bf94      	ite	ls
 8003f94:	2301      	movls	r3, #1
 8003f96:	2300      	movhi	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	e019      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x2d4>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003fa4:	fa93 f3a3 	rbit	r3, r3
 8003fa8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fac:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8003fae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003fb4:	2320      	movs	r3, #32
 8003fb6:	e003      	b.n	8003fc0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003fb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fba:	fab3 f383 	clz	r3, r3
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	f003 031f 	and.w	r3, r3, #31
 8003fc6:	2b09      	cmp	r3, #9
 8003fc8:	bf94      	ite	ls
 8003fca:	2301      	movls	r3, #1
 8003fcc:	2300      	movhi	r3, #0
 8003fce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d079      	beq.n	80040c8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d107      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x2f4>
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	0e9b      	lsrs	r3, r3, #26
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	069b      	lsls	r3, r3, #26
 8003fea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003fee:	e015      	b.n	800401c <HAL_ADC_ConfigChannel+0x320>
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ff8:	fa93 f3a3 	rbit	r3, r3
 8003ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004000:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8004002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8004008:	2320      	movs	r3, #32
 800400a:	e003      	b.n	8004014 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800400c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800400e:	fab3 f383 	clz	r3, r3
 8004012:	b2db      	uxtb	r3, r3
 8004014:	3301      	adds	r3, #1
 8004016:	069b      	lsls	r3, r3, #26
 8004018:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_ADC_ConfigChannel+0x340>
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	0e9b      	lsrs	r3, r3, #26
 800402e:	3301      	adds	r3, #1
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	e017      	b.n	800406c <HAL_ADC_ConfigChannel+0x370>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004042:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004044:	fa93 f3a3 	rbit	r3, r3
 8004048:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800404a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800404c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800404e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004054:	2320      	movs	r3, #32
 8004056:	e003      	b.n	8004060 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	3301      	adds	r3, #1
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	2101      	movs	r1, #1
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	ea42 0103 	orr.w	r1, r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <HAL_ADC_ConfigChannel+0x396>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	0e9b      	lsrs	r3, r3, #26
 8004082:	3301      	adds	r3, #1
 8004084:	f003 021f 	and.w	r2, r3, #31
 8004088:	4613      	mov	r3, r2
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	4413      	add	r3, r2
 800408e:	051b      	lsls	r3, r3, #20
 8004090:	e018      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x3c8>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80040a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80040a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80040aa:	2320      	movs	r3, #32
 80040ac:	e003      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80040ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	3301      	adds	r3, #1
 80040b8:	f003 021f 	and.w	r2, r3, #31
 80040bc:	4613      	mov	r3, r2
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	4413      	add	r3, r2
 80040c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040c4:	430b      	orrs	r3, r1
 80040c6:	e07e      	b.n	80041c6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d107      	bne.n	80040e4 <HAL_ADC_ConfigChannel+0x3e8>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	0e9b      	lsrs	r3, r3, #26
 80040da:	3301      	adds	r3, #1
 80040dc:	069b      	lsls	r3, r3, #26
 80040de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e2:	e015      	b.n	8004110 <HAL_ADC_ConfigChannel+0x414>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ec:	fa93 f3a3 	rbit	r3, r3
 80040f0:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80040f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d101      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80040fc:	2320      	movs	r3, #32
 80040fe:	e003      	b.n	8004108 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8004100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004102:	fab3 f383 	clz	r3, r3
 8004106:	b2db      	uxtb	r3, r3
 8004108:	3301      	adds	r3, #1
 800410a:	069b      	lsls	r3, r3, #26
 800410c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <HAL_ADC_ConfigChannel+0x434>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0e9b      	lsrs	r3, r3, #26
 8004122:	3301      	adds	r3, #1
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2101      	movs	r1, #1
 800412a:	fa01 f303 	lsl.w	r3, r1, r3
 800412e:	e017      	b.n	8004160 <HAL_ADC_ConfigChannel+0x464>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	fa93 f3a3 	rbit	r3, r3
 800413c:	61bb      	str	r3, [r7, #24]
  return result;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004148:	2320      	movs	r3, #32
 800414a:	e003      	b.n	8004154 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	fab3 f383 	clz	r3, r3
 8004152:	b2db      	uxtb	r3, r3
 8004154:	3301      	adds	r3, #1
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	2101      	movs	r1, #1
 800415c:	fa01 f303 	lsl.w	r3, r1, r3
 8004160:	ea42 0103 	orr.w	r1, r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10d      	bne.n	800418c <HAL_ADC_ConfigChannel+0x490>
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	0e9b      	lsrs	r3, r3, #26
 8004176:	3301      	adds	r3, #1
 8004178:	f003 021f 	and.w	r2, r3, #31
 800417c:	4613      	mov	r3, r2
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	4413      	add	r3, r2
 8004182:	3b1e      	subs	r3, #30
 8004184:	051b      	lsls	r3, r3, #20
 8004186:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800418a:	e01b      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x4c8>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	fa93 f3a3 	rbit	r3, r3
 8004198:	60fb      	str	r3, [r7, #12]
  return result;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80041a4:	2320      	movs	r3, #32
 80041a6:	e003      	b.n	80041b0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	3301      	adds	r3, #1
 80041b2:	f003 021f 	and.w	r2, r3, #31
 80041b6:	4613      	mov	r3, r2
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	4413      	add	r3, r2
 80041bc:	3b1e      	subs	r3, #30
 80041be:	051b      	lsls	r3, r3, #20
 80041c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041c4:	430b      	orrs	r3, r1
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	6892      	ldr	r2, [r2, #8]
 80041ca:	4619      	mov	r1, r3
 80041cc:	f7ff fa04 	bl	80035d8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f280 80cf 	bge.w	8004378 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a06      	ldr	r2, [pc, #24]	@ (80041f8 <HAL_ADC_ConfigChannel+0x4fc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d004      	beq.n	80041ee <HAL_ADC_ConfigChannel+0x4f2>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a04      	ldr	r2, [pc, #16]	@ (80041fc <HAL_ADC_ConfigChannel+0x500>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d10a      	bne.n	8004204 <HAL_ADC_ConfigChannel+0x508>
 80041ee:	4b04      	ldr	r3, [pc, #16]	@ (8004200 <HAL_ADC_ConfigChannel+0x504>)
 80041f0:	e009      	b.n	8004206 <HAL_ADC_ConfigChannel+0x50a>
 80041f2:	bf00      	nop
 80041f4:	47ff0000 	.word	0x47ff0000
 80041f8:	40022000 	.word	0x40022000
 80041fc:	40022100 	.word	0x40022100
 8004200:	40022300 	.word	0x40022300
 8004204:	4b61      	ldr	r3, [pc, #388]	@ (800438c <HAL_ADC_ConfigChannel+0x690>)
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff f932 	bl	8003470 <LL_ADC_GetCommonPathInternalCh>
 800420c:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a5f      	ldr	r2, [pc, #380]	@ (8004390 <HAL_ADC_ConfigChannel+0x694>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d004      	beq.n	8004222 <HAL_ADC_ConfigChannel+0x526>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a5d      	ldr	r2, [pc, #372]	@ (8004394 <HAL_ADC_ConfigChannel+0x698>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10e      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x544>
 8004222:	485b      	ldr	r0, [pc, #364]	@ (8004390 <HAL_ADC_ConfigChannel+0x694>)
 8004224:	f7ff fa98 	bl	8003758 <LL_ADC_IsEnabled>
 8004228:	4604      	mov	r4, r0
 800422a:	485a      	ldr	r0, [pc, #360]	@ (8004394 <HAL_ADC_ConfigChannel+0x698>)
 800422c:	f7ff fa94 	bl	8003758 <LL_ADC_IsEnabled>
 8004230:	4603      	mov	r3, r0
 8004232:	4323      	orrs	r3, r4
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	e008      	b.n	8004252 <HAL_ADC_ConfigChannel+0x556>
 8004240:	4855      	ldr	r0, [pc, #340]	@ (8004398 <HAL_ADC_ConfigChannel+0x69c>)
 8004242:	f7ff fa89 	bl	8003758 <LL_ADC_IsEnabled>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf0c      	ite	eq
 800424c:	2301      	moveq	r3, #1
 800424e:	2300      	movne	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d07d      	beq.n	8004352 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a50      	ldr	r2, [pc, #320]	@ (800439c <HAL_ADC_ConfigChannel+0x6a0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d130      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x5c6>
 8004260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004262:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d12b      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a4a      	ldr	r2, [pc, #296]	@ (8004398 <HAL_ADC_ConfigChannel+0x69c>)
 8004270:	4293      	cmp	r3, r2
 8004272:	f040 8081 	bne.w	8004378 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a45      	ldr	r2, [pc, #276]	@ (8004390 <HAL_ADC_ConfigChannel+0x694>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_ADC_ConfigChannel+0x58e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a43      	ldr	r2, [pc, #268]	@ (8004394 <HAL_ADC_ConfigChannel+0x698>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <HAL_ADC_ConfigChannel+0x592>
 800428a:	4a45      	ldr	r2, [pc, #276]	@ (80043a0 <HAL_ADC_ConfigChannel+0x6a4>)
 800428c:	e000      	b.n	8004290 <HAL_ADC_ConfigChannel+0x594>
 800428e:	4a3f      	ldr	r2, [pc, #252]	@ (800438c <HAL_ADC_ConfigChannel+0x690>)
 8004290:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004292:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f7ff f8d6 	bl	800344a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800429e:	4b41      	ldr	r3, [pc, #260]	@ (80043a4 <HAL_ADC_ConfigChannel+0x6a8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	4a40      	ldr	r2, [pc, #256]	@ (80043a8 <HAL_ADC_ConfigChannel+0x6ac>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	099b      	lsrs	r3, r3, #6
 80042ac:	3301      	adds	r3, #1
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042b2:	e002      	b.n	80042ba <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f9      	bne.n	80042b4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042c0:	e05a      	b.n	8004378 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a39      	ldr	r2, [pc, #228]	@ (80043ac <HAL_ADC_ConfigChannel+0x6b0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d11e      	bne.n	800430a <HAL_ADC_ConfigChannel+0x60e>
 80042cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d119      	bne.n	800430a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a2f      	ldr	r2, [pc, #188]	@ (8004398 <HAL_ADC_ConfigChannel+0x69c>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d14b      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a2a      	ldr	r2, [pc, #168]	@ (8004390 <HAL_ADC_ConfigChannel+0x694>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_ADC_ConfigChannel+0x5f8>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a29      	ldr	r2, [pc, #164]	@ (8004394 <HAL_ADC_ConfigChannel+0x698>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d101      	bne.n	80042f8 <HAL_ADC_ConfigChannel+0x5fc>
 80042f4:	4a2a      	ldr	r2, [pc, #168]	@ (80043a0 <HAL_ADC_ConfigChannel+0x6a4>)
 80042f6:	e000      	b.n	80042fa <HAL_ADC_ConfigChannel+0x5fe>
 80042f8:	4a24      	ldr	r2, [pc, #144]	@ (800438c <HAL_ADC_ConfigChannel+0x690>)
 80042fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004300:	4619      	mov	r1, r3
 8004302:	4610      	mov	r0, r2
 8004304:	f7ff f8a1 	bl	800344a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004308:	e036      	b.n	8004378 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a28      	ldr	r2, [pc, #160]	@ (80043b0 <HAL_ADC_ConfigChannel+0x6b4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d131      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x67c>
 8004314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004316:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d12c      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1d      	ldr	r2, [pc, #116]	@ (8004398 <HAL_ADC_ConfigChannel+0x69c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d127      	bne.n	8004378 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a18      	ldr	r2, [pc, #96]	@ (8004390 <HAL_ADC_ConfigChannel+0x694>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d004      	beq.n	800433c <HAL_ADC_ConfigChannel+0x640>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a17      	ldr	r2, [pc, #92]	@ (8004394 <HAL_ADC_ConfigChannel+0x698>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d101      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x644>
 800433c:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <HAL_ADC_ConfigChannel+0x6a4>)
 800433e:	e000      	b.n	8004342 <HAL_ADC_ConfigChannel+0x646>
 8004340:	4a12      	ldr	r2, [pc, #72]	@ (800438c <HAL_ADC_ConfigChannel+0x690>)
 8004342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004344:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004348:	4619      	mov	r1, r3
 800434a:	4610      	mov	r0, r2
 800434c:	f7ff f87d 	bl	800344a <LL_ADC_SetCommonPathInternalCh>
 8004350:	e012      	b.n	8004378 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004356:	f043 0220 	orr.w	r2, r3, #32
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004364:	e008      	b.n	8004378 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004380:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004384:	4618      	mov	r0, r3
 8004386:	3784      	adds	r7, #132	@ 0x84
 8004388:	46bd      	mov	sp, r7
 800438a:	bd90      	pop	{r4, r7, pc}
 800438c:	58026300 	.word	0x58026300
 8004390:	40022000 	.word	0x40022000
 8004394:	40022100 	.word	0x40022100
 8004398:	58026000 	.word	0x58026000
 800439c:	cb840000 	.word	0xcb840000
 80043a0:	40022300 	.word	0x40022300
 80043a4:	240000b4 	.word	0x240000b4
 80043a8:	053e2d63 	.word	0x053e2d63
 80043ac:	c7520000 	.word	0xc7520000
 80043b0:	cfb80000 	.word	0xcfb80000

080043b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff f9c9 	bl	8003758 <LL_ADC_IsEnabled>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d16e      	bne.n	80044aa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	4b38      	ldr	r3, [pc, #224]	@ (80044b4 <ADC_Enable+0x100>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00d      	beq.n	80043f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	f043 0210 	orr.w	r2, r3, #16
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ea:	f043 0201 	orr.w	r2, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e05a      	b.n	80044ac <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff f998 	bl	8003730 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004400:	f7fe ffe4 	bl	80033cc <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a2b      	ldr	r2, [pc, #172]	@ (80044b8 <ADC_Enable+0x104>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <ADC_Enable+0x66>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a29      	ldr	r2, [pc, #164]	@ (80044bc <ADC_Enable+0x108>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d101      	bne.n	800441e <ADC_Enable+0x6a>
 800441a:	4b29      	ldr	r3, [pc, #164]	@ (80044c0 <ADC_Enable+0x10c>)
 800441c:	e000      	b.n	8004420 <ADC_Enable+0x6c>
 800441e:	4b29      	ldr	r3, [pc, #164]	@ (80044c4 <ADC_Enable+0x110>)
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff f929 	bl	8003678 <LL_ADC_GetMultimode>
 8004426:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a23      	ldr	r2, [pc, #140]	@ (80044bc <ADC_Enable+0x108>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d002      	beq.n	8004438 <ADC_Enable+0x84>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	e000      	b.n	800443a <ADC_Enable+0x86>
 8004438:	4b1f      	ldr	r3, [pc, #124]	@ (80044b8 <ADC_Enable+0x104>)
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	6812      	ldr	r2, [r2, #0]
 800443e:	4293      	cmp	r3, r2
 8004440:	d02c      	beq.n	800449c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d130      	bne.n	80044aa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004448:	e028      	b.n	800449c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff f982 	bl	8003758 <LL_ADC_IsEnabled>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7ff f966 	bl	8003730 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004464:	f7fe ffb2 	bl	80033cc <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d914      	bls.n	800449c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d00d      	beq.n	800449c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004484:	f043 0210 	orr.w	r2, r3, #16
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004490:	f043 0201 	orr.w	r2, r3, #1
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e007      	b.n	80044ac <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d1cf      	bne.n	800444a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}
 80044b4:	8000003f 	.word	0x8000003f
 80044b8:	40022000 	.word	0x40022000
 80044bc:	40022100 	.word	0x40022100
 80044c0:	40022300 	.word	0x40022300
 80044c4:	58026300 	.word	0x58026300

080044c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044da:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d14b      	bne.n	800457a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d021      	beq.n	8004540 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7ff f817 	bl	8003534 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d032      	beq.n	8004572 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d12b      	bne.n	8004572 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d11f      	bne.n	8004572 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004536:	f043 0201 	orr.w	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	655a      	str	r2, [r3, #84]	@ 0x54
 800453e:	e018      	b.n	8004572 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d111      	bne.n	8004572 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004552:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d105      	bne.n	8004572 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800456a:	f043 0201 	orr.w	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004572:	68f8      	ldr	r0, [r7, #12]
 8004574:	f7ff fba4 	bl	8003cc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004578:	e00e      	b.n	8004598 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7ff fbae 	bl	8003ce8 <HAL_ADC_ErrorCallback>
}
 800458c:	e004      	b.n	8004598 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	4798      	blx	r3
}
 8004598:	bf00      	nop
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80045ae:	68f8      	ldr	r0, [r7, #12]
 80045b0:	f7ff fb90 	bl	8003cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045c8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045da:	f043 0204 	orr.w	r2, r3, #4
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f7ff fb80 	bl	8003ce8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80045e8:	bf00      	nop
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a7a      	ldr	r2, [pc, #488]	@ (80047e8 <ADC_ConfigureBoostMode+0x1f8>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d004      	beq.n	800460c <ADC_ConfigureBoostMode+0x1c>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a79      	ldr	r2, [pc, #484]	@ (80047ec <ADC_ConfigureBoostMode+0x1fc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d109      	bne.n	8004620 <ADC_ConfigureBoostMode+0x30>
 800460c:	4b78      	ldr	r3, [pc, #480]	@ (80047f0 <ADC_ConfigureBoostMode+0x200>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	e008      	b.n	8004632 <ADC_ConfigureBoostMode+0x42>
 8004620:	4b74      	ldr	r3, [pc, #464]	@ (80047f4 <ADC_ConfigureBoostMode+0x204>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01c      	beq.n	8004670 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004636:	f004 fe45 	bl	80092c4 <HAL_RCC_GetHCLKFreq>
 800463a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004644:	d010      	beq.n	8004668 <ADC_ConfigureBoostMode+0x78>
 8004646:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800464a:	d873      	bhi.n	8004734 <ADC_ConfigureBoostMode+0x144>
 800464c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004650:	d002      	beq.n	8004658 <ADC_ConfigureBoostMode+0x68>
 8004652:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004656:	d16d      	bne.n	8004734 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	60fb      	str	r3, [r7, #12]
        break;
 8004666:	e068      	b.n	800473a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	089b      	lsrs	r3, r3, #2
 800466c:	60fb      	str	r3, [r7, #12]
        break;
 800466e:	e064      	b.n	800473a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004670:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004674:	f04f 0100 	mov.w	r1, #0
 8004678:	f006 f88a 	bl	800a790 <HAL_RCCEx_GetPeriphCLKFreq>
 800467c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004686:	d051      	beq.n	800472c <ADC_ConfigureBoostMode+0x13c>
 8004688:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800468c:	d854      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x148>
 800468e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004692:	d047      	beq.n	8004724 <ADC_ConfigureBoostMode+0x134>
 8004694:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004698:	d84e      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x148>
 800469a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800469e:	d03d      	beq.n	800471c <ADC_ConfigureBoostMode+0x12c>
 80046a0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80046a4:	d848      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x148>
 80046a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046aa:	d033      	beq.n	8004714 <ADC_ConfigureBoostMode+0x124>
 80046ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80046b0:	d842      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x148>
 80046b2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046b6:	d029      	beq.n	800470c <ADC_ConfigureBoostMode+0x11c>
 80046b8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80046bc:	d83c      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x148>
 80046be:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046c2:	d01a      	beq.n	80046fa <ADC_ConfigureBoostMode+0x10a>
 80046c4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80046c8:	d836      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x148>
 80046ca:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046ce:	d014      	beq.n	80046fa <ADC_ConfigureBoostMode+0x10a>
 80046d0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80046d4:	d830      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x148>
 80046d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046da:	d00e      	beq.n	80046fa <ADC_ConfigureBoostMode+0x10a>
 80046dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046e0:	d82a      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x148>
 80046e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046e6:	d008      	beq.n	80046fa <ADC_ConfigureBoostMode+0x10a>
 80046e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80046ec:	d824      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x148>
 80046ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046f2:	d002      	beq.n	80046fa <ADC_ConfigureBoostMode+0x10a>
 80046f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80046f8:	d11e      	bne.n	8004738 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	0c9b      	lsrs	r3, r3, #18
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	60fb      	str	r3, [r7, #12]
        break;
 800470a:	e016      	b.n	800473a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	091b      	lsrs	r3, r3, #4
 8004710:	60fb      	str	r3, [r7, #12]
        break;
 8004712:	e012      	b.n	800473a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	095b      	lsrs	r3, r3, #5
 8004718:	60fb      	str	r3, [r7, #12]
        break;
 800471a:	e00e      	b.n	800473a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	099b      	lsrs	r3, r3, #6
 8004720:	60fb      	str	r3, [r7, #12]
        break;
 8004722:	e00a      	b.n	800473a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	09db      	lsrs	r3, r3, #7
 8004728:	60fb      	str	r3, [r7, #12]
        break;
 800472a:	e006      	b.n	800473a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	0a1b      	lsrs	r3, r3, #8
 8004730:	60fb      	str	r3, [r7, #12]
        break;
 8004732:	e002      	b.n	800473a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004734:	bf00      	nop
 8004736:	e000      	b.n	800473a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004738:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800473a:	f7fe fe53 	bl	80033e4 <HAL_GetREVID>
 800473e:	4603      	mov	r3, r0
 8004740:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004744:	4293      	cmp	r3, r2
 8004746:	d815      	bhi.n	8004774 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4a2b      	ldr	r2, [pc, #172]	@ (80047f8 <ADC_ConfigureBoostMode+0x208>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d908      	bls.n	8004762 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689a      	ldr	r2, [r3, #8]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800475e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004760:	e03e      	b.n	80047e0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004770:	609a      	str	r2, [r3, #8]
}
 8004772:	e035      	b.n	80047e0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	085b      	lsrs	r3, r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4a1f      	ldr	r2, [pc, #124]	@ (80047fc <ADC_ConfigureBoostMode+0x20c>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d808      	bhi.n	8004794 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004790:	609a      	str	r2, [r3, #8]
}
 8004792:	e025      	b.n	80047e0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4a1a      	ldr	r2, [pc, #104]	@ (8004800 <ADC_ConfigureBoostMode+0x210>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d80a      	bhi.n	80047b2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047ae:	609a      	str	r2, [r3, #8]
}
 80047b0:	e016      	b.n	80047e0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	4a13      	ldr	r2, [pc, #76]	@ (8004804 <ADC_ConfigureBoostMode+0x214>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d80a      	bhi.n	80047d0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047cc:	609a      	str	r2, [r3, #8]
}
 80047ce:	e007      	b.n	80047e0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689a      	ldr	r2, [r3, #8]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80047de:	609a      	str	r2, [r3, #8]
}
 80047e0:	bf00      	nop
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	40022000 	.word	0x40022000
 80047ec:	40022100 	.word	0x40022100
 80047f0:	40022300 	.word	0x40022300
 80047f4:	58026300 	.word	0x58026300
 80047f8:	01312d00 	.word	0x01312d00
 80047fc:	005f5e10 	.word	0x005f5e10
 8004800:	00bebc20 	.word	0x00bebc20
 8004804:	017d7840 	.word	0x017d7840

08004808 <LL_ADC_IsEnabled>:
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 0301 	and.w	r3, r3, #1
 8004818:	2b01      	cmp	r3, #1
 800481a:	d101      	bne.n	8004820 <LL_ADC_IsEnabled+0x18>
 800481c:	2301      	movs	r3, #1
 800481e:	e000      	b.n	8004822 <LL_ADC_IsEnabled+0x1a>
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <LL_ADC_REG_IsConversionOngoing>:
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b04      	cmp	r3, #4
 8004840:	d101      	bne.n	8004846 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004842:	2301      	movs	r3, #1
 8004844:	e000      	b.n	8004848 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004846:	2300      	movs	r3, #0
}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004854:	b590      	push	{r4, r7, lr}
 8004856:	b09f      	sub	sp, #124	@ 0x7c
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800486a:	2b01      	cmp	r3, #1
 800486c:	d101      	bne.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800486e:	2302      	movs	r3, #2
 8004870:	e0be      	b.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800487a:	2300      	movs	r3, #0
 800487c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800487e:	2300      	movs	r3, #0
 8004880:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a5c      	ldr	r2, [pc, #368]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d102      	bne.n	8004892 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800488c:	4b5b      	ldr	r3, [pc, #364]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800488e:	60bb      	str	r3, [r7, #8]
 8004890:	e001      	b.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a0:	f043 0220 	orr.w	r2, r3, #32
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e09d      	b.n	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff ffb9 	bl	800482e <LL_ADC_REG_IsConversionOngoing>
 80048bc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ffb3 	bl	800482e <LL_ADC_REG_IsConversionOngoing>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d17f      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d17c      	bne.n	80049ce <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a47      	ldr	r2, [pc, #284]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d004      	beq.n	80048e8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a46      	ldr	r2, [pc, #280]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d101      	bne.n	80048ec <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80048e8:	4b45      	ldr	r3, [pc, #276]	@ (8004a00 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80048ea:	e000      	b.n	80048ee <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80048ec:	4b45      	ldr	r3, [pc, #276]	@ (8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80048ee:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d039      	beq.n	800496c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80048f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	431a      	orrs	r2, r3
 8004906:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004908:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a3a      	ldr	r2, [pc, #232]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a38      	ldr	r2, [pc, #224]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10e      	bne.n	800493c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800491e:	4836      	ldr	r0, [pc, #216]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004920:	f7ff ff72 	bl	8004808 <LL_ADC_IsEnabled>
 8004924:	4604      	mov	r4, r0
 8004926:	4835      	ldr	r0, [pc, #212]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004928:	f7ff ff6e 	bl	8004808 <LL_ADC_IsEnabled>
 800492c:	4603      	mov	r3, r0
 800492e:	4323      	orrs	r3, r4
 8004930:	2b00      	cmp	r3, #0
 8004932:	bf0c      	ite	eq
 8004934:	2301      	moveq	r3, #1
 8004936:	2300      	movne	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e008      	b.n	800494e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800493c:	4832      	ldr	r0, [pc, #200]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800493e:	f7ff ff63 	bl	8004808 <LL_ADC_IsEnabled>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d047      	beq.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	4b2d      	ldr	r3, [pc, #180]	@ (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004958:	4013      	ands	r3, r2
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	6811      	ldr	r1, [r2, #0]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	6892      	ldr	r2, [r2, #8]
 8004962:	430a      	orrs	r2, r1
 8004964:	431a      	orrs	r2, r3
 8004966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004968:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800496a:	e03a      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800496c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004976:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a1e      	ldr	r2, [pc, #120]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a1d      	ldr	r2, [pc, #116]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d10e      	bne.n	80049aa <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800498c:	481a      	ldr	r0, [pc, #104]	@ (80049f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800498e:	f7ff ff3b 	bl	8004808 <LL_ADC_IsEnabled>
 8004992:	4604      	mov	r4, r0
 8004994:	4819      	ldr	r0, [pc, #100]	@ (80049fc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004996:	f7ff ff37 	bl	8004808 <LL_ADC_IsEnabled>
 800499a:	4603      	mov	r3, r0
 800499c:	4323      	orrs	r3, r4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	bf0c      	ite	eq
 80049a2:	2301      	moveq	r3, #1
 80049a4:	2300      	movne	r3, #0
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	e008      	b.n	80049bc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80049aa:	4817      	ldr	r0, [pc, #92]	@ (8004a08 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80049ac:	f7ff ff2c 	bl	8004808 <LL_ADC_IsEnabled>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	bf0c      	ite	eq
 80049b6:	2301      	moveq	r3, #1
 80049b8:	2300      	movne	r3, #0
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d010      	beq.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049c2:	689a      	ldr	r2, [r3, #8]
 80049c4:	4b11      	ldr	r3, [pc, #68]	@ (8004a0c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049ca:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049cc:	e009      	b.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d2:	f043 0220 	orr.w	r2, r3, #32
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80049e0:	e000      	b.n	80049e4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049e2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80049ec:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	377c      	adds	r7, #124	@ 0x7c
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd90      	pop	{r4, r7, pc}
 80049f8:	40022000 	.word	0x40022000
 80049fc:	40022100 	.word	0x40022100
 8004a00:	40022300 	.word	0x40022300
 8004a04:	58026300 	.word	0x58026300
 8004a08:	58026000 	.word	0x58026000
 8004a0c:	fffff0e0 	.word	0xfffff0e0

08004a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a20:	4b0b      	ldr	r3, [pc, #44]	@ (8004a50 <__NVIC_SetPriorityGrouping+0x40>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004a38:	4b06      	ldr	r3, [pc, #24]	@ (8004a54 <__NVIC_SetPriorityGrouping+0x44>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a3e:	4a04      	ldr	r2, [pc, #16]	@ (8004a50 <__NVIC_SetPriorityGrouping+0x40>)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	60d3      	str	r3, [r2, #12]
}
 8004a44:	bf00      	nop
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr
 8004a50:	e000ed00 	.word	0xe000ed00
 8004a54:	05fa0000 	.word	0x05fa0000

08004a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a5c:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <__NVIC_GetPriorityGrouping+0x18>)
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	0a1b      	lsrs	r3, r3, #8
 8004a62:	f003 0307 	and.w	r3, r3, #7
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	e000ed00 	.word	0xe000ed00

08004a74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	db0b      	blt.n	8004a9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	f003 021f 	and.w	r2, r3, #31
 8004a8c:	4907      	ldr	r1, [pc, #28]	@ (8004aac <__NVIC_EnableIRQ+0x38>)
 8004a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	2001      	movs	r0, #1
 8004a96:	fa00 f202 	lsl.w	r2, r0, r2
 8004a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	e000e100 	.word	0xe000e100

08004ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	6039      	str	r1, [r7, #0]
 8004aba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004abc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	db0a      	blt.n	8004ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	490c      	ldr	r1, [pc, #48]	@ (8004afc <__NVIC_SetPriority+0x4c>)
 8004aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ace:	0112      	lsls	r2, r2, #4
 8004ad0:	b2d2      	uxtb	r2, r2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ad8:	e00a      	b.n	8004af0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	4908      	ldr	r1, [pc, #32]	@ (8004b00 <__NVIC_SetPriority+0x50>)
 8004ae0:	88fb      	ldrh	r3, [r7, #6]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	3b04      	subs	r3, #4
 8004ae8:	0112      	lsls	r2, r2, #4
 8004aea:	b2d2      	uxtb	r2, r2
 8004aec:	440b      	add	r3, r1
 8004aee:	761a      	strb	r2, [r3, #24]
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000e100 	.word	0xe000e100
 8004b00:	e000ed00 	.word	0xe000ed00

08004b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b089      	sub	sp, #36	@ 0x24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f1c3 0307 	rsb	r3, r3, #7
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	bf28      	it	cs
 8004b22:	2304      	movcs	r3, #4
 8004b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3304      	adds	r3, #4
 8004b2a:	2b06      	cmp	r3, #6
 8004b2c:	d902      	bls.n	8004b34 <NVIC_EncodePriority+0x30>
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	3b03      	subs	r3, #3
 8004b32:	e000      	b.n	8004b36 <NVIC_EncodePriority+0x32>
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	43da      	mvns	r2, r3
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	401a      	ands	r2, r3
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	fa01 f303 	lsl.w	r3, r1, r3
 8004b56:	43d9      	mvns	r1, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b5c:	4313      	orrs	r3, r2
         );
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3724      	adds	r7, #36	@ 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3b01      	subs	r3, #1
 8004b78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b7c:	d301      	bcc.n	8004b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e00f      	b.n	8004ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b82:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <SysTick_Config+0x40>)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b8a:	210f      	movs	r1, #15
 8004b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b90:	f7ff ff8e 	bl	8004ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b94:	4b05      	ldr	r3, [pc, #20]	@ (8004bac <SysTick_Config+0x40>)
 8004b96:	2200      	movs	r2, #0
 8004b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b9a:	4b04      	ldr	r3, [pc, #16]	@ (8004bac <SysTick_Config+0x40>)
 8004b9c:	2207      	movs	r2, #7
 8004b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	e000e010 	.word	0xe000e010

08004bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff ff29 	bl	8004a10 <__NVIC_SetPriorityGrouping>
}
 8004bbe:	bf00      	nop
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b086      	sub	sp, #24
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	4603      	mov	r3, r0
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004bd4:	f7ff ff40 	bl	8004a58 <__NVIC_GetPriorityGrouping>
 8004bd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	6978      	ldr	r0, [r7, #20]
 8004be0:	f7ff ff90 	bl	8004b04 <NVIC_EncodePriority>
 8004be4:	4602      	mov	r2, r0
 8004be6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004bea:	4611      	mov	r1, r2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7ff ff5f 	bl	8004ab0 <__NVIC_SetPriority>
}
 8004bf2:	bf00      	nop
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b082      	sub	sp, #8
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	4603      	mov	r3, r0
 8004c02:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff ff33 	bl	8004a74 <__NVIC_EnableIRQ>
}
 8004c0e:	bf00      	nop
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ffa4 	bl	8004b6c <SysTick_Config>
 8004c24:	4603      	mov	r3, r0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004c38:	f7fe fbc8 	bl	80033cc <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e316      	b.n	8005276 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a66      	ldr	r2, [pc, #408]	@ (8004de8 <HAL_DMA_Init+0x1b8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d04a      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a65      	ldr	r2, [pc, #404]	@ (8004dec <HAL_DMA_Init+0x1bc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d045      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a63      	ldr	r2, [pc, #396]	@ (8004df0 <HAL_DMA_Init+0x1c0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d040      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a62      	ldr	r2, [pc, #392]	@ (8004df4 <HAL_DMA_Init+0x1c4>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d03b      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a60      	ldr	r2, [pc, #384]	@ (8004df8 <HAL_DMA_Init+0x1c8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d036      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a5f      	ldr	r2, [pc, #380]	@ (8004dfc <HAL_DMA_Init+0x1cc>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d031      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a5d      	ldr	r2, [pc, #372]	@ (8004e00 <HAL_DMA_Init+0x1d0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d02c      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a5c      	ldr	r2, [pc, #368]	@ (8004e04 <HAL_DMA_Init+0x1d4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d027      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a5a      	ldr	r2, [pc, #360]	@ (8004e08 <HAL_DMA_Init+0x1d8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d022      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a59      	ldr	r2, [pc, #356]	@ (8004e0c <HAL_DMA_Init+0x1dc>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d01d      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a57      	ldr	r2, [pc, #348]	@ (8004e10 <HAL_DMA_Init+0x1e0>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d018      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a56      	ldr	r2, [pc, #344]	@ (8004e14 <HAL_DMA_Init+0x1e4>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d013      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a54      	ldr	r2, [pc, #336]	@ (8004e18 <HAL_DMA_Init+0x1e8>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00e      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a53      	ldr	r2, [pc, #332]	@ (8004e1c <HAL_DMA_Init+0x1ec>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d009      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a51      	ldr	r2, [pc, #324]	@ (8004e20 <HAL_DMA_Init+0x1f0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d004      	beq.n	8004ce8 <HAL_DMA_Init+0xb8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a50      	ldr	r2, [pc, #320]	@ (8004e24 <HAL_DMA_Init+0x1f4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d101      	bne.n	8004cec <HAL_DMA_Init+0xbc>
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <HAL_DMA_Init+0xbe>
 8004cec:	2300      	movs	r3, #0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 813b 	beq.w	8004f6a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a37      	ldr	r2, [pc, #220]	@ (8004de8 <HAL_DMA_Init+0x1b8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d04a      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a36      	ldr	r2, [pc, #216]	@ (8004dec <HAL_DMA_Init+0x1bc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d045      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a34      	ldr	r2, [pc, #208]	@ (8004df0 <HAL_DMA_Init+0x1c0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d040      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a33      	ldr	r2, [pc, #204]	@ (8004df4 <HAL_DMA_Init+0x1c4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d03b      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a31      	ldr	r2, [pc, #196]	@ (8004df8 <HAL_DMA_Init+0x1c8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d036      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a30      	ldr	r2, [pc, #192]	@ (8004dfc <HAL_DMA_Init+0x1cc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d031      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a2e      	ldr	r2, [pc, #184]	@ (8004e00 <HAL_DMA_Init+0x1d0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d02c      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2d      	ldr	r2, [pc, #180]	@ (8004e04 <HAL_DMA_Init+0x1d4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d027      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a2b      	ldr	r2, [pc, #172]	@ (8004e08 <HAL_DMA_Init+0x1d8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d022      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a2a      	ldr	r2, [pc, #168]	@ (8004e0c <HAL_DMA_Init+0x1dc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d01d      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a28      	ldr	r2, [pc, #160]	@ (8004e10 <HAL_DMA_Init+0x1e0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d018      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a27      	ldr	r2, [pc, #156]	@ (8004e14 <HAL_DMA_Init+0x1e4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d013      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a25      	ldr	r2, [pc, #148]	@ (8004e18 <HAL_DMA_Init+0x1e8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00e      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a24      	ldr	r2, [pc, #144]	@ (8004e1c <HAL_DMA_Init+0x1ec>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a22      	ldr	r2, [pc, #136]	@ (8004e20 <HAL_DMA_Init+0x1f0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d004      	beq.n	8004da4 <HAL_DMA_Init+0x174>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a21      	ldr	r2, [pc, #132]	@ (8004e24 <HAL_DMA_Init+0x1f4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d108      	bne.n	8004db6 <HAL_DMA_Init+0x186>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0201 	bic.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e007      	b.n	8004dc6 <HAL_DMA_Init+0x196>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f022 0201 	bic.w	r2, r2, #1
 8004dc4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004dc6:	e02f      	b.n	8004e28 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dc8:	f7fe fb00 	bl	80033cc <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	2b05      	cmp	r3, #5
 8004dd4:	d928      	bls.n	8004e28 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2203      	movs	r2, #3
 8004de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e246      	b.n	8005276 <HAL_DMA_Init+0x646>
 8004de8:	40020010 	.word	0x40020010
 8004dec:	40020028 	.word	0x40020028
 8004df0:	40020040 	.word	0x40020040
 8004df4:	40020058 	.word	0x40020058
 8004df8:	40020070 	.word	0x40020070
 8004dfc:	40020088 	.word	0x40020088
 8004e00:	400200a0 	.word	0x400200a0
 8004e04:	400200b8 	.word	0x400200b8
 8004e08:	40020410 	.word	0x40020410
 8004e0c:	40020428 	.word	0x40020428
 8004e10:	40020440 	.word	0x40020440
 8004e14:	40020458 	.word	0x40020458
 8004e18:	40020470 	.word	0x40020470
 8004e1c:	40020488 	.word	0x40020488
 8004e20:	400204a0 	.word	0x400204a0
 8004e24:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1c8      	bne.n	8004dc8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004e3e:	697a      	ldr	r2, [r7, #20]
 8004e40:	4b83      	ldr	r3, [pc, #524]	@ (8005050 <HAL_DMA_Init+0x420>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004e4e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e5a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e66:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d107      	bne.n	8004e8c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e84:	4313      	orrs	r3, r2
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004e8c:	4b71      	ldr	r3, [pc, #452]	@ (8005054 <HAL_DMA_Init+0x424>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4b71      	ldr	r3, [pc, #452]	@ (8005058 <HAL_DMA_Init+0x428>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e98:	d328      	bcc.n	8004eec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b28      	cmp	r3, #40	@ 0x28
 8004ea0:	d903      	bls.n	8004eaa <HAL_DMA_Init+0x27a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ea8:	d917      	bls.n	8004eda <HAL_DMA_Init+0x2aa>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b3e      	cmp	r3, #62	@ 0x3e
 8004eb0:	d903      	bls.n	8004eba <HAL_DMA_Init+0x28a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	2b42      	cmp	r3, #66	@ 0x42
 8004eb8:	d90f      	bls.n	8004eda <HAL_DMA_Init+0x2aa>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	2b46      	cmp	r3, #70	@ 0x46
 8004ec0:	d903      	bls.n	8004eca <HAL_DMA_Init+0x29a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b48      	cmp	r3, #72	@ 0x48
 8004ec8:	d907      	bls.n	8004eda <HAL_DMA_Init+0x2aa>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ed0:	d905      	bls.n	8004ede <HAL_DMA_Init+0x2ae>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b52      	cmp	r3, #82	@ 0x52
 8004ed8:	d801      	bhi.n	8004ede <HAL_DMA_Init+0x2ae>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e000      	b.n	8004ee0 <HAL_DMA_Init+0x2b0>
 8004ede:	2300      	movs	r3, #0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f023 0307 	bic.w	r3, r3, #7
 8004f02:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d117      	bne.n	8004f46 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00e      	beq.n	8004f46 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f001 fdcf 	bl	8006acc <DMA_CheckFifoParam>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d008      	beq.n	8004f46 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2240      	movs	r2, #64	@ 0x40
 8004f38:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e197      	b.n	8005276 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f001 fd0a 	bl	8006968 <DMA_CalcBaseAndBitshift>
 8004f54:	4603      	mov	r3, r0
 8004f56:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5c:	f003 031f 	and.w	r3, r3, #31
 8004f60:	223f      	movs	r2, #63	@ 0x3f
 8004f62:	409a      	lsls	r2, r3
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	e0cd      	b.n	8005106 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800505c <HAL_DMA_Init+0x42c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d022      	beq.n	8004fba <HAL_DMA_Init+0x38a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a39      	ldr	r2, [pc, #228]	@ (8005060 <HAL_DMA_Init+0x430>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01d      	beq.n	8004fba <HAL_DMA_Init+0x38a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a38      	ldr	r2, [pc, #224]	@ (8005064 <HAL_DMA_Init+0x434>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d018      	beq.n	8004fba <HAL_DMA_Init+0x38a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a36      	ldr	r2, [pc, #216]	@ (8005068 <HAL_DMA_Init+0x438>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_DMA_Init+0x38a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a35      	ldr	r2, [pc, #212]	@ (800506c <HAL_DMA_Init+0x43c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_DMA_Init+0x38a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a33      	ldr	r2, [pc, #204]	@ (8005070 <HAL_DMA_Init+0x440>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_DMA_Init+0x38a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a32      	ldr	r2, [pc, #200]	@ (8005074 <HAL_DMA_Init+0x444>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_DMA_Init+0x38a>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a30      	ldr	r2, [pc, #192]	@ (8005078 <HAL_DMA_Init+0x448>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d101      	bne.n	8004fbe <HAL_DMA_Init+0x38e>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e000      	b.n	8004fc0 <HAL_DMA_Init+0x390>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f000 8097 	beq.w	80050f4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a24      	ldr	r2, [pc, #144]	@ (800505c <HAL_DMA_Init+0x42c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d021      	beq.n	8005014 <HAL_DMA_Init+0x3e4>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a22      	ldr	r2, [pc, #136]	@ (8005060 <HAL_DMA_Init+0x430>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01c      	beq.n	8005014 <HAL_DMA_Init+0x3e4>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a21      	ldr	r2, [pc, #132]	@ (8005064 <HAL_DMA_Init+0x434>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d017      	beq.n	8005014 <HAL_DMA_Init+0x3e4>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1f      	ldr	r2, [pc, #124]	@ (8005068 <HAL_DMA_Init+0x438>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d012      	beq.n	8005014 <HAL_DMA_Init+0x3e4>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a1e      	ldr	r2, [pc, #120]	@ (800506c <HAL_DMA_Init+0x43c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00d      	beq.n	8005014 <HAL_DMA_Init+0x3e4>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8005070 <HAL_DMA_Init+0x440>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d008      	beq.n	8005014 <HAL_DMA_Init+0x3e4>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a1b      	ldr	r2, [pc, #108]	@ (8005074 <HAL_DMA_Init+0x444>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d003      	beq.n	8005014 <HAL_DMA_Init+0x3e4>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a19      	ldr	r2, [pc, #100]	@ (8005078 <HAL_DMA_Init+0x448>)
 8005012:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	4b13      	ldr	r3, [pc, #76]	@ (800507c <HAL_DMA_Init+0x44c>)
 8005030:	4013      	ands	r3, r2
 8005032:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b40      	cmp	r3, #64	@ 0x40
 800503a:	d021      	beq.n	8005080 <HAL_DMA_Init+0x450>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	2b80      	cmp	r3, #128	@ 0x80
 8005042:	d102      	bne.n	800504a <HAL_DMA_Init+0x41a>
 8005044:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005048:	e01b      	b.n	8005082 <HAL_DMA_Init+0x452>
 800504a:	2300      	movs	r3, #0
 800504c:	e019      	b.n	8005082 <HAL_DMA_Init+0x452>
 800504e:	bf00      	nop
 8005050:	fe10803f 	.word	0xfe10803f
 8005054:	5c001000 	.word	0x5c001000
 8005058:	ffff0000 	.word	0xffff0000
 800505c:	58025408 	.word	0x58025408
 8005060:	5802541c 	.word	0x5802541c
 8005064:	58025430 	.word	0x58025430
 8005068:	58025444 	.word	0x58025444
 800506c:	58025458 	.word	0x58025458
 8005070:	5802546c 	.word	0x5802546c
 8005074:	58025480 	.word	0x58025480
 8005078:	58025494 	.word	0x58025494
 800507c:	fffe000f 	.word	0xfffe000f
 8005080:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68d2      	ldr	r2, [r2, #12]
 8005086:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005088:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	691b      	ldr	r3, [r3, #16]
 800508e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005090:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005098:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80050a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80050a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80050b0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	4b6e      	ldr	r3, [pc, #440]	@ (8005280 <HAL_DMA_Init+0x650>)
 80050c8:	4413      	add	r3, r2
 80050ca:	4a6e      	ldr	r2, [pc, #440]	@ (8005284 <HAL_DMA_Init+0x654>)
 80050cc:	fba2 2303 	umull	r2, r3, r2, r3
 80050d0:	091b      	lsrs	r3, r3, #4
 80050d2:	009a      	lsls	r2, r3, #2
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f001 fc45 	bl	8006968 <DMA_CalcBaseAndBitshift>
 80050de:	4603      	mov	r3, r0
 80050e0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	2201      	movs	r2, #1
 80050ec:	409a      	lsls	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	e008      	b.n	8005106 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2240      	movs	r2, #64	@ 0x40
 80050f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2203      	movs	r2, #3
 80050fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e0b7      	b.n	8005276 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a5f      	ldr	r2, [pc, #380]	@ (8005288 <HAL_DMA_Init+0x658>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d072      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a5d      	ldr	r2, [pc, #372]	@ (800528c <HAL_DMA_Init+0x65c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d06d      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a5c      	ldr	r2, [pc, #368]	@ (8005290 <HAL_DMA_Init+0x660>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d068      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a5a      	ldr	r2, [pc, #360]	@ (8005294 <HAL_DMA_Init+0x664>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d063      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a59      	ldr	r2, [pc, #356]	@ (8005298 <HAL_DMA_Init+0x668>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d05e      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a57      	ldr	r2, [pc, #348]	@ (800529c <HAL_DMA_Init+0x66c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d059      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a56      	ldr	r2, [pc, #344]	@ (80052a0 <HAL_DMA_Init+0x670>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d054      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a54      	ldr	r2, [pc, #336]	@ (80052a4 <HAL_DMA_Init+0x674>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d04f      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a53      	ldr	r2, [pc, #332]	@ (80052a8 <HAL_DMA_Init+0x678>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d04a      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a51      	ldr	r2, [pc, #324]	@ (80052ac <HAL_DMA_Init+0x67c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d045      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a50      	ldr	r2, [pc, #320]	@ (80052b0 <HAL_DMA_Init+0x680>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d040      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a4e      	ldr	r2, [pc, #312]	@ (80052b4 <HAL_DMA_Init+0x684>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d03b      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a4d      	ldr	r2, [pc, #308]	@ (80052b8 <HAL_DMA_Init+0x688>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d036      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a4b      	ldr	r2, [pc, #300]	@ (80052bc <HAL_DMA_Init+0x68c>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d031      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a4a      	ldr	r2, [pc, #296]	@ (80052c0 <HAL_DMA_Init+0x690>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d02c      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a48      	ldr	r2, [pc, #288]	@ (80052c4 <HAL_DMA_Init+0x694>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d027      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a47      	ldr	r2, [pc, #284]	@ (80052c8 <HAL_DMA_Init+0x698>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d022      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a45      	ldr	r2, [pc, #276]	@ (80052cc <HAL_DMA_Init+0x69c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01d      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a44      	ldr	r2, [pc, #272]	@ (80052d0 <HAL_DMA_Init+0x6a0>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d018      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a42      	ldr	r2, [pc, #264]	@ (80052d4 <HAL_DMA_Init+0x6a4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a41      	ldr	r2, [pc, #260]	@ (80052d8 <HAL_DMA_Init+0x6a8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a3f      	ldr	r2, [pc, #252]	@ (80052dc <HAL_DMA_Init+0x6ac>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a3e      	ldr	r2, [pc, #248]	@ (80052e0 <HAL_DMA_Init+0x6b0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_DMA_Init+0x5c6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a3c      	ldr	r2, [pc, #240]	@ (80052e4 <HAL_DMA_Init+0x6b4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d101      	bne.n	80051fa <HAL_DMA_Init+0x5ca>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <HAL_DMA_Init+0x5cc>
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d032      	beq.n	8005266 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f001 fcdf 	bl	8006bc4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2b80      	cmp	r3, #128	@ 0x80
 800520c:	d102      	bne.n	8005214 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005228:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d010      	beq.n	8005254 <HAL_DMA_Init+0x624>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	2b08      	cmp	r3, #8
 8005238:	d80c      	bhi.n	8005254 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 fd5c 	bl	8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	e008      	b.n	8005266 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3718      	adds	r7, #24
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	a7fdabf8 	.word	0xa7fdabf8
 8005284:	cccccccd 	.word	0xcccccccd
 8005288:	40020010 	.word	0x40020010
 800528c:	40020028 	.word	0x40020028
 8005290:	40020040 	.word	0x40020040
 8005294:	40020058 	.word	0x40020058
 8005298:	40020070 	.word	0x40020070
 800529c:	40020088 	.word	0x40020088
 80052a0:	400200a0 	.word	0x400200a0
 80052a4:	400200b8 	.word	0x400200b8
 80052a8:	40020410 	.word	0x40020410
 80052ac:	40020428 	.word	0x40020428
 80052b0:	40020440 	.word	0x40020440
 80052b4:	40020458 	.word	0x40020458
 80052b8:	40020470 	.word	0x40020470
 80052bc:	40020488 	.word	0x40020488
 80052c0:	400204a0 	.word	0x400204a0
 80052c4:	400204b8 	.word	0x400204b8
 80052c8:	58025408 	.word	0x58025408
 80052cc:	5802541c 	.word	0x5802541c
 80052d0:	58025430 	.word	0x58025430
 80052d4:	58025444 	.word	0x58025444
 80052d8:	58025458 	.word	0x58025458
 80052dc:	5802546c 	.word	0x5802546c
 80052e0:	58025480 	.word	0x58025480
 80052e4:	58025494 	.word	0x58025494

080052e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e226      	b.n	8005752 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_DMA_Start_IT+0x2a>
 800530e:	2302      	movs	r3, #2
 8005310:	e21f      	b.n	8005752 <HAL_DMA_Start_IT+0x46a>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b01      	cmp	r3, #1
 8005324:	f040 820a 	bne.w	800573c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a68      	ldr	r2, [pc, #416]	@ (80054dc <HAL_DMA_Start_IT+0x1f4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d04a      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a66      	ldr	r2, [pc, #408]	@ (80054e0 <HAL_DMA_Start_IT+0x1f8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d045      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a65      	ldr	r2, [pc, #404]	@ (80054e4 <HAL_DMA_Start_IT+0x1fc>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d040      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a63      	ldr	r2, [pc, #396]	@ (80054e8 <HAL_DMA_Start_IT+0x200>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d03b      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a62      	ldr	r2, [pc, #392]	@ (80054ec <HAL_DMA_Start_IT+0x204>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d036      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a60      	ldr	r2, [pc, #384]	@ (80054f0 <HAL_DMA_Start_IT+0x208>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d031      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a5f      	ldr	r2, [pc, #380]	@ (80054f4 <HAL_DMA_Start_IT+0x20c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d02c      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a5d      	ldr	r2, [pc, #372]	@ (80054f8 <HAL_DMA_Start_IT+0x210>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d027      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a5c      	ldr	r2, [pc, #368]	@ (80054fc <HAL_DMA_Start_IT+0x214>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d022      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a5a      	ldr	r2, [pc, #360]	@ (8005500 <HAL_DMA_Start_IT+0x218>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d01d      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a59      	ldr	r2, [pc, #356]	@ (8005504 <HAL_DMA_Start_IT+0x21c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d018      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a57      	ldr	r2, [pc, #348]	@ (8005508 <HAL_DMA_Start_IT+0x220>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a56      	ldr	r2, [pc, #344]	@ (800550c <HAL_DMA_Start_IT+0x224>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d00e      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a54      	ldr	r2, [pc, #336]	@ (8005510 <HAL_DMA_Start_IT+0x228>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d009      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a53      	ldr	r2, [pc, #332]	@ (8005514 <HAL_DMA_Start_IT+0x22c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d004      	beq.n	80053d6 <HAL_DMA_Start_IT+0xee>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a51      	ldr	r2, [pc, #324]	@ (8005518 <HAL_DMA_Start_IT+0x230>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d108      	bne.n	80053e8 <HAL_DMA_Start_IT+0x100>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0201 	bic.w	r2, r2, #1
 80053e4:	601a      	str	r2, [r3, #0]
 80053e6:	e007      	b.n	80053f8 <HAL_DMA_Start_IT+0x110>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0201 	bic.w	r2, r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	68b9      	ldr	r1, [r7, #8]
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f001 f906 	bl	8006610 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a34      	ldr	r2, [pc, #208]	@ (80054dc <HAL_DMA_Start_IT+0x1f4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d04a      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a33      	ldr	r2, [pc, #204]	@ (80054e0 <HAL_DMA_Start_IT+0x1f8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d045      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a31      	ldr	r2, [pc, #196]	@ (80054e4 <HAL_DMA_Start_IT+0x1fc>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d040      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a30      	ldr	r2, [pc, #192]	@ (80054e8 <HAL_DMA_Start_IT+0x200>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d03b      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2e      	ldr	r2, [pc, #184]	@ (80054ec <HAL_DMA_Start_IT+0x204>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d036      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a2d      	ldr	r2, [pc, #180]	@ (80054f0 <HAL_DMA_Start_IT+0x208>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d031      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a2b      	ldr	r2, [pc, #172]	@ (80054f4 <HAL_DMA_Start_IT+0x20c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d02c      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2a      	ldr	r2, [pc, #168]	@ (80054f8 <HAL_DMA_Start_IT+0x210>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d027      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a28      	ldr	r2, [pc, #160]	@ (80054fc <HAL_DMA_Start_IT+0x214>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d022      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a27      	ldr	r2, [pc, #156]	@ (8005500 <HAL_DMA_Start_IT+0x218>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d01d      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a25      	ldr	r2, [pc, #148]	@ (8005504 <HAL_DMA_Start_IT+0x21c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d018      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a24      	ldr	r2, [pc, #144]	@ (8005508 <HAL_DMA_Start_IT+0x220>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d013      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a22      	ldr	r2, [pc, #136]	@ (800550c <HAL_DMA_Start_IT+0x224>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00e      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a21      	ldr	r2, [pc, #132]	@ (8005510 <HAL_DMA_Start_IT+0x228>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d009      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a1f      	ldr	r2, [pc, #124]	@ (8005514 <HAL_DMA_Start_IT+0x22c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <HAL_DMA_Start_IT+0x1bc>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a1e      	ldr	r2, [pc, #120]	@ (8005518 <HAL_DMA_Start_IT+0x230>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d101      	bne.n	80054a8 <HAL_DMA_Start_IT+0x1c0>
 80054a4:	2301      	movs	r3, #1
 80054a6:	e000      	b.n	80054aa <HAL_DMA_Start_IT+0x1c2>
 80054a8:	2300      	movs	r3, #0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d036      	beq.n	800551c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f023 021e 	bic.w	r2, r3, #30
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f042 0216 	orr.w	r2, r2, #22
 80054c0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d03e      	beq.n	8005548 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0208 	orr.w	r2, r2, #8
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e035      	b.n	8005548 <HAL_DMA_Start_IT+0x260>
 80054dc:	40020010 	.word	0x40020010
 80054e0:	40020028 	.word	0x40020028
 80054e4:	40020040 	.word	0x40020040
 80054e8:	40020058 	.word	0x40020058
 80054ec:	40020070 	.word	0x40020070
 80054f0:	40020088 	.word	0x40020088
 80054f4:	400200a0 	.word	0x400200a0
 80054f8:	400200b8 	.word	0x400200b8
 80054fc:	40020410 	.word	0x40020410
 8005500:	40020428 	.word	0x40020428
 8005504:	40020440 	.word	0x40020440
 8005508:	40020458 	.word	0x40020458
 800550c:	40020470 	.word	0x40020470
 8005510:	40020488 	.word	0x40020488
 8005514:	400204a0 	.word	0x400204a0
 8005518:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f023 020e 	bic.w	r2, r3, #14
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 020a 	orr.w	r2, r2, #10
 800552e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005534:	2b00      	cmp	r3, #0
 8005536:	d007      	beq.n	8005548 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0204 	orr.w	r2, r2, #4
 8005546:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a83      	ldr	r2, [pc, #524]	@ (800575c <HAL_DMA_Start_IT+0x474>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d072      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a82      	ldr	r2, [pc, #520]	@ (8005760 <HAL_DMA_Start_IT+0x478>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d06d      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a80      	ldr	r2, [pc, #512]	@ (8005764 <HAL_DMA_Start_IT+0x47c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d068      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a7f      	ldr	r2, [pc, #508]	@ (8005768 <HAL_DMA_Start_IT+0x480>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d063      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a7d      	ldr	r2, [pc, #500]	@ (800576c <HAL_DMA_Start_IT+0x484>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d05e      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a7c      	ldr	r2, [pc, #496]	@ (8005770 <HAL_DMA_Start_IT+0x488>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d059      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a7a      	ldr	r2, [pc, #488]	@ (8005774 <HAL_DMA_Start_IT+0x48c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d054      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a79      	ldr	r2, [pc, #484]	@ (8005778 <HAL_DMA_Start_IT+0x490>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d04f      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a77      	ldr	r2, [pc, #476]	@ (800577c <HAL_DMA_Start_IT+0x494>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d04a      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a76      	ldr	r2, [pc, #472]	@ (8005780 <HAL_DMA_Start_IT+0x498>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d045      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a74      	ldr	r2, [pc, #464]	@ (8005784 <HAL_DMA_Start_IT+0x49c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d040      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a73      	ldr	r2, [pc, #460]	@ (8005788 <HAL_DMA_Start_IT+0x4a0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d03b      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a71      	ldr	r2, [pc, #452]	@ (800578c <HAL_DMA_Start_IT+0x4a4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d036      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a70      	ldr	r2, [pc, #448]	@ (8005790 <HAL_DMA_Start_IT+0x4a8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d031      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005794 <HAL_DMA_Start_IT+0x4ac>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d02c      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a6d      	ldr	r2, [pc, #436]	@ (8005798 <HAL_DMA_Start_IT+0x4b0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d027      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a6b      	ldr	r2, [pc, #428]	@ (800579c <HAL_DMA_Start_IT+0x4b4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d022      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a6a      	ldr	r2, [pc, #424]	@ (80057a0 <HAL_DMA_Start_IT+0x4b8>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d01d      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a68      	ldr	r2, [pc, #416]	@ (80057a4 <HAL_DMA_Start_IT+0x4bc>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d018      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a67      	ldr	r2, [pc, #412]	@ (80057a8 <HAL_DMA_Start_IT+0x4c0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d013      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a65      	ldr	r2, [pc, #404]	@ (80057ac <HAL_DMA_Start_IT+0x4c4>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d00e      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a64      	ldr	r2, [pc, #400]	@ (80057b0 <HAL_DMA_Start_IT+0x4c8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d009      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a62      	ldr	r2, [pc, #392]	@ (80057b4 <HAL_DMA_Start_IT+0x4cc>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d004      	beq.n	8005638 <HAL_DMA_Start_IT+0x350>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a61      	ldr	r2, [pc, #388]	@ (80057b8 <HAL_DMA_Start_IT+0x4d0>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d101      	bne.n	800563c <HAL_DMA_Start_IT+0x354>
 8005638:	2301      	movs	r3, #1
 800563a:	e000      	b.n	800563e <HAL_DMA_Start_IT+0x356>
 800563c:	2300      	movs	r3, #0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01a      	beq.n	8005678 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800565a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800565e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005664:	2b00      	cmp	r3, #0
 8005666:	d007      	beq.n	8005678 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005672:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005676:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a37      	ldr	r2, [pc, #220]	@ (800575c <HAL_DMA_Start_IT+0x474>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d04a      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a36      	ldr	r2, [pc, #216]	@ (8005760 <HAL_DMA_Start_IT+0x478>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d045      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a34      	ldr	r2, [pc, #208]	@ (8005764 <HAL_DMA_Start_IT+0x47c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d040      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4a33      	ldr	r2, [pc, #204]	@ (8005768 <HAL_DMA_Start_IT+0x480>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d03b      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a31      	ldr	r2, [pc, #196]	@ (800576c <HAL_DMA_Start_IT+0x484>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d036      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a30      	ldr	r2, [pc, #192]	@ (8005770 <HAL_DMA_Start_IT+0x488>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d031      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005774 <HAL_DMA_Start_IT+0x48c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d02c      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a2d      	ldr	r2, [pc, #180]	@ (8005778 <HAL_DMA_Start_IT+0x490>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d027      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a2b      	ldr	r2, [pc, #172]	@ (800577c <HAL_DMA_Start_IT+0x494>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d022      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a2a      	ldr	r2, [pc, #168]	@ (8005780 <HAL_DMA_Start_IT+0x498>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d01d      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a28      	ldr	r2, [pc, #160]	@ (8005784 <HAL_DMA_Start_IT+0x49c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d018      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a27      	ldr	r2, [pc, #156]	@ (8005788 <HAL_DMA_Start_IT+0x4a0>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d013      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a25      	ldr	r2, [pc, #148]	@ (800578c <HAL_DMA_Start_IT+0x4a4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00e      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a24      	ldr	r2, [pc, #144]	@ (8005790 <HAL_DMA_Start_IT+0x4a8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d009      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a22      	ldr	r2, [pc, #136]	@ (8005794 <HAL_DMA_Start_IT+0x4ac>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d004      	beq.n	8005718 <HAL_DMA_Start_IT+0x430>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a21      	ldr	r2, [pc, #132]	@ (8005798 <HAL_DMA_Start_IT+0x4b0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d108      	bne.n	800572a <HAL_DMA_Start_IT+0x442>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	e012      	b.n	8005750 <HAL_DMA_Start_IT+0x468>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e009      	b.n	8005750 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005742:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005750:	7dfb      	ldrb	r3, [r7, #23]
}
 8005752:	4618      	mov	r0, r3
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40020010 	.word	0x40020010
 8005760:	40020028 	.word	0x40020028
 8005764:	40020040 	.word	0x40020040
 8005768:	40020058 	.word	0x40020058
 800576c:	40020070 	.word	0x40020070
 8005770:	40020088 	.word	0x40020088
 8005774:	400200a0 	.word	0x400200a0
 8005778:	400200b8 	.word	0x400200b8
 800577c:	40020410 	.word	0x40020410
 8005780:	40020428 	.word	0x40020428
 8005784:	40020440 	.word	0x40020440
 8005788:	40020458 	.word	0x40020458
 800578c:	40020470 	.word	0x40020470
 8005790:	40020488 	.word	0x40020488
 8005794:	400204a0 	.word	0x400204a0
 8005798:	400204b8 	.word	0x400204b8
 800579c:	58025408 	.word	0x58025408
 80057a0:	5802541c 	.word	0x5802541c
 80057a4:	58025430 	.word	0x58025430
 80057a8:	58025444 	.word	0x58025444
 80057ac:	58025458 	.word	0x58025458
 80057b0:	5802546c 	.word	0x5802546c
 80057b4:	58025480 	.word	0x58025480
 80057b8:	58025494 	.word	0x58025494

080057bc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	@ 0x28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80057c8:	4b67      	ldr	r3, [pc, #412]	@ (8005968 <HAL_DMA_IRQHandler+0x1ac>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a67      	ldr	r2, [pc, #412]	@ (800596c <HAL_DMA_IRQHandler+0x1b0>)
 80057ce:	fba2 2303 	umull	r2, r3, r2, r3
 80057d2:	0a9b      	lsrs	r3, r3, #10
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057da:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a5f      	ldr	r2, [pc, #380]	@ (8005970 <HAL_DMA_IRQHandler+0x1b4>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d04a      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a5d      	ldr	r2, [pc, #372]	@ (8005974 <HAL_DMA_IRQHandler+0x1b8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d045      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a5c      	ldr	r2, [pc, #368]	@ (8005978 <HAL_DMA_IRQHandler+0x1bc>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d040      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a5a      	ldr	r2, [pc, #360]	@ (800597c <HAL_DMA_IRQHandler+0x1c0>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d03b      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a59      	ldr	r2, [pc, #356]	@ (8005980 <HAL_DMA_IRQHandler+0x1c4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d036      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a57      	ldr	r2, [pc, #348]	@ (8005984 <HAL_DMA_IRQHandler+0x1c8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d031      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a56      	ldr	r2, [pc, #344]	@ (8005988 <HAL_DMA_IRQHandler+0x1cc>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d02c      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a54      	ldr	r2, [pc, #336]	@ (800598c <HAL_DMA_IRQHandler+0x1d0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d027      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a53      	ldr	r2, [pc, #332]	@ (8005990 <HAL_DMA_IRQHandler+0x1d4>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d022      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a51      	ldr	r2, [pc, #324]	@ (8005994 <HAL_DMA_IRQHandler+0x1d8>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d01d      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a50      	ldr	r2, [pc, #320]	@ (8005998 <HAL_DMA_IRQHandler+0x1dc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d018      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a4e      	ldr	r2, [pc, #312]	@ (800599c <HAL_DMA_IRQHandler+0x1e0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d013      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a4d      	ldr	r2, [pc, #308]	@ (80059a0 <HAL_DMA_IRQHandler+0x1e4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00e      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a4b      	ldr	r2, [pc, #300]	@ (80059a4 <HAL_DMA_IRQHandler+0x1e8>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d009      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a4a      	ldr	r2, [pc, #296]	@ (80059a8 <HAL_DMA_IRQHandler+0x1ec>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d004      	beq.n	800588e <HAL_DMA_IRQHandler+0xd2>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a48      	ldr	r2, [pc, #288]	@ (80059ac <HAL_DMA_IRQHandler+0x1f0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d101      	bne.n	8005892 <HAL_DMA_IRQHandler+0xd6>
 800588e:	2301      	movs	r3, #1
 8005890:	e000      	b.n	8005894 <HAL_DMA_IRQHandler+0xd8>
 8005892:	2300      	movs	r3, #0
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 842b 	beq.w	80060f0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	2208      	movs	r2, #8
 80058a4:	409a      	lsls	r2, r3
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80a2 	beq.w	80059f4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a2e      	ldr	r2, [pc, #184]	@ (8005970 <HAL_DMA_IRQHandler+0x1b4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d04a      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2d      	ldr	r2, [pc, #180]	@ (8005974 <HAL_DMA_IRQHandler+0x1b8>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d045      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005978 <HAL_DMA_IRQHandler+0x1bc>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d040      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2a      	ldr	r2, [pc, #168]	@ (800597c <HAL_DMA_IRQHandler+0x1c0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d03b      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a28      	ldr	r2, [pc, #160]	@ (8005980 <HAL_DMA_IRQHandler+0x1c4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d036      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a27      	ldr	r2, [pc, #156]	@ (8005984 <HAL_DMA_IRQHandler+0x1c8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d031      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a25      	ldr	r2, [pc, #148]	@ (8005988 <HAL_DMA_IRQHandler+0x1cc>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d02c      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a24      	ldr	r2, [pc, #144]	@ (800598c <HAL_DMA_IRQHandler+0x1d0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d027      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a22      	ldr	r2, [pc, #136]	@ (8005990 <HAL_DMA_IRQHandler+0x1d4>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d022      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a21      	ldr	r2, [pc, #132]	@ (8005994 <HAL_DMA_IRQHandler+0x1d8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d01d      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1f      	ldr	r2, [pc, #124]	@ (8005998 <HAL_DMA_IRQHandler+0x1dc>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d018      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a1e      	ldr	r2, [pc, #120]	@ (800599c <HAL_DMA_IRQHandler+0x1e0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d013      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1c      	ldr	r2, [pc, #112]	@ (80059a0 <HAL_DMA_IRQHandler+0x1e4>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00e      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1b      	ldr	r2, [pc, #108]	@ (80059a4 <HAL_DMA_IRQHandler+0x1e8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d009      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a19      	ldr	r2, [pc, #100]	@ (80059a8 <HAL_DMA_IRQHandler+0x1ec>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d004      	beq.n	8005950 <HAL_DMA_IRQHandler+0x194>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a18      	ldr	r2, [pc, #96]	@ (80059ac <HAL_DMA_IRQHandler+0x1f0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d12f      	bne.n	80059b0 <HAL_DMA_IRQHandler+0x1f4>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	bf14      	ite	ne
 800595e:	2301      	movne	r3, #1
 8005960:	2300      	moveq	r3, #0
 8005962:	b2db      	uxtb	r3, r3
 8005964:	e02e      	b.n	80059c4 <HAL_DMA_IRQHandler+0x208>
 8005966:	bf00      	nop
 8005968:	240000b4 	.word	0x240000b4
 800596c:	1b4e81b5 	.word	0x1b4e81b5
 8005970:	40020010 	.word	0x40020010
 8005974:	40020028 	.word	0x40020028
 8005978:	40020040 	.word	0x40020040
 800597c:	40020058 	.word	0x40020058
 8005980:	40020070 	.word	0x40020070
 8005984:	40020088 	.word	0x40020088
 8005988:	400200a0 	.word	0x400200a0
 800598c:	400200b8 	.word	0x400200b8
 8005990:	40020410 	.word	0x40020410
 8005994:	40020428 	.word	0x40020428
 8005998:	40020440 	.word	0x40020440
 800599c:	40020458 	.word	0x40020458
 80059a0:	40020470 	.word	0x40020470
 80059a4:	40020488 	.word	0x40020488
 80059a8:	400204a0 	.word	0x400204a0
 80059ac:	400204b8 	.word	0x400204b8
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bf14      	ite	ne
 80059be:	2301      	movne	r3, #1
 80059c0:	2300      	moveq	r3, #0
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d015      	beq.n	80059f4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0204 	bic.w	r2, r2, #4
 80059d6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	2208      	movs	r2, #8
 80059e2:	409a      	lsls	r2, r3
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ec:	f043 0201 	orr.w	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059f8:	f003 031f 	and.w	r3, r3, #31
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d06e      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a69      	ldr	r2, [pc, #420]	@ (8005bb4 <HAL_DMA_IRQHandler+0x3f8>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d04a      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a67      	ldr	r2, [pc, #412]	@ (8005bb8 <HAL_DMA_IRQHandler+0x3fc>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d045      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a66      	ldr	r2, [pc, #408]	@ (8005bbc <HAL_DMA_IRQHandler+0x400>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d040      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a64      	ldr	r2, [pc, #400]	@ (8005bc0 <HAL_DMA_IRQHandler+0x404>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d03b      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a63      	ldr	r2, [pc, #396]	@ (8005bc4 <HAL_DMA_IRQHandler+0x408>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d036      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a61      	ldr	r2, [pc, #388]	@ (8005bc8 <HAL_DMA_IRQHandler+0x40c>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d031      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a60      	ldr	r2, [pc, #384]	@ (8005bcc <HAL_DMA_IRQHandler+0x410>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d02c      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a5e      	ldr	r2, [pc, #376]	@ (8005bd0 <HAL_DMA_IRQHandler+0x414>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d027      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a5d      	ldr	r2, [pc, #372]	@ (8005bd4 <HAL_DMA_IRQHandler+0x418>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d022      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a5b      	ldr	r2, [pc, #364]	@ (8005bd8 <HAL_DMA_IRQHandler+0x41c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d01d      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a5a      	ldr	r2, [pc, #360]	@ (8005bdc <HAL_DMA_IRQHandler+0x420>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d018      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a58      	ldr	r2, [pc, #352]	@ (8005be0 <HAL_DMA_IRQHandler+0x424>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d013      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a57      	ldr	r2, [pc, #348]	@ (8005be4 <HAL_DMA_IRQHandler+0x428>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00e      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a55      	ldr	r2, [pc, #340]	@ (8005be8 <HAL_DMA_IRQHandler+0x42c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a54      	ldr	r2, [pc, #336]	@ (8005bec <HAL_DMA_IRQHandler+0x430>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d004      	beq.n	8005aaa <HAL_DMA_IRQHandler+0x2ee>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a52      	ldr	r2, [pc, #328]	@ (8005bf0 <HAL_DMA_IRQHandler+0x434>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d10a      	bne.n	8005ac0 <HAL_DMA_IRQHandler+0x304>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf14      	ite	ne
 8005ab8:	2301      	movne	r3, #1
 8005aba:	2300      	moveq	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	e003      	b.n	8005ac8 <HAL_DMA_IRQHandler+0x30c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00d      	beq.n	8005ae8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	409a      	lsls	r2, r3
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae0:	f043 0202 	orr.w	r2, r3, #2
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2204      	movs	r2, #4
 8005af2:	409a      	lsls	r2, r3
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 808f 	beq.w	8005c1c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb4 <HAL_DMA_IRQHandler+0x3f8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d04a      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb8 <HAL_DMA_IRQHandler+0x3fc>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d045      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a29      	ldr	r2, [pc, #164]	@ (8005bbc <HAL_DMA_IRQHandler+0x400>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d040      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a27      	ldr	r2, [pc, #156]	@ (8005bc0 <HAL_DMA_IRQHandler+0x404>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d03b      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a26      	ldr	r2, [pc, #152]	@ (8005bc4 <HAL_DMA_IRQHandler+0x408>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d036      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a24      	ldr	r2, [pc, #144]	@ (8005bc8 <HAL_DMA_IRQHandler+0x40c>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d031      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a23      	ldr	r2, [pc, #140]	@ (8005bcc <HAL_DMA_IRQHandler+0x410>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d02c      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a21      	ldr	r2, [pc, #132]	@ (8005bd0 <HAL_DMA_IRQHandler+0x414>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d027      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a20      	ldr	r2, [pc, #128]	@ (8005bd4 <HAL_DMA_IRQHandler+0x418>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d022      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8005bd8 <HAL_DMA_IRQHandler+0x41c>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01d      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1d      	ldr	r2, [pc, #116]	@ (8005bdc <HAL_DMA_IRQHandler+0x420>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1b      	ldr	r2, [pc, #108]	@ (8005be0 <HAL_DMA_IRQHandler+0x424>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a1a      	ldr	r2, [pc, #104]	@ (8005be4 <HAL_DMA_IRQHandler+0x428>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d00e      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a18      	ldr	r2, [pc, #96]	@ (8005be8 <HAL_DMA_IRQHandler+0x42c>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a17      	ldr	r2, [pc, #92]	@ (8005bec <HAL_DMA_IRQHandler+0x430>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_DMA_IRQHandler+0x3e2>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a15      	ldr	r2, [pc, #84]	@ (8005bf0 <HAL_DMA_IRQHandler+0x434>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d12a      	bne.n	8005bf4 <HAL_DMA_IRQHandler+0x438>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f003 0302 	and.w	r3, r3, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	bf14      	ite	ne
 8005bac:	2301      	movne	r3, #1
 8005bae:	2300      	moveq	r3, #0
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	e023      	b.n	8005bfc <HAL_DMA_IRQHandler+0x440>
 8005bb4:	40020010 	.word	0x40020010
 8005bb8:	40020028 	.word	0x40020028
 8005bbc:	40020040 	.word	0x40020040
 8005bc0:	40020058 	.word	0x40020058
 8005bc4:	40020070 	.word	0x40020070
 8005bc8:	40020088 	.word	0x40020088
 8005bcc:	400200a0 	.word	0x400200a0
 8005bd0:	400200b8 	.word	0x400200b8
 8005bd4:	40020410 	.word	0x40020410
 8005bd8:	40020428 	.word	0x40020428
 8005bdc:	40020440 	.word	0x40020440
 8005be0:	40020458 	.word	0x40020458
 8005be4:	40020470 	.word	0x40020470
 8005be8:	40020488 	.word	0x40020488
 8005bec:	400204a0 	.word	0x400204a0
 8005bf0:	400204b8 	.word	0x400204b8
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00d      	beq.n	8005c1c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c04:	f003 031f 	and.w	r3, r3, #31
 8005c08:	2204      	movs	r2, #4
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c14:	f043 0204 	orr.w	r2, r3, #4
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005c20:	f003 031f 	and.w	r3, r3, #31
 8005c24:	2210      	movs	r2, #16
 8005c26:	409a      	lsls	r2, r3
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80a6 	beq.w	8005d7e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a85      	ldr	r2, [pc, #532]	@ (8005e4c <HAL_DMA_IRQHandler+0x690>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d04a      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a83      	ldr	r2, [pc, #524]	@ (8005e50 <HAL_DMA_IRQHandler+0x694>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d045      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a82      	ldr	r2, [pc, #520]	@ (8005e54 <HAL_DMA_IRQHandler+0x698>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d040      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a80      	ldr	r2, [pc, #512]	@ (8005e58 <HAL_DMA_IRQHandler+0x69c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d03b      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a7f      	ldr	r2, [pc, #508]	@ (8005e5c <HAL_DMA_IRQHandler+0x6a0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d036      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a7d      	ldr	r2, [pc, #500]	@ (8005e60 <HAL_DMA_IRQHandler+0x6a4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d031      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a7c      	ldr	r2, [pc, #496]	@ (8005e64 <HAL_DMA_IRQHandler+0x6a8>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d02c      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a7a      	ldr	r2, [pc, #488]	@ (8005e68 <HAL_DMA_IRQHandler+0x6ac>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d027      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a79      	ldr	r2, [pc, #484]	@ (8005e6c <HAL_DMA_IRQHandler+0x6b0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d022      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a77      	ldr	r2, [pc, #476]	@ (8005e70 <HAL_DMA_IRQHandler+0x6b4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d01d      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a76      	ldr	r2, [pc, #472]	@ (8005e74 <HAL_DMA_IRQHandler+0x6b8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d018      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a74      	ldr	r2, [pc, #464]	@ (8005e78 <HAL_DMA_IRQHandler+0x6bc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d013      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a73      	ldr	r2, [pc, #460]	@ (8005e7c <HAL_DMA_IRQHandler+0x6c0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a71      	ldr	r2, [pc, #452]	@ (8005e80 <HAL_DMA_IRQHandler+0x6c4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d009      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a70      	ldr	r2, [pc, #448]	@ (8005e84 <HAL_DMA_IRQHandler+0x6c8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x516>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a6e      	ldr	r2, [pc, #440]	@ (8005e88 <HAL_DMA_IRQHandler+0x6cc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10a      	bne.n	8005ce8 <HAL_DMA_IRQHandler+0x52c>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	bf14      	ite	ne
 8005ce0:	2301      	movne	r3, #1
 8005ce2:	2300      	moveq	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	e009      	b.n	8005cfc <HAL_DMA_IRQHandler+0x540>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0304 	and.w	r3, r3, #4
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	bf14      	ite	ne
 8005cf6:	2301      	movne	r3, #1
 8005cf8:	2300      	moveq	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d03e      	beq.n	8005d7e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d04:	f003 031f 	and.w	r3, r3, #31
 8005d08:	2210      	movs	r2, #16
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d108      	bne.n	8005d3e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d024      	beq.n	8005d7e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	4798      	blx	r3
 8005d3c:	e01f      	b.n	8005d7e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d01b      	beq.n	8005d7e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	4798      	blx	r3
 8005d4e:	e016      	b.n	8005d7e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d107      	bne.n	8005d6e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0208 	bic.w	r2, r2, #8
 8005d6c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d003      	beq.n	8005d7e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d82:	f003 031f 	and.w	r3, r3, #31
 8005d86:	2220      	movs	r2, #32
 8005d88:	409a      	lsls	r2, r3
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	f000 8110 	beq.w	8005fb4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2c      	ldr	r2, [pc, #176]	@ (8005e4c <HAL_DMA_IRQHandler+0x690>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d04a      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2b      	ldr	r2, [pc, #172]	@ (8005e50 <HAL_DMA_IRQHandler+0x694>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d045      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a29      	ldr	r2, [pc, #164]	@ (8005e54 <HAL_DMA_IRQHandler+0x698>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d040      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a28      	ldr	r2, [pc, #160]	@ (8005e58 <HAL_DMA_IRQHandler+0x69c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d03b      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a26      	ldr	r2, [pc, #152]	@ (8005e5c <HAL_DMA_IRQHandler+0x6a0>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d036      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a25      	ldr	r2, [pc, #148]	@ (8005e60 <HAL_DMA_IRQHandler+0x6a4>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d031      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a23      	ldr	r2, [pc, #140]	@ (8005e64 <HAL_DMA_IRQHandler+0x6a8>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d02c      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a22      	ldr	r2, [pc, #136]	@ (8005e68 <HAL_DMA_IRQHandler+0x6ac>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d027      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a20      	ldr	r2, [pc, #128]	@ (8005e6c <HAL_DMA_IRQHandler+0x6b0>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d022      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e70 <HAL_DMA_IRQHandler+0x6b4>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d01d      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e74 <HAL_DMA_IRQHandler+0x6b8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d018      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a1c      	ldr	r2, [pc, #112]	@ (8005e78 <HAL_DMA_IRQHandler+0x6bc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a1a      	ldr	r2, [pc, #104]	@ (8005e7c <HAL_DMA_IRQHandler+0x6c0>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00e      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a19      	ldr	r2, [pc, #100]	@ (8005e80 <HAL_DMA_IRQHandler+0x6c4>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a17      	ldr	r2, [pc, #92]	@ (8005e84 <HAL_DMA_IRQHandler+0x6c8>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_DMA_IRQHandler+0x678>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a16      	ldr	r2, [pc, #88]	@ (8005e88 <HAL_DMA_IRQHandler+0x6cc>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d12b      	bne.n	8005e8c <HAL_DMA_IRQHandler+0x6d0>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	bf14      	ite	ne
 8005e42:	2301      	movne	r3, #1
 8005e44:	2300      	moveq	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	e02a      	b.n	8005ea0 <HAL_DMA_IRQHandler+0x6e4>
 8005e4a:	bf00      	nop
 8005e4c:	40020010 	.word	0x40020010
 8005e50:	40020028 	.word	0x40020028
 8005e54:	40020040 	.word	0x40020040
 8005e58:	40020058 	.word	0x40020058
 8005e5c:	40020070 	.word	0x40020070
 8005e60:	40020088 	.word	0x40020088
 8005e64:	400200a0 	.word	0x400200a0
 8005e68:	400200b8 	.word	0x400200b8
 8005e6c:	40020410 	.word	0x40020410
 8005e70:	40020428 	.word	0x40020428
 8005e74:	40020440 	.word	0x40020440
 8005e78:	40020458 	.word	0x40020458
 8005e7c:	40020470 	.word	0x40020470
 8005e80:	40020488 	.word	0x40020488
 8005e84:	400204a0 	.word	0x400204a0
 8005e88:	400204b8 	.word	0x400204b8
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	bf14      	ite	ne
 8005e9a:	2301      	movne	r3, #1
 8005e9c:	2300      	moveq	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 8087 	beq.w	8005fb4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eaa:	f003 031f 	and.w	r3, r3, #31
 8005eae:	2220      	movs	r2, #32
 8005eb0:	409a      	lsls	r2, r3
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b04      	cmp	r3, #4
 8005ec0:	d139      	bne.n	8005f36 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0216 	bic.w	r2, r2, #22
 8005ed0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	695a      	ldr	r2, [r3, #20]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ee0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d103      	bne.n	8005ef2 <HAL_DMA_IRQHandler+0x736>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0208 	bic.w	r2, r2, #8
 8005f00:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f06:	f003 031f 	and.w	r3, r3, #31
 8005f0a:	223f      	movs	r2, #63	@ 0x3f
 8005f0c:	409a      	lsls	r2, r3
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 834a 	beq.w	80065c0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	4798      	blx	r3
          }
          return;
 8005f34:	e344      	b.n	80065c0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d018      	beq.n	8005f76 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d108      	bne.n	8005f64 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d02c      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	4798      	blx	r3
 8005f62:	e027      	b.n	8005fb4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d023      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	4798      	blx	r3
 8005f74:	e01e      	b.n	8005fb4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10f      	bne.n	8005fa4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0210 	bic.w	r2, r2, #16
 8005f92:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f000 8306 	beq.w	80065ca <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 8088 	beq.w	80060dc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2204      	movs	r2, #4
 8005fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a7a      	ldr	r2, [pc, #488]	@ (80061c4 <HAL_DMA_IRQHandler+0xa08>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d04a      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a79      	ldr	r2, [pc, #484]	@ (80061c8 <HAL_DMA_IRQHandler+0xa0c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d045      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a77      	ldr	r2, [pc, #476]	@ (80061cc <HAL_DMA_IRQHandler+0xa10>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d040      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a76      	ldr	r2, [pc, #472]	@ (80061d0 <HAL_DMA_IRQHandler+0xa14>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d03b      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a74      	ldr	r2, [pc, #464]	@ (80061d4 <HAL_DMA_IRQHandler+0xa18>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d036      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a73      	ldr	r2, [pc, #460]	@ (80061d8 <HAL_DMA_IRQHandler+0xa1c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d031      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a71      	ldr	r2, [pc, #452]	@ (80061dc <HAL_DMA_IRQHandler+0xa20>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d02c      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a70      	ldr	r2, [pc, #448]	@ (80061e0 <HAL_DMA_IRQHandler+0xa24>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d027      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a6e      	ldr	r2, [pc, #440]	@ (80061e4 <HAL_DMA_IRQHandler+0xa28>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d022      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a6d      	ldr	r2, [pc, #436]	@ (80061e8 <HAL_DMA_IRQHandler+0xa2c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d01d      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a6b      	ldr	r2, [pc, #428]	@ (80061ec <HAL_DMA_IRQHandler+0xa30>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d018      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a6a      	ldr	r2, [pc, #424]	@ (80061f0 <HAL_DMA_IRQHandler+0xa34>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d013      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a68      	ldr	r2, [pc, #416]	@ (80061f4 <HAL_DMA_IRQHandler+0xa38>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00e      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a67      	ldr	r2, [pc, #412]	@ (80061f8 <HAL_DMA_IRQHandler+0xa3c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d009      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a65      	ldr	r2, [pc, #404]	@ (80061fc <HAL_DMA_IRQHandler+0xa40>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d004      	beq.n	8006074 <HAL_DMA_IRQHandler+0x8b8>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a64      	ldr	r2, [pc, #400]	@ (8006200 <HAL_DMA_IRQHandler+0xa44>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d108      	bne.n	8006086 <HAL_DMA_IRQHandler+0x8ca>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f022 0201 	bic.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e007      	b.n	8006096 <HAL_DMA_IRQHandler+0x8da>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0201 	bic.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	3301      	adds	r3, #1
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800609e:	429a      	cmp	r2, r3
 80060a0:	d307      	bcc.n	80060b2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1f2      	bne.n	8006096 <HAL_DMA_IRQHandler+0x8da>
 80060b0:	e000      	b.n	80060b4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80060b2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f003 0301 	and.w	r3, r3, #1
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d004      	beq.n	80060cc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2203      	movs	r2, #3
 80060c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80060ca:	e003      	b.n	80060d4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 8272 	beq.w	80065ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	4798      	blx	r3
 80060ee:	e26c      	b.n	80065ca <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a43      	ldr	r2, [pc, #268]	@ (8006204 <HAL_DMA_IRQHandler+0xa48>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d022      	beq.n	8006140 <HAL_DMA_IRQHandler+0x984>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a42      	ldr	r2, [pc, #264]	@ (8006208 <HAL_DMA_IRQHandler+0xa4c>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d01d      	beq.n	8006140 <HAL_DMA_IRQHandler+0x984>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a40      	ldr	r2, [pc, #256]	@ (800620c <HAL_DMA_IRQHandler+0xa50>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d018      	beq.n	8006140 <HAL_DMA_IRQHandler+0x984>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a3f      	ldr	r2, [pc, #252]	@ (8006210 <HAL_DMA_IRQHandler+0xa54>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d013      	beq.n	8006140 <HAL_DMA_IRQHandler+0x984>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a3d      	ldr	r2, [pc, #244]	@ (8006214 <HAL_DMA_IRQHandler+0xa58>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d00e      	beq.n	8006140 <HAL_DMA_IRQHandler+0x984>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a3c      	ldr	r2, [pc, #240]	@ (8006218 <HAL_DMA_IRQHandler+0xa5c>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_DMA_IRQHandler+0x984>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a3a      	ldr	r2, [pc, #232]	@ (800621c <HAL_DMA_IRQHandler+0xa60>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_DMA_IRQHandler+0x984>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a39      	ldr	r2, [pc, #228]	@ (8006220 <HAL_DMA_IRQHandler+0xa64>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d101      	bne.n	8006144 <HAL_DMA_IRQHandler+0x988>
 8006140:	2301      	movs	r3, #1
 8006142:	e000      	b.n	8006146 <HAL_DMA_IRQHandler+0x98a>
 8006144:	2300      	movs	r3, #0
 8006146:	2b00      	cmp	r3, #0
 8006148:	f000 823f 	beq.w	80065ca <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006158:	f003 031f 	and.w	r3, r3, #31
 800615c:	2204      	movs	r2, #4
 800615e:	409a      	lsls	r2, r3
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	4013      	ands	r3, r2
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 80cd 	beq.w	8006304 <HAL_DMA_IRQHandler+0xb48>
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80c7 	beq.w	8006304 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800617a:	f003 031f 	and.w	r3, r3, #31
 800617e:	2204      	movs	r2, #4
 8006180:	409a      	lsls	r2, r3
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d049      	beq.n	8006224 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d109      	bne.n	80061ae <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800619e:	2b00      	cmp	r3, #0
 80061a0:	f000 8210 	beq.w	80065c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061ac:	e20a      	b.n	80065c4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	f000 8206 	beq.w	80065c4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061c0:	e200      	b.n	80065c4 <HAL_DMA_IRQHandler+0xe08>
 80061c2:	bf00      	nop
 80061c4:	40020010 	.word	0x40020010
 80061c8:	40020028 	.word	0x40020028
 80061cc:	40020040 	.word	0x40020040
 80061d0:	40020058 	.word	0x40020058
 80061d4:	40020070 	.word	0x40020070
 80061d8:	40020088 	.word	0x40020088
 80061dc:	400200a0 	.word	0x400200a0
 80061e0:	400200b8 	.word	0x400200b8
 80061e4:	40020410 	.word	0x40020410
 80061e8:	40020428 	.word	0x40020428
 80061ec:	40020440 	.word	0x40020440
 80061f0:	40020458 	.word	0x40020458
 80061f4:	40020470 	.word	0x40020470
 80061f8:	40020488 	.word	0x40020488
 80061fc:	400204a0 	.word	0x400204a0
 8006200:	400204b8 	.word	0x400204b8
 8006204:	58025408 	.word	0x58025408
 8006208:	5802541c 	.word	0x5802541c
 800620c:	58025430 	.word	0x58025430
 8006210:	58025444 	.word	0x58025444
 8006214:	58025458 	.word	0x58025458
 8006218:	5802546c 	.word	0x5802546c
 800621c:	58025480 	.word	0x58025480
 8006220:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b00      	cmp	r3, #0
 800622c:	d160      	bne.n	80062f0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a7f      	ldr	r2, [pc, #508]	@ (8006430 <HAL_DMA_IRQHandler+0xc74>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d04a      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a7d      	ldr	r2, [pc, #500]	@ (8006434 <HAL_DMA_IRQHandler+0xc78>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d045      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a7c      	ldr	r2, [pc, #496]	@ (8006438 <HAL_DMA_IRQHandler+0xc7c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d040      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a7a      	ldr	r2, [pc, #488]	@ (800643c <HAL_DMA_IRQHandler+0xc80>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d03b      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a79      	ldr	r2, [pc, #484]	@ (8006440 <HAL_DMA_IRQHandler+0xc84>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d036      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a77      	ldr	r2, [pc, #476]	@ (8006444 <HAL_DMA_IRQHandler+0xc88>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d031      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a76      	ldr	r2, [pc, #472]	@ (8006448 <HAL_DMA_IRQHandler+0xc8c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d02c      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a74      	ldr	r2, [pc, #464]	@ (800644c <HAL_DMA_IRQHandler+0xc90>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d027      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a73      	ldr	r2, [pc, #460]	@ (8006450 <HAL_DMA_IRQHandler+0xc94>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d022      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a71      	ldr	r2, [pc, #452]	@ (8006454 <HAL_DMA_IRQHandler+0xc98>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d01d      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a70      	ldr	r2, [pc, #448]	@ (8006458 <HAL_DMA_IRQHandler+0xc9c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d018      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a6e      	ldr	r2, [pc, #440]	@ (800645c <HAL_DMA_IRQHandler+0xca0>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d013      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a6d      	ldr	r2, [pc, #436]	@ (8006460 <HAL_DMA_IRQHandler+0xca4>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d00e      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a6b      	ldr	r2, [pc, #428]	@ (8006464 <HAL_DMA_IRQHandler+0xca8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d009      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a6a      	ldr	r2, [pc, #424]	@ (8006468 <HAL_DMA_IRQHandler+0xcac>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d004      	beq.n	80062ce <HAL_DMA_IRQHandler+0xb12>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a68      	ldr	r2, [pc, #416]	@ (800646c <HAL_DMA_IRQHandler+0xcb0>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d108      	bne.n	80062e0 <HAL_DMA_IRQHandler+0xb24>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	681a      	ldr	r2, [r3, #0]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 0208 	bic.w	r2, r2, #8
 80062dc:	601a      	str	r2, [r3, #0]
 80062de:	e007      	b.n	80062f0 <HAL_DMA_IRQHandler+0xb34>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f022 0204 	bic.w	r2, r2, #4
 80062ee:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 8165 	beq.w	80065c4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006302:	e15f      	b.n	80065c4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006308:	f003 031f 	and.w	r3, r3, #31
 800630c:	2202      	movs	r2, #2
 800630e:	409a      	lsls	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	4013      	ands	r3, r2
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80c5 	beq.w	80064a4 <HAL_DMA_IRQHandler+0xce8>
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 80bf 	beq.w	80064a4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	2202      	movs	r2, #2
 8006330:	409a      	lsls	r2, r3
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d018      	beq.n	8006372 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d109      	bne.n	800635e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 813a 	beq.w	80065c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800635c:	e134      	b.n	80065c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006362:	2b00      	cmp	r3, #0
 8006364:	f000 8130 	beq.w	80065c8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006370:	e12a      	b.n	80065c8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b00      	cmp	r3, #0
 800637a:	f040 8089 	bne.w	8006490 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a2b      	ldr	r2, [pc, #172]	@ (8006430 <HAL_DMA_IRQHandler+0xc74>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d04a      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a29      	ldr	r2, [pc, #164]	@ (8006434 <HAL_DMA_IRQHandler+0xc78>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d045      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a28      	ldr	r2, [pc, #160]	@ (8006438 <HAL_DMA_IRQHandler+0xc7c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d040      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a26      	ldr	r2, [pc, #152]	@ (800643c <HAL_DMA_IRQHandler+0xc80>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d03b      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a25      	ldr	r2, [pc, #148]	@ (8006440 <HAL_DMA_IRQHandler+0xc84>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d036      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a23      	ldr	r2, [pc, #140]	@ (8006444 <HAL_DMA_IRQHandler+0xc88>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d031      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a22      	ldr	r2, [pc, #136]	@ (8006448 <HAL_DMA_IRQHandler+0xc8c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d02c      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a20      	ldr	r2, [pc, #128]	@ (800644c <HAL_DMA_IRQHandler+0xc90>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d027      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a1f      	ldr	r2, [pc, #124]	@ (8006450 <HAL_DMA_IRQHandler+0xc94>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d022      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006454 <HAL_DMA_IRQHandler+0xc98>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d01d      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1c      	ldr	r2, [pc, #112]	@ (8006458 <HAL_DMA_IRQHandler+0xc9c>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d018      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1a      	ldr	r2, [pc, #104]	@ (800645c <HAL_DMA_IRQHandler+0xca0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a19      	ldr	r2, [pc, #100]	@ (8006460 <HAL_DMA_IRQHandler+0xca4>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a17      	ldr	r2, [pc, #92]	@ (8006464 <HAL_DMA_IRQHandler+0xca8>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a16      	ldr	r2, [pc, #88]	@ (8006468 <HAL_DMA_IRQHandler+0xcac>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_DMA_IRQHandler+0xc62>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a14      	ldr	r2, [pc, #80]	@ (800646c <HAL_DMA_IRQHandler+0xcb0>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d128      	bne.n	8006470 <HAL_DMA_IRQHandler+0xcb4>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f022 0214 	bic.w	r2, r2, #20
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	e027      	b.n	8006480 <HAL_DMA_IRQHandler+0xcc4>
 8006430:	40020010 	.word	0x40020010
 8006434:	40020028 	.word	0x40020028
 8006438:	40020040 	.word	0x40020040
 800643c:	40020058 	.word	0x40020058
 8006440:	40020070 	.word	0x40020070
 8006444:	40020088 	.word	0x40020088
 8006448:	400200a0 	.word	0x400200a0
 800644c:	400200b8 	.word	0x400200b8
 8006450:	40020410 	.word	0x40020410
 8006454:	40020428 	.word	0x40020428
 8006458:	40020440 	.word	0x40020440
 800645c:	40020458 	.word	0x40020458
 8006460:	40020470 	.word	0x40020470
 8006464:	40020488 	.word	0x40020488
 8006468:	400204a0 	.word	0x400204a0
 800646c:	400204b8 	.word	0x400204b8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 020a 	bic.w	r2, r2, #10
 800647e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 8097 	beq.w	80065c8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064a2:	e091      	b.n	80065c8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064a8:	f003 031f 	and.w	r3, r3, #31
 80064ac:	2208      	movs	r2, #8
 80064ae:	409a      	lsls	r2, r3
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	4013      	ands	r3, r2
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8088 	beq.w	80065ca <HAL_DMA_IRQHandler+0xe0e>
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 8082 	beq.w	80065ca <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a41      	ldr	r2, [pc, #260]	@ (80065d0 <HAL_DMA_IRQHandler+0xe14>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d04a      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a3f      	ldr	r2, [pc, #252]	@ (80065d4 <HAL_DMA_IRQHandler+0xe18>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d045      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a3e      	ldr	r2, [pc, #248]	@ (80065d8 <HAL_DMA_IRQHandler+0xe1c>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d040      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a3c      	ldr	r2, [pc, #240]	@ (80065dc <HAL_DMA_IRQHandler+0xe20>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d03b      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a3b      	ldr	r2, [pc, #236]	@ (80065e0 <HAL_DMA_IRQHandler+0xe24>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d036      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a39      	ldr	r2, [pc, #228]	@ (80065e4 <HAL_DMA_IRQHandler+0xe28>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d031      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a38      	ldr	r2, [pc, #224]	@ (80065e8 <HAL_DMA_IRQHandler+0xe2c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d02c      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a36      	ldr	r2, [pc, #216]	@ (80065ec <HAL_DMA_IRQHandler+0xe30>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d027      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a35      	ldr	r2, [pc, #212]	@ (80065f0 <HAL_DMA_IRQHandler+0xe34>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d022      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a33      	ldr	r2, [pc, #204]	@ (80065f4 <HAL_DMA_IRQHandler+0xe38>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01d      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a32      	ldr	r2, [pc, #200]	@ (80065f8 <HAL_DMA_IRQHandler+0xe3c>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d018      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a30      	ldr	r2, [pc, #192]	@ (80065fc <HAL_DMA_IRQHandler+0xe40>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d013      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a2f      	ldr	r2, [pc, #188]	@ (8006600 <HAL_DMA_IRQHandler+0xe44>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00e      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a2d      	ldr	r2, [pc, #180]	@ (8006604 <HAL_DMA_IRQHandler+0xe48>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d009      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a2c      	ldr	r2, [pc, #176]	@ (8006608 <HAL_DMA_IRQHandler+0xe4c>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d004      	beq.n	8006566 <HAL_DMA_IRQHandler+0xdaa>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a2a      	ldr	r2, [pc, #168]	@ (800660c <HAL_DMA_IRQHandler+0xe50>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d108      	bne.n	8006578 <HAL_DMA_IRQHandler+0xdbc>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 021c 	bic.w	r2, r2, #28
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	e007      	b.n	8006588 <HAL_DMA_IRQHandler+0xdcc>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f022 020e 	bic.w	r2, r2, #14
 8006586:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800658c:	f003 031f 	and.w	r3, r3, #31
 8006590:	2201      	movs	r2, #1
 8006592:	409a      	lsls	r2, r3
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d009      	beq.n	80065ca <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
 80065be:	e004      	b.n	80065ca <HAL_DMA_IRQHandler+0xe0e>
          return;
 80065c0:	bf00      	nop
 80065c2:	e002      	b.n	80065ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065c4:	bf00      	nop
 80065c6:	e000      	b.n	80065ca <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065c8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80065ca:	3728      	adds	r7, #40	@ 0x28
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}
 80065d0:	40020010 	.word	0x40020010
 80065d4:	40020028 	.word	0x40020028
 80065d8:	40020040 	.word	0x40020040
 80065dc:	40020058 	.word	0x40020058
 80065e0:	40020070 	.word	0x40020070
 80065e4:	40020088 	.word	0x40020088
 80065e8:	400200a0 	.word	0x400200a0
 80065ec:	400200b8 	.word	0x400200b8
 80065f0:	40020410 	.word	0x40020410
 80065f4:	40020428 	.word	0x40020428
 80065f8:	40020440 	.word	0x40020440
 80065fc:	40020458 	.word	0x40020458
 8006600:	40020470 	.word	0x40020470
 8006604:	40020488 	.word	0x40020488
 8006608:	400204a0 	.word	0x400204a0
 800660c:	400204b8 	.word	0x400204b8

08006610 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006622:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006628:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a7f      	ldr	r2, [pc, #508]	@ (800682c <DMA_SetConfig+0x21c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d072      	beq.n	800671a <DMA_SetConfig+0x10a>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a7d      	ldr	r2, [pc, #500]	@ (8006830 <DMA_SetConfig+0x220>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d06d      	beq.n	800671a <DMA_SetConfig+0x10a>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a7c      	ldr	r2, [pc, #496]	@ (8006834 <DMA_SetConfig+0x224>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d068      	beq.n	800671a <DMA_SetConfig+0x10a>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a7a      	ldr	r2, [pc, #488]	@ (8006838 <DMA_SetConfig+0x228>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d063      	beq.n	800671a <DMA_SetConfig+0x10a>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a79      	ldr	r2, [pc, #484]	@ (800683c <DMA_SetConfig+0x22c>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d05e      	beq.n	800671a <DMA_SetConfig+0x10a>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a77      	ldr	r2, [pc, #476]	@ (8006840 <DMA_SetConfig+0x230>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d059      	beq.n	800671a <DMA_SetConfig+0x10a>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a76      	ldr	r2, [pc, #472]	@ (8006844 <DMA_SetConfig+0x234>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d054      	beq.n	800671a <DMA_SetConfig+0x10a>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a74      	ldr	r2, [pc, #464]	@ (8006848 <DMA_SetConfig+0x238>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d04f      	beq.n	800671a <DMA_SetConfig+0x10a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a73      	ldr	r2, [pc, #460]	@ (800684c <DMA_SetConfig+0x23c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d04a      	beq.n	800671a <DMA_SetConfig+0x10a>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a71      	ldr	r2, [pc, #452]	@ (8006850 <DMA_SetConfig+0x240>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d045      	beq.n	800671a <DMA_SetConfig+0x10a>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a70      	ldr	r2, [pc, #448]	@ (8006854 <DMA_SetConfig+0x244>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d040      	beq.n	800671a <DMA_SetConfig+0x10a>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a6e      	ldr	r2, [pc, #440]	@ (8006858 <DMA_SetConfig+0x248>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d03b      	beq.n	800671a <DMA_SetConfig+0x10a>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a6d      	ldr	r2, [pc, #436]	@ (800685c <DMA_SetConfig+0x24c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d036      	beq.n	800671a <DMA_SetConfig+0x10a>
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a6b      	ldr	r2, [pc, #428]	@ (8006860 <DMA_SetConfig+0x250>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d031      	beq.n	800671a <DMA_SetConfig+0x10a>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a6a      	ldr	r2, [pc, #424]	@ (8006864 <DMA_SetConfig+0x254>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d02c      	beq.n	800671a <DMA_SetConfig+0x10a>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a68      	ldr	r2, [pc, #416]	@ (8006868 <DMA_SetConfig+0x258>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d027      	beq.n	800671a <DMA_SetConfig+0x10a>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a67      	ldr	r2, [pc, #412]	@ (800686c <DMA_SetConfig+0x25c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d022      	beq.n	800671a <DMA_SetConfig+0x10a>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a65      	ldr	r2, [pc, #404]	@ (8006870 <DMA_SetConfig+0x260>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d01d      	beq.n	800671a <DMA_SetConfig+0x10a>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a64      	ldr	r2, [pc, #400]	@ (8006874 <DMA_SetConfig+0x264>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d018      	beq.n	800671a <DMA_SetConfig+0x10a>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a62      	ldr	r2, [pc, #392]	@ (8006878 <DMA_SetConfig+0x268>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d013      	beq.n	800671a <DMA_SetConfig+0x10a>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a61      	ldr	r2, [pc, #388]	@ (800687c <DMA_SetConfig+0x26c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d00e      	beq.n	800671a <DMA_SetConfig+0x10a>
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a5f      	ldr	r2, [pc, #380]	@ (8006880 <DMA_SetConfig+0x270>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d009      	beq.n	800671a <DMA_SetConfig+0x10a>
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a5e      	ldr	r2, [pc, #376]	@ (8006884 <DMA_SetConfig+0x274>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d004      	beq.n	800671a <DMA_SetConfig+0x10a>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a5c      	ldr	r2, [pc, #368]	@ (8006888 <DMA_SetConfig+0x278>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d101      	bne.n	800671e <DMA_SetConfig+0x10e>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <DMA_SetConfig+0x110>
 800671e:	2300      	movs	r3, #0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00d      	beq.n	8006740 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006728:	68fa      	ldr	r2, [r7, #12]
 800672a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800672c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006732:	2b00      	cmp	r3, #0
 8006734:	d004      	beq.n	8006740 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800673e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a39      	ldr	r2, [pc, #228]	@ (800682c <DMA_SetConfig+0x21c>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d04a      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a38      	ldr	r2, [pc, #224]	@ (8006830 <DMA_SetConfig+0x220>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d045      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a36      	ldr	r2, [pc, #216]	@ (8006834 <DMA_SetConfig+0x224>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d040      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a35      	ldr	r2, [pc, #212]	@ (8006838 <DMA_SetConfig+0x228>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d03b      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a33      	ldr	r2, [pc, #204]	@ (800683c <DMA_SetConfig+0x22c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d036      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a32      	ldr	r2, [pc, #200]	@ (8006840 <DMA_SetConfig+0x230>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d031      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a30      	ldr	r2, [pc, #192]	@ (8006844 <DMA_SetConfig+0x234>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d02c      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a2f      	ldr	r2, [pc, #188]	@ (8006848 <DMA_SetConfig+0x238>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d027      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a2d      	ldr	r2, [pc, #180]	@ (800684c <DMA_SetConfig+0x23c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d022      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a2c      	ldr	r2, [pc, #176]	@ (8006850 <DMA_SetConfig+0x240>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d01d      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a2a      	ldr	r2, [pc, #168]	@ (8006854 <DMA_SetConfig+0x244>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d018      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a29      	ldr	r2, [pc, #164]	@ (8006858 <DMA_SetConfig+0x248>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d013      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a27      	ldr	r2, [pc, #156]	@ (800685c <DMA_SetConfig+0x24c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00e      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a26      	ldr	r2, [pc, #152]	@ (8006860 <DMA_SetConfig+0x250>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d009      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a24      	ldr	r2, [pc, #144]	@ (8006864 <DMA_SetConfig+0x254>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <DMA_SetConfig+0x1d0>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a23      	ldr	r2, [pc, #140]	@ (8006868 <DMA_SetConfig+0x258>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d101      	bne.n	80067e4 <DMA_SetConfig+0x1d4>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <DMA_SetConfig+0x1d6>
 80067e4:	2300      	movs	r3, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d059      	beq.n	800689e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067ee:	f003 031f 	and.w	r3, r3, #31
 80067f2:	223f      	movs	r2, #63	@ 0x3f
 80067f4:	409a      	lsls	r2, r3
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006808:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b40      	cmp	r3, #64	@ 0x40
 8006818:	d138      	bne.n	800688c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800682a:	e086      	b.n	800693a <DMA_SetConfig+0x32a>
 800682c:	40020010 	.word	0x40020010
 8006830:	40020028 	.word	0x40020028
 8006834:	40020040 	.word	0x40020040
 8006838:	40020058 	.word	0x40020058
 800683c:	40020070 	.word	0x40020070
 8006840:	40020088 	.word	0x40020088
 8006844:	400200a0 	.word	0x400200a0
 8006848:	400200b8 	.word	0x400200b8
 800684c:	40020410 	.word	0x40020410
 8006850:	40020428 	.word	0x40020428
 8006854:	40020440 	.word	0x40020440
 8006858:	40020458 	.word	0x40020458
 800685c:	40020470 	.word	0x40020470
 8006860:	40020488 	.word	0x40020488
 8006864:	400204a0 	.word	0x400204a0
 8006868:	400204b8 	.word	0x400204b8
 800686c:	58025408 	.word	0x58025408
 8006870:	5802541c 	.word	0x5802541c
 8006874:	58025430 	.word	0x58025430
 8006878:	58025444 	.word	0x58025444
 800687c:	58025458 	.word	0x58025458
 8006880:	5802546c 	.word	0x5802546c
 8006884:	58025480 	.word	0x58025480
 8006888:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	60da      	str	r2, [r3, #12]
}
 800689c:	e04d      	b.n	800693a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a29      	ldr	r2, [pc, #164]	@ (8006948 <DMA_SetConfig+0x338>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d022      	beq.n	80068ee <DMA_SetConfig+0x2de>
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a27      	ldr	r2, [pc, #156]	@ (800694c <DMA_SetConfig+0x33c>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d01d      	beq.n	80068ee <DMA_SetConfig+0x2de>
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a26      	ldr	r2, [pc, #152]	@ (8006950 <DMA_SetConfig+0x340>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d018      	beq.n	80068ee <DMA_SetConfig+0x2de>
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a24      	ldr	r2, [pc, #144]	@ (8006954 <DMA_SetConfig+0x344>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <DMA_SetConfig+0x2de>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a23      	ldr	r2, [pc, #140]	@ (8006958 <DMA_SetConfig+0x348>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d00e      	beq.n	80068ee <DMA_SetConfig+0x2de>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a21      	ldr	r2, [pc, #132]	@ (800695c <DMA_SetConfig+0x34c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d009      	beq.n	80068ee <DMA_SetConfig+0x2de>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a20      	ldr	r2, [pc, #128]	@ (8006960 <DMA_SetConfig+0x350>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d004      	beq.n	80068ee <DMA_SetConfig+0x2de>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006964 <DMA_SetConfig+0x354>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d101      	bne.n	80068f2 <DMA_SetConfig+0x2e2>
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <DMA_SetConfig+0x2e4>
 80068f2:	2300      	movs	r3, #0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d020      	beq.n	800693a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068fc:	f003 031f 	and.w	r3, r3, #31
 8006900:	2201      	movs	r2, #1
 8006902:	409a      	lsls	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	683a      	ldr	r2, [r7, #0]
 800690e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b40      	cmp	r3, #64	@ 0x40
 8006916:	d108      	bne.n	800692a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	687a      	ldr	r2, [r7, #4]
 800691e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	60da      	str	r2, [r3, #12]
}
 8006928:	e007      	b.n	800693a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	60da      	str	r2, [r3, #12]
}
 800693a:	bf00      	nop
 800693c:	371c      	adds	r7, #28
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr
 8006946:	bf00      	nop
 8006948:	58025408 	.word	0x58025408
 800694c:	5802541c 	.word	0x5802541c
 8006950:	58025430 	.word	0x58025430
 8006954:	58025444 	.word	0x58025444
 8006958:	58025458 	.word	0x58025458
 800695c:	5802546c 	.word	0x5802546c
 8006960:	58025480 	.word	0x58025480
 8006964:	58025494 	.word	0x58025494

08006968 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a42      	ldr	r2, [pc, #264]	@ (8006a80 <DMA_CalcBaseAndBitshift+0x118>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d04a      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a41      	ldr	r2, [pc, #260]	@ (8006a84 <DMA_CalcBaseAndBitshift+0x11c>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d045      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a3f      	ldr	r2, [pc, #252]	@ (8006a88 <DMA_CalcBaseAndBitshift+0x120>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d040      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a3e      	ldr	r2, [pc, #248]	@ (8006a8c <DMA_CalcBaseAndBitshift+0x124>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d03b      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a3c      	ldr	r2, [pc, #240]	@ (8006a90 <DMA_CalcBaseAndBitshift+0x128>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d036      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a3b      	ldr	r2, [pc, #236]	@ (8006a94 <DMA_CalcBaseAndBitshift+0x12c>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d031      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a39      	ldr	r2, [pc, #228]	@ (8006a98 <DMA_CalcBaseAndBitshift+0x130>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d02c      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a38      	ldr	r2, [pc, #224]	@ (8006a9c <DMA_CalcBaseAndBitshift+0x134>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d027      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a36      	ldr	r2, [pc, #216]	@ (8006aa0 <DMA_CalcBaseAndBitshift+0x138>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d022      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a35      	ldr	r2, [pc, #212]	@ (8006aa4 <DMA_CalcBaseAndBitshift+0x13c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d01d      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a33      	ldr	r2, [pc, #204]	@ (8006aa8 <DMA_CalcBaseAndBitshift+0x140>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d018      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a32      	ldr	r2, [pc, #200]	@ (8006aac <DMA_CalcBaseAndBitshift+0x144>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d013      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a30      	ldr	r2, [pc, #192]	@ (8006ab0 <DMA_CalcBaseAndBitshift+0x148>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d00e      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a2f      	ldr	r2, [pc, #188]	@ (8006ab4 <DMA_CalcBaseAndBitshift+0x14c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d009      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a2d      	ldr	r2, [pc, #180]	@ (8006ab8 <DMA_CalcBaseAndBitshift+0x150>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d004      	beq.n	8006a10 <DMA_CalcBaseAndBitshift+0xa8>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a2c      	ldr	r2, [pc, #176]	@ (8006abc <DMA_CalcBaseAndBitshift+0x154>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d101      	bne.n	8006a14 <DMA_CalcBaseAndBitshift+0xac>
 8006a10:	2301      	movs	r3, #1
 8006a12:	e000      	b.n	8006a16 <DMA_CalcBaseAndBitshift+0xae>
 8006a14:	2300      	movs	r3, #0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d024      	beq.n	8006a64 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	b2db      	uxtb	r3, r3
 8006a20:	3b10      	subs	r3, #16
 8006a22:	4a27      	ldr	r2, [pc, #156]	@ (8006ac0 <DMA_CalcBaseAndBitshift+0x158>)
 8006a24:	fba2 2303 	umull	r2, r3, r2, r3
 8006a28:	091b      	lsrs	r3, r3, #4
 8006a2a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	4a24      	ldr	r2, [pc, #144]	@ (8006ac4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006a34:	5cd3      	ldrb	r3, [r2, r3]
 8006a36:	461a      	mov	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b03      	cmp	r3, #3
 8006a40:	d908      	bls.n	8006a54 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	461a      	mov	r2, r3
 8006a48:	4b1f      	ldr	r3, [pc, #124]	@ (8006ac8 <DMA_CalcBaseAndBitshift+0x160>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	1d1a      	adds	r2, r3, #4
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	659a      	str	r2, [r3, #88]	@ 0x58
 8006a52:	e00d      	b.n	8006a70 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ac8 <DMA_CalcBaseAndBitshift+0x160>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a62:	e005      	b.n	8006a70 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	40020010 	.word	0x40020010
 8006a84:	40020028 	.word	0x40020028
 8006a88:	40020040 	.word	0x40020040
 8006a8c:	40020058 	.word	0x40020058
 8006a90:	40020070 	.word	0x40020070
 8006a94:	40020088 	.word	0x40020088
 8006a98:	400200a0 	.word	0x400200a0
 8006a9c:	400200b8 	.word	0x400200b8
 8006aa0:	40020410 	.word	0x40020410
 8006aa4:	40020428 	.word	0x40020428
 8006aa8:	40020440 	.word	0x40020440
 8006aac:	40020458 	.word	0x40020458
 8006ab0:	40020470 	.word	0x40020470
 8006ab4:	40020488 	.word	0x40020488
 8006ab8:	400204a0 	.word	0x400204a0
 8006abc:	400204b8 	.word	0x400204b8
 8006ac0:	aaaaaaab 	.word	0xaaaaaaab
 8006ac4:	0800dc9c 	.word	0x0800dc9c
 8006ac8:	fffffc00 	.word	0xfffffc00

08006acc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d120      	bne.n	8006b22 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ae4:	2b03      	cmp	r3, #3
 8006ae6:	d858      	bhi.n	8006b9a <DMA_CheckFifoParam+0xce>
 8006ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8006af0 <DMA_CheckFifoParam+0x24>)
 8006aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aee:	bf00      	nop
 8006af0:	08006b01 	.word	0x08006b01
 8006af4:	08006b13 	.word	0x08006b13
 8006af8:	08006b01 	.word	0x08006b01
 8006afc:	08006b9b 	.word	0x08006b9b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d048      	beq.n	8006b9e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b10:	e045      	b.n	8006b9e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b1a:	d142      	bne.n	8006ba2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b20:	e03f      	b.n	8006ba2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b2a:	d123      	bne.n	8006b74 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b30:	2b03      	cmp	r3, #3
 8006b32:	d838      	bhi.n	8006ba6 <DMA_CheckFifoParam+0xda>
 8006b34:	a201      	add	r2, pc, #4	@ (adr r2, 8006b3c <DMA_CheckFifoParam+0x70>)
 8006b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3a:	bf00      	nop
 8006b3c:	08006b4d 	.word	0x08006b4d
 8006b40:	08006b53 	.word	0x08006b53
 8006b44:	08006b4d 	.word	0x08006b4d
 8006b48:	08006b65 	.word	0x08006b65
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	73fb      	strb	r3, [r7, #15]
        break;
 8006b50:	e030      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d025      	beq.n	8006baa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b62:	e022      	b.n	8006baa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b68:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006b6c:	d11f      	bne.n	8006bae <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006b72:	e01c      	b.n	8006bae <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d902      	bls.n	8006b82 <DMA_CheckFifoParam+0xb6>
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d003      	beq.n	8006b88 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006b80:	e018      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	73fb      	strb	r3, [r7, #15]
        break;
 8006b86:	e015      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00e      	beq.n	8006bb2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
    break;
 8006b98:	e00b      	b.n	8006bb2 <DMA_CheckFifoParam+0xe6>
        break;
 8006b9a:	bf00      	nop
 8006b9c:	e00a      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
        break;
 8006b9e:	bf00      	nop
 8006ba0:	e008      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ba2:	bf00      	nop
 8006ba4:	e006      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
        break;
 8006ba6:	bf00      	nop
 8006ba8:	e004      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
        break;
 8006baa:	bf00      	nop
 8006bac:	e002      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
        break;
 8006bae:	bf00      	nop
 8006bb0:	e000      	b.n	8006bb4 <DMA_CheckFifoParam+0xe8>
    break;
 8006bb2:	bf00      	nop
    }
  }

  return status;
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop

08006bc4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a38      	ldr	r2, [pc, #224]	@ (8006cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d022      	beq.n	8006c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a36      	ldr	r2, [pc, #216]	@ (8006cbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d01d      	beq.n	8006c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a35      	ldr	r2, [pc, #212]	@ (8006cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d018      	beq.n	8006c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a33      	ldr	r2, [pc, #204]	@ (8006cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a32      	ldr	r2, [pc, #200]	@ (8006cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d00e      	beq.n	8006c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a30      	ldr	r2, [pc, #192]	@ (8006ccc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d009      	beq.n	8006c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a2f      	ldr	r2, [pc, #188]	@ (8006cd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d004      	beq.n	8006c22 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a2d      	ldr	r2, [pc, #180]	@ (8006cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d101      	bne.n	8006c26 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006c26:	2300      	movs	r3, #0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d01a      	beq.n	8006c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	3b08      	subs	r3, #8
 8006c34:	4a28      	ldr	r2, [pc, #160]	@ (8006cd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006c36:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3a:	091b      	lsrs	r3, r3, #4
 8006c3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	4b26      	ldr	r3, [pc, #152]	@ (8006cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a24      	ldr	r2, [pc, #144]	@ (8006ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006c50:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f003 031f 	and.w	r3, r3, #31
 8006c58:	2201      	movs	r2, #1
 8006c5a:	409a      	lsls	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006c60:	e024      	b.n	8006cac <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	3b10      	subs	r3, #16
 8006c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	091b      	lsrs	r3, r3, #4
 8006c72:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4a1c      	ldr	r2, [pc, #112]	@ (8006ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d806      	bhi.n	8006c8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8006cec <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d902      	bls.n	8006c8a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	3308      	adds	r3, #8
 8006c88:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4b18      	ldr	r3, [pc, #96]	@ (8006cf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	461a      	mov	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a16      	ldr	r2, [pc, #88]	@ (8006cf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006c9c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	58025408 	.word	0x58025408
 8006cbc:	5802541c 	.word	0x5802541c
 8006cc0:	58025430 	.word	0x58025430
 8006cc4:	58025444 	.word	0x58025444
 8006cc8:	58025458 	.word	0x58025458
 8006ccc:	5802546c 	.word	0x5802546c
 8006cd0:	58025480 	.word	0x58025480
 8006cd4:	58025494 	.word	0x58025494
 8006cd8:	cccccccd 	.word	0xcccccccd
 8006cdc:	16009600 	.word	0x16009600
 8006ce0:	58025880 	.word	0x58025880
 8006ce4:	aaaaaaab 	.word	0xaaaaaaab
 8006ce8:	400204b8 	.word	0x400204b8
 8006cec:	4002040f 	.word	0x4002040f
 8006cf0:	10008200 	.word	0x10008200
 8006cf4:	40020880 	.word	0x40020880

08006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d04a      	beq.n	8006da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d847      	bhi.n	8006da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a25      	ldr	r2, [pc, #148]	@ (8006db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d022      	beq.n	8006d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a24      	ldr	r2, [pc, #144]	@ (8006db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d01d      	beq.n	8006d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a22      	ldr	r2, [pc, #136]	@ (8006db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d018      	beq.n	8006d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a21      	ldr	r2, [pc, #132]	@ (8006dbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d013      	beq.n	8006d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d00e      	beq.n	8006d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1e      	ldr	r2, [pc, #120]	@ (8006dc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d009      	beq.n	8006d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1c      	ldr	r2, [pc, #112]	@ (8006dc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d004      	beq.n	8006d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8006dcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d101      	bne.n	8006d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006d64:	2301      	movs	r3, #1
 8006d66:	e000      	b.n	8006d6a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00a      	beq.n	8006d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d6e:	68fa      	ldr	r2, [r7, #12]
 8006d70:	4b17      	ldr	r3, [pc, #92]	@ (8006dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006d72:	4413      	add	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	461a      	mov	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4a15      	ldr	r2, [pc, #84]	@ (8006dd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006d80:	671a      	str	r2, [r3, #112]	@ 0x70
 8006d82:	e009      	b.n	8006d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006d84:	68fa      	ldr	r2, [r7, #12]
 8006d86:	4b14      	ldr	r3, [pc, #80]	@ (8006dd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006d88:	4413      	add	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a11      	ldr	r2, [pc, #68]	@ (8006ddc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006d96:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	409a      	lsls	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8006da4:	bf00      	nop
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr
 8006db0:	58025408 	.word	0x58025408
 8006db4:	5802541c 	.word	0x5802541c
 8006db8:	58025430 	.word	0x58025430
 8006dbc:	58025444 	.word	0x58025444
 8006dc0:	58025458 	.word	0x58025458
 8006dc4:	5802546c 	.word	0x5802546c
 8006dc8:	58025480 	.word	0x58025480
 8006dcc:	58025494 	.word	0x58025494
 8006dd0:	1600963f 	.word	0x1600963f
 8006dd4:	58025940 	.word	0x58025940
 8006dd8:	1000823f 	.word	0x1000823f
 8006ddc:	40020940 	.word	0x40020940

08006de0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d101      	bne.n	8006df2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e0e3      	b.n	8006fba <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d106      	bne.n	8006e0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2223      	movs	r2, #35	@ 0x23
 8006e00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f7fa f98d 	bl	8001124 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e0a:	4b6e      	ldr	r3, [pc, #440]	@ (8006fc4 <HAL_ETH_Init+0x1e4>)
 8006e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e10:	4a6c      	ldr	r2, [pc, #432]	@ (8006fc4 <HAL_ETH_Init+0x1e4>)
 8006e12:	f043 0302 	orr.w	r3, r3, #2
 8006e16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8006fc4 <HAL_ETH_Init+0x1e4>)
 8006e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	60bb      	str	r3, [r7, #8]
 8006e26:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	7a1b      	ldrb	r3, [r3, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d103      	bne.n	8006e38 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006e30:	2000      	movs	r0, #0
 8006e32:	f7fc fae3 	bl	80033fc <HAL_SYSCFG_ETHInterfaceSelect>
 8006e36:	e003      	b.n	8006e40 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006e38:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8006e3c:	f7fc fade 	bl	80033fc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006e40:	4b61      	ldr	r3, [pc, #388]	@ (8006fc8 <HAL_ETH_Init+0x1e8>)
 8006e42:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	6812      	ldr	r2, [r2, #0]
 8006e52:	f043 0301 	orr.w	r3, r3, #1
 8006e56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006e5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e5c:	f7fc fab6 	bl	80033cc <HAL_GetTick>
 8006e60:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006e62:	e011      	b.n	8006e88 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006e64:	f7fc fab2 	bl	80033cc <HAL_GetTick>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006e72:	d909      	bls.n	8006e88 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2204      	movs	r2, #4
 8006e78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	22e0      	movs	r2, #224	@ 0xe0
 8006e80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	e098      	b.n	8006fba <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0301 	and.w	r3, r3, #1
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1e4      	bne.n	8006e64 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 f89e 	bl	8006fdc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006ea0:	f002 fa10 	bl	80092c4 <HAL_RCC_GetHCLKFreq>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	4a49      	ldr	r2, [pc, #292]	@ (8006fcc <HAL_ETH_Init+0x1ec>)
 8006ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eac:	0c9a      	lsrs	r2, r3, #18
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3a01      	subs	r2, #1
 8006eb4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fa81 	bl	80073c0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ec6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8006eca:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	6812      	ldr	r2, [r2, #0]
 8006ed2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ed6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006eda:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	f003 0303 	and.w	r3, r3, #3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d009      	beq.n	8006efe <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	22e0      	movs	r2, #224	@ 0xe0
 8006ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e05d      	b.n	8006fba <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f06:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006f0a:	4b31      	ldr	r3, [pc, #196]	@ (8006fd0 <HAL_ETH_Init+0x1f0>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6952      	ldr	r2, [r2, #20]
 8006f12:	0051      	lsls	r1, r2, #1
 8006f14:	687a      	ldr	r2, [r7, #4]
 8006f16:	6812      	ldr	r2, [r2, #0]
 8006f18:	430b      	orrs	r3, r1
 8006f1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006f1e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 fae9 	bl	80074fa <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 fb2f 	bl	800758c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	3305      	adds	r3, #5
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	021a      	lsls	r2, r3, #8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	4619      	mov	r1, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	3303      	adds	r3, #3
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	061a      	lsls	r2, r3, #24
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	041b      	lsls	r3, r3, #16
 8006f60:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	3301      	adds	r3, #1
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006f6c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006f7a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006f7c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	4b11      	ldr	r3, [pc, #68]	@ (8006fd4 <HAL_ETH_Init+0x1f4>)
 8006f8e:	430b      	orrs	r3, r1
 8006f90:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8006fd8 <HAL_ETH_Init+0x1f8>)
 8006fa2:	430b      	orrs	r3, r1
 8006fa4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2210      	movs	r2, #16
 8006fb4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	58024400 	.word	0x58024400
 8006fc8:	58000400 	.word	0x58000400
 8006fcc:	431bde83 	.word	0x431bde83
 8006fd0:	ffff8001 	.word	0xffff8001
 8006fd4:	0c020060 	.word	0x0c020060
 8006fd8:	0c20c000 	.word	0x0c20c000

08006fdc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006ff4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006ff6:	f002 f965 	bl	80092c4 <HAL_RCC_GetHCLKFreq>
 8006ffa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	4a1a      	ldr	r2, [pc, #104]	@ (8007068 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d804      	bhi.n	800700e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	e022      	b.n	8007054 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	4a16      	ldr	r2, [pc, #88]	@ (800706c <HAL_ETH_SetMDIOClockRange+0x90>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d204      	bcs.n	8007020 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	e019      	b.n	8007054 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	4a13      	ldr	r2, [pc, #76]	@ (8007070 <HAL_ETH_SetMDIOClockRange+0x94>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d915      	bls.n	8007054 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4a12      	ldr	r2, [pc, #72]	@ (8007074 <HAL_ETH_SetMDIOClockRange+0x98>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d804      	bhi.n	800703a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	e00c      	b.n	8007054 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	4a0e      	ldr	r2, [pc, #56]	@ (8007078 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d804      	bhi.n	800704c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007048:	60fb      	str	r3, [r7, #12]
 800704a:	e003      	b.n	8007054 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8007052:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800705e:	bf00      	nop
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	02160ebf 	.word	0x02160ebf
 800706c:	03938700 	.word	0x03938700
 8007070:	05f5e0ff 	.word	0x05f5e0ff
 8007074:	08f0d17f 	.word	0x08f0d17f
 8007078:	0ee6b27f 	.word	0x0ee6b27f

0800707c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800708e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	791b      	ldrb	r3, [r3, #4]
 8007094:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8007096:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	7b1b      	ldrb	r3, [r3, #12]
 800709c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800709e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	7b5b      	ldrb	r3, [r3, #13]
 80070a4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80070a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	7b9b      	ldrb	r3, [r3, #14]
 80070ac:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80070ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	7bdb      	ldrb	r3, [r3, #15]
 80070b4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80070b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	7c12      	ldrb	r2, [r2, #16]
 80070bc:	2a00      	cmp	r2, #0
 80070be:	d102      	bne.n	80070c6 <ETH_SetMACConfig+0x4a>
 80070c0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80070c4:	e000      	b.n	80070c8 <ETH_SetMACConfig+0x4c>
 80070c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80070c8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80070ca:	683a      	ldr	r2, [r7, #0]
 80070cc:	7c52      	ldrb	r2, [r2, #17]
 80070ce:	2a00      	cmp	r2, #0
 80070d0:	d102      	bne.n	80070d8 <ETH_SetMACConfig+0x5c>
 80070d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80070d6:	e000      	b.n	80070da <ETH_SetMACConfig+0x5e>
 80070d8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80070da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	7c9b      	ldrb	r3, [r3, #18]
 80070e0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80070e2:	431a      	orrs	r2, r3
               macconf->Speed |
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80070e8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80070ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	7f1b      	ldrb	r3, [r3, #28]
 80070f4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80070f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	7f5b      	ldrb	r3, [r3, #29]
 80070fc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80070fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	7f92      	ldrb	r2, [r2, #30]
 8007104:	2a00      	cmp	r2, #0
 8007106:	d102      	bne.n	800710e <ETH_SetMACConfig+0x92>
 8007108:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800710c:	e000      	b.n	8007110 <ETH_SetMACConfig+0x94>
 800710e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007110:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	7fdb      	ldrb	r3, [r3, #31]
 8007116:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007118:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007120:	2a00      	cmp	r2, #0
 8007122:	d102      	bne.n	800712a <ETH_SetMACConfig+0xae>
 8007124:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007128:	e000      	b.n	800712c <ETH_SetMACConfig+0xb0>
 800712a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800712c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007132:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800713a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800713c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007142:	4313      	orrs	r3, r2
 8007144:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	4b56      	ldr	r3, [pc, #344]	@ (80072a8 <ETH_SetMACConfig+0x22c>)
 800714e:	4013      	ands	r3, r2
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6812      	ldr	r2, [r2, #0]
 8007154:	68f9      	ldr	r1, [r7, #12]
 8007156:	430b      	orrs	r3, r1
 8007158:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800715e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007166:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007168:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007170:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007172:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800717a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800717c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8007184:	2a00      	cmp	r2, #0
 8007186:	d102      	bne.n	800718e <ETH_SetMACConfig+0x112>
 8007188:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800718c:	e000      	b.n	8007190 <ETH_SetMACConfig+0x114>
 800718e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007190:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	4b42      	ldr	r3, [pc, #264]	@ (80072ac <ETH_SetMACConfig+0x230>)
 80071a2:	4013      	ands	r3, r2
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	6812      	ldr	r2, [r2, #0]
 80071a8:	68f9      	ldr	r1, [r7, #12]
 80071aa:	430b      	orrs	r3, r1
 80071ac:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071b4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80071ba:	4313      	orrs	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68da      	ldr	r2, [r3, #12]
 80071c4:	4b3a      	ldr	r3, [pc, #232]	@ (80072b0 <ETH_SetMACConfig+0x234>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	6812      	ldr	r2, [r2, #0]
 80071cc:	68f9      	ldr	r1, [r7, #12]
 80071ce:	430b      	orrs	r3, r1
 80071d0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80071d8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80071de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80071e6:	2a00      	cmp	r2, #0
 80071e8:	d101      	bne.n	80071ee <ETH_SetMACConfig+0x172>
 80071ea:	2280      	movs	r2, #128	@ 0x80
 80071ec:	e000      	b.n	80071f0 <ETH_SetMACConfig+0x174>
 80071ee:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80071f0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071f6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007202:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8007206:	4013      	ands	r3, r2
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6812      	ldr	r2, [r2, #0]
 800720c:	68f9      	ldr	r1, [r7, #12]
 800720e:	430b      	orrs	r3, r1
 8007210:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007218:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8007220:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800722e:	f023 0103 	bic.w	r1, r3, #3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	430a      	orrs	r2, r1
 800723a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8007246:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800725c:	683a      	ldr	r2, [r7, #0]
 800725e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8007262:	2a00      	cmp	r2, #0
 8007264:	d101      	bne.n	800726a <ETH_SetMACConfig+0x1ee>
 8007266:	2240      	movs	r2, #64	@ 0x40
 8007268:	e000      	b.n	800726c <ETH_SetMACConfig+0x1f0>
 800726a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800726c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8007274:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007276:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800727e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007280:	4313      	orrs	r3, r2
 8007282:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800728c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	430a      	orrs	r2, r1
 8007298:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800729c:	bf00      	nop
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	00048083 	.word	0x00048083
 80072ac:	c0f88000 	.word	0xc0f88000
 80072b0:	fffffef0 	.word	0xfffffef0

080072b4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	4b38      	ldr	r3, [pc, #224]	@ (80073ac <ETH_SetDMAConfig+0xf8>)
 80072ca:	4013      	ands	r3, r2
 80072cc:	683a      	ldr	r2, [r7, #0]
 80072ce:	6811      	ldr	r1, [r2, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6812      	ldr	r2, [r2, #0]
 80072d4:	430b      	orrs	r3, r1
 80072d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80072da:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	791b      	ldrb	r3, [r3, #4]
 80072e0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80072e6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	7b1b      	ldrb	r3, [r3, #12]
 80072ec:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	4b2c      	ldr	r3, [pc, #176]	@ (80073b0 <ETH_SetDMAConfig+0xfc>)
 80072fe:	4013      	ands	r3, r2
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6812      	ldr	r2, [r2, #0]
 8007304:	68f9      	ldr	r1, [r7, #12]
 8007306:	430b      	orrs	r3, r1
 8007308:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800730c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	7b5b      	ldrb	r3, [r3, #13]
 8007312:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007324:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8007328:	4b22      	ldr	r3, [pc, #136]	@ (80073b4 <ETH_SetDMAConfig+0x100>)
 800732a:	4013      	ands	r3, r2
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	6812      	ldr	r2, [r2, #0]
 8007330:	68f9      	ldr	r1, [r7, #12]
 8007332:	430b      	orrs	r3, r1
 8007334:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8007338:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	7d1b      	ldrb	r3, [r3, #20]
 8007344:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8007346:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	7f5b      	ldrb	r3, [r3, #29]
 800734c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800735a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800735e:	4b16      	ldr	r3, [pc, #88]	@ (80073b8 <ETH_SetDMAConfig+0x104>)
 8007360:	4013      	ands	r3, r2
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	6812      	ldr	r2, [r2, #0]
 8007366:	68f9      	ldr	r1, [r7, #12]
 8007368:	430b      	orrs	r3, r1
 800736a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800736e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	7f1b      	ldrb	r3, [r3, #28]
 8007376:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800737c:	4313      	orrs	r3, r2
 800737e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007388:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800738c:	4b0b      	ldr	r3, [pc, #44]	@ (80073bc <ETH_SetDMAConfig+0x108>)
 800738e:	4013      	ands	r3, r2
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6812      	ldr	r2, [r2, #0]
 8007394:	68f9      	ldr	r1, [r7, #12]
 8007396:	430b      	orrs	r3, r1
 8007398:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800739c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80073a0:	bf00      	nop
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	ffff87fd 	.word	0xffff87fd
 80073b0:	ffff2ffe 	.word	0xffff2ffe
 80073b4:	fffec000 	.word	0xfffec000
 80073b8:	ffc0efef 	.word	0xffc0efef
 80073bc:	7fc0ffff 	.word	0x7fc0ffff

080073c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b0a4      	sub	sp, #144	@ 0x90
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80073c8:	2301      	movs	r3, #1
 80073ca:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80073ce:	2300      	movs	r3, #0
 80073d0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80073de:	2301      	movs	r3, #1
 80073e0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80073e4:	2301      	movs	r3, #1
 80073e6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80073f0:	2300      	movs	r3, #0
 80073f2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80073f6:	2301      	movs	r3, #1
 80073f8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80073fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007400:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007402:	2300      	movs	r3, #0
 8007404:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8007408:	2300      	movs	r3, #0
 800740a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800740c:	2300      	movs	r3, #0
 800740e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007412:	2300      	movs	r3, #0
 8007414:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8007418:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800741c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800741e:	2300      	movs	r3, #0
 8007420:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007424:	2300      	movs	r3, #0
 8007426:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8007428:	2301      	movs	r3, #1
 800742a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800742e:	2300      	movs	r3, #0
 8007430:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007434:	2300      	movs	r3, #0
 8007436:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800743a:	2300      	movs	r3, #0
 800743c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800743e:	2300      	movs	r3, #0
 8007440:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007442:	2300      	movs	r3, #0
 8007444:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8007446:	2300      	movs	r3, #0
 8007448:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800744c:	2300      	movs	r3, #0
 800744e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007452:	2301      	movs	r3, #1
 8007454:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007458:	2320      	movs	r3, #32
 800745a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800745e:	2301      	movs	r3, #1
 8007460:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007464:	2300      	movs	r3, #0
 8007466:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800746a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800746e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007470:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007474:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8007476:	2300      	movs	r3, #0
 8007478:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800747c:	2302      	movs	r3, #2
 800747e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8007482:	2300      	movs	r3, #0
 8007484:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007488:	2300      	movs	r3, #0
 800748a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800748e:	2300      	movs	r3, #0
 8007490:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800749a:	2300      	movs	r3, #0
 800749c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800749e:	2301      	movs	r3, #1
 80074a0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80074a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff fde6 	bl	800707c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80074b0:	2301      	movs	r3, #1
 80074b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80074b4:	2301      	movs	r3, #1
 80074b6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80074b8:	2300      	movs	r3, #0
 80074ba:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80074c6:	2300      	movs	r3, #0
 80074c8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80074ca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80074ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80074d0:	2300      	movs	r3, #0
 80074d2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80074d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80074d8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80074da:	2300      	movs	r3, #0
 80074dc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80074e0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80074e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80074e6:	f107 0308 	add.w	r3, r7, #8
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff fee1 	bl	80072b4 <ETH_SetDMAConfig>
}
 80074f2:	bf00      	nop
 80074f4:	3790      	adds	r7, #144	@ 0x90
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}

080074fa <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b085      	sub	sp, #20
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007502:	2300      	movs	r3, #0
 8007504:	60fb      	str	r3, [r7, #12]
 8007506:	e01d      	b.n	8007544 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	68d9      	ldr	r1, [r3, #12]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	4613      	mov	r3, r2
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	4413      	add	r3, r2
 8007514:	00db      	lsls	r3, r3, #3
 8007516:	440b      	add	r3, r1
 8007518:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	2200      	movs	r2, #0
 800752a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2200      	movs	r2, #0
 8007530:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007532:	68b9      	ldr	r1, [r7, #8]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	3206      	adds	r2, #6
 800753a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3301      	adds	r3, #1
 8007542:	60fb      	str	r3, [r7, #12]
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2b03      	cmp	r3, #3
 8007548:	d9de      	bls.n	8007508 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007558:	461a      	mov	r2, r3
 800755a:	2303      	movs	r3, #3
 800755c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	68da      	ldr	r2, [r3, #12]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800756c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68da      	ldr	r2, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800757c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8007580:	bf00      	nop
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007594:	2300      	movs	r3, #0
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	e023      	b.n	80075e2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6919      	ldr	r1, [r3, #16]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	4613      	mov	r3, r2
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	4413      	add	r3, r2
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	440b      	add	r3, r1
 80075aa:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2200      	movs	r2, #0
 80075b6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2200      	movs	r2, #0
 80075bc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	2200      	movs	r2, #0
 80075c2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	2200      	movs	r2, #0
 80075c8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2200      	movs	r2, #0
 80075ce:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80075d0:	68b9      	ldr	r1, [r7, #8]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68fa      	ldr	r2, [r7, #12]
 80075d6:	3212      	adds	r2, #18
 80075d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2b03      	cmp	r3, #3
 80075e6:	d9d8      	bls.n	800759a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800760e:	461a      	mov	r2, r3
 8007610:	2303      	movs	r3, #3
 8007612:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	691a      	ldr	r2, [r3, #16]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007622:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007636:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
	...

08007648 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b098      	sub	sp, #96	@ 0x60
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007650:	4a84      	ldr	r2, [pc, #528]	@ (8007864 <HAL_FDCAN_Init+0x21c>)
 8007652:	f107 030c 	add.w	r3, r7, #12
 8007656:	4611      	mov	r1, r2
 8007658:	224c      	movs	r2, #76	@ 0x4c
 800765a:	4618      	mov	r0, r3
 800765c:	f006 fad6 	bl	800dc0c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d101      	bne.n	800766a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007666:	2301      	movs	r3, #1
 8007668:	e1c6      	b.n	80079f8 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a7e      	ldr	r2, [pc, #504]	@ (8007868 <HAL_FDCAN_Init+0x220>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d106      	bne.n	8007682 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800767c:	461a      	mov	r2, r3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7f9 fe54 	bl	8001344 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	699a      	ldr	r2, [r3, #24]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0210 	bic.w	r2, r2, #16
 80076aa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076ac:	f7fb fe8e 	bl	80033cc <HAL_GetTick>
 80076b0:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80076b2:	e014      	b.n	80076de <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80076b4:	f7fb fe8a 	bl	80033cc <HAL_GetTick>
 80076b8:	4602      	mov	r2, r0
 80076ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	2b0a      	cmp	r3, #10
 80076c0:	d90d      	bls.n	80076de <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80076c8:	f043 0201 	orr.w	r2, r3, #1
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2203      	movs	r2, #3
 80076d6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e18c      	b.n	80079f8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	699b      	ldr	r3, [r3, #24]
 80076e4:	f003 0308 	and.w	r3, r3, #8
 80076e8:	2b08      	cmp	r3, #8
 80076ea:	d0e3      	beq.n	80076b4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	699a      	ldr	r2, [r3, #24]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f042 0201 	orr.w	r2, r2, #1
 80076fa:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076fc:	f7fb fe66 	bl	80033cc <HAL_GetTick>
 8007700:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007702:	e014      	b.n	800772e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007704:	f7fb fe62 	bl	80033cc <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	2b0a      	cmp	r3, #10
 8007710:	d90d      	bls.n	800772e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007718:	f043 0201 	orr.w	r2, r3, #1
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2203      	movs	r2, #3
 8007726:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	e164      	b.n	80079f8 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	f003 0301 	and.w	r3, r3, #1
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0e3      	beq.n	8007704 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0202 	orr.w	r2, r2, #2
 800774a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	7c1b      	ldrb	r3, [r3, #16]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d108      	bne.n	8007766 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699a      	ldr	r2, [r3, #24]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007762:	619a      	str	r2, [r3, #24]
 8007764:	e007      	b.n	8007776 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	699a      	ldr	r2, [r3, #24]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007774:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	7c5b      	ldrb	r3, [r3, #17]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d108      	bne.n	8007790 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800778c:	619a      	str	r2, [r3, #24]
 800778e:	e007      	b.n	80077a0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699a      	ldr	r2, [r3, #24]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800779e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	7c9b      	ldrb	r3, [r3, #18]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d108      	bne.n	80077ba <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80077b6:	619a      	str	r2, [r3, #24]
 80077b8:	e007      	b.n	80077ca <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	699a      	ldr	r2, [r3, #24]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80077c8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	689a      	ldr	r2, [r3, #8]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	430a      	orrs	r2, r1
 80077de:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699a      	ldr	r2, [r3, #24]
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80077ee:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	691a      	ldr	r2, [r3, #16]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f022 0210 	bic.w	r2, r2, #16
 80077fe:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d108      	bne.n	800781a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0204 	orr.w	r2, r2, #4
 8007816:	619a      	str	r2, [r3, #24]
 8007818:	e030      	b.n	800787c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d02c      	beq.n	800787c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68db      	ldr	r3, [r3, #12]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d020      	beq.n	800786c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	699a      	ldr	r2, [r3, #24]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007838:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	691a      	ldr	r2, [r3, #16]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f042 0210 	orr.w	r2, r2, #16
 8007848:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	2b03      	cmp	r3, #3
 8007850:	d114      	bne.n	800787c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699a      	ldr	r2, [r3, #24]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0220 	orr.w	r2, r2, #32
 8007860:	619a      	str	r2, [r3, #24]
 8007862:	e00b      	b.n	800787c <HAL_FDCAN_Init+0x234>
 8007864:	0800dc40 	.word	0x0800dc40
 8007868:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0220 	orr.w	r2, r2, #32
 800787a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	3b01      	subs	r3, #1
 8007882:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	3b01      	subs	r3, #1
 800788a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800788c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6a1b      	ldr	r3, [r3, #32]
 8007892:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007894:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	3b01      	subs	r3, #1
 800789e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80078a4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80078a6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078b0:	d115      	bne.n	80078de <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078bc:	3b01      	subs	r3, #1
 80078be:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80078c0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c6:	3b01      	subs	r3, #1
 80078c8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80078ca:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078d2:	3b01      	subs	r3, #1
 80078d4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80078da:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80078dc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00a      	beq.n	80078fc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007904:	4413      	add	r3, r2
 8007906:	2b00      	cmp	r3, #0
 8007908:	d011      	beq.n	800792e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8007912:	f023 0107 	bic.w	r1, r3, #7
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	3360      	adds	r3, #96	@ 0x60
 800791e:	443b      	add	r3, r7
 8007920:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007932:	2b00      	cmp	r3, #0
 8007934:	d011      	beq.n	800795a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800793e:	f023 0107 	bic.w	r1, r3, #7
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	3360      	adds	r3, #96	@ 0x60
 800794a:	443b      	add	r3, r7
 800794c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	430a      	orrs	r2, r1
 8007956:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800795e:	2b00      	cmp	r3, #0
 8007960:	d012      	beq.n	8007988 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800796a:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	3360      	adds	r3, #96	@ 0x60
 8007976:	443b      	add	r3, r7
 8007978:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800797c:	011a      	lsls	r2, r3, #4
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800798c:	2b00      	cmp	r3, #0
 800798e:	d012      	beq.n	80079b6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007998:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	3360      	adds	r3, #96	@ 0x60
 80079a4:	443b      	add	r3, r7
 80079a6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80079aa:	021a      	lsls	r2, r3, #8
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a11      	ldr	r2, [pc, #68]	@ (8007a00 <HAL_FDCAN_Init+0x3b8>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d107      	bne.n	80079d0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	689a      	ldr	r2, [r3, #8]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f022 0203 	bic.w	r2, r2, #3
 80079ce:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 f80b 	bl	8007a04 <FDCAN_CalcultateRamBlockAddresses>
 80079ee:	4603      	mov	r3, r0
 80079f0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80079f4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3760      	adds	r7, #96	@ 0x60
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	4000a000 	.word	0x4000a000

08007a04 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a10:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007a1a:	4ba7      	ldr	r3, [pc, #668]	@ (8007cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	0091      	lsls	r1, r2, #2
 8007a22:	687a      	ldr	r2, [r7, #4]
 8007a24:	6812      	ldr	r2, [r2, #0]
 8007a26:	430b      	orrs	r3, r1
 8007a28:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a34:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3c:	041a      	lsls	r2, r3, #16
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	430a      	orrs	r2, r1
 8007a44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	4413      	add	r3, r2
 8007a50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007a5a:	4b97      	ldr	r3, [pc, #604]	@ (8007cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	68ba      	ldr	r2, [r7, #8]
 8007a60:	0091      	lsls	r1, r2, #2
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	430b      	orrs	r3, r1
 8007a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a74:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7c:	041a      	lsls	r2, r3, #16
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	4413      	add	r3, r2
 8007a92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007a9c:	4b86      	ldr	r3, [pc, #536]	@ (8007cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	0091      	lsls	r1, r2, #2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	6812      	ldr	r2, [r2, #0]
 8007aa8:	430b      	orrs	r3, r1
 8007aaa:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ab6:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abe:	041a      	lsls	r2, r3, #16
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	430a      	orrs	r2, r1
 8007ac6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	4413      	add	r3, r2
 8007ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8007ae4:	4b74      	ldr	r3, [pc, #464]	@ (8007cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	68ba      	ldr	r2, [r7, #8]
 8007aea:	0091      	lsls	r1, r2, #2
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	6812      	ldr	r2, [r2, #0]
 8007af0:	430b      	orrs	r3, r1
 8007af2:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007afe:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b06:	041a      	lsls	r2, r3, #16
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	430a      	orrs	r2, r1
 8007b0e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8007b1a:	fb02 f303 	mul.w	r3, r2, r3
 8007b1e:	68ba      	ldr	r2, [r7, #8]
 8007b20:	4413      	add	r3, r2
 8007b22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8007b2c:	4b62      	ldr	r3, [pc, #392]	@ (8007cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b2e:	4013      	ands	r3, r2
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	0091      	lsls	r1, r2, #2
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	6812      	ldr	r2, [r2, #0]
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8007b46:	fb02 f303 	mul.w	r3, r2, r3
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8007b58:	4b57      	ldr	r3, [pc, #348]	@ (8007cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	0091      	lsls	r1, r2, #2
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6812      	ldr	r2, [r2, #0]
 8007b64:	430b      	orrs	r3, r1
 8007b66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007b72:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b7a:	041a      	lsls	r2, r3, #16
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	430a      	orrs	r2, r1
 8007b82:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	4413      	add	r3, r2
 8007b90:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007b9a:	4b47      	ldr	r3, [pc, #284]	@ (8007cb8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	0091      	lsls	r1, r2, #2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6812      	ldr	r2, [r2, #0]
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007bb4:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bbc:	041a      	lsls	r2, r3, #16
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007bd0:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007bd8:	061a      	lsls	r2, r3, #24
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007be8:	4b34      	ldr	r3, [pc, #208]	@ (8007cbc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007bea:	4413      	add	r3, r2
 8007bec:	009a      	lsls	r2, r3, #2
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	441a      	add	r2, r3
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	441a      	add	r2, r3
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c1a:	6879      	ldr	r1, [r7, #4]
 8007c1c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8007c1e:	fb01 f303 	mul.w	r3, r1, r3
 8007c22:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007c24:	441a      	add	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c32:	6879      	ldr	r1, [r7, #4]
 8007c34:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 8007c36:	fb01 f303 	mul.w	r3, r1, r3
 8007c3a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007c3c:	441a      	add	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c4a:	6879      	ldr	r1, [r7, #4]
 8007c4c:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8007c4e:	fb01 f303 	mul.w	r3, r1, r3
 8007c52:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007c54:	441a      	add	r2, r3
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	441a      	add	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007c7e:	fb01 f303 	mul.w	r3, r1, r3
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	441a      	add	r2, r3
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8007c9a:	fb01 f303 	mul.w	r3, r1, r3
 8007c9e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007ca0:	441a      	add	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cae:	4a04      	ldr	r2, [pc, #16]	@ (8007cc0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d915      	bls.n	8007ce0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007cb4:	e006      	b.n	8007cc4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007cb6:	bf00      	nop
 8007cb8:	ffff0003 	.word	0xffff0003
 8007cbc:	10002b00 	.word	0x10002b00
 8007cc0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007cca:	f043 0220 	orr.w	r2, r3, #32
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2203      	movs	r2, #3
 8007cd8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e010      	b.n	8007d02 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	e005      	b.n	8007cf4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	60fb      	str	r3, [r7, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d3f3      	bcc.n	8007ce8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr
 8007d0e:	bf00      	nop

08007d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b089      	sub	sp, #36	@ 0x24
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d1e:	4b89      	ldr	r3, [pc, #548]	@ (8007f44 <HAL_GPIO_Init+0x234>)
 8007d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d22:	e194      	b.n	800804e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	2101      	movs	r1, #1
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8007d30:	4013      	ands	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	f000 8186 	beq.w	8008048 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f003 0303 	and.w	r3, r3, #3
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d005      	beq.n	8007d54 <HAL_GPIO_Init+0x44>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f003 0303 	and.w	r3, r3, #3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d130      	bne.n	8007db6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	2203      	movs	r2, #3
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	43db      	mvns	r3, r3
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	005b      	lsls	r3, r3, #1
 8007d74:	fa02 f303 	lsl.w	r3, r2, r3
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	69ba      	ldr	r2, [r7, #24]
 8007d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d92:	43db      	mvns	r3, r3
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	4013      	ands	r3, r2
 8007d98:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	091b      	lsrs	r3, r3, #4
 8007da0:	f003 0201 	and.w	r2, r3, #1
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	fa02 f303 	lsl.w	r3, r2, r3
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	4313      	orrs	r3, r2
 8007dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	69ba      	ldr	r2, [r7, #24]
 8007db4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f003 0303 	and.w	r3, r3, #3
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d017      	beq.n	8007df2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007dc8:	69fb      	ldr	r3, [r7, #28]
 8007dca:	005b      	lsls	r3, r3, #1
 8007dcc:	2203      	movs	r2, #3
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	43db      	mvns	r3, r3
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	005b      	lsls	r3, r3, #1
 8007de2:	fa02 f303 	lsl.w	r3, r2, r3
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	69ba      	ldr	r2, [r7, #24]
 8007df0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	f003 0303 	and.w	r3, r3, #3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d123      	bne.n	8007e46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	08da      	lsrs	r2, r3, #3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3208      	adds	r2, #8
 8007e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f003 0307 	and.w	r3, r3, #7
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	220f      	movs	r2, #15
 8007e16:	fa02 f303 	lsl.w	r3, r2, r3
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e32:	69ba      	ldr	r2, [r7, #24]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	08da      	lsrs	r2, r3, #3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3208      	adds	r2, #8
 8007e40:	69b9      	ldr	r1, [r7, #24]
 8007e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007e4c:	69fb      	ldr	r3, [r7, #28]
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	2203      	movs	r2, #3
 8007e52:	fa02 f303 	lsl.w	r3, r2, r3
 8007e56:	43db      	mvns	r3, r3
 8007e58:	69ba      	ldr	r2, [r7, #24]
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f003 0203 	and.w	r2, r3, #3
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	4313      	orrs	r3, r2
 8007e72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80e0 	beq.w	8008048 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e88:	4b2f      	ldr	r3, [pc, #188]	@ (8007f48 <HAL_GPIO_Init+0x238>)
 8007e8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e8e:	4a2e      	ldr	r2, [pc, #184]	@ (8007f48 <HAL_GPIO_Init+0x238>)
 8007e90:	f043 0302 	orr.w	r3, r3, #2
 8007e94:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007e98:	4b2b      	ldr	r3, [pc, #172]	@ (8007f48 <HAL_GPIO_Init+0x238>)
 8007e9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8007e9e:	f003 0302 	and.w	r3, r3, #2
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ea6:	4a29      	ldr	r2, [pc, #164]	@ (8007f4c <HAL_GPIO_Init+0x23c>)
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	089b      	lsrs	r3, r3, #2
 8007eac:	3302      	adds	r3, #2
 8007eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f003 0303 	and.w	r3, r3, #3
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	220f      	movs	r2, #15
 8007ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4a20      	ldr	r2, [pc, #128]	@ (8007f50 <HAL_GPIO_Init+0x240>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d052      	beq.n	8007f78 <HAL_GPIO_Init+0x268>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	4a1f      	ldr	r2, [pc, #124]	@ (8007f54 <HAL_GPIO_Init+0x244>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d031      	beq.n	8007f3e <HAL_GPIO_Init+0x22e>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	4a1e      	ldr	r2, [pc, #120]	@ (8007f58 <HAL_GPIO_Init+0x248>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d02b      	beq.n	8007f3a <HAL_GPIO_Init+0x22a>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f5c <HAL_GPIO_Init+0x24c>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d025      	beq.n	8007f36 <HAL_GPIO_Init+0x226>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	4a1c      	ldr	r2, [pc, #112]	@ (8007f60 <HAL_GPIO_Init+0x250>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d01f      	beq.n	8007f32 <HAL_GPIO_Init+0x222>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8007f64 <HAL_GPIO_Init+0x254>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d019      	beq.n	8007f2e <HAL_GPIO_Init+0x21e>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a1a      	ldr	r2, [pc, #104]	@ (8007f68 <HAL_GPIO_Init+0x258>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d013      	beq.n	8007f2a <HAL_GPIO_Init+0x21a>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a19      	ldr	r2, [pc, #100]	@ (8007f6c <HAL_GPIO_Init+0x25c>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d00d      	beq.n	8007f26 <HAL_GPIO_Init+0x216>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	4a18      	ldr	r2, [pc, #96]	@ (8007f70 <HAL_GPIO_Init+0x260>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d007      	beq.n	8007f22 <HAL_GPIO_Init+0x212>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	4a17      	ldr	r2, [pc, #92]	@ (8007f74 <HAL_GPIO_Init+0x264>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d101      	bne.n	8007f1e <HAL_GPIO_Init+0x20e>
 8007f1a:	2309      	movs	r3, #9
 8007f1c:	e02d      	b.n	8007f7a <HAL_GPIO_Init+0x26a>
 8007f1e:	230a      	movs	r3, #10
 8007f20:	e02b      	b.n	8007f7a <HAL_GPIO_Init+0x26a>
 8007f22:	2308      	movs	r3, #8
 8007f24:	e029      	b.n	8007f7a <HAL_GPIO_Init+0x26a>
 8007f26:	2307      	movs	r3, #7
 8007f28:	e027      	b.n	8007f7a <HAL_GPIO_Init+0x26a>
 8007f2a:	2306      	movs	r3, #6
 8007f2c:	e025      	b.n	8007f7a <HAL_GPIO_Init+0x26a>
 8007f2e:	2305      	movs	r3, #5
 8007f30:	e023      	b.n	8007f7a <HAL_GPIO_Init+0x26a>
 8007f32:	2304      	movs	r3, #4
 8007f34:	e021      	b.n	8007f7a <HAL_GPIO_Init+0x26a>
 8007f36:	2303      	movs	r3, #3
 8007f38:	e01f      	b.n	8007f7a <HAL_GPIO_Init+0x26a>
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e01d      	b.n	8007f7a <HAL_GPIO_Init+0x26a>
 8007f3e:	2301      	movs	r3, #1
 8007f40:	e01b      	b.n	8007f7a <HAL_GPIO_Init+0x26a>
 8007f42:	bf00      	nop
 8007f44:	58000080 	.word	0x58000080
 8007f48:	58024400 	.word	0x58024400
 8007f4c:	58000400 	.word	0x58000400
 8007f50:	58020000 	.word	0x58020000
 8007f54:	58020400 	.word	0x58020400
 8007f58:	58020800 	.word	0x58020800
 8007f5c:	58020c00 	.word	0x58020c00
 8007f60:	58021000 	.word	0x58021000
 8007f64:	58021400 	.word	0x58021400
 8007f68:	58021800 	.word	0x58021800
 8007f6c:	58021c00 	.word	0x58021c00
 8007f70:	58022000 	.word	0x58022000
 8007f74:	58022400 	.word	0x58022400
 8007f78:	2300      	movs	r3, #0
 8007f7a:	69fa      	ldr	r2, [r7, #28]
 8007f7c:	f002 0203 	and.w	r2, r2, #3
 8007f80:	0092      	lsls	r2, r2, #2
 8007f82:	4093      	lsls	r3, r2
 8007f84:	69ba      	ldr	r2, [r7, #24]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f8a:	4938      	ldr	r1, [pc, #224]	@ (800806c <HAL_GPIO_Init+0x35c>)
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	089b      	lsrs	r3, r3, #2
 8007f90:	3302      	adds	r3, #2
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	43db      	mvns	r3, r3
 8007fa4:	69ba      	ldr	r2, [r7, #24]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007fb6:	69ba      	ldr	r2, [r7, #24]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007fbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007fc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	43db      	mvns	r3, r3
 8007fd2:	69ba      	ldr	r2, [r7, #24]
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007fe4:	69ba      	ldr	r2, [r7, #24]
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007fec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	69ba      	ldr	r2, [r7, #24]
 8008000:	4013      	ands	r3, r2
 8008002:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d003      	beq.n	8008018 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008010:	69ba      	ldr	r2, [r7, #24]
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	69ba      	ldr	r2, [r7, #24]
 800801c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	43db      	mvns	r3, r3
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	4013      	ands	r3, r2
 800802c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	4313      	orrs	r3, r2
 8008040:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	69ba      	ldr	r2, [r7, #24]
 8008046:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	3301      	adds	r3, #1
 800804c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	fa22 f303 	lsr.w	r3, r2, r3
 8008058:	2b00      	cmp	r3, #0
 800805a:	f47f ae63 	bne.w	8007d24 <HAL_GPIO_Init+0x14>
  }
}
 800805e:	bf00      	nop
 8008060:	bf00      	nop
 8008062:	3724      	adds	r7, #36	@ 0x24
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	58000400 	.word	0x58000400

08008070 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	460b      	mov	r3, r1
 800807a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691a      	ldr	r2, [r3, #16]
 8008080:	887b      	ldrh	r3, [r7, #2]
 8008082:	4013      	ands	r3, r2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d002      	beq.n	800808e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008088:	2301      	movs	r3, #1
 800808a:	73fb      	strb	r3, [r7, #15]
 800808c:	e001      	b.n	8008092 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800808e:	2300      	movs	r3, #0
 8008090:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	807b      	strh	r3, [r7, #2]
 80080ac:	4613      	mov	r3, r2
 80080ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080b0:	787b      	ldrb	r3, [r7, #1]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d003      	beq.n	80080be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080b6:	887a      	ldrh	r2, [r7, #2]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80080bc:	e003      	b.n	80080c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80080be:	887b      	ldrh	r3, [r7, #2]
 80080c0:	041a      	lsls	r2, r3, #16
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	619a      	str	r2, [r3, #24]
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
	...

080080d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e08b      	b.n	80081fe <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d106      	bne.n	8008100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7f9 fc9c 	bl	8001a38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2224      	movs	r2, #36	@ 0x24
 8008104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0201 	bic.w	r2, r2, #1
 8008116:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685a      	ldr	r2, [r3, #4]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008124:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008134:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d107      	bne.n	800814e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800814a:	609a      	str	r2, [r3, #8]
 800814c:	e006      	b.n	800815c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800815a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	68db      	ldr	r3, [r3, #12]
 8008160:	2b02      	cmp	r3, #2
 8008162:	d108      	bne.n	8008176 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008172:	605a      	str	r2, [r3, #4]
 8008174:	e007      	b.n	8008186 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	685a      	ldr	r2, [r3, #4]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008184:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6859      	ldr	r1, [r3, #4]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	4b1d      	ldr	r3, [pc, #116]	@ (8008208 <HAL_I2C_Init+0x134>)
 8008192:	430b      	orrs	r3, r1
 8008194:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68da      	ldr	r2, [r3, #12]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80081a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	691a      	ldr	r2, [r3, #16]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	69d9      	ldr	r1, [r3, #28]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a1a      	ldr	r2, [r3, #32]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	430a      	orrs	r2, r1
 80081ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681a      	ldr	r2, [r3, #0]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0201 	orr.w	r2, r2, #1
 80081de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2220      	movs	r2, #32
 80081ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	02008000 	.word	0x02008000

0800820c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b20      	cmp	r3, #32
 8008220:	d138      	bne.n	8008294 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800822c:	2302      	movs	r3, #2
 800822e:	e032      	b.n	8008296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2224      	movs	r2, #36	@ 0x24
 800823c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f022 0201 	bic.w	r2, r2, #1
 800824e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800825e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	6819      	ldr	r1, [r3, #0]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	430a      	orrs	r2, r1
 800826e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f042 0201 	orr.w	r2, r2, #1
 800827e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008290:	2300      	movs	r3, #0
 8008292:	e000      	b.n	8008296 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008294:	2302      	movs	r3, #2
  }
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b085      	sub	sp, #20
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d139      	bne.n	800832c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d101      	bne.n	80082c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80082c2:	2302      	movs	r3, #2
 80082c4:	e033      	b.n	800832e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2224      	movs	r2, #36	@ 0x24
 80082d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0201 	bic.w	r2, r2, #1
 80082e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80082f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	021b      	lsls	r3, r3, #8
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f042 0201 	orr.w	r2, r2, #1
 8008316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2220      	movs	r2, #32
 800831c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008328:	2300      	movs	r3, #0
 800832a:	e000      	b.n	800832e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800832c:	2302      	movs	r3, #2
  }
}
 800832e:	4618      	mov	r0, r3
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
	...

0800833c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008344:	4b19      	ldr	r3, [pc, #100]	@ (80083ac <HAL_PWREx_ConfigSupply+0x70>)
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b04      	cmp	r3, #4
 800834e:	d00a      	beq.n	8008366 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008350:	4b16      	ldr	r3, [pc, #88]	@ (80083ac <HAL_PWREx_ConfigSupply+0x70>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	429a      	cmp	r2, r3
 800835c:	d001      	beq.n	8008362 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e01f      	b.n	80083a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	e01d      	b.n	80083a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008366:	4b11      	ldr	r3, [pc, #68]	@ (80083ac <HAL_PWREx_ConfigSupply+0x70>)
 8008368:	68db      	ldr	r3, [r3, #12]
 800836a:	f023 0207 	bic.w	r2, r3, #7
 800836e:	490f      	ldr	r1, [pc, #60]	@ (80083ac <HAL_PWREx_ConfigSupply+0x70>)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4313      	orrs	r3, r2
 8008374:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008376:	f7fb f829 	bl	80033cc <HAL_GetTick>
 800837a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800837c:	e009      	b.n	8008392 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800837e:	f7fb f825 	bl	80033cc <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800838c:	d901      	bls.n	8008392 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e007      	b.n	80083a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008392:	4b06      	ldr	r3, [pc, #24]	@ (80083ac <HAL_PWREx_ConfigSupply+0x70>)
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800839a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800839e:	d1ee      	bne.n	800837e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}
 80083aa:	bf00      	nop
 80083ac:	58024800 	.word	0x58024800

080083b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08c      	sub	sp, #48	@ 0x30
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d102      	bne.n	80083c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	f000 bc48 	b.w	8008c54 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	f000 8088 	beq.w	80084e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083d2:	4b99      	ldr	r3, [pc, #612]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80083dc:	4b96      	ldr	r3, [pc, #600]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80083e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e4:	2b10      	cmp	r3, #16
 80083e6:	d007      	beq.n	80083f8 <HAL_RCC_OscConfig+0x48>
 80083e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ea:	2b18      	cmp	r3, #24
 80083ec:	d111      	bne.n	8008412 <HAL_RCC_OscConfig+0x62>
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	f003 0303 	and.w	r3, r3, #3
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d10c      	bne.n	8008412 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083f8:	4b8f      	ldr	r3, [pc, #572]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d06d      	beq.n	80084e0 <HAL_RCC_OscConfig+0x130>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d169      	bne.n	80084e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	f000 bc21 	b.w	8008c54 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800841a:	d106      	bne.n	800842a <HAL_RCC_OscConfig+0x7a>
 800841c:	4b86      	ldr	r3, [pc, #536]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a85      	ldr	r2, [pc, #532]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	e02e      	b.n	8008488 <HAL_RCC_OscConfig+0xd8>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10c      	bne.n	800844c <HAL_RCC_OscConfig+0x9c>
 8008432:	4b81      	ldr	r3, [pc, #516]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a80      	ldr	r2, [pc, #512]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008438:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	4b7e      	ldr	r3, [pc, #504]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a7d      	ldr	r2, [pc, #500]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008444:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008448:	6013      	str	r3, [r2, #0]
 800844a:	e01d      	b.n	8008488 <HAL_RCC_OscConfig+0xd8>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008454:	d10c      	bne.n	8008470 <HAL_RCC_OscConfig+0xc0>
 8008456:	4b78      	ldr	r3, [pc, #480]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a77      	ldr	r2, [pc, #476]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 800845c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008460:	6013      	str	r3, [r2, #0]
 8008462:	4b75      	ldr	r3, [pc, #468]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a74      	ldr	r2, [pc, #464]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008468:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800846c:	6013      	str	r3, [r2, #0]
 800846e:	e00b      	b.n	8008488 <HAL_RCC_OscConfig+0xd8>
 8008470:	4b71      	ldr	r3, [pc, #452]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a70      	ldr	r2, [pc, #448]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008476:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800847a:	6013      	str	r3, [r2, #0]
 800847c:	4b6e      	ldr	r3, [pc, #440]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a6d      	ldr	r2, [pc, #436]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008482:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d013      	beq.n	80084b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008490:	f7fa ff9c 	bl	80033cc <HAL_GetTick>
 8008494:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008496:	e008      	b.n	80084aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008498:	f7fa ff98 	bl	80033cc <HAL_GetTick>
 800849c:	4602      	mov	r2, r0
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	1ad3      	subs	r3, r2, r3
 80084a2:	2b64      	cmp	r3, #100	@ 0x64
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e3d4      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084aa:	4b63      	ldr	r3, [pc, #396]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d0f0      	beq.n	8008498 <HAL_RCC_OscConfig+0xe8>
 80084b6:	e014      	b.n	80084e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084b8:	f7fa ff88 	bl	80033cc <HAL_GetTick>
 80084bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084be:	e008      	b.n	80084d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084c0:	f7fa ff84 	bl	80033cc <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	2b64      	cmp	r3, #100	@ 0x64
 80084cc:	d901      	bls.n	80084d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80084ce:	2303      	movs	r3, #3
 80084d0:	e3c0      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80084d2:	4b59      	ldr	r3, [pc, #356]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1f0      	bne.n	80084c0 <HAL_RCC_OscConfig+0x110>
 80084de:	e000      	b.n	80084e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0302 	and.w	r3, r3, #2
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 80ca 	beq.w	8008684 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80084f0:	4b51      	ldr	r3, [pc, #324]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80084f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80084fa:	4b4f      	ldr	r3, [pc, #316]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80084fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d007      	beq.n	8008516 <HAL_RCC_OscConfig+0x166>
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	2b18      	cmp	r3, #24
 800850a:	d156      	bne.n	80085ba <HAL_RCC_OscConfig+0x20a>
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d151      	bne.n	80085ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008516:	4b48      	ldr	r3, [pc, #288]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f003 0304 	and.w	r3, r3, #4
 800851e:	2b00      	cmp	r3, #0
 8008520:	d005      	beq.n	800852e <HAL_RCC_OscConfig+0x17e>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d101      	bne.n	800852e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	e392      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800852e:	4b42      	ldr	r3, [pc, #264]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f023 0219 	bic.w	r2, r3, #25
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	493f      	ldr	r1, [pc, #252]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 800853c:	4313      	orrs	r3, r2
 800853e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008540:	f7fa ff44 	bl	80033cc <HAL_GetTick>
 8008544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008546:	e008      	b.n	800855a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008548:	f7fa ff40 	bl	80033cc <HAL_GetTick>
 800854c:	4602      	mov	r2, r0
 800854e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008550:	1ad3      	subs	r3, r2, r3
 8008552:	2b02      	cmp	r3, #2
 8008554:	d901      	bls.n	800855a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e37c      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800855a:	4b37      	ldr	r3, [pc, #220]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0304 	and.w	r3, r3, #4
 8008562:	2b00      	cmp	r3, #0
 8008564:	d0f0      	beq.n	8008548 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008566:	f7fa ff3d 	bl	80033e4 <HAL_GetREVID>
 800856a:	4603      	mov	r3, r0
 800856c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008570:	4293      	cmp	r3, r2
 8008572:	d817      	bhi.n	80085a4 <HAL_RCC_OscConfig+0x1f4>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	2b40      	cmp	r3, #64	@ 0x40
 800857a:	d108      	bne.n	800858e <HAL_RCC_OscConfig+0x1de>
 800857c:	4b2e      	ldr	r3, [pc, #184]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 800857e:	685b      	ldr	r3, [r3, #4]
 8008580:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008584:	4a2c      	ldr	r2, [pc, #176]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800858a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800858c:	e07a      	b.n	8008684 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800858e:	4b2a      	ldr	r3, [pc, #168]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	691b      	ldr	r3, [r3, #16]
 800859a:	031b      	lsls	r3, r3, #12
 800859c:	4926      	ldr	r1, [pc, #152]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085a2:	e06f      	b.n	8008684 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085a4:	4b24      	ldr	r3, [pc, #144]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	061b      	lsls	r3, r3, #24
 80085b2:	4921      	ldr	r1, [pc, #132]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80085b8:	e064      	b.n	8008684 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d047      	beq.n	8008652 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80085c2:	4b1d      	ldr	r3, [pc, #116]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f023 0219 	bic.w	r2, r3, #25
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	491a      	ldr	r1, [pc, #104]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80085d0:	4313      	orrs	r3, r2
 80085d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085d4:	f7fa fefa 	bl	80033cc <HAL_GetTick>
 80085d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085da:	e008      	b.n	80085ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085dc:	f7fa fef6 	bl	80033cc <HAL_GetTick>
 80085e0:	4602      	mov	r2, r0
 80085e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d901      	bls.n	80085ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e332      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80085ee:	4b12      	ldr	r3, [pc, #72]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0304 	and.w	r3, r3, #4
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d0f0      	beq.n	80085dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085fa:	f7fa fef3 	bl	80033e4 <HAL_GetREVID>
 80085fe:	4603      	mov	r3, r0
 8008600:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008604:	4293      	cmp	r3, r2
 8008606:	d819      	bhi.n	800863c <HAL_RCC_OscConfig+0x28c>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	691b      	ldr	r3, [r3, #16]
 800860c:	2b40      	cmp	r3, #64	@ 0x40
 800860e:	d108      	bne.n	8008622 <HAL_RCC_OscConfig+0x272>
 8008610:	4b09      	ldr	r3, [pc, #36]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8008618:	4a07      	ldr	r2, [pc, #28]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 800861a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800861e:	6053      	str	r3, [r2, #4]
 8008620:	e030      	b.n	8008684 <HAL_RCC_OscConfig+0x2d4>
 8008622:	4b05      	ldr	r3, [pc, #20]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	031b      	lsls	r3, r3, #12
 8008630:	4901      	ldr	r1, [pc, #4]	@ (8008638 <HAL_RCC_OscConfig+0x288>)
 8008632:	4313      	orrs	r3, r2
 8008634:	604b      	str	r3, [r1, #4]
 8008636:	e025      	b.n	8008684 <HAL_RCC_OscConfig+0x2d4>
 8008638:	58024400 	.word	0x58024400
 800863c:	4b9a      	ldr	r3, [pc, #616]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	691b      	ldr	r3, [r3, #16]
 8008648:	061b      	lsls	r3, r3, #24
 800864a:	4997      	ldr	r1, [pc, #604]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 800864c:	4313      	orrs	r3, r2
 800864e:	604b      	str	r3, [r1, #4]
 8008650:	e018      	b.n	8008684 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008652:	4b95      	ldr	r3, [pc, #596]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a94      	ldr	r2, [pc, #592]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008658:	f023 0301 	bic.w	r3, r3, #1
 800865c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800865e:	f7fa feb5 	bl	80033cc <HAL_GetTick>
 8008662:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008664:	e008      	b.n	8008678 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008666:	f7fa feb1 	bl	80033cc <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	1ad3      	subs	r3, r2, r3
 8008670:	2b02      	cmp	r3, #2
 8008672:	d901      	bls.n	8008678 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008674:	2303      	movs	r3, #3
 8008676:	e2ed      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008678:	4b8b      	ldr	r3, [pc, #556]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0304 	and.w	r3, r3, #4
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1f0      	bne.n	8008666 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f003 0310 	and.w	r3, r3, #16
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 80a9 	beq.w	80087e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008692:	4b85      	ldr	r3, [pc, #532]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008694:	691b      	ldr	r3, [r3, #16]
 8008696:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800869a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800869c:	4b82      	ldr	r3, [pc, #520]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 800869e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	2b08      	cmp	r3, #8
 80086a6:	d007      	beq.n	80086b8 <HAL_RCC_OscConfig+0x308>
 80086a8:	69bb      	ldr	r3, [r7, #24]
 80086aa:	2b18      	cmp	r3, #24
 80086ac:	d13a      	bne.n	8008724 <HAL_RCC_OscConfig+0x374>
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	f003 0303 	and.w	r3, r3, #3
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d135      	bne.n	8008724 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086b8:	4b7b      	ldr	r3, [pc, #492]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d005      	beq.n	80086d0 <HAL_RCC_OscConfig+0x320>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	69db      	ldr	r3, [r3, #28]
 80086c8:	2b80      	cmp	r3, #128	@ 0x80
 80086ca:	d001      	beq.n	80086d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e2c1      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086d0:	f7fa fe88 	bl	80033e4 <HAL_GetREVID>
 80086d4:	4603      	mov	r3, r0
 80086d6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80086da:	4293      	cmp	r3, r2
 80086dc:	d817      	bhi.n	800870e <HAL_RCC_OscConfig+0x35e>
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	2b20      	cmp	r3, #32
 80086e4:	d108      	bne.n	80086f8 <HAL_RCC_OscConfig+0x348>
 80086e6:	4b70      	ldr	r3, [pc, #448]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80086ee:	4a6e      	ldr	r2, [pc, #440]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 80086f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80086f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80086f6:	e075      	b.n	80087e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80086f8:	4b6b      	ldr	r3, [pc, #428]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 80086fa:	685b      	ldr	r3, [r3, #4]
 80086fc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	069b      	lsls	r3, r3, #26
 8008706:	4968      	ldr	r1, [pc, #416]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008708:	4313      	orrs	r3, r2
 800870a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800870c:	e06a      	b.n	80087e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800870e:	4b66      	ldr	r3, [pc, #408]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a1b      	ldr	r3, [r3, #32]
 800871a:	061b      	lsls	r3, r3, #24
 800871c:	4962      	ldr	r1, [pc, #392]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 800871e:	4313      	orrs	r3, r2
 8008720:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008722:	e05f      	b.n	80087e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d042      	beq.n	80087b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800872c:	4b5e      	ldr	r3, [pc, #376]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a5d      	ldr	r2, [pc, #372]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008732:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008738:	f7fa fe48 	bl	80033cc <HAL_GetTick>
 800873c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800873e:	e008      	b.n	8008752 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008740:	f7fa fe44 	bl	80033cc <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e280      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008752:	4b55      	ldr	r3, [pc, #340]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0f0      	beq.n	8008740 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800875e:	f7fa fe41 	bl	80033e4 <HAL_GetREVID>
 8008762:	4603      	mov	r3, r0
 8008764:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008768:	4293      	cmp	r3, r2
 800876a:	d817      	bhi.n	800879c <HAL_RCC_OscConfig+0x3ec>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	2b20      	cmp	r3, #32
 8008772:	d108      	bne.n	8008786 <HAL_RCC_OscConfig+0x3d6>
 8008774:	4b4c      	ldr	r3, [pc, #304]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800877c:	4a4a      	ldr	r2, [pc, #296]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 800877e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008782:	6053      	str	r3, [r2, #4]
 8008784:	e02e      	b.n	80087e4 <HAL_RCC_OscConfig+0x434>
 8008786:	4b48      	ldr	r3, [pc, #288]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	069b      	lsls	r3, r3, #26
 8008794:	4944      	ldr	r1, [pc, #272]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008796:	4313      	orrs	r3, r2
 8008798:	604b      	str	r3, [r1, #4]
 800879a:	e023      	b.n	80087e4 <HAL_RCC_OscConfig+0x434>
 800879c:	4b42      	ldr	r3, [pc, #264]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	061b      	lsls	r3, r3, #24
 80087aa:	493f      	ldr	r1, [pc, #252]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 80087ac:	4313      	orrs	r3, r2
 80087ae:	60cb      	str	r3, [r1, #12]
 80087b0:	e018      	b.n	80087e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80087b2:	4b3d      	ldr	r3, [pc, #244]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a3c      	ldr	r2, [pc, #240]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 80087b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087be:	f7fa fe05 	bl	80033cc <HAL_GetTick>
 80087c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087c4:	e008      	b.n	80087d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80087c6:	f7fa fe01 	bl	80033cc <HAL_GetTick>
 80087ca:	4602      	mov	r2, r0
 80087cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ce:	1ad3      	subs	r3, r2, r3
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d901      	bls.n	80087d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80087d4:	2303      	movs	r3, #3
 80087d6:	e23d      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80087d8:	4b33      	ldr	r3, [pc, #204]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1f0      	bne.n	80087c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d036      	beq.n	800885e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	695b      	ldr	r3, [r3, #20]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d019      	beq.n	800882c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087f8:	4b2b      	ldr	r3, [pc, #172]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 80087fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087fc:	4a2a      	ldr	r2, [pc, #168]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 80087fe:	f043 0301 	orr.w	r3, r3, #1
 8008802:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008804:	f7fa fde2 	bl	80033cc <HAL_GetTick>
 8008808:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800880a:	e008      	b.n	800881e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800880c:	f7fa fdde 	bl	80033cc <HAL_GetTick>
 8008810:	4602      	mov	r2, r0
 8008812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	2b02      	cmp	r3, #2
 8008818:	d901      	bls.n	800881e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800881a:	2303      	movs	r3, #3
 800881c:	e21a      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800881e:	4b22      	ldr	r3, [pc, #136]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008822:	f003 0302 	and.w	r3, r3, #2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d0f0      	beq.n	800880c <HAL_RCC_OscConfig+0x45c>
 800882a:	e018      	b.n	800885e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800882c:	4b1e      	ldr	r3, [pc, #120]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 800882e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008830:	4a1d      	ldr	r2, [pc, #116]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008832:	f023 0301 	bic.w	r3, r3, #1
 8008836:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008838:	f7fa fdc8 	bl	80033cc <HAL_GetTick>
 800883c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800883e:	e008      	b.n	8008852 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008840:	f7fa fdc4 	bl	80033cc <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b02      	cmp	r3, #2
 800884c:	d901      	bls.n	8008852 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e200      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008852:	4b15      	ldr	r3, [pc, #84]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1f0      	bne.n	8008840 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0320 	and.w	r3, r3, #32
 8008866:	2b00      	cmp	r3, #0
 8008868:	d039      	beq.n	80088de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d01c      	beq.n	80088ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008872:	4b0d      	ldr	r3, [pc, #52]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a0c      	ldr	r2, [pc, #48]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 8008878:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800887c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800887e:	f7fa fda5 	bl	80033cc <HAL_GetTick>
 8008882:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008884:	e008      	b.n	8008898 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008886:	f7fa fda1 	bl	80033cc <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	2b02      	cmp	r3, #2
 8008892:	d901      	bls.n	8008898 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e1dd      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008898:	4b03      	ldr	r3, [pc, #12]	@ (80088a8 <HAL_RCC_OscConfig+0x4f8>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0f0      	beq.n	8008886 <HAL_RCC_OscConfig+0x4d6>
 80088a4:	e01b      	b.n	80088de <HAL_RCC_OscConfig+0x52e>
 80088a6:	bf00      	nop
 80088a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80088ac:	4b9b      	ldr	r3, [pc, #620]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a9a      	ldr	r2, [pc, #616]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 80088b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80088b8:	f7fa fd88 	bl	80033cc <HAL_GetTick>
 80088bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80088c0:	f7fa fd84 	bl	80033cc <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e1c0      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80088d2:	4b92      	ldr	r3, [pc, #584]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f0      	bne.n	80088c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0304 	and.w	r3, r3, #4
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	f000 8081 	beq.w	80089ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80088ec:	4b8c      	ldr	r3, [pc, #560]	@ (8008b20 <HAL_RCC_OscConfig+0x770>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a8b      	ldr	r2, [pc, #556]	@ (8008b20 <HAL_RCC_OscConfig+0x770>)
 80088f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088f8:	f7fa fd68 	bl	80033cc <HAL_GetTick>
 80088fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008900:	f7fa fd64 	bl	80033cc <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b64      	cmp	r3, #100	@ 0x64
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e1a0      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008912:	4b83      	ldr	r3, [pc, #524]	@ (8008b20 <HAL_RCC_OscConfig+0x770>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0f0      	beq.n	8008900 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	2b01      	cmp	r3, #1
 8008924:	d106      	bne.n	8008934 <HAL_RCC_OscConfig+0x584>
 8008926:	4b7d      	ldr	r3, [pc, #500]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800892a:	4a7c      	ldr	r2, [pc, #496]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 800892c:	f043 0301 	orr.w	r3, r3, #1
 8008930:	6713      	str	r3, [r2, #112]	@ 0x70
 8008932:	e02d      	b.n	8008990 <HAL_RCC_OscConfig+0x5e0>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10c      	bne.n	8008956 <HAL_RCC_OscConfig+0x5a6>
 800893c:	4b77      	ldr	r3, [pc, #476]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 800893e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008940:	4a76      	ldr	r2, [pc, #472]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008942:	f023 0301 	bic.w	r3, r3, #1
 8008946:	6713      	str	r3, [r2, #112]	@ 0x70
 8008948:	4b74      	ldr	r3, [pc, #464]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 800894a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800894c:	4a73      	ldr	r2, [pc, #460]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 800894e:	f023 0304 	bic.w	r3, r3, #4
 8008952:	6713      	str	r3, [r2, #112]	@ 0x70
 8008954:	e01c      	b.n	8008990 <HAL_RCC_OscConfig+0x5e0>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	2b05      	cmp	r3, #5
 800895c:	d10c      	bne.n	8008978 <HAL_RCC_OscConfig+0x5c8>
 800895e:	4b6f      	ldr	r3, [pc, #444]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008962:	4a6e      	ldr	r2, [pc, #440]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008964:	f043 0304 	orr.w	r3, r3, #4
 8008968:	6713      	str	r3, [r2, #112]	@ 0x70
 800896a:	4b6c      	ldr	r3, [pc, #432]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 800896c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800896e:	4a6b      	ldr	r2, [pc, #428]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008970:	f043 0301 	orr.w	r3, r3, #1
 8008974:	6713      	str	r3, [r2, #112]	@ 0x70
 8008976:	e00b      	b.n	8008990 <HAL_RCC_OscConfig+0x5e0>
 8008978:	4b68      	ldr	r3, [pc, #416]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 800897a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800897c:	4a67      	ldr	r2, [pc, #412]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 800897e:	f023 0301 	bic.w	r3, r3, #1
 8008982:	6713      	str	r3, [r2, #112]	@ 0x70
 8008984:	4b65      	ldr	r3, [pc, #404]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008988:	4a64      	ldr	r2, [pc, #400]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 800898a:	f023 0304 	bic.w	r3, r3, #4
 800898e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d015      	beq.n	80089c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008998:	f7fa fd18 	bl	80033cc <HAL_GetTick>
 800899c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800899e:	e00a      	b.n	80089b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089a0:	f7fa fd14 	bl	80033cc <HAL_GetTick>
 80089a4:	4602      	mov	r2, r0
 80089a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d901      	bls.n	80089b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e14e      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80089b6:	4b59      	ldr	r3, [pc, #356]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 80089b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089ba:	f003 0302 	and.w	r3, r3, #2
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d0ee      	beq.n	80089a0 <HAL_RCC_OscConfig+0x5f0>
 80089c2:	e014      	b.n	80089ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089c4:	f7fa fd02 	bl	80033cc <HAL_GetTick>
 80089c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089ca:	e00a      	b.n	80089e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089cc:	f7fa fcfe 	bl	80033cc <HAL_GetTick>
 80089d0:	4602      	mov	r2, r0
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	1ad3      	subs	r3, r2, r3
 80089d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089da:	4293      	cmp	r3, r2
 80089dc:	d901      	bls.n	80089e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e138      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80089e2:	4b4e      	ldr	r3, [pc, #312]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 80089e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1ee      	bne.n	80089cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 812d 	beq.w	8008c52 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80089f8:	4b48      	ldr	r3, [pc, #288]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008a00:	2b18      	cmp	r3, #24
 8008a02:	f000 80bd 	beq.w	8008b80 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a0a:	2b02      	cmp	r3, #2
 8008a0c:	f040 809e 	bne.w	8008b4c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a10:	4b42      	ldr	r3, [pc, #264]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a41      	ldr	r2, [pc, #260]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a1c:	f7fa fcd6 	bl	80033cc <HAL_GetTick>
 8008a20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a22:	e008      	b.n	8008a36 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a24:	f7fa fcd2 	bl	80033cc <HAL_GetTick>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d901      	bls.n	8008a36 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008a32:	2303      	movs	r3, #3
 8008a34:	e10e      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008a36:	4b39      	ldr	r3, [pc, #228]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1f0      	bne.n	8008a24 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008a42:	4b36      	ldr	r3, [pc, #216]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008a44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008a46:	4b37      	ldr	r3, [pc, #220]	@ (8008b24 <HAL_RCC_OscConfig+0x774>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008a4e:	687a      	ldr	r2, [r7, #4]
 8008a50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008a52:	0112      	lsls	r2, r2, #4
 8008a54:	430a      	orrs	r2, r1
 8008a56:	4931      	ldr	r1, [pc, #196]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a60:	3b01      	subs	r3, #1
 8008a62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	025b      	lsls	r3, r3, #9
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a76:	3b01      	subs	r3, #1
 8008a78:	041b      	lsls	r3, r3, #16
 8008a7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a84:	3b01      	subs	r3, #1
 8008a86:	061b      	lsls	r3, r3, #24
 8008a88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008a8c:	4923      	ldr	r1, [pc, #140]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008a92:	4b22      	ldr	r3, [pc, #136]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a96:	4a21      	ldr	r2, [pc, #132]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008a98:	f023 0301 	bic.w	r3, r3, #1
 8008a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008a9e:	4b1f      	ldr	r3, [pc, #124]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008aa0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aa2:	4b21      	ldr	r3, [pc, #132]	@ (8008b28 <HAL_RCC_OscConfig+0x778>)
 8008aa4:	4013      	ands	r3, r2
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008aaa:	00d2      	lsls	r2, r2, #3
 8008aac:	491b      	ldr	r1, [pc, #108]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ab6:	f023 020c 	bic.w	r2, r3, #12
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008abe:	4917      	ldr	r1, [pc, #92]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008ac4:	4b15      	ldr	r3, [pc, #84]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ac8:	f023 0202 	bic.w	r2, r3, #2
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ad0:	4912      	ldr	r1, [pc, #72]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008ad6:	4b11      	ldr	r3, [pc, #68]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ada:	4a10      	ldr	r2, [pc, #64]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008ae8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008aec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008aee:	4b0b      	ldr	r3, [pc, #44]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af2:	4a0a      	ldr	r2, [pc, #40]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008af4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008af8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008afa:	4b08      	ldr	r3, [pc, #32]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afe:	4a07      	ldr	r2, [pc, #28]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008b00:	f043 0301 	orr.w	r3, r3, #1
 8008b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b06:	4b05      	ldr	r3, [pc, #20]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a04      	ldr	r2, [pc, #16]	@ (8008b1c <HAL_RCC_OscConfig+0x76c>)
 8008b0c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b12:	f7fa fc5b 	bl	80033cc <HAL_GetTick>
 8008b16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b18:	e011      	b.n	8008b3e <HAL_RCC_OscConfig+0x78e>
 8008b1a:	bf00      	nop
 8008b1c:	58024400 	.word	0x58024400
 8008b20:	58024800 	.word	0x58024800
 8008b24:	fffffc0c 	.word	0xfffffc0c
 8008b28:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b2c:	f7fa fc4e 	bl	80033cc <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e08a      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008b3e:	4b47      	ldr	r3, [pc, #284]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0f0      	beq.n	8008b2c <HAL_RCC_OscConfig+0x77c>
 8008b4a:	e082      	b.n	8008c52 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b4c:	4b43      	ldr	r3, [pc, #268]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a42      	ldr	r2, [pc, #264]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008b52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008b56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b58:	f7fa fc38 	bl	80033cc <HAL_GetTick>
 8008b5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b5e:	e008      	b.n	8008b72 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b60:	f7fa fc34 	bl	80033cc <HAL_GetTick>
 8008b64:	4602      	mov	r2, r0
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d901      	bls.n	8008b72 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008b6e:	2303      	movs	r3, #3
 8008b70:	e070      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008b72:	4b3a      	ldr	r3, [pc, #232]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1f0      	bne.n	8008b60 <HAL_RCC_OscConfig+0x7b0>
 8008b7e:	e068      	b.n	8008c52 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008b80:	4b36      	ldr	r3, [pc, #216]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008b82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b84:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008b86:	4b35      	ldr	r3, [pc, #212]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d031      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	f003 0203 	and.w	r2, r3, #3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d12a      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	091b      	lsrs	r3, r3, #4
 8008ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d122      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d11a      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	0a5b      	lsrs	r3, r3, #9
 8008bc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008bce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d111      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	0c1b      	lsrs	r3, r3, #16
 8008bd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008be0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d108      	bne.n	8008bf8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	0e1b      	lsrs	r3, r3, #24
 8008bea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bf2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d001      	beq.n	8008bfc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e02b      	b.n	8008c54 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008bfc:	4b17      	ldr	r3, [pc, #92]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c00:	08db      	lsrs	r3, r3, #3
 8008c02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c06:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d01f      	beq.n	8008c52 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008c12:	4b12      	ldr	r3, [pc, #72]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c16:	4a11      	ldr	r2, [pc, #68]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008c18:	f023 0301 	bic.w	r3, r3, #1
 8008c1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c1e:	f7fa fbd5 	bl	80033cc <HAL_GetTick>
 8008c22:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008c24:	bf00      	nop
 8008c26:	f7fa fbd1 	bl	80033cc <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d0f9      	beq.n	8008c26 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008c32:	4b0a      	ldr	r3, [pc, #40]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008c34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c36:	4b0a      	ldr	r3, [pc, #40]	@ (8008c60 <HAL_RCC_OscConfig+0x8b0>)
 8008c38:	4013      	ands	r3, r2
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008c3e:	00d2      	lsls	r2, r2, #3
 8008c40:	4906      	ldr	r1, [pc, #24]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008c42:	4313      	orrs	r3, r2
 8008c44:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008c46:	4b05      	ldr	r3, [pc, #20]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c4a:	4a04      	ldr	r2, [pc, #16]	@ (8008c5c <HAL_RCC_OscConfig+0x8ac>)
 8008c4c:	f043 0301 	orr.w	r3, r3, #1
 8008c50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3730      	adds	r7, #48	@ 0x30
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	58024400 	.word	0x58024400
 8008c60:	ffff0007 	.word	0xffff0007

08008c64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c74:	2301      	movs	r3, #1
 8008c76:	e19c      	b.n	8008fb2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c78:	4b8a      	ldr	r3, [pc, #552]	@ (8008ea4 <HAL_RCC_ClockConfig+0x240>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 030f 	and.w	r3, r3, #15
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	429a      	cmp	r2, r3
 8008c84:	d910      	bls.n	8008ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c86:	4b87      	ldr	r3, [pc, #540]	@ (8008ea4 <HAL_RCC_ClockConfig+0x240>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f023 020f 	bic.w	r2, r3, #15
 8008c8e:	4985      	ldr	r1, [pc, #532]	@ (8008ea4 <HAL_RCC_ClockConfig+0x240>)
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c96:	4b83      	ldr	r3, [pc, #524]	@ (8008ea4 <HAL_RCC_ClockConfig+0x240>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 030f 	and.w	r3, r3, #15
 8008c9e:	683a      	ldr	r2, [r7, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d001      	beq.n	8008ca8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e184      	b.n	8008fb2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d010      	beq.n	8008cd6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	691a      	ldr	r2, [r3, #16]
 8008cb8:	4b7b      	ldr	r3, [pc, #492]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d908      	bls.n	8008cd6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008cc4:	4b78      	ldr	r3, [pc, #480]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	4975      	ldr	r1, [pc, #468]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 0308 	and.w	r3, r3, #8
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d010      	beq.n	8008d04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	695a      	ldr	r2, [r3, #20]
 8008ce6:	4b70      	ldr	r3, [pc, #448]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d908      	bls.n	8008d04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008cf4:	69db      	ldr	r3, [r3, #28]
 8008cf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	496a      	ldr	r1, [pc, #424]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f003 0310 	and.w	r3, r3, #16
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d010      	beq.n	8008d32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	699a      	ldr	r2, [r3, #24]
 8008d14:	4b64      	ldr	r3, [pc, #400]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d908      	bls.n	8008d32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008d20:	4b61      	ldr	r3, [pc, #388]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	495e      	ldr	r1, [pc, #376]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f003 0320 	and.w	r3, r3, #32
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d010      	beq.n	8008d60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69da      	ldr	r2, [r3, #28]
 8008d42:	4b59      	ldr	r3, [pc, #356]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d908      	bls.n	8008d60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008d4e:	4b56      	ldr	r3, [pc, #344]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	4953      	ldr	r1, [pc, #332]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d010      	beq.n	8008d8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	4b4d      	ldr	r3, [pc, #308]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	f003 030f 	and.w	r3, r3, #15
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d908      	bls.n	8008d8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f023 020f 	bic.w	r2, r3, #15
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	4947      	ldr	r1, [pc, #284]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0301 	and.w	r3, r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d055      	beq.n	8008e46 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008d9a:	4b43      	ldr	r3, [pc, #268]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	689b      	ldr	r3, [r3, #8]
 8008da6:	4940      	ldr	r1, [pc, #256]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008da8:	4313      	orrs	r3, r2
 8008daa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	2b02      	cmp	r3, #2
 8008db2:	d107      	bne.n	8008dc4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008db4:	4b3c      	ldr	r3, [pc, #240]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d121      	bne.n	8008e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e0f6      	b.n	8008fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d107      	bne.n	8008ddc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008dcc:	4b36      	ldr	r3, [pc, #216]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d115      	bne.n	8008e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	e0ea      	b.n	8008fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d107      	bne.n	8008df4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008de4:	4b30      	ldr	r3, [pc, #192]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d109      	bne.n	8008e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e0de      	b.n	8008fb2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008df4:	4b2c      	ldr	r3, [pc, #176]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0304 	and.w	r3, r3, #4
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e0d6      	b.n	8008fb2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008e04:	4b28      	ldr	r3, [pc, #160]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	f023 0207 	bic.w	r2, r3, #7
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	4925      	ldr	r1, [pc, #148]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008e12:	4313      	orrs	r3, r2
 8008e14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e16:	f7fa fad9 	bl	80033cc <HAL_GetTick>
 8008e1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e1c:	e00a      	b.n	8008e34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e1e:	f7fa fad5 	bl	80033cc <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d901      	bls.n	8008e34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008e30:	2303      	movs	r3, #3
 8008e32:	e0be      	b.n	8008fb2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e34:	4b1c      	ldr	r3, [pc, #112]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	00db      	lsls	r3, r3, #3
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d1eb      	bne.n	8008e1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 0302 	and.w	r3, r3, #2
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d010      	beq.n	8008e74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68da      	ldr	r2, [r3, #12]
 8008e56:	4b14      	ldr	r3, [pc, #80]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	f003 030f 	and.w	r3, r3, #15
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d208      	bcs.n	8008e74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e62:	4b11      	ldr	r3, [pc, #68]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	f023 020f 	bic.w	r2, r3, #15
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	490e      	ldr	r1, [pc, #56]	@ (8008ea8 <HAL_RCC_ClockConfig+0x244>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e74:	4b0b      	ldr	r3, [pc, #44]	@ (8008ea4 <HAL_RCC_ClockConfig+0x240>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 030f 	and.w	r3, r3, #15
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d214      	bcs.n	8008eac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e82:	4b08      	ldr	r3, [pc, #32]	@ (8008ea4 <HAL_RCC_ClockConfig+0x240>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f023 020f 	bic.w	r2, r3, #15
 8008e8a:	4906      	ldr	r1, [pc, #24]	@ (8008ea4 <HAL_RCC_ClockConfig+0x240>)
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e92:	4b04      	ldr	r3, [pc, #16]	@ (8008ea4 <HAL_RCC_ClockConfig+0x240>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d005      	beq.n	8008eac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e086      	b.n	8008fb2 <HAL_RCC_ClockConfig+0x34e>
 8008ea4:	52002000 	.word	0x52002000
 8008ea8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0304 	and.w	r3, r3, #4
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d010      	beq.n	8008eda <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	691a      	ldr	r2, [r3, #16]
 8008ebc:	4b3f      	ldr	r3, [pc, #252]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008ebe:	699b      	ldr	r3, [r3, #24]
 8008ec0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d208      	bcs.n	8008eda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	691b      	ldr	r3, [r3, #16]
 8008ed4:	4939      	ldr	r1, [pc, #228]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0308 	and.w	r3, r3, #8
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d010      	beq.n	8008f08 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	695a      	ldr	r2, [r3, #20]
 8008eea:	4b34      	ldr	r3, [pc, #208]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ef2:	429a      	cmp	r2, r3
 8008ef4:	d208      	bcs.n	8008f08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008ef6:	4b31      	ldr	r3, [pc, #196]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008ef8:	69db      	ldr	r3, [r3, #28]
 8008efa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	695b      	ldr	r3, [r3, #20]
 8008f02:	492e      	ldr	r1, [pc, #184]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008f04:	4313      	orrs	r3, r2
 8008f06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0310 	and.w	r3, r3, #16
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d010      	beq.n	8008f36 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	699a      	ldr	r2, [r3, #24]
 8008f18:	4b28      	ldr	r3, [pc, #160]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008f1a:	69db      	ldr	r3, [r3, #28]
 8008f1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d208      	bcs.n	8008f36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008f24:	4b25      	ldr	r3, [pc, #148]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008f26:	69db      	ldr	r3, [r3, #28]
 8008f28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	699b      	ldr	r3, [r3, #24]
 8008f30:	4922      	ldr	r1, [pc, #136]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008f32:	4313      	orrs	r3, r2
 8008f34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f003 0320 	and.w	r3, r3, #32
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d010      	beq.n	8008f64 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	69da      	ldr	r2, [r3, #28]
 8008f46:	4b1d      	ldr	r3, [pc, #116]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d208      	bcs.n	8008f64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008f52:	4b1a      	ldr	r3, [pc, #104]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	4917      	ldr	r1, [pc, #92]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008f60:	4313      	orrs	r3, r2
 8008f62:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f64:	f000 f834 	bl	8008fd0 <HAL_RCC_GetSysClockFreq>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	4b14      	ldr	r3, [pc, #80]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	0a1b      	lsrs	r3, r3, #8
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	4912      	ldr	r1, [pc, #72]	@ (8008fc0 <HAL_RCC_ClockConfig+0x35c>)
 8008f76:	5ccb      	ldrb	r3, [r1, r3]
 8008f78:	f003 031f 	and.w	r3, r3, #31
 8008f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008f80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f82:	4b0e      	ldr	r3, [pc, #56]	@ (8008fbc <HAL_RCC_ClockConfig+0x358>)
 8008f84:	699b      	ldr	r3, [r3, #24]
 8008f86:	f003 030f 	and.w	r3, r3, #15
 8008f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8008fc0 <HAL_RCC_ClockConfig+0x35c>)
 8008f8c:	5cd3      	ldrb	r3, [r2, r3]
 8008f8e:	f003 031f 	and.w	r3, r3, #31
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	fa22 f303 	lsr.w	r3, r2, r3
 8008f98:	4a0a      	ldr	r2, [pc, #40]	@ (8008fc4 <HAL_RCC_ClockConfig+0x360>)
 8008f9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8008fc8 <HAL_RCC_ClockConfig+0x364>)
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008fa2:	4b0a      	ldr	r3, [pc, #40]	@ (8008fcc <HAL_RCC_ClockConfig+0x368>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fa f9c6 	bl	8003338 <HAL_InitTick>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3718      	adds	r7, #24
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	58024400 	.word	0x58024400
 8008fc0:	0800dc8c 	.word	0x0800dc8c
 8008fc4:	240000b8 	.word	0x240000b8
 8008fc8:	240000b4 	.word	0x240000b4
 8008fcc:	240000c0 	.word	0x240000c0

08008fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b089      	sub	sp, #36	@ 0x24
 8008fd4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fd6:	4bb3      	ldr	r3, [pc, #716]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008fde:	2b18      	cmp	r3, #24
 8008fe0:	f200 8155 	bhi.w	800928e <HAL_RCC_GetSysClockFreq+0x2be>
 8008fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fec <HAL_RCC_GetSysClockFreq+0x1c>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08009051 	.word	0x08009051
 8008ff0:	0800928f 	.word	0x0800928f
 8008ff4:	0800928f 	.word	0x0800928f
 8008ff8:	0800928f 	.word	0x0800928f
 8008ffc:	0800928f 	.word	0x0800928f
 8009000:	0800928f 	.word	0x0800928f
 8009004:	0800928f 	.word	0x0800928f
 8009008:	0800928f 	.word	0x0800928f
 800900c:	08009077 	.word	0x08009077
 8009010:	0800928f 	.word	0x0800928f
 8009014:	0800928f 	.word	0x0800928f
 8009018:	0800928f 	.word	0x0800928f
 800901c:	0800928f 	.word	0x0800928f
 8009020:	0800928f 	.word	0x0800928f
 8009024:	0800928f 	.word	0x0800928f
 8009028:	0800928f 	.word	0x0800928f
 800902c:	0800907d 	.word	0x0800907d
 8009030:	0800928f 	.word	0x0800928f
 8009034:	0800928f 	.word	0x0800928f
 8009038:	0800928f 	.word	0x0800928f
 800903c:	0800928f 	.word	0x0800928f
 8009040:	0800928f 	.word	0x0800928f
 8009044:	0800928f 	.word	0x0800928f
 8009048:	0800928f 	.word	0x0800928f
 800904c:	08009083 	.word	0x08009083
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009050:	4b94      	ldr	r3, [pc, #592]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f003 0320 	and.w	r3, r3, #32
 8009058:	2b00      	cmp	r3, #0
 800905a:	d009      	beq.n	8009070 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800905c:	4b91      	ldr	r3, [pc, #580]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	08db      	lsrs	r3, r3, #3
 8009062:	f003 0303 	and.w	r3, r3, #3
 8009066:	4a90      	ldr	r2, [pc, #576]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009068:	fa22 f303 	lsr.w	r3, r2, r3
 800906c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800906e:	e111      	b.n	8009294 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009070:	4b8d      	ldr	r3, [pc, #564]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009072:	61bb      	str	r3, [r7, #24]
      break;
 8009074:	e10e      	b.n	8009294 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009076:	4b8d      	ldr	r3, [pc, #564]	@ (80092ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009078:	61bb      	str	r3, [r7, #24]
      break;
 800907a:	e10b      	b.n	8009294 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800907c:	4b8c      	ldr	r3, [pc, #560]	@ (80092b0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800907e:	61bb      	str	r3, [r7, #24]
      break;
 8009080:	e108      	b.n	8009294 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009082:	4b88      	ldr	r3, [pc, #544]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800908c:	4b85      	ldr	r3, [pc, #532]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800908e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009090:	091b      	lsrs	r3, r3, #4
 8009092:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009096:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009098:	4b82      	ldr	r3, [pc, #520]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800909a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800909c:	f003 0301 	and.w	r3, r3, #1
 80090a0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80090a2:	4b80      	ldr	r3, [pc, #512]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a6:	08db      	lsrs	r3, r3, #3
 80090a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	fb02 f303 	mul.w	r3, r2, r3
 80090b2:	ee07 3a90 	vmov	s15, r3
 80090b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090ba:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80e1 	beq.w	8009288 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	f000 8083 	beq.w	80091d4 <HAL_RCC_GetSysClockFreq+0x204>
 80090ce:	697b      	ldr	r3, [r7, #20]
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	f200 80a1 	bhi.w	8009218 <HAL_RCC_GetSysClockFreq+0x248>
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d003      	beq.n	80090e4 <HAL_RCC_GetSysClockFreq+0x114>
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d056      	beq.n	8009190 <HAL_RCC_GetSysClockFreq+0x1c0>
 80090e2:	e099      	b.n	8009218 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090e4:	4b6f      	ldr	r3, [pc, #444]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0320 	and.w	r3, r3, #32
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d02d      	beq.n	800914c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090f0:	4b6c      	ldr	r3, [pc, #432]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	08db      	lsrs	r3, r3, #3
 80090f6:	f003 0303 	and.w	r3, r3, #3
 80090fa:	4a6b      	ldr	r2, [pc, #428]	@ (80092a8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80090fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009100:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	ee07 3a90 	vmov	s15, r3
 8009108:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	ee07 3a90 	vmov	s15, r3
 8009112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800911a:	4b62      	ldr	r3, [pc, #392]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800911c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009122:	ee07 3a90 	vmov	s15, r3
 8009126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800912a:	ed97 6a02 	vldr	s12, [r7, #8]
 800912e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80092b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800913a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800913e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009146:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800914a:	e087      	b.n	800925c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	ee07 3a90 	vmov	s15, r3
 8009152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009156:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80092b8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800915a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800915e:	4b51      	ldr	r3, [pc, #324]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009166:	ee07 3a90 	vmov	s15, r3
 800916a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800916e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009172:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80092b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800917a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800917e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800918a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800918e:	e065      	b.n	800925c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	ee07 3a90 	vmov	s15, r3
 8009196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800919a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80092bc <HAL_RCC_GetSysClockFreq+0x2ec>
 800919e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091a2:	4b40      	ldr	r3, [pc, #256]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091aa:	ee07 3a90 	vmov	s15, r3
 80091ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80091b6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80092b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80091be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80091c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80091c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80091d2:	e043      	b.n	800925c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	ee07 3a90 	vmov	s15, r3
 80091da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80091de:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80092c0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80091e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80091e6:	4b2f      	ldr	r3, [pc, #188]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80091e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091ee:	ee07 3a90 	vmov	s15, r3
 80091f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80091f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80091fa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80092b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80091fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009206:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800920a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800920e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009212:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009216:	e021      	b.n	800925c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009222:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80092bc <HAL_RCC_GetSysClockFreq+0x2ec>
 8009226:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800922a:	4b1e      	ldr	r3, [pc, #120]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800922c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800922e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009232:	ee07 3a90 	vmov	s15, r3
 8009236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800923a:	ed97 6a02 	vldr	s12, [r7, #8]
 800923e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80092b4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009242:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009246:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800924a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800924e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009256:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800925a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800925c:	4b11      	ldr	r3, [pc, #68]	@ (80092a4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800925e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009260:	0a5b      	lsrs	r3, r3, #9
 8009262:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009266:	3301      	adds	r3, #1
 8009268:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	ee07 3a90 	vmov	s15, r3
 8009270:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009274:	edd7 6a07 	vldr	s13, [r7, #28]
 8009278:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800927c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009280:	ee17 3a90 	vmov	r3, s15
 8009284:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009286:	e005      	b.n	8009294 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009288:	2300      	movs	r3, #0
 800928a:	61bb      	str	r3, [r7, #24]
      break;
 800928c:	e002      	b.n	8009294 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800928e:	4b07      	ldr	r3, [pc, #28]	@ (80092ac <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009290:	61bb      	str	r3, [r7, #24]
      break;
 8009292:	bf00      	nop
  }

  return sysclockfreq;
 8009294:	69bb      	ldr	r3, [r7, #24]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3724      	adds	r7, #36	@ 0x24
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	58024400 	.word	0x58024400
 80092a8:	03d09000 	.word	0x03d09000
 80092ac:	003d0900 	.word	0x003d0900
 80092b0:	016e3600 	.word	0x016e3600
 80092b4:	46000000 	.word	0x46000000
 80092b8:	4c742400 	.word	0x4c742400
 80092bc:	4a742400 	.word	0x4a742400
 80092c0:	4bb71b00 	.word	0x4bb71b00

080092c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80092ca:	f7ff fe81 	bl	8008fd0 <HAL_RCC_GetSysClockFreq>
 80092ce:	4602      	mov	r2, r0
 80092d0:	4b10      	ldr	r3, [pc, #64]	@ (8009314 <HAL_RCC_GetHCLKFreq+0x50>)
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	0a1b      	lsrs	r3, r3, #8
 80092d6:	f003 030f 	and.w	r3, r3, #15
 80092da:	490f      	ldr	r1, [pc, #60]	@ (8009318 <HAL_RCC_GetHCLKFreq+0x54>)
 80092dc:	5ccb      	ldrb	r3, [r1, r3]
 80092de:	f003 031f 	and.w	r3, r3, #31
 80092e2:	fa22 f303 	lsr.w	r3, r2, r3
 80092e6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80092e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009314 <HAL_RCC_GetHCLKFreq+0x50>)
 80092ea:	699b      	ldr	r3, [r3, #24]
 80092ec:	f003 030f 	and.w	r3, r3, #15
 80092f0:	4a09      	ldr	r2, [pc, #36]	@ (8009318 <HAL_RCC_GetHCLKFreq+0x54>)
 80092f2:	5cd3      	ldrb	r3, [r2, r3]
 80092f4:	f003 031f 	and.w	r3, r3, #31
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	fa22 f303 	lsr.w	r3, r2, r3
 80092fe:	4a07      	ldr	r2, [pc, #28]	@ (800931c <HAL_RCC_GetHCLKFreq+0x58>)
 8009300:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009302:	4a07      	ldr	r2, [pc, #28]	@ (8009320 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009308:	4b04      	ldr	r3, [pc, #16]	@ (800931c <HAL_RCC_GetHCLKFreq+0x58>)
 800930a:	681b      	ldr	r3, [r3, #0]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	58024400 	.word	0x58024400
 8009318:	0800dc8c 	.word	0x0800dc8c
 800931c:	240000b8 	.word	0x240000b8
 8009320:	240000b4 	.word	0x240000b4

08009324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009328:	f7ff ffcc 	bl	80092c4 <HAL_RCC_GetHCLKFreq>
 800932c:	4602      	mov	r2, r0
 800932e:	4b06      	ldr	r3, [pc, #24]	@ (8009348 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009330:	69db      	ldr	r3, [r3, #28]
 8009332:	091b      	lsrs	r3, r3, #4
 8009334:	f003 0307 	and.w	r3, r3, #7
 8009338:	4904      	ldr	r1, [pc, #16]	@ (800934c <HAL_RCC_GetPCLK1Freq+0x28>)
 800933a:	5ccb      	ldrb	r3, [r1, r3]
 800933c:	f003 031f 	and.w	r3, r3, #31
 8009340:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009344:	4618      	mov	r0, r3
 8009346:	bd80      	pop	{r7, pc}
 8009348:	58024400 	.word	0x58024400
 800934c:	0800dc8c 	.word	0x0800dc8c

08009350 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009354:	f7ff ffb6 	bl	80092c4 <HAL_RCC_GetHCLKFreq>
 8009358:	4602      	mov	r2, r0
 800935a:	4b06      	ldr	r3, [pc, #24]	@ (8009374 <HAL_RCC_GetPCLK2Freq+0x24>)
 800935c:	69db      	ldr	r3, [r3, #28]
 800935e:	0a1b      	lsrs	r3, r3, #8
 8009360:	f003 0307 	and.w	r3, r3, #7
 8009364:	4904      	ldr	r1, [pc, #16]	@ (8009378 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009366:	5ccb      	ldrb	r3, [r1, r3]
 8009368:	f003 031f 	and.w	r3, r3, #31
 800936c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009370:	4618      	mov	r0, r3
 8009372:	bd80      	pop	{r7, pc}
 8009374:	58024400 	.word	0x58024400
 8009378:	0800dc8c 	.word	0x0800dc8c

0800937c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800937c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009380:	b0ca      	sub	sp, #296	@ 0x128
 8009382:	af00      	add	r7, sp, #0
 8009384:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009388:	2300      	movs	r3, #0
 800938a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800938e:	2300      	movs	r3, #0
 8009390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80093a0:	2500      	movs	r5, #0
 80093a2:	ea54 0305 	orrs.w	r3, r4, r5
 80093a6:	d049      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80093a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80093b2:	d02f      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80093b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80093b8:	d828      	bhi.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80093ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093be:	d01a      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80093c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80093c4:	d822      	bhi.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d003      	beq.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80093ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093ce:	d007      	beq.n	80093e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80093d0:	e01c      	b.n	800940c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093d2:	4bb8      	ldr	r3, [pc, #736]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d6:	4ab7      	ldr	r2, [pc, #732]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80093d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80093de:	e01a      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80093e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093e4:	3308      	adds	r3, #8
 80093e6:	2102      	movs	r1, #2
 80093e8:	4618      	mov	r0, r3
 80093ea:	f002 fb61 	bl	800bab0 <RCCEx_PLL2_Config>
 80093ee:	4603      	mov	r3, r0
 80093f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80093f4:	e00f      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80093f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093fa:	3328      	adds	r3, #40	@ 0x28
 80093fc:	2102      	movs	r1, #2
 80093fe:	4618      	mov	r0, r3
 8009400:	f002 fc08 	bl	800bc14 <RCCEx_PLL3_Config>
 8009404:	4603      	mov	r3, r0
 8009406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800940a:	e004      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800940c:	2301      	movs	r3, #1
 800940e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009412:	e000      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10a      	bne.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800941e:	4ba5      	ldr	r3, [pc, #660]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009420:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009422:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800942a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800942c:	4aa1      	ldr	r2, [pc, #644]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800942e:	430b      	orrs	r3, r1
 8009430:	6513      	str	r3, [r2, #80]	@ 0x50
 8009432:	e003      	b.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009434:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009438:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800943c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009444:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009448:	f04f 0900 	mov.w	r9, #0
 800944c:	ea58 0309 	orrs.w	r3, r8, r9
 8009450:	d047      	beq.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009458:	2b04      	cmp	r3, #4
 800945a:	d82a      	bhi.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800945c:	a201      	add	r2, pc, #4	@ (adr r2, 8009464 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800945e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009462:	bf00      	nop
 8009464:	08009479 	.word	0x08009479
 8009468:	08009487 	.word	0x08009487
 800946c:	0800949d 	.word	0x0800949d
 8009470:	080094bb 	.word	0x080094bb
 8009474:	080094bb 	.word	0x080094bb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009478:	4b8e      	ldr	r3, [pc, #568]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800947a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800947c:	4a8d      	ldr	r2, [pc, #564]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800947e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009482:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009484:	e01a      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948a:	3308      	adds	r3, #8
 800948c:	2100      	movs	r1, #0
 800948e:	4618      	mov	r0, r3
 8009490:	f002 fb0e 	bl	800bab0 <RCCEx_PLL2_Config>
 8009494:	4603      	mov	r3, r0
 8009496:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800949a:	e00f      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800949c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a0:	3328      	adds	r3, #40	@ 0x28
 80094a2:	2100      	movs	r1, #0
 80094a4:	4618      	mov	r0, r3
 80094a6:	f002 fbb5 	bl	800bc14 <RCCEx_PLL3_Config>
 80094aa:	4603      	mov	r3, r0
 80094ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80094b0:	e004      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094b2:	2301      	movs	r3, #1
 80094b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094b8:	e000      	b.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80094ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d10a      	bne.n	80094da <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80094c4:	4b7b      	ldr	r3, [pc, #492]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094c8:	f023 0107 	bic.w	r1, r3, #7
 80094cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094d2:	4a78      	ldr	r2, [pc, #480]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80094d4:	430b      	orrs	r3, r1
 80094d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80094d8:	e003      	b.n	80094e2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80094e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ea:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80094ee:	f04f 0b00 	mov.w	fp, #0
 80094f2:	ea5a 030b 	orrs.w	r3, sl, fp
 80094f6:	d04c      	beq.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80094f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009502:	d030      	beq.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8009504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009508:	d829      	bhi.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800950a:	2bc0      	cmp	r3, #192	@ 0xc0
 800950c:	d02d      	beq.n	800956a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800950e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009510:	d825      	bhi.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009512:	2b80      	cmp	r3, #128	@ 0x80
 8009514:	d018      	beq.n	8009548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8009516:	2b80      	cmp	r3, #128	@ 0x80
 8009518:	d821      	bhi.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800951a:	2b00      	cmp	r3, #0
 800951c:	d002      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800951e:	2b40      	cmp	r3, #64	@ 0x40
 8009520:	d007      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8009522:	e01c      	b.n	800955e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009524:	4b63      	ldr	r3, [pc, #396]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009528:	4a62      	ldr	r2, [pc, #392]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800952a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800952e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009530:	e01c      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009536:	3308      	adds	r3, #8
 8009538:	2100      	movs	r1, #0
 800953a:	4618      	mov	r0, r3
 800953c:	f002 fab8 	bl	800bab0 <RCCEx_PLL2_Config>
 8009540:	4603      	mov	r3, r0
 8009542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009546:	e011      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800954c:	3328      	adds	r3, #40	@ 0x28
 800954e:	2100      	movs	r1, #0
 8009550:	4618      	mov	r0, r3
 8009552:	f002 fb5f 	bl	800bc14 <RCCEx_PLL3_Config>
 8009556:	4603      	mov	r3, r0
 8009558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800955c:	e006      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009564:	e002      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009566:	bf00      	nop
 8009568:	e000      	b.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800956a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800956c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009574:	4b4f      	ldr	r3, [pc, #316]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009578:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800957c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009582:	4a4c      	ldr	r2, [pc, #304]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009584:	430b      	orrs	r3, r1
 8009586:	6513      	str	r3, [r2, #80]	@ 0x50
 8009588:	e003      	b.n	8009592 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800958a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800958e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800959a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800959e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80095a2:	2300      	movs	r3, #0
 80095a4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80095a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80095ac:	460b      	mov	r3, r1
 80095ae:	4313      	orrs	r3, r2
 80095b0:	d053      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80095b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80095ba:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095be:	d035      	beq.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80095c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095c4:	d82e      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80095c6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80095ca:	d031      	beq.n	8009630 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80095cc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80095d0:	d828      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80095d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095d6:	d01a      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x292>
 80095d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095dc:	d822      	bhi.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d003      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80095e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80095e6:	d007      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80095e8:	e01c      	b.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095ea:	4b32      	ldr	r3, [pc, #200]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ee:	4a31      	ldr	r2, [pc, #196]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80095f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80095f6:	e01c      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fc:	3308      	adds	r3, #8
 80095fe:	2100      	movs	r1, #0
 8009600:	4618      	mov	r0, r3
 8009602:	f002 fa55 	bl	800bab0 <RCCEx_PLL2_Config>
 8009606:	4603      	mov	r3, r0
 8009608:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800960c:	e011      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800960e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009612:	3328      	adds	r3, #40	@ 0x28
 8009614:	2100      	movs	r1, #0
 8009616:	4618      	mov	r0, r3
 8009618:	f002 fafc 	bl	800bc14 <RCCEx_PLL3_Config>
 800961c:	4603      	mov	r3, r0
 800961e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009622:	e006      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009624:	2301      	movs	r3, #1
 8009626:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800962a:	e002      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800962c:	bf00      	nop
 800962e:	e000      	b.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009636:	2b00      	cmp	r3, #0
 8009638:	d10b      	bne.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800963a:	4b1e      	ldr	r3, [pc, #120]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800963c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800963e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8009642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009646:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800964a:	4a1a      	ldr	r2, [pc, #104]	@ (80096b4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800964c:	430b      	orrs	r3, r1
 800964e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009650:	e003      	b.n	800965a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800965a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009662:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009666:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800966a:	2300      	movs	r3, #0
 800966c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009670:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009674:	460b      	mov	r3, r1
 8009676:	4313      	orrs	r3, r2
 8009678:	d056      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800967a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009682:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009686:	d038      	beq.n	80096fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800968c:	d831      	bhi.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800968e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009692:	d034      	beq.n	80096fe <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009694:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009698:	d82b      	bhi.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800969a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800969e:	d01d      	beq.n	80096dc <HAL_RCCEx_PeriphCLKConfig+0x360>
 80096a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096a4:	d825      	bhi.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d006      	beq.n	80096b8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80096aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80096ae:	d00a      	beq.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80096b0:	e01f      	b.n	80096f2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80096b2:	bf00      	nop
 80096b4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096b8:	4ba2      	ldr	r3, [pc, #648]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096bc:	4aa1      	ldr	r2, [pc, #644]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096c4:	e01c      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ca:	3308      	adds	r3, #8
 80096cc:	2100      	movs	r1, #0
 80096ce:	4618      	mov	r0, r3
 80096d0:	f002 f9ee 	bl	800bab0 <RCCEx_PLL2_Config>
 80096d4:	4603      	mov	r3, r0
 80096d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80096da:	e011      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80096dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096e0:	3328      	adds	r3, #40	@ 0x28
 80096e2:	2100      	movs	r1, #0
 80096e4:	4618      	mov	r0, r3
 80096e6:	f002 fa95 	bl	800bc14 <RCCEx_PLL3_Config>
 80096ea:	4603      	mov	r3, r0
 80096ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80096f0:	e006      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096f8:	e002      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80096fa:	bf00      	nop
 80096fc:	e000      	b.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80096fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009700:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10b      	bne.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009708:	4b8e      	ldr	r3, [pc, #568]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800970a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800970c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009714:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009718:	4a8a      	ldr	r2, [pc, #552]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800971a:	430b      	orrs	r3, r1
 800971c:	6593      	str	r3, [r2, #88]	@ 0x58
 800971e:	e003      	b.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009730:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8009734:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009738:	2300      	movs	r3, #0
 800973a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800973e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8009742:	460b      	mov	r3, r1
 8009744:	4313      	orrs	r3, r2
 8009746:	d03a      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800974c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800974e:	2b30      	cmp	r3, #48	@ 0x30
 8009750:	d01f      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009752:	2b30      	cmp	r3, #48	@ 0x30
 8009754:	d819      	bhi.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009756:	2b20      	cmp	r3, #32
 8009758:	d00c      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800975a:	2b20      	cmp	r3, #32
 800975c:	d815      	bhi.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800975e:	2b00      	cmp	r3, #0
 8009760:	d019      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009762:	2b10      	cmp	r3, #16
 8009764:	d111      	bne.n	800978a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009766:	4b77      	ldr	r3, [pc, #476]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976a:	4a76      	ldr	r2, [pc, #472]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800976c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009772:	e011      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009778:	3308      	adds	r3, #8
 800977a:	2102      	movs	r1, #2
 800977c:	4618      	mov	r0, r3
 800977e:	f002 f997 	bl	800bab0 <RCCEx_PLL2_Config>
 8009782:	4603      	mov	r3, r0
 8009784:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009788:	e006      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009790:	e002      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009792:	bf00      	nop
 8009794:	e000      	b.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10a      	bne.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80097a0:	4b68      	ldr	r3, [pc, #416]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097a4:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80097a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80097ae:	4a65      	ldr	r2, [pc, #404]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80097b0:	430b      	orrs	r3, r1
 80097b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80097b4:	e003      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80097be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80097ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80097ce:	2300      	movs	r3, #0
 80097d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80097d4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80097d8:	460b      	mov	r3, r1
 80097da:	4313      	orrs	r3, r2
 80097dc:	d051      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80097de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097e8:	d035      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80097ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ee:	d82e      	bhi.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80097f0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097f4:	d031      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80097f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80097fa:	d828      	bhi.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80097fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009800:	d01a      	beq.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009802:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009806:	d822      	bhi.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009808:	2b00      	cmp	r3, #0
 800980a:	d003      	beq.n	8009814 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800980c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009810:	d007      	beq.n	8009822 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009812:	e01c      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009814:	4b4b      	ldr	r3, [pc, #300]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009818:	4a4a      	ldr	r2, [pc, #296]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800981a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800981e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009820:	e01c      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009826:	3308      	adds	r3, #8
 8009828:	2100      	movs	r1, #0
 800982a:	4618      	mov	r0, r3
 800982c:	f002 f940 	bl	800bab0 <RCCEx_PLL2_Config>
 8009830:	4603      	mov	r3, r0
 8009832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009836:	e011      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800983c:	3328      	adds	r3, #40	@ 0x28
 800983e:	2100      	movs	r1, #0
 8009840:	4618      	mov	r0, r3
 8009842:	f002 f9e7 	bl	800bc14 <RCCEx_PLL3_Config>
 8009846:	4603      	mov	r3, r0
 8009848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800984c:	e006      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800984e:	2301      	movs	r3, #1
 8009850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009854:	e002      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009856:	bf00      	nop
 8009858:	e000      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800985a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800985c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009860:	2b00      	cmp	r3, #0
 8009862:	d10a      	bne.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009864:	4b37      	ldr	r3, [pc, #220]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009868:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800986c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009872:	4a34      	ldr	r2, [pc, #208]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009874:	430b      	orrs	r3, r1
 8009876:	6513      	str	r3, [r2, #80]	@ 0x50
 8009878:	e003      	b.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800987a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800987e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800988a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800988e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009892:	2300      	movs	r3, #0
 8009894:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009898:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800989c:	460b      	mov	r3, r1
 800989e:	4313      	orrs	r3, r2
 80098a0:	d056      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80098a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098ac:	d033      	beq.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80098ae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80098b2:	d82c      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80098b4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098b8:	d02f      	beq.n	800991a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80098ba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80098be:	d826      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80098c0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098c4:	d02b      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80098c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80098ca:	d820      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80098cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d0:	d012      	beq.n	80098f8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80098d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80098d6:	d81a      	bhi.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x592>
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d022      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80098dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80098e0:	d115      	bne.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80098e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e6:	3308      	adds	r3, #8
 80098e8:	2101      	movs	r1, #1
 80098ea:	4618      	mov	r0, r3
 80098ec:	f002 f8e0 	bl	800bab0 <RCCEx_PLL2_Config>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80098f6:	e015      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80098f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098fc:	3328      	adds	r3, #40	@ 0x28
 80098fe:	2101      	movs	r1, #1
 8009900:	4618      	mov	r0, r3
 8009902:	f002 f987 	bl	800bc14 <RCCEx_PLL3_Config>
 8009906:	4603      	mov	r3, r0
 8009908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800990c:	e00a      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009914:	e006      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009916:	bf00      	nop
 8009918:	e004      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800991a:	bf00      	nop
 800991c:	e002      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800991e:	bf00      	nop
 8009920:	e000      	b.n	8009924 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009922:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009924:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10d      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800992c:	4b05      	ldr	r3, [pc, #20]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800992e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009930:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8009934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009938:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800993a:	4a02      	ldr	r2, [pc, #8]	@ (8009944 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800993c:	430b      	orrs	r3, r1
 800993e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009940:	e006      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009942:	bf00      	nop
 8009944:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800994c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800995c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009960:	2300      	movs	r3, #0
 8009962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009966:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800996a:	460b      	mov	r3, r1
 800996c:	4313      	orrs	r3, r2
 800996e:	d055      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009974:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800997c:	d033      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800997e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009982:	d82c      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009984:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009988:	d02f      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800998a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800998e:	d826      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009990:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009994:	d02b      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009996:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800999a:	d820      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x662>
 800999c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a0:	d012      	beq.n	80099c8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80099a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80099a6:	d81a      	bhi.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x662>
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d022      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80099ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80099b0:	d115      	bne.n	80099de <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b6:	3308      	adds	r3, #8
 80099b8:	2101      	movs	r1, #1
 80099ba:	4618      	mov	r0, r3
 80099bc:	f002 f878 	bl	800bab0 <RCCEx_PLL2_Config>
 80099c0:	4603      	mov	r3, r0
 80099c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80099c6:	e015      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099cc:	3328      	adds	r3, #40	@ 0x28
 80099ce:	2101      	movs	r1, #1
 80099d0:	4618      	mov	r0, r3
 80099d2:	f002 f91f 	bl	800bc14 <RCCEx_PLL3_Config>
 80099d6:	4603      	mov	r3, r0
 80099d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80099dc:	e00a      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099e4:	e006      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80099e6:	bf00      	nop
 80099e8:	e004      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80099ea:	bf00      	nop
 80099ec:	e002      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80099ee:	bf00      	nop
 80099f0:	e000      	b.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80099f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d10b      	bne.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80099fc:	4ba3      	ldr	r3, [pc, #652]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80099fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a00:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009a0c:	4a9f      	ldr	r2, [pc, #636]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a0e:	430b      	orrs	r3, r1
 8009a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a12:	e003      	b.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009a28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8009a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a36:	460b      	mov	r3, r1
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	d037      	beq.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a46:	d00e      	beq.n	8009a66 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009a4c:	d816      	bhi.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d018      	beq.n	8009a84 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009a52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a56:	d111      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a58:	4b8c      	ldr	r3, [pc, #560]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a5c:	4a8b      	ldr	r2, [pc, #556]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a64:	e00f      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6a:	3308      	adds	r3, #8
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f002 f81e 	bl	800bab0 <RCCEx_PLL2_Config>
 8009a74:	4603      	mov	r3, r0
 8009a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009a7a:	e004      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a82:	e000      	b.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009a84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10a      	bne.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a92:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a9c:	4a7b      	ldr	r2, [pc, #492]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009a9e:	430b      	orrs	r3, r1
 8009aa0:	6513      	str	r3, [r2, #80]	@ 0x50
 8009aa2:	e003      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009ab8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009abc:	2300      	movs	r3, #0
 8009abe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009ac2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	d039      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d81c      	bhi.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8009adc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009b19 	.word	0x08009b19
 8009ae0:	08009aed 	.word	0x08009aed
 8009ae4:	08009afb 	.word	0x08009afb
 8009ae8:	08009b19 	.word	0x08009b19
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aec:	4b67      	ldr	r3, [pc, #412]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009af0:	4a66      	ldr	r2, [pc, #408]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009af2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009af6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009af8:	e00f      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009afe:	3308      	adds	r3, #8
 8009b00:	2102      	movs	r1, #2
 8009b02:	4618      	mov	r0, r3
 8009b04:	f001 ffd4 	bl	800bab0 <RCCEx_PLL2_Config>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009b0e:	e004      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b16:	e000      	b.n	8009b1a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d10a      	bne.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009b22:	4b5a      	ldr	r3, [pc, #360]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b26:	f023 0103 	bic.w	r1, r3, #3
 8009b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b30:	4a56      	ldr	r2, [pc, #344]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009b32:	430b      	orrs	r3, r1
 8009b34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b36:	e003      	b.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b48:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009b50:	2300      	movs	r3, #0
 8009b52:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009b56:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	f000 809f 	beq.w	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009b62:	4b4b      	ldr	r3, [pc, #300]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4a4a      	ldr	r2, [pc, #296]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009b6e:	f7f9 fc2d 	bl	80033cc <HAL_GetTick>
 8009b72:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b76:	e00b      	b.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b78:	f7f9 fc28 	bl	80033cc <HAL_GetTick>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009b82:	1ad3      	subs	r3, r2, r3
 8009b84:	2b64      	cmp	r3, #100	@ 0x64
 8009b86:	d903      	bls.n	8009b90 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b8e:	e005      	b.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009b90:	4b3f      	ldr	r3, [pc, #252]	@ (8009c90 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d0ed      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d179      	bne.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009ba4:	4b39      	ldr	r3, [pc, #228]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ba6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bb0:	4053      	eors	r3, r2
 8009bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d015      	beq.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009bba:	4b34      	ldr	r3, [pc, #208]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009bc2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009bc6:	4b31      	ldr	r3, [pc, #196]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bca:	4a30      	ldr	r2, [pc, #192]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009bd0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009bd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009bdc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009bde:	4a2b      	ldr	r2, [pc, #172]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009be4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009bee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bf2:	d118      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf4:	f7f9 fbea 	bl	80033cc <HAL_GetTick>
 8009bf8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009bfc:	e00d      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bfe:	f7f9 fbe5 	bl	80033cc <HAL_GetTick>
 8009c02:	4602      	mov	r2, r0
 8009c04:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009c08:	1ad2      	subs	r2, r2, r3
 8009c0a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d903      	bls.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009c18:	e005      	b.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0eb      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d129      	bne.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c3a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c3e:	d10e      	bne.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009c40:	4b12      	ldr	r3, [pc, #72]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c50:	091a      	lsrs	r2, r3, #4
 8009c52:	4b10      	ldr	r3, [pc, #64]	@ (8009c94 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009c54:	4013      	ands	r3, r2
 8009c56:	4a0d      	ldr	r2, [pc, #52]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c58:	430b      	orrs	r3, r1
 8009c5a:	6113      	str	r3, [r2, #16]
 8009c5c:	e005      	b.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c60:	691b      	ldr	r3, [r3, #16]
 8009c62:	4a0a      	ldr	r2, [pc, #40]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c64:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009c68:	6113      	str	r3, [r2, #16]
 8009c6a:	4b08      	ldr	r3, [pc, #32]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c6c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c7a:	4a04      	ldr	r2, [pc, #16]	@ (8009c8c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009c80:	e00e      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009c82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009c8a:	e009      	b.n	8009ca0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009c8c:	58024400 	.word	0x58024400
 8009c90:	58024800 	.word	0x58024800
 8009c94:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	f002 0301 	and.w	r3, r2, #1
 8009cac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009cb6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	4313      	orrs	r3, r2
 8009cbe:	f000 8089 	beq.w	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009cc8:	2b28      	cmp	r3, #40	@ 0x28
 8009cca:	d86b      	bhi.n	8009da4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cd2:	bf00      	nop
 8009cd4:	08009dad 	.word	0x08009dad
 8009cd8:	08009da5 	.word	0x08009da5
 8009cdc:	08009da5 	.word	0x08009da5
 8009ce0:	08009da5 	.word	0x08009da5
 8009ce4:	08009da5 	.word	0x08009da5
 8009ce8:	08009da5 	.word	0x08009da5
 8009cec:	08009da5 	.word	0x08009da5
 8009cf0:	08009da5 	.word	0x08009da5
 8009cf4:	08009d79 	.word	0x08009d79
 8009cf8:	08009da5 	.word	0x08009da5
 8009cfc:	08009da5 	.word	0x08009da5
 8009d00:	08009da5 	.word	0x08009da5
 8009d04:	08009da5 	.word	0x08009da5
 8009d08:	08009da5 	.word	0x08009da5
 8009d0c:	08009da5 	.word	0x08009da5
 8009d10:	08009da5 	.word	0x08009da5
 8009d14:	08009d8f 	.word	0x08009d8f
 8009d18:	08009da5 	.word	0x08009da5
 8009d1c:	08009da5 	.word	0x08009da5
 8009d20:	08009da5 	.word	0x08009da5
 8009d24:	08009da5 	.word	0x08009da5
 8009d28:	08009da5 	.word	0x08009da5
 8009d2c:	08009da5 	.word	0x08009da5
 8009d30:	08009da5 	.word	0x08009da5
 8009d34:	08009dad 	.word	0x08009dad
 8009d38:	08009da5 	.word	0x08009da5
 8009d3c:	08009da5 	.word	0x08009da5
 8009d40:	08009da5 	.word	0x08009da5
 8009d44:	08009da5 	.word	0x08009da5
 8009d48:	08009da5 	.word	0x08009da5
 8009d4c:	08009da5 	.word	0x08009da5
 8009d50:	08009da5 	.word	0x08009da5
 8009d54:	08009dad 	.word	0x08009dad
 8009d58:	08009da5 	.word	0x08009da5
 8009d5c:	08009da5 	.word	0x08009da5
 8009d60:	08009da5 	.word	0x08009da5
 8009d64:	08009da5 	.word	0x08009da5
 8009d68:	08009da5 	.word	0x08009da5
 8009d6c:	08009da5 	.word	0x08009da5
 8009d70:	08009da5 	.word	0x08009da5
 8009d74:	08009dad 	.word	0x08009dad
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d7c:	3308      	adds	r3, #8
 8009d7e:	2101      	movs	r1, #1
 8009d80:	4618      	mov	r0, r3
 8009d82:	f001 fe95 	bl	800bab0 <RCCEx_PLL2_Config>
 8009d86:	4603      	mov	r3, r0
 8009d88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009d8c:	e00f      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d92:	3328      	adds	r3, #40	@ 0x28
 8009d94:	2101      	movs	r1, #1
 8009d96:	4618      	mov	r0, r3
 8009d98:	f001 ff3c 	bl	800bc14 <RCCEx_PLL3_Config>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009da2:	e004      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009daa:	e000      	b.n	8009dae <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009dac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10a      	bne.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009db6:	4bbf      	ldr	r3, [pc, #764]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dba:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009dc4:	4abb      	ldr	r2, [pc, #748]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009dc6:	430b      	orrs	r3, r1
 8009dc8:	6553      	str	r3, [r2, #84]	@ 0x54
 8009dca:	e003      	b.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ddc:	f002 0302 	and.w	r3, r2, #2
 8009de0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009de4:	2300      	movs	r3, #0
 8009de6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009dea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009dee:	460b      	mov	r3, r1
 8009df0:	4313      	orrs	r3, r2
 8009df2:	d041      	beq.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	d824      	bhi.n	8009e48 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009dfe:	a201      	add	r2, pc, #4	@ (adr r2, 8009e04 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e51 	.word	0x08009e51
 8009e08:	08009e1d 	.word	0x08009e1d
 8009e0c:	08009e33 	.word	0x08009e33
 8009e10:	08009e51 	.word	0x08009e51
 8009e14:	08009e51 	.word	0x08009e51
 8009e18:	08009e51 	.word	0x08009e51
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e20:	3308      	adds	r3, #8
 8009e22:	2101      	movs	r1, #1
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 fe43 	bl	800bab0 <RCCEx_PLL2_Config>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009e30:	e00f      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e36:	3328      	adds	r3, #40	@ 0x28
 8009e38:	2101      	movs	r1, #1
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f001 feea 	bl	800bc14 <RCCEx_PLL3_Config>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009e46:	e004      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e4e:	e000      	b.n	8009e52 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d10a      	bne.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009e5a:	4b96      	ldr	r3, [pc, #600]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e5e:	f023 0107 	bic.w	r1, r3, #7
 8009e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009e68:	4a92      	ldr	r2, [pc, #584]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009e6a:	430b      	orrs	r3, r1
 8009e6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e6e:	e003      	b.n	8009e78 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f002 0304 	and.w	r3, r2, #4
 8009e84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009e8e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009e92:	460b      	mov	r3, r1
 8009e94:	4313      	orrs	r3, r2
 8009e96:	d044      	beq.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009ea0:	2b05      	cmp	r3, #5
 8009ea2:	d825      	bhi.n	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8009eac <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eaa:	bf00      	nop
 8009eac:	08009ef9 	.word	0x08009ef9
 8009eb0:	08009ec5 	.word	0x08009ec5
 8009eb4:	08009edb 	.word	0x08009edb
 8009eb8:	08009ef9 	.word	0x08009ef9
 8009ebc:	08009ef9 	.word	0x08009ef9
 8009ec0:	08009ef9 	.word	0x08009ef9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ec8:	3308      	adds	r3, #8
 8009eca:	2101      	movs	r1, #1
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f001 fdef 	bl	800bab0 <RCCEx_PLL2_Config>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009ed8:	e00f      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ede:	3328      	adds	r3, #40	@ 0x28
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f001 fe96 	bl	800bc14 <RCCEx_PLL3_Config>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009eee:	e004      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ef6:	e000      	b.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10b      	bne.n	8009f1a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009f02:	4b6c      	ldr	r3, [pc, #432]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f06:	f023 0107 	bic.w	r1, r3, #7
 8009f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009f12:	4a68      	ldr	r2, [pc, #416]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009f14:	430b      	orrs	r3, r1
 8009f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8009f18:	e003      	b.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2a:	f002 0320 	and.w	r3, r2, #32
 8009f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009f32:	2300      	movs	r3, #0
 8009f34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	d055      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f4e:	d033      	beq.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009f54:	d82c      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f5a:	d02f      	beq.n	8009fbc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009f5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f60:	d826      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f62:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009f66:	d02b      	beq.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009f68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009f6c:	d820      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f72:	d012      	beq.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009f74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f78:	d81a      	bhi.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d022      	beq.n	8009fc4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009f7e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f82:	d115      	bne.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f88:	3308      	adds	r3, #8
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f001 fd8f 	bl	800bab0 <RCCEx_PLL2_Config>
 8009f92:	4603      	mov	r3, r0
 8009f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009f98:	e015      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f9e:	3328      	adds	r3, #40	@ 0x28
 8009fa0:	2102      	movs	r1, #2
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	f001 fe36 	bl	800bc14 <RCCEx_PLL3_Config>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009fae:	e00a      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009fb6:	e006      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009fb8:	bf00      	nop
 8009fba:	e004      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009fbc:	bf00      	nop
 8009fbe:	e002      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009fc0:	bf00      	nop
 8009fc2:	e000      	b.n	8009fc6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d10b      	bne.n	8009fe6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009fce:	4b39      	ldr	r3, [pc, #228]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009fd2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009fde:	4a35      	ldr	r2, [pc, #212]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009fe0:	430b      	orrs	r3, r1
 8009fe2:	6553      	str	r3, [r2, #84]	@ 0x54
 8009fe4:	e003      	b.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009ffe:	2300      	movs	r3, #0
 800a000:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a004:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a008:	460b      	mov	r3, r1
 800a00a:	4313      	orrs	r3, r2
 800a00c:	d058      	beq.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a012:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a016:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a01a:	d033      	beq.n	800a084 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a01c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a020:	d82c      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a026:	d02f      	beq.n	800a088 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a02c:	d826      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a02e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a032:	d02b      	beq.n	800a08c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a034:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a038:	d820      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a03a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a03e:	d012      	beq.n	800a066 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a040:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a044:	d81a      	bhi.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a046:	2b00      	cmp	r3, #0
 800a048:	d022      	beq.n	800a090 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a04a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a04e:	d115      	bne.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a054:	3308      	adds	r3, #8
 800a056:	2100      	movs	r1, #0
 800a058:	4618      	mov	r0, r3
 800a05a:	f001 fd29 	bl	800bab0 <RCCEx_PLL2_Config>
 800a05e:	4603      	mov	r3, r0
 800a060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a064:	e015      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a06a:	3328      	adds	r3, #40	@ 0x28
 800a06c:	2102      	movs	r1, #2
 800a06e:	4618      	mov	r0, r3
 800a070:	f001 fdd0 	bl	800bc14 <RCCEx_PLL3_Config>
 800a074:	4603      	mov	r3, r0
 800a076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a07a:	e00a      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a082:	e006      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a084:	bf00      	nop
 800a086:	e004      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a088:	bf00      	nop
 800a08a:	e002      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a08c:	bf00      	nop
 800a08e:	e000      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a090:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a096:	2b00      	cmp	r3, #0
 800a098:	d10e      	bne.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a09a:	4b06      	ldr	r3, [pc, #24]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a09c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a09e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a0aa:	4a02      	ldr	r2, [pc, #8]	@ (800a0b4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a0ac:	430b      	orrs	r3, r1
 800a0ae:	6593      	str	r3, [r2, #88]	@ 0x58
 800a0b0:	e006      	b.n	800a0c0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a0b2:	bf00      	nop
 800a0b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a0cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a0d6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a0da:	460b      	mov	r3, r1
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	d055      	beq.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a0e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a0e8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a0ec:	d033      	beq.n	800a156 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a0ee:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a0f2:	d82c      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a0f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0f8:	d02f      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a0fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0fe:	d826      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a100:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a104:	d02b      	beq.n	800a15e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a106:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a10a:	d820      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a10c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a110:	d012      	beq.n	800a138 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a116:	d81a      	bhi.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d022      	beq.n	800a162 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a11c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a120:	d115      	bne.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a126:	3308      	adds	r3, #8
 800a128:	2100      	movs	r1, #0
 800a12a:	4618      	mov	r0, r3
 800a12c:	f001 fcc0 	bl	800bab0 <RCCEx_PLL2_Config>
 800a130:	4603      	mov	r3, r0
 800a132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a136:	e015      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13c:	3328      	adds	r3, #40	@ 0x28
 800a13e:	2102      	movs	r1, #2
 800a140:	4618      	mov	r0, r3
 800a142:	f001 fd67 	bl	800bc14 <RCCEx_PLL3_Config>
 800a146:	4603      	mov	r3, r0
 800a148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a14c:	e00a      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a154:	e006      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a156:	bf00      	nop
 800a158:	e004      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a15a:	bf00      	nop
 800a15c:	e002      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a15e:	bf00      	nop
 800a160:	e000      	b.n	800a164 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a162:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10b      	bne.n	800a184 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a16c:	4ba1      	ldr	r3, [pc, #644]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a16e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a170:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800a174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a178:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a17c:	4a9d      	ldr	r2, [pc, #628]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a17e:	430b      	orrs	r3, r1
 800a180:	6593      	str	r3, [r2, #88]	@ 0x58
 800a182:	e003      	b.n	800a18c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a184:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a18c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a194:	f002 0308 	and.w	r3, r2, #8
 800a198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a19c:	2300      	movs	r3, #0
 800a19e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a1a2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4313      	orrs	r3, r2
 800a1aa:	d01e      	beq.n	800a1ea <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1b8:	d10c      	bne.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1be:	3328      	adds	r3, #40	@ 0x28
 800a1c0:	2102      	movs	r1, #2
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f001 fd26 	bl	800bc14 <RCCEx_PLL3_Config>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a1d4:	4b87      	ldr	r3, [pc, #540]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1d8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1e4:	4a83      	ldr	r2, [pc, #524]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a1e6:	430b      	orrs	r3, r1
 800a1e8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a1ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f2:	f002 0310 	and.w	r3, r2, #16
 800a1f6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800a200:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800a204:	460b      	mov	r3, r1
 800a206:	4313      	orrs	r3, r2
 800a208:	d01e      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a20e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a212:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a216:	d10c      	bne.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a21c:	3328      	adds	r3, #40	@ 0x28
 800a21e:	2102      	movs	r1, #2
 800a220:	4618      	mov	r0, r3
 800a222:	f001 fcf7 	bl	800bc14 <RCCEx_PLL3_Config>
 800a226:	4603      	mov	r3, r0
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d002      	beq.n	800a232 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a232:	4b70      	ldr	r3, [pc, #448]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a234:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a236:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a23e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a242:	4a6c      	ldr	r2, [pc, #432]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a244:	430b      	orrs	r3, r1
 800a246:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a250:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800a254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a258:	2300      	movs	r3, #0
 800a25a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a25e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800a262:	460b      	mov	r3, r1
 800a264:	4313      	orrs	r3, r2
 800a266:	d03e      	beq.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a26c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a270:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a274:	d022      	beq.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a276:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a27a:	d81b      	bhi.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d003      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a284:	d00b      	beq.n	800a29e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a286:	e015      	b.n	800a2b4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a28c:	3308      	adds	r3, #8
 800a28e:	2100      	movs	r1, #0
 800a290:	4618      	mov	r0, r3
 800a292:	f001 fc0d 	bl	800bab0 <RCCEx_PLL2_Config>
 800a296:	4603      	mov	r3, r0
 800a298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a29c:	e00f      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a29e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2a2:	3328      	adds	r3, #40	@ 0x28
 800a2a4:	2102      	movs	r1, #2
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f001 fcb4 	bl	800bc14 <RCCEx_PLL3_Config>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a2b2:	e004      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a2ba:	e000      	b.n	800a2be <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a2bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d10b      	bne.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a2c6:	4b4b      	ldr	r3, [pc, #300]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2ca:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800a2ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a2d6:	4a47      	ldr	r2, [pc, #284]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a2d8:	430b      	orrs	r3, r1
 800a2da:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2dc:	e003      	b.n	800a2e6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800a2f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a2f8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	4313      	orrs	r3, r2
 800a300:	d03b      	beq.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a30a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a30e:	d01f      	beq.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a310:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a314:	d818      	bhi.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a31a:	d003      	beq.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a31c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a320:	d007      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a322:	e011      	b.n	800a348 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a324:	4b33      	ldr	r3, [pc, #204]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a328:	4a32      	ldr	r2, [pc, #200]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a32a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a32e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a330:	e00f      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a336:	3328      	adds	r3, #40	@ 0x28
 800a338:	2101      	movs	r1, #1
 800a33a:	4618      	mov	r0, r3
 800a33c:	f001 fc6a 	bl	800bc14 <RCCEx_PLL3_Config>
 800a340:	4603      	mov	r3, r0
 800a342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a346:	e004      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a34e:	e000      	b.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a350:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10b      	bne.n	800a372 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a35a:	4b26      	ldr	r3, [pc, #152]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a35c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a35e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800a362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a36a:	4a22      	ldr	r2, [pc, #136]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a36c:	430b      	orrs	r3, r1
 800a36e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a370:	e003      	b.n	800a37a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a372:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a376:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a37a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800a386:	673b      	str	r3, [r7, #112]	@ 0x70
 800a388:	2300      	movs	r3, #0
 800a38a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a38c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800a390:	460b      	mov	r3, r1
 800a392:	4313      	orrs	r3, r2
 800a394:	d034      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a39a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d003      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a3a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a3a4:	d007      	beq.n	800a3b6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a3a6:	e011      	b.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3a8:	4b12      	ldr	r3, [pc, #72]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ac:	4a11      	ldr	r2, [pc, #68]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a3b4:	e00e      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3ba:	3308      	adds	r3, #8
 800a3bc:	2102      	movs	r1, #2
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f001 fb76 	bl	800bab0 <RCCEx_PLL2_Config>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a3ca:	e003      	b.n	800a3d4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a3d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10d      	bne.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a3dc:	4b05      	ldr	r3, [pc, #20]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3e0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a3e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a3e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3ea:	4a02      	ldr	r2, [pc, #8]	@ (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a3ec:	430b      	orrs	r3, r1
 800a3ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a3f0:	e006      	b.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a3f2:	bf00      	nop
 800a3f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a3fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a408:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800a40c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a40e:	2300      	movs	r3, #0
 800a410:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a412:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800a416:	460b      	mov	r3, r1
 800a418:	4313      	orrs	r3, r2
 800a41a:	d00c      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a41c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a420:	3328      	adds	r3, #40	@ 0x28
 800a422:	2102      	movs	r1, #2
 800a424:	4618      	mov	r0, r3
 800a426:	f001 fbf5 	bl	800bc14 <RCCEx_PLL3_Config>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a430:	2301      	movs	r3, #1
 800a432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800a442:	663b      	str	r3, [r7, #96]	@ 0x60
 800a444:	2300      	movs	r3, #0
 800a446:	667b      	str	r3, [r7, #100]	@ 0x64
 800a448:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800a44c:	460b      	mov	r3, r1
 800a44e:	4313      	orrs	r3, r2
 800a450:	d038      	beq.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a456:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a45a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a45e:	d018      	beq.n	800a492 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a460:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a464:	d811      	bhi.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a466:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a46a:	d014      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a46c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a470:	d80b      	bhi.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d011      	beq.n	800a49a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a476:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a47a:	d106      	bne.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a47c:	4bc3      	ldr	r3, [pc, #780]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a47e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a480:	4ac2      	ldr	r2, [pc, #776]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a488:	e008      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a490:	e004      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a492:	bf00      	nop
 800a494:	e002      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a496:	bf00      	nop
 800a498:	e000      	b.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a49a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a49c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d10b      	bne.n	800a4bc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a4a4:	4bb9      	ldr	r3, [pc, #740]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4a8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4b4:	4ab5      	ldr	r2, [pc, #724]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4b6:	430b      	orrs	r3, r1
 800a4b8:	6553      	str	r3, [r2, #84]	@ 0x54
 800a4ba:	e003      	b.n	800a4c4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a4c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a4c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a4d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a4d6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	d009      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a4e0:	4baa      	ldr	r3, [pc, #680]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4e4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a4ee:	4aa7      	ldr	r2, [pc, #668]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a4f0:	430b      	orrs	r3, r1
 800a4f2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a500:	653b      	str	r3, [r7, #80]	@ 0x50
 800a502:	2300      	movs	r3, #0
 800a504:	657b      	str	r3, [r7, #84]	@ 0x54
 800a506:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a50a:	460b      	mov	r3, r1
 800a50c:	4313      	orrs	r3, r2
 800a50e:	d00a      	beq.n	800a526 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a510:	4b9e      	ldr	r3, [pc, #632]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a512:	691b      	ldr	r3, [r3, #16]
 800a514:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a51c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a520:	4a9a      	ldr	r2, [pc, #616]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a522:	430b      	orrs	r3, r1
 800a524:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a526:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a532:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a534:	2300      	movs	r3, #0
 800a536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a538:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a53c:	460b      	mov	r3, r1
 800a53e:	4313      	orrs	r3, r2
 800a540:	d009      	beq.n	800a556 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a542:	4b92      	ldr	r3, [pc, #584]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a546:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a54e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a550:	4a8e      	ldr	r2, [pc, #568]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a552:	430b      	orrs	r3, r1
 800a554:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a562:	643b      	str	r3, [r7, #64]	@ 0x40
 800a564:	2300      	movs	r3, #0
 800a566:	647b      	str	r3, [r7, #68]	@ 0x44
 800a568:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a56c:	460b      	mov	r3, r1
 800a56e:	4313      	orrs	r3, r2
 800a570:	d00e      	beq.n	800a590 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a572:	4b86      	ldr	r3, [pc, #536]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	4a85      	ldr	r2, [pc, #532]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a578:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a57c:	6113      	str	r3, [r2, #16]
 800a57e:	4b83      	ldr	r3, [pc, #524]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a580:	6919      	ldr	r1, [r3, #16]
 800a582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a586:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a58a:	4a80      	ldr	r2, [pc, #512]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a58c:	430b      	orrs	r3, r1
 800a58e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a59c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a59e:	2300      	movs	r3, #0
 800a5a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5a2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	d009      	beq.n	800a5c0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a5ac:	4b77      	ldr	r3, [pc, #476]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a5ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a5b0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a5b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ba:	4a74      	ldr	r2, [pc, #464]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a5bc:	430b      	orrs	r3, r1
 800a5be:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a5cc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a5d2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	d00a      	beq.n	800a5f2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a5dc:	4b6b      	ldr	r3, [pc, #428]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a5de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5e0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a5e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a5ec:	4a67      	ldr	r2, [pc, #412]	@ (800a78c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a5ee:	430b      	orrs	r3, r1
 800a5f0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a5f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a604:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a608:	460b      	mov	r3, r1
 800a60a:	4313      	orrs	r3, r2
 800a60c:	d011      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a60e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a612:	3308      	adds	r3, #8
 800a614:	2100      	movs	r1, #0
 800a616:	4618      	mov	r0, r3
 800a618:	f001 fa4a 	bl	800bab0 <RCCEx_PLL2_Config>
 800a61c:	4603      	mov	r3, r0
 800a61e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a62a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a62e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63a:	2100      	movs	r1, #0
 800a63c:	6239      	str	r1, [r7, #32]
 800a63e:	f003 0302 	and.w	r3, r3, #2
 800a642:	627b      	str	r3, [r7, #36]	@ 0x24
 800a644:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a648:	460b      	mov	r3, r1
 800a64a:	4313      	orrs	r3, r2
 800a64c:	d011      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a652:	3308      	adds	r3, #8
 800a654:	2101      	movs	r1, #1
 800a656:	4618      	mov	r0, r3
 800a658:	f001 fa2a 	bl	800bab0 <RCCEx_PLL2_Config>
 800a65c:	4603      	mov	r3, r0
 800a65e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a666:	2b00      	cmp	r3, #0
 800a668:	d003      	beq.n	800a672 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a66a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a66e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67a:	2100      	movs	r1, #0
 800a67c:	61b9      	str	r1, [r7, #24]
 800a67e:	f003 0304 	and.w	r3, r3, #4
 800a682:	61fb      	str	r3, [r7, #28]
 800a684:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a688:	460b      	mov	r3, r1
 800a68a:	4313      	orrs	r3, r2
 800a68c:	d011      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a68e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a692:	3308      	adds	r3, #8
 800a694:	2102      	movs	r1, #2
 800a696:	4618      	mov	r0, r3
 800a698:	f001 fa0a 	bl	800bab0 <RCCEx_PLL2_Config>
 800a69c:	4603      	mov	r3, r0
 800a69e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a6a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d003      	beq.n	800a6b2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	6139      	str	r1, [r7, #16]
 800a6be:	f003 0308 	and.w	r3, r3, #8
 800a6c2:	617b      	str	r3, [r7, #20]
 800a6c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	d011      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a6ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6d2:	3328      	adds	r3, #40	@ 0x28
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f001 fa9c 	bl	800bc14 <RCCEx_PLL3_Config>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a6e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d003      	beq.n	800a6f2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a6ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a6f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	f003 0310 	and.w	r3, r3, #16
 800a702:	60fb      	str	r3, [r7, #12]
 800a704:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a708:	460b      	mov	r3, r1
 800a70a:	4313      	orrs	r3, r2
 800a70c:	d011      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a712:	3328      	adds	r3, #40	@ 0x28
 800a714:	2101      	movs	r1, #1
 800a716:	4618      	mov	r0, r3
 800a718:	f001 fa7c 	bl	800bc14 <RCCEx_PLL3_Config>
 800a71c:	4603      	mov	r3, r0
 800a71e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a726:	2b00      	cmp	r3, #0
 800a728:	d003      	beq.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a72a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a72e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	2100      	movs	r1, #0
 800a73c:	6039      	str	r1, [r7, #0]
 800a73e:	f003 0320 	and.w	r3, r3, #32
 800a742:	607b      	str	r3, [r7, #4]
 800a744:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a748:	460b      	mov	r3, r1
 800a74a:	4313      	orrs	r3, r2
 800a74c:	d011      	beq.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a752:	3328      	adds	r3, #40	@ 0x28
 800a754:	2102      	movs	r1, #2
 800a756:	4618      	mov	r0, r3
 800a758:	f001 fa5c 	bl	800bc14 <RCCEx_PLL3_Config>
 800a75c:	4603      	mov	r3, r0
 800a75e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a766:	2b00      	cmp	r3, #0
 800a768:	d003      	beq.n	800a772 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a76a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a76e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a772:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a776:	2b00      	cmp	r3, #0
 800a778:	d101      	bne.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	e000      	b.n	800a780 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
}
 800a780:	4618      	mov	r0, r3
 800a782:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a786:	46bd      	mov	sp, r7
 800a788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a78c:	58024400 	.word	0x58024400

0800a790 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b090      	sub	sp, #64	@ 0x40
 800a794:	af00      	add	r7, sp, #0
 800a796:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a79a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a79e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a7a2:	430b      	orrs	r3, r1
 800a7a4:	f040 8094 	bne.w	800a8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a7a8:	4b9e      	ldr	r3, [pc, #632]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7ac:	f003 0307 	and.w	r3, r3, #7
 800a7b0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	f200 8087 	bhi.w	800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a7ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a7bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c0:	0800a7d5 	.word	0x0800a7d5
 800a7c4:	0800a7fd 	.word	0x0800a7fd
 800a7c8:	0800a825 	.word	0x0800a825
 800a7cc:	0800a8c1 	.word	0x0800a8c1
 800a7d0:	0800a84d 	.word	0x0800a84d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a7d4:	4b93      	ldr	r3, [pc, #588]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a7dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7e0:	d108      	bne.n	800a7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a7e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f001 f810 	bl	800b80c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7f0:	f000 bd45 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7f8:	f000 bd41 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7fc:	4b89      	ldr	r3, [pc, #548]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a804:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a808:	d108      	bne.n	800a81c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a80a:	f107 0318 	add.w	r3, r7, #24
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 fd54 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a818:	f000 bd31 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a820:	f000 bd2d 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a824:	4b7f      	ldr	r3, [pc, #508]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a82c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a830:	d108      	bne.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a832:	f107 030c 	add.w	r3, r7, #12
 800a836:	4618      	mov	r0, r3
 800a838:	f000 fe94 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a840:	f000 bd1d 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a844:	2300      	movs	r3, #0
 800a846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a848:	f000 bd19 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a84c:	4b75      	ldr	r3, [pc, #468]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a84e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a850:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a854:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a856:	4b73      	ldr	r3, [pc, #460]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 0304 	and.w	r3, r3, #4
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d10c      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a862:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a864:	2b00      	cmp	r3, #0
 800a866:	d109      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a868:	4b6e      	ldr	r3, [pc, #440]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	08db      	lsrs	r3, r3, #3
 800a86e:	f003 0303 	and.w	r3, r3, #3
 800a872:	4a6d      	ldr	r2, [pc, #436]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a874:	fa22 f303 	lsr.w	r3, r2, r3
 800a878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a87a:	e01f      	b.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a87c:	4b69      	ldr	r3, [pc, #420]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a888:	d106      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a88a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a88c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a890:	d102      	bne.n	800a898 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a892:	4b66      	ldr	r3, [pc, #408]	@ (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a894:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a896:	e011      	b.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a898:	4b62      	ldr	r3, [pc, #392]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8a4:	d106      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a8a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ac:	d102      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8ae:	4b60      	ldr	r3, [pc, #384]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8b2:	e003      	b.n	800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a8b8:	f000 bce1 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8bc:	f000 bcdf 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8c0:	4b5c      	ldr	r3, [pc, #368]	@ (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c4:	f000 bcdb 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8cc:	f000 bcd7 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a8d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d4:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	f040 80ad 	bne.w	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a8de:	4b51      	ldr	r3, [pc, #324]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a8e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8e2:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a8e6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a8e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8ee:	d056      	beq.n	800a99e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8f6:	f200 8090 	bhi.w	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a8fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8fc:	2bc0      	cmp	r3, #192	@ 0xc0
 800a8fe:	f000 8088 	beq.w	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a904:	2bc0      	cmp	r3, #192	@ 0xc0
 800a906:	f200 8088 	bhi.w	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a90a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a90c:	2b80      	cmp	r3, #128	@ 0x80
 800a90e:	d032      	beq.n	800a976 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a910:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a912:	2b80      	cmp	r3, #128	@ 0x80
 800a914:	f200 8081 	bhi.w	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d003      	beq.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a920:	2b40      	cmp	r3, #64	@ 0x40
 800a922:	d014      	beq.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a924:	e079      	b.n	800aa1a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a926:	4b3f      	ldr	r3, [pc, #252]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a92e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a932:	d108      	bne.n	800a946 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a934:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a938:	4618      	mov	r0, r3
 800a93a:	f000 ff67 	bl	800b80c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a93e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a940:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a942:	f000 bc9c 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a946:	2300      	movs	r3, #0
 800a948:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a94a:	f000 bc98 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a94e:	4b35      	ldr	r3, [pc, #212]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a95a:	d108      	bne.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a95c:	f107 0318 	add.w	r3, r7, #24
 800a960:	4618      	mov	r0, r3
 800a962:	f000 fcab 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a966:	69bb      	ldr	r3, [r7, #24]
 800a968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a96a:	f000 bc88 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a96e:	2300      	movs	r3, #0
 800a970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a972:	f000 bc84 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a976:	4b2b      	ldr	r3, [pc, #172]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a97e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a982:	d108      	bne.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a984:	f107 030c 	add.w	r3, r7, #12
 800a988:	4618      	mov	r0, r3
 800a98a:	f000 fdeb 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a992:	f000 bc74 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a996:	2300      	movs	r3, #0
 800a998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a99a:	f000 bc70 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a99e:	4b21      	ldr	r3, [pc, #132]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a9a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a9a6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9a8:	4b1e      	ldr	r3, [pc, #120]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0304 	and.w	r3, r3, #4
 800a9b0:	2b04      	cmp	r3, #4
 800a9b2:	d10c      	bne.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a9b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d109      	bne.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9ba:	4b1a      	ldr	r3, [pc, #104]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	08db      	lsrs	r3, r3, #3
 800a9c0:	f003 0303 	and.w	r3, r3, #3
 800a9c4:	4a18      	ldr	r2, [pc, #96]	@ (800aa28 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9cc:	e01f      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9ce:	4b15      	ldr	r3, [pc, #84]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a9da:	d106      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a9e2:	d102      	bne.n	800a9ea <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a9e4:	4b11      	ldr	r3, [pc, #68]	@ (800aa2c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9e8:	e011      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a9ea:	4b0e      	ldr	r3, [pc, #56]	@ (800aa24 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a9f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9f6:	d106      	bne.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a9f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a9fe:	d102      	bne.n	800aa06 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa00:	4b0b      	ldr	r3, [pc, #44]	@ (800aa30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aa02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aa04:	e003      	b.n	800aa0e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa06:	2300      	movs	r3, #0
 800aa08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800aa0a:	f000 bc38 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa0e:	f000 bc36 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa12:	4b08      	ldr	r3, [pc, #32]	@ (800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aa14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa16:	f000 bc32 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa1e:	f000 bc2e 	b.w	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa22:	bf00      	nop
 800aa24:	58024400 	.word	0x58024400
 800aa28:	03d09000 	.word	0x03d09000
 800aa2c:	003d0900 	.word	0x003d0900
 800aa30:	016e3600 	.word	0x016e3600
 800aa34:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aa38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa3c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800aa40:	430b      	orrs	r3, r1
 800aa42:	f040 809c 	bne.w	800ab7e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aa46:	4b9e      	ldr	r3, [pc, #632]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa4a:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800aa4e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800aa50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa56:	d054      	beq.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800aa58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800aa5e:	f200 808b 	bhi.w	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa64:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa68:	f000 8083 	beq.w	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800aa6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa6e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800aa72:	f200 8081 	bhi.w	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa7c:	d02f      	beq.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800aa7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa84:	d878      	bhi.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800aa86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d004      	beq.n	800aa96 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa92:	d012      	beq.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800aa94:	e070      	b.n	800ab78 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aa96:	4b8a      	ldr	r3, [pc, #552]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aa9e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aaa2:	d107      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aaa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f000 feaf 	bl	800b80c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aab2:	e3e4      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab8:	e3e1      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aaba:	4b81      	ldr	r3, [pc, #516]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aac6:	d107      	bne.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac8:	f107 0318 	add.w	r3, r7, #24
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 fbf5 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aad2:	69bb      	ldr	r3, [r7, #24]
 800aad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aad6:	e3d2      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aadc:	e3cf      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aade:	4b78      	ldr	r3, [pc, #480]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aaea:	d107      	bne.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaec:	f107 030c 	add.w	r3, r7, #12
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 fd37 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aafa:	e3c0      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab00:	e3bd      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab02:	4b6f      	ldr	r3, [pc, #444]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab06:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab0a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab0c:	4b6c      	ldr	r3, [pc, #432]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f003 0304 	and.w	r3, r3, #4
 800ab14:	2b04      	cmp	r3, #4
 800ab16:	d10c      	bne.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800ab18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d109      	bne.n	800ab32 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab1e:	4b68      	ldr	r3, [pc, #416]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	08db      	lsrs	r3, r3, #3
 800ab24:	f003 0303 	and.w	r3, r3, #3
 800ab28:	4a66      	ldr	r2, [pc, #408]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ab2a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab30:	e01e      	b.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab32:	4b63      	ldr	r3, [pc, #396]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab3e:	d106      	bne.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ab40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab46:	d102      	bne.n	800ab4e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab48:	4b5f      	ldr	r3, [pc, #380]	@ (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ab4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab4c:	e010      	b.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab4e:	4b5c      	ldr	r3, [pc, #368]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ab56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab5a:	d106      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800ab5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab62:	d102      	bne.n	800ab6a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ab64:	4b59      	ldr	r3, [pc, #356]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800ab66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab68:	e002      	b.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ab6e:	e386      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab70:	e385      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ab72:	4b57      	ldr	r3, [pc, #348]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800ab74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab76:	e382      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab7c:	e37f      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800ab7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab82:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800ab86:	430b      	orrs	r3, r1
 800ab88:	f040 80a7 	bne.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800ab8c:	4b4c      	ldr	r3, [pc, #304]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ab8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab90:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800ab94:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ab96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ab9c:	d055      	beq.n	800ac4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aba4:	f200 8096 	bhi.w	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800aba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abaa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800abae:	f000 8084 	beq.w	800acba <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800abb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800abb8:	f200 808c 	bhi.w	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800abbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abc2:	d030      	beq.n	800ac26 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800abc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abca:	f200 8083 	bhi.w	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d004      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800abd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abda:	d012      	beq.n	800ac02 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800abdc:	e07a      	b.n	800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abde:	4b38      	ldr	r3, [pc, #224]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abe6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abea:	d107      	bne.n	800abfc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fe0b 	bl	800b80c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800abf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abfa:	e340      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac00:	e33d      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac02:	4b2f      	ldr	r3, [pc, #188]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac0a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac0e:	d107      	bne.n	800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac10:	f107 0318 	add.w	r3, r7, #24
 800ac14:	4618      	mov	r0, r3
 800ac16:	f000 fb51 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac1a:	69bb      	ldr	r3, [r7, #24]
 800ac1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac1e:	e32e      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac24:	e32b      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac26:	4b26      	ldr	r3, [pc, #152]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ac2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac32:	d107      	bne.n	800ac44 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac34:	f107 030c 	add.w	r3, r7, #12
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f000 fc93 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac42:	e31c      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac44:	2300      	movs	r3, #0
 800ac46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac48:	e319      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ac4a:	4b1d      	ldr	r3, [pc, #116]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ac4e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ac52:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac54:	4b1a      	ldr	r3, [pc, #104]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	d10c      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800ac60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d109      	bne.n	800ac7a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac66:	4b16      	ldr	r3, [pc, #88]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	08db      	lsrs	r3, r3, #3
 800ac6c:	f003 0303 	and.w	r3, r3, #3
 800ac70:	4a14      	ldr	r2, [pc, #80]	@ (800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800ac72:	fa22 f303 	lsr.w	r3, r2, r3
 800ac76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac78:	e01e      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac7a:	4b11      	ldr	r3, [pc, #68]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac86:	d106      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800ac88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac8e:	d102      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac90:	4b0d      	ldr	r3, [pc, #52]	@ (800acc8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800ac92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ac94:	e010      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac96:	4b0a      	ldr	r3, [pc, #40]	@ (800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac9e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aca2:	d106      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800aca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aca6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acaa:	d102      	bne.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800acac:	4b07      	ldr	r3, [pc, #28]	@ (800accc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800acae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acb0:	e002      	b.n	800acb8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800acb2:	2300      	movs	r3, #0
 800acb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800acb6:	e2e2      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acb8:	e2e1      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800acba:	4b05      	ldr	r3, [pc, #20]	@ (800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800acbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acbe:	e2de      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800acc0:	58024400 	.word	0x58024400
 800acc4:	03d09000 	.word	0x03d09000
 800acc8:	003d0900 	.word	0x003d0900
 800accc:	016e3600 	.word	0x016e3600
 800acd0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acd8:	e2d1      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800acda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acde:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ace2:	430b      	orrs	r3, r1
 800ace4:	f040 809c 	bne.w	800ae20 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ace8:	4b93      	ldr	r3, [pc, #588]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800acea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acec:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800acf0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800acf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acf8:	d054      	beq.n	800ada4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800acfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ad00:	f200 808b 	bhi.w	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ad04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad0a:	f000 8083 	beq.w	800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad10:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ad14:	f200 8081 	bhi.w	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ad18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad1e:	d02f      	beq.n	800ad80 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800ad20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad26:	d878      	bhi.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800ad28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d004      	beq.n	800ad38 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad34:	d012      	beq.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800ad36:	e070      	b.n	800ae1a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad38:	4b7f      	ldr	r3, [pc, #508]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ad44:	d107      	bne.n	800ad56 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fd5e 	bl	800b80c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad54:	e293      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad56:	2300      	movs	r3, #0
 800ad58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad5a:	e290      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad5c:	4b76      	ldr	r3, [pc, #472]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ad64:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ad68:	d107      	bne.n	800ad7a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad6a:	f107 0318 	add.w	r3, r7, #24
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f000 faa4 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad74:	69bb      	ldr	r3, [r7, #24]
 800ad76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad78:	e281      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad7e:	e27e      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad80:	4b6d      	ldr	r3, [pc, #436]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ad88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad8c:	d107      	bne.n	800ad9e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad8e:	f107 030c 	add.w	r3, r7, #12
 800ad92:	4618      	mov	r0, r3
 800ad94:	f000 fbe6 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad9c:	e26f      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ada2:	e26c      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ada4:	4b64      	ldr	r3, [pc, #400]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ada6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ada8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800adac:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adae:	4b62      	ldr	r3, [pc, #392]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f003 0304 	and.w	r3, r3, #4
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d10c      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800adba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d109      	bne.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800adc0:	4b5d      	ldr	r3, [pc, #372]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	08db      	lsrs	r3, r3, #3
 800adc6:	f003 0303 	and.w	r3, r3, #3
 800adca:	4a5c      	ldr	r2, [pc, #368]	@ (800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800adcc:	fa22 f303 	lsr.w	r3, r2, r3
 800add0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800add2:	e01e      	b.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800add4:	4b58      	ldr	r3, [pc, #352]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800addc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ade0:	d106      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ade2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ade8:	d102      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800adea:	4b55      	ldr	r3, [pc, #340]	@ (800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800adec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adee:	e010      	b.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800adf0:	4b51      	ldr	r3, [pc, #324]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800adfc:	d106      	bne.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800adfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ae04:	d102      	bne.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ae06:	4b4f      	ldr	r3, [pc, #316]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ae08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae0a:	e002      	b.n	800ae12 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ae10:	e235      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ae12:	e234      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ae14:	4b4c      	ldr	r3, [pc, #304]	@ (800af48 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ae16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae18:	e231      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae1e:	e22e      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ae20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae24:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ae28:	430b      	orrs	r3, r1
 800ae2a:	f040 808f 	bne.w	800af4c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ae2e:	4b42      	ldr	r3, [pc, #264]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae32:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800ae36:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800ae38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae3e:	d06b      	beq.n	800af18 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ae40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae42:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ae46:	d874      	bhi.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae4e:	d056      	beq.n	800aefe <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800ae56:	d86c      	bhi.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae5e:	d03b      	beq.n	800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ae60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ae66:	d864      	bhi.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae6e:	d021      	beq.n	800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ae70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ae76:	d85c      	bhi.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ae78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d004      	beq.n	800ae88 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ae7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae84:	d004      	beq.n	800ae90 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ae86:	e054      	b.n	800af32 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800ae88:	f7fe fa4c 	bl	8009324 <HAL_RCC_GetPCLK1Freq>
 800ae8c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ae8e:	e1f6      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae90:	4b29      	ldr	r3, [pc, #164]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ae98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ae9c:	d107      	bne.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae9e:	f107 0318 	add.w	r3, r7, #24
 800aea2:	4618      	mov	r0, r3
 800aea4:	f000 fa0a 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aeac:	e1e7      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aeb2:	e1e4      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aeb4:	4b20      	ldr	r3, [pc, #128]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aebc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aec0:	d107      	bne.n	800aed2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aec2:	f107 030c 	add.w	r3, r7, #12
 800aec6:	4618      	mov	r0, r3
 800aec8:	f000 fb4c 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aed0:	e1d5      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aed6:	e1d2      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aed8:	4b17      	ldr	r3, [pc, #92]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b04      	cmp	r3, #4
 800aee2:	d109      	bne.n	800aef8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aee4:	4b14      	ldr	r3, [pc, #80]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	08db      	lsrs	r3, r3, #3
 800aeea:	f003 0303 	and.w	r3, r3, #3
 800aeee:	4a13      	ldr	r2, [pc, #76]	@ (800af3c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aef0:	fa22 f303 	lsr.w	r3, r2, r3
 800aef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aef6:	e1c2      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aefc:	e1bf      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aefe:	4b0e      	ldr	r3, [pc, #56]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af0a:	d102      	bne.n	800af12 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800af0c:	4b0c      	ldr	r3, [pc, #48]	@ (800af40 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800af0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af10:	e1b5      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af12:	2300      	movs	r3, #0
 800af14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af16:	e1b2      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800af18:	4b07      	ldr	r3, [pc, #28]	@ (800af38 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af24:	d102      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800af26:	4b07      	ldr	r3, [pc, #28]	@ (800af44 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800af28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af2a:	e1a8      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af2c:	2300      	movs	r3, #0
 800af2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af30:	e1a5      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800af36:	e1a2      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800af38:	58024400 	.word	0x58024400
 800af3c:	03d09000 	.word	0x03d09000
 800af40:	003d0900 	.word	0x003d0900
 800af44:	016e3600 	.word	0x016e3600
 800af48:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800af4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af50:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800af54:	430b      	orrs	r3, r1
 800af56:	d173      	bne.n	800b040 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800af58:	4b9c      	ldr	r3, [pc, #624]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800af5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800af60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800af62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af68:	d02f      	beq.n	800afca <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800af6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af70:	d863      	bhi.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800af72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af74:	2b00      	cmp	r3, #0
 800af76:	d004      	beq.n	800af82 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800af78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af7e:	d012      	beq.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800af80:	e05b      	b.n	800b03a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af82:	4b92      	ldr	r3, [pc, #584]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800af8e:	d107      	bne.n	800afa0 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af90:	f107 0318 	add.w	r3, r7, #24
 800af94:	4618      	mov	r0, r3
 800af96:	f000 f991 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af9e:	e16e      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afa4:	e16b      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800afa6:	4b89      	ldr	r3, [pc, #548]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800afae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800afb2:	d107      	bne.n	800afc4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800afb4:	f107 030c 	add.w	r3, r7, #12
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 fad3 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afc2:	e15c      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afc4:	2300      	movs	r3, #0
 800afc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800afc8:	e159      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afca:	4b80      	ldr	r3, [pc, #512]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800afce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800afd2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afd4:	4b7d      	ldr	r3, [pc, #500]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f003 0304 	and.w	r3, r3, #4
 800afdc:	2b04      	cmp	r3, #4
 800afde:	d10c      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800afe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d109      	bne.n	800affa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afe6:	4b79      	ldr	r3, [pc, #484]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	08db      	lsrs	r3, r3, #3
 800afec:	f003 0303 	and.w	r3, r3, #3
 800aff0:	4a77      	ldr	r2, [pc, #476]	@ (800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aff2:	fa22 f303 	lsr.w	r3, r2, r3
 800aff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aff8:	e01e      	b.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800affa:	4b74      	ldr	r3, [pc, #464]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b006:	d106      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b00a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b00e:	d102      	bne.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b010:	4b70      	ldr	r3, [pc, #448]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b012:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b014:	e010      	b.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b016:	4b6d      	ldr	r3, [pc, #436]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b01e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b022:	d106      	bne.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b026:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b02a:	d102      	bne.n	800b032 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b02c:	4b6a      	ldr	r3, [pc, #424]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b02e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b030:	e002      	b.n	800b038 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b036:	e122      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b038:	e121      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b03e:	e11e      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b044:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b048:	430b      	orrs	r3, r1
 800b04a:	d133      	bne.n	800b0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b04c:	4b5f      	ldr	r3, [pc, #380]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b04e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b050:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b054:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d004      	beq.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b05e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b062:	d012      	beq.n	800b08a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b064:	e023      	b.n	800b0ae <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b066:	4b59      	ldr	r3, [pc, #356]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b06e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b072:	d107      	bne.n	800b084 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 fbc7 	bl	800b80c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b07e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b082:	e0fc      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b084:	2300      	movs	r3, #0
 800b086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b088:	e0f9      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b08a:	4b50      	ldr	r3, [pc, #320]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b096:	d107      	bne.n	800b0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b098:	f107 0318 	add.w	r3, r7, #24
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 f90d 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0a6:	e0ea      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0ac:	e0e7      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0b2:	e0e4      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b0b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0b8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b0bc:	430b      	orrs	r3, r1
 800b0be:	f040 808d 	bne.w	800b1dc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b0c2:	4b42      	ldr	r3, [pc, #264]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b0c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0c6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b0ca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0d2:	d06b      	beq.n	800b1ac <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b0da:	d874      	bhi.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0e2:	d056      	beq.n	800b192 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b0ea:	d86c      	bhi.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b0f2:	d03b      	beq.n	800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b0f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b0fa:	d864      	bhi.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b102:	d021      	beq.n	800b148 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b106:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b10a:	d85c      	bhi.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d004      	beq.n	800b11c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b114:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b118:	d004      	beq.n	800b124 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b11a:	e054      	b.n	800b1c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b11c:	f000 f8b8 	bl	800b290 <HAL_RCCEx_GetD3PCLK1Freq>
 800b120:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b122:	e0ac      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b124:	4b29      	ldr	r3, [pc, #164]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b12c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b130:	d107      	bne.n	800b142 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b132:	f107 0318 	add.w	r3, r7, #24
 800b136:	4618      	mov	r0, r3
 800b138:	f000 f8c0 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b140:	e09d      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b142:	2300      	movs	r3, #0
 800b144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b146:	e09a      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b148:	4b20      	ldr	r3, [pc, #128]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b154:	d107      	bne.n	800b166 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b156:	f107 030c 	add.w	r3, r7, #12
 800b15a:	4618      	mov	r0, r3
 800b15c:	f000 fa02 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b164:	e08b      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b16a:	e088      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b16c:	4b17      	ldr	r3, [pc, #92]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f003 0304 	and.w	r3, r3, #4
 800b174:	2b04      	cmp	r3, #4
 800b176:	d109      	bne.n	800b18c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b178:	4b14      	ldr	r3, [pc, #80]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	08db      	lsrs	r3, r3, #3
 800b17e:	f003 0303 	and.w	r3, r3, #3
 800b182:	4a13      	ldr	r2, [pc, #76]	@ (800b1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b184:	fa22 f303 	lsr.w	r3, r2, r3
 800b188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b18a:	e078      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b190:	e075      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b192:	4b0e      	ldr	r3, [pc, #56]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b19a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b19e:	d102      	bne.n	800b1a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b1a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b1d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1a4:	e06b      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1aa:	e068      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b1ac:	4b07      	ldr	r3, [pc, #28]	@ (800b1cc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b1b8:	d102      	bne.n	800b1c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b1ba:	4b07      	ldr	r3, [pc, #28]	@ (800b1d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b1bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1be:	e05e      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1c4:	e05b      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1ca:	e058      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b1cc:	58024400 	.word	0x58024400
 800b1d0:	03d09000 	.word	0x03d09000
 800b1d4:	003d0900 	.word	0x003d0900
 800b1d8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b1dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1e0:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b1e4:	430b      	orrs	r3, r1
 800b1e6:	d148      	bne.n	800b27a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b1e8:	4b27      	ldr	r3, [pc, #156]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b1ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b1f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b1f8:	d02a      	beq.n	800b250 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b200:	d838      	bhi.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b204:	2b00      	cmp	r3, #0
 800b206:	d004      	beq.n	800b212 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b20a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b20e:	d00d      	beq.n	800b22c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b210:	e030      	b.n	800b274 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b212:	4b1d      	ldr	r3, [pc, #116]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b21a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b21e:	d102      	bne.n	800b226 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b220:	4b1a      	ldr	r3, [pc, #104]	@ (800b28c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b222:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b224:	e02b      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b226:	2300      	movs	r3, #0
 800b228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b22a:	e028      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b22c:	4b16      	ldr	r3, [pc, #88]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b234:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b238:	d107      	bne.n	800b24a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b23a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b23e:	4618      	mov	r0, r3
 800b240:	f000 fae4 	bl	800b80c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b248:	e019      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b24a:	2300      	movs	r3, #0
 800b24c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b24e:	e016      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b250:	4b0d      	ldr	r3, [pc, #52]	@ (800b288 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b258:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b25c:	d107      	bne.n	800b26e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b25e:	f107 0318 	add.w	r3, r7, #24
 800b262:	4618      	mov	r0, r3
 800b264:	f000 f82a 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b26c:	e007      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b26e:	2300      	movs	r3, #0
 800b270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b272:	e004      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b278:	e001      	b.n	800b27e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800b27e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b280:	4618      	mov	r0, r3
 800b282:	3740      	adds	r7, #64	@ 0x40
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	58024400 	.word	0x58024400
 800b28c:	016e3600 	.word	0x016e3600

0800b290 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b294:	f7fe f816 	bl	80092c4 <HAL_RCC_GetHCLKFreq>
 800b298:	4602      	mov	r2, r0
 800b29a:	4b06      	ldr	r3, [pc, #24]	@ (800b2b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b29c:	6a1b      	ldr	r3, [r3, #32]
 800b29e:	091b      	lsrs	r3, r3, #4
 800b2a0:	f003 0307 	and.w	r3, r3, #7
 800b2a4:	4904      	ldr	r1, [pc, #16]	@ (800b2b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b2a6:	5ccb      	ldrb	r3, [r1, r3]
 800b2a8:	f003 031f 	and.w	r3, r3, #31
 800b2ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	58024400 	.word	0x58024400
 800b2b8:	0800dc8c 	.word	0x0800dc8c

0800b2bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b089      	sub	sp, #36	@ 0x24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b2c4:	4ba1      	ldr	r3, [pc, #644]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c8:	f003 0303 	and.w	r3, r3, #3
 800b2cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b2ce:	4b9f      	ldr	r3, [pc, #636]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2d2:	0b1b      	lsrs	r3, r3, #12
 800b2d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b2d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b2da:	4b9c      	ldr	r3, [pc, #624]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2de:	091b      	lsrs	r3, r3, #4
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b2e6:	4b99      	ldr	r3, [pc, #612]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b2ea:	08db      	lsrs	r3, r3, #3
 800b2ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b2f0:	693a      	ldr	r2, [r7, #16]
 800b2f2:	fb02 f303 	mul.w	r3, r2, r3
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	2b00      	cmp	r3, #0
 800b306:	f000 8111 	beq.w	800b52c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	2b02      	cmp	r3, #2
 800b30e:	f000 8083 	beq.w	800b418 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b312:	69bb      	ldr	r3, [r7, #24]
 800b314:	2b02      	cmp	r3, #2
 800b316:	f200 80a1 	bhi.w	800b45c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b320:	69bb      	ldr	r3, [r7, #24]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d056      	beq.n	800b3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b326:	e099      	b.n	800b45c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b328:	4b88      	ldr	r3, [pc, #544]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 0320 	and.w	r3, r3, #32
 800b330:	2b00      	cmp	r3, #0
 800b332:	d02d      	beq.n	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b334:	4b85      	ldr	r3, [pc, #532]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	08db      	lsrs	r3, r3, #3
 800b33a:	f003 0303 	and.w	r3, r3, #3
 800b33e:	4a84      	ldr	r2, [pc, #528]	@ (800b550 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b340:	fa22 f303 	lsr.w	r3, r2, r3
 800b344:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	ee07 3a90 	vmov	s15, r3
 800b34c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	ee07 3a90 	vmov	s15, r3
 800b356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35e:	4b7b      	ldr	r3, [pc, #492]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b366:	ee07 3a90 	vmov	s15, r3
 800b36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b372:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b554 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b38e:	e087      	b.n	800b4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b390:	697b      	ldr	r3, [r7, #20]
 800b392:	ee07 3a90 	vmov	s15, r3
 800b396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b39a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b558 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b39e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3a2:	4b6a      	ldr	r3, [pc, #424]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3aa:	ee07 3a90 	vmov	s15, r3
 800b3ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3b6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b554 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b3c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3d2:	e065      	b.n	800b4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	ee07 3a90 	vmov	s15, r3
 800b3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3de:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b55c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b3e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3e6:	4b59      	ldr	r3, [pc, #356]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3ee:	ee07 3a90 	vmov	s15, r3
 800b3f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3fa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b554 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b3fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b406:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b40a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b40e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b412:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b416:	e043      	b.n	800b4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	ee07 3a90 	vmov	s15, r3
 800b41e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b422:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b560 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b426:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b42a:	4b48      	ldr	r3, [pc, #288]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b42c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b42e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b432:	ee07 3a90 	vmov	s15, r3
 800b436:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b43a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b43e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b554 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b442:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b446:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b44a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b44e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b452:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b456:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b45a:	e021      	b.n	800b4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	ee07 3a90 	vmov	s15, r3
 800b462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b466:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b55c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b46a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b46e:	4b37      	ldr	r3, [pc, #220]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b476:	ee07 3a90 	vmov	s15, r3
 800b47a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b47e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b482:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b554 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b48a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b48e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b49a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b49e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b4a0:	4b2a      	ldr	r3, [pc, #168]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a4:	0a5b      	lsrs	r3, r3, #9
 800b4a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4aa:	ee07 3a90 	vmov	s15, r3
 800b4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4c6:	ee17 2a90 	vmov	r2, s15
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b4ce:	4b1f      	ldr	r3, [pc, #124]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4d2:	0c1b      	lsrs	r3, r3, #16
 800b4d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b4d8:	ee07 3a90 	vmov	s15, r3
 800b4dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b4e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4e8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4f4:	ee17 2a90 	vmov	r2, s15
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b4fc:	4b13      	ldr	r3, [pc, #76]	@ (800b54c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b4fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b500:	0e1b      	lsrs	r3, r3, #24
 800b502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b506:	ee07 3a90 	vmov	s15, r3
 800b50a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b50e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b512:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b516:	edd7 6a07 	vldr	s13, [r7, #28]
 800b51a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b51e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b522:	ee17 2a90 	vmov	r2, s15
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b52a:	e008      	b.n	800b53e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2200      	movs	r2, #0
 800b536:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2200      	movs	r2, #0
 800b53c:	609a      	str	r2, [r3, #8]
}
 800b53e:	bf00      	nop
 800b540:	3724      	adds	r7, #36	@ 0x24
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop
 800b54c:	58024400 	.word	0x58024400
 800b550:	03d09000 	.word	0x03d09000
 800b554:	46000000 	.word	0x46000000
 800b558:	4c742400 	.word	0x4c742400
 800b55c:	4a742400 	.word	0x4a742400
 800b560:	4bb71b00 	.word	0x4bb71b00

0800b564 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b564:	b480      	push	{r7}
 800b566:	b089      	sub	sp, #36	@ 0x24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b56c:	4ba1      	ldr	r3, [pc, #644]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b56e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b570:	f003 0303 	and.w	r3, r3, #3
 800b574:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b576:	4b9f      	ldr	r3, [pc, #636]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b57a:	0d1b      	lsrs	r3, r3, #20
 800b57c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b580:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b582:	4b9c      	ldr	r3, [pc, #624]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b586:	0a1b      	lsrs	r3, r3, #8
 800b588:	f003 0301 	and.w	r3, r3, #1
 800b58c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b58e:	4b99      	ldr	r3, [pc, #612]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b592:	08db      	lsrs	r3, r3, #3
 800b594:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b598:	693a      	ldr	r2, [r7, #16]
 800b59a:	fb02 f303 	mul.w	r3, r2, r3
 800b59e:	ee07 3a90 	vmov	s15, r3
 800b5a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f000 8111 	beq.w	800b7d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b5b2:	69bb      	ldr	r3, [r7, #24]
 800b5b4:	2b02      	cmp	r3, #2
 800b5b6:	f000 8083 	beq.w	800b6c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b5ba:	69bb      	ldr	r3, [r7, #24]
 800b5bc:	2b02      	cmp	r3, #2
 800b5be:	f200 80a1 	bhi.w	800b704 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b5c2:	69bb      	ldr	r3, [r7, #24]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d003      	beq.n	800b5d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	2b01      	cmp	r3, #1
 800b5cc:	d056      	beq.n	800b67c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b5ce:	e099      	b.n	800b704 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5d0:	4b88      	ldr	r3, [pc, #544]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f003 0320 	and.w	r3, r3, #32
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d02d      	beq.n	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5dc:	4b85      	ldr	r3, [pc, #532]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	08db      	lsrs	r3, r3, #3
 800b5e2:	f003 0303 	and.w	r3, r3, #3
 800b5e6:	4a84      	ldr	r2, [pc, #528]	@ (800b7f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b5e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	ee07 3a90 	vmov	s15, r3
 800b5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	ee07 3a90 	vmov	s15, r3
 800b5fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b606:	4b7b      	ldr	r3, [pc, #492]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b60e:	ee07 3a90 	vmov	s15, r3
 800b612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b616:	ed97 6a03 	vldr	s12, [r7, #12]
 800b61a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b7fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b61e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b626:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b62a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b632:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b636:	e087      	b.n	800b748 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	ee07 3a90 	vmov	s15, r3
 800b63e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b642:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b800 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b646:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b64a:	4b6a      	ldr	r3, [pc, #424]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b64c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b64e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b652:	ee07 3a90 	vmov	s15, r3
 800b656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b65a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b65e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b7fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b662:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b666:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b66a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b66e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b672:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b676:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b67a:	e065      	b.n	800b748 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	ee07 3a90 	vmov	s15, r3
 800b682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b686:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b68a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b68e:	4b59      	ldr	r3, [pc, #356]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b696:	ee07 3a90 	vmov	s15, r3
 800b69a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b69e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6a2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b7fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b6be:	e043      	b.n	800b748 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	ee07 3a90 	vmov	s15, r3
 800b6c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ca:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b808 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6d2:	4b48      	ldr	r3, [pc, #288]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b6d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6da:	ee07 3a90 	vmov	s15, r3
 800b6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6e6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b7fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b702:	e021      	b.n	800b748 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	ee07 3a90 	vmov	s15, r3
 800b70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b70e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b804 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b716:	4b37      	ldr	r3, [pc, #220]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b71e:	ee07 3a90 	vmov	s15, r3
 800b722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b726:	ed97 6a03 	vldr	s12, [r7, #12]
 800b72a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b7fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b736:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b746:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b748:	4b2a      	ldr	r3, [pc, #168]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b74a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b74c:	0a5b      	lsrs	r3, r3, #9
 800b74e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b752:	ee07 3a90 	vmov	s15, r3
 800b756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b75a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b75e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b762:	edd7 6a07 	vldr	s13, [r7, #28]
 800b766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b76a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b76e:	ee17 2a90 	vmov	r2, s15
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b776:	4b1f      	ldr	r3, [pc, #124]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b77a:	0c1b      	lsrs	r3, r3, #16
 800b77c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b780:	ee07 3a90 	vmov	s15, r3
 800b784:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b788:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b78c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b790:	edd7 6a07 	vldr	s13, [r7, #28]
 800b794:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b798:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b79c:	ee17 2a90 	vmov	r2, s15
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b7a4:	4b13      	ldr	r3, [pc, #76]	@ (800b7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b7a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7a8:	0e1b      	lsrs	r3, r3, #24
 800b7aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7ae:	ee07 3a90 	vmov	s15, r3
 800b7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b7ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ca:	ee17 2a90 	vmov	r2, s15
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b7d2:	e008      	b.n	800b7e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	609a      	str	r2, [r3, #8]
}
 800b7e6:	bf00      	nop
 800b7e8:	3724      	adds	r7, #36	@ 0x24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop
 800b7f4:	58024400 	.word	0x58024400
 800b7f8:	03d09000 	.word	0x03d09000
 800b7fc:	46000000 	.word	0x46000000
 800b800:	4c742400 	.word	0x4c742400
 800b804:	4a742400 	.word	0x4a742400
 800b808:	4bb71b00 	.word	0x4bb71b00

0800b80c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b089      	sub	sp, #36	@ 0x24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b814:	4ba0      	ldr	r3, [pc, #640]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b818:	f003 0303 	and.w	r3, r3, #3
 800b81c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b81e:	4b9e      	ldr	r3, [pc, #632]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b822:	091b      	lsrs	r3, r3, #4
 800b824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b828:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b82a:	4b9b      	ldr	r3, [pc, #620]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b82c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b82e:	f003 0301 	and.w	r3, r3, #1
 800b832:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b834:	4b98      	ldr	r3, [pc, #608]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b838:	08db      	lsrs	r3, r3, #3
 800b83a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	fb02 f303 	mul.w	r3, r2, r3
 800b844:	ee07 3a90 	vmov	s15, r3
 800b848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	2b00      	cmp	r3, #0
 800b854:	f000 8111 	beq.w	800ba7a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b858:	69bb      	ldr	r3, [r7, #24]
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	f000 8083 	beq.w	800b966 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	2b02      	cmp	r3, #2
 800b864:	f200 80a1 	bhi.w	800b9aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d003      	beq.n	800b876 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d056      	beq.n	800b922 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b874:	e099      	b.n	800b9aa <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b876:	4b88      	ldr	r3, [pc, #544]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f003 0320 	and.w	r3, r3, #32
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d02d      	beq.n	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b882:	4b85      	ldr	r3, [pc, #532]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	08db      	lsrs	r3, r3, #3
 800b888:	f003 0303 	and.w	r3, r3, #3
 800b88c:	4a83      	ldr	r2, [pc, #524]	@ (800ba9c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b88e:	fa22 f303 	lsr.w	r3, r2, r3
 800b892:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	ee07 3a90 	vmov	s15, r3
 800b89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b89e:	697b      	ldr	r3, [r7, #20]
 800b8a0:	ee07 3a90 	vmov	s15, r3
 800b8a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ac:	4b7a      	ldr	r3, [pc, #488]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8b4:	ee07 3a90 	vmov	s15, r3
 800b8b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8c0:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800baa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b8dc:	e087      	b.n	800b9ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	ee07 3a90 	vmov	s15, r3
 800b8e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e8:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800baa4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b8ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8f0:	4b69      	ldr	r3, [pc, #420]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8f8:	ee07 3a90 	vmov	s15, r3
 800b8fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b900:	ed97 6a03 	vldr	s12, [r7, #12]
 800b904:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800baa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b908:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b90c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b910:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b914:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b918:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b91c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b920:	e065      	b.n	800b9ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	ee07 3a90 	vmov	s15, r3
 800b928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b92c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800baa8 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b934:	4b58      	ldr	r3, [pc, #352]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b93c:	ee07 3a90 	vmov	s15, r3
 800b940:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b944:	ed97 6a03 	vldr	s12, [r7, #12]
 800b948:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800baa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b94c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b950:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b954:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b958:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b960:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b964:	e043      	b.n	800b9ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	ee07 3a90 	vmov	s15, r3
 800b96c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b970:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800baac <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b974:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b978:	4b47      	ldr	r3, [pc, #284]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b97a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b97c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b980:	ee07 3a90 	vmov	s15, r3
 800b984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b988:	ed97 6a03 	vldr	s12, [r7, #12]
 800b98c:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800baa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b990:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b994:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b998:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b99c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9a8:	e021      	b.n	800b9ee <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9aa:	697b      	ldr	r3, [r7, #20]
 800b9ac:	ee07 3a90 	vmov	s15, r3
 800b9b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b4:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800baa4 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b9b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9bc:	4b36      	ldr	r3, [pc, #216]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9c4:	ee07 3a90 	vmov	s15, r3
 800b9c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9d0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800baa0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b9d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b9e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b9ec:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b9ee:	4b2a      	ldr	r3, [pc, #168]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b9f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9f2:	0a5b      	lsrs	r3, r3, #9
 800b9f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9f8:	ee07 3a90 	vmov	s15, r3
 800b9fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba00:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba04:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba08:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba14:	ee17 2a90 	vmov	r2, s15
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800ba1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba20:	0c1b      	lsrs	r3, r3, #16
 800ba22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba26:	ee07 3a90 	vmov	s15, r3
 800ba2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba32:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba36:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba42:	ee17 2a90 	vmov	r2, s15
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ba4a:	4b13      	ldr	r3, [pc, #76]	@ (800ba98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ba4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba4e:	0e1b      	lsrs	r3, r3, #24
 800ba50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba54:	ee07 3a90 	vmov	s15, r3
 800ba58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ba60:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba64:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba70:	ee17 2a90 	vmov	r2, s15
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800ba78:	e008      	b.n	800ba8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2200      	movs	r2, #0
 800ba8a:	609a      	str	r2, [r3, #8]
}
 800ba8c:	bf00      	nop
 800ba8e:	3724      	adds	r7, #36	@ 0x24
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr
 800ba98:	58024400 	.word	0x58024400
 800ba9c:	03d09000 	.word	0x03d09000
 800baa0:	46000000 	.word	0x46000000
 800baa4:	4c742400 	.word	0x4c742400
 800baa8:	4a742400 	.word	0x4a742400
 800baac:	4bb71b00 	.word	0x4bb71b00

0800bab0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800babe:	4b53      	ldr	r3, [pc, #332]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bac2:	f003 0303 	and.w	r3, r3, #3
 800bac6:	2b03      	cmp	r3, #3
 800bac8:	d101      	bne.n	800bace <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	e099      	b.n	800bc02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bace:	4b4f      	ldr	r3, [pc, #316]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	4a4e      	ldr	r2, [pc, #312]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bad4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bada:	f7f7 fc77 	bl	80033cc <HAL_GetTick>
 800bade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bae0:	e008      	b.n	800baf4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bae2:	f7f7 fc73 	bl	80033cc <HAL_GetTick>
 800bae6:	4602      	mov	r2, r0
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	2b02      	cmp	r3, #2
 800baee:	d901      	bls.n	800baf4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800baf0:	2303      	movs	r3, #3
 800baf2:	e086      	b.n	800bc02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800baf4:	4b45      	ldr	r3, [pc, #276]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1f0      	bne.n	800bae2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb00:	4b42      	ldr	r3, [pc, #264]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb04:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	031b      	lsls	r3, r3, #12
 800bb0e:	493f      	ldr	r1, [pc, #252]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb10:	4313      	orrs	r3, r2
 800bb12:	628b      	str	r3, [r1, #40]	@ 0x28
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	685b      	ldr	r3, [r3, #4]
 800bb18:	3b01      	subs	r3, #1
 800bb1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	689b      	ldr	r3, [r3, #8]
 800bb22:	3b01      	subs	r3, #1
 800bb24:	025b      	lsls	r3, r3, #9
 800bb26:	b29b      	uxth	r3, r3
 800bb28:	431a      	orrs	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	3b01      	subs	r3, #1
 800bb30:	041b      	lsls	r3, r3, #16
 800bb32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bb36:	431a      	orrs	r2, r3
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	691b      	ldr	r3, [r3, #16]
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	061b      	lsls	r3, r3, #24
 800bb40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bb44:	4931      	ldr	r1, [pc, #196]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb46:	4313      	orrs	r3, r2
 800bb48:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bb4a:	4b30      	ldr	r3, [pc, #192]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	492d      	ldr	r1, [pc, #180]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bb5c:	4b2b      	ldr	r3, [pc, #172]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb60:	f023 0220 	bic.w	r2, r3, #32
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	4928      	ldr	r1, [pc, #160]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bb6e:	4b27      	ldr	r3, [pc, #156]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb72:	4a26      	ldr	r2, [pc, #152]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb74:	f023 0310 	bic.w	r3, r3, #16
 800bb78:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bb7a:	4b24      	ldr	r3, [pc, #144]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb7e:	4b24      	ldr	r3, [pc, #144]	@ (800bc10 <RCCEx_PLL2_Config+0x160>)
 800bb80:	4013      	ands	r3, r2
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	69d2      	ldr	r2, [r2, #28]
 800bb86:	00d2      	lsls	r2, r2, #3
 800bb88:	4920      	ldr	r1, [pc, #128]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb8a:	4313      	orrs	r3, r2
 800bb8c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bb8e:	4b1f      	ldr	r3, [pc, #124]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb92:	4a1e      	ldr	r2, [pc, #120]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bb94:	f043 0310 	orr.w	r3, r3, #16
 800bb98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d106      	bne.n	800bbae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bba0:	4b1a      	ldr	r3, [pc, #104]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba4:	4a19      	ldr	r2, [pc, #100]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bba6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bbaa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bbac:	e00f      	b.n	800bbce <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d106      	bne.n	800bbc2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bbb4:	4b15      	ldr	r3, [pc, #84]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bbb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbb8:	4a14      	ldr	r2, [pc, #80]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bbba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bbc0:	e005      	b.n	800bbce <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bbc2:	4b12      	ldr	r3, [pc, #72]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc6:	4a11      	ldr	r2, [pc, #68]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bbc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bbcc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bbce:	4b0f      	ldr	r3, [pc, #60]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a0e      	ldr	r2, [pc, #56]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bbd4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bbd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbda:	f7f7 fbf7 	bl	80033cc <HAL_GetTick>
 800bbde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bbe0:	e008      	b.n	800bbf4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800bbe2:	f7f7 fbf3 	bl	80033cc <HAL_GetTick>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	68bb      	ldr	r3, [r7, #8]
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	d901      	bls.n	800bbf4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e006      	b.n	800bc02 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bbf4:	4b05      	ldr	r3, [pc, #20]	@ (800bc0c <RCCEx_PLL2_Config+0x15c>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d0f0      	beq.n	800bbe2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}
 800bc0a:	bf00      	nop
 800bc0c:	58024400 	.word	0x58024400
 800bc10:	ffff0007 	.word	0xffff0007

0800bc14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bc22:	4b53      	ldr	r3, [pc, #332]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bc24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc26:	f003 0303 	and.w	r3, r3, #3
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d101      	bne.n	800bc32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e099      	b.n	800bd66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bc32:	4b4f      	ldr	r3, [pc, #316]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	4a4e      	ldr	r2, [pc, #312]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bc38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bc3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc3e:	f7f7 fbc5 	bl	80033cc <HAL_GetTick>
 800bc42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bc44:	e008      	b.n	800bc58 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bc46:	f7f7 fbc1 	bl	80033cc <HAL_GetTick>
 800bc4a:	4602      	mov	r2, r0
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	1ad3      	subs	r3, r2, r3
 800bc50:	2b02      	cmp	r3, #2
 800bc52:	d901      	bls.n	800bc58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e086      	b.n	800bd66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bc58:	4b45      	ldr	r3, [pc, #276]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d1f0      	bne.n	800bc46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bc64:	4b42      	ldr	r3, [pc, #264]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bc66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc68:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	051b      	lsls	r3, r3, #20
 800bc72:	493f      	ldr	r1, [pc, #252]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bc74:	4313      	orrs	r3, r2
 800bc76:	628b      	str	r3, [r1, #40]	@ 0x28
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	3b01      	subs	r3, #1
 800bc7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	3b01      	subs	r3, #1
 800bc88:	025b      	lsls	r3, r3, #9
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	431a      	orrs	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	68db      	ldr	r3, [r3, #12]
 800bc92:	3b01      	subs	r3, #1
 800bc94:	041b      	lsls	r3, r3, #16
 800bc96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800bc9a:	431a      	orrs	r2, r3
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	061b      	lsls	r3, r3, #24
 800bca4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800bca8:	4931      	ldr	r1, [pc, #196]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bcae:	4b30      	ldr	r3, [pc, #192]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	492d      	ldr	r1, [pc, #180]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bcc0:	4b2b      	ldr	r3, [pc, #172]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bcc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	699b      	ldr	r3, [r3, #24]
 800bccc:	4928      	ldr	r1, [pc, #160]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bcd2:	4b27      	ldr	r3, [pc, #156]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bcd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcd6:	4a26      	ldr	r2, [pc, #152]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bcd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bcdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bcde:	4b24      	ldr	r3, [pc, #144]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bce0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bce2:	4b24      	ldr	r3, [pc, #144]	@ (800bd74 <RCCEx_PLL3_Config+0x160>)
 800bce4:	4013      	ands	r3, r2
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	69d2      	ldr	r2, [r2, #28]
 800bcea:	00d2      	lsls	r2, r2, #3
 800bcec:	4920      	ldr	r1, [pc, #128]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bcf2:	4b1f      	ldr	r3, [pc, #124]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bcf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf6:	4a1e      	ldr	r2, [pc, #120]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bcf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bcfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d106      	bne.n	800bd12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd04:	4b1a      	ldr	r3, [pc, #104]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bd06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd08:	4a19      	ldr	r2, [pc, #100]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bd0a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800bd0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd10:	e00f      	b.n	800bd32 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d106      	bne.n	800bd26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bd18:	4b15      	ldr	r3, [pc, #84]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd1c:	4a14      	ldr	r2, [pc, #80]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bd1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800bd22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800bd24:	e005      	b.n	800bd32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bd26:	4b12      	ldr	r3, [pc, #72]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bd28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd2a:	4a11      	ldr	r2, [pc, #68]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bd2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd30:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bd32:	4b0f      	ldr	r3, [pc, #60]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a0e      	ldr	r2, [pc, #56]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bd38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd3e:	f7f7 fb45 	bl	80033cc <HAL_GetTick>
 800bd42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bd44:	e008      	b.n	800bd58 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800bd46:	f7f7 fb41 	bl	80033cc <HAL_GetTick>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	d901      	bls.n	800bd58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e006      	b.n	800bd66 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bd58:	4b05      	ldr	r3, [pc, #20]	@ (800bd70 <RCCEx_PLL3_Config+0x15c>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d0f0      	beq.n	800bd46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bd64:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	58024400 	.word	0x58024400
 800bd74:	ffff0007 	.word	0xffff0007

0800bd78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d101      	bne.n	800bd8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd86:	2301      	movs	r3, #1
 800bd88:	e049      	b.n	800be1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd90:	b2db      	uxtb	r3, r3
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d106      	bne.n	800bda4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2200      	movs	r2, #0
 800bd9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f7f6 fe78 	bl	8002a94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2202      	movs	r2, #2
 800bda8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	4610      	mov	r0, r2
 800bdb8:	f000 fc0a 	bl	800c5d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2201      	movs	r2, #1
 800bde0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2201      	movs	r2, #1
 800bde8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2201      	movs	r2, #1
 800be00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2201      	movs	r2, #1
 800be08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	2201      	movs	r2, #1
 800be10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2201      	movs	r2, #1
 800be18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
	...

0800be28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800be36:	b2db      	uxtb	r3, r3
 800be38:	2b01      	cmp	r3, #1
 800be3a:	d001      	beq.n	800be40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	e054      	b.n	800beea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2202      	movs	r2, #2
 800be44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	68da      	ldr	r2, [r3, #12]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f042 0201 	orr.w	r2, r2, #1
 800be56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a26      	ldr	r2, [pc, #152]	@ (800bef8 <HAL_TIM_Base_Start_IT+0xd0>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d022      	beq.n	800bea8 <HAL_TIM_Base_Start_IT+0x80>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be6a:	d01d      	beq.n	800bea8 <HAL_TIM_Base_Start_IT+0x80>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a22      	ldr	r2, [pc, #136]	@ (800befc <HAL_TIM_Base_Start_IT+0xd4>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d018      	beq.n	800bea8 <HAL_TIM_Base_Start_IT+0x80>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a21      	ldr	r2, [pc, #132]	@ (800bf00 <HAL_TIM_Base_Start_IT+0xd8>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d013      	beq.n	800bea8 <HAL_TIM_Base_Start_IT+0x80>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a1f      	ldr	r2, [pc, #124]	@ (800bf04 <HAL_TIM_Base_Start_IT+0xdc>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d00e      	beq.n	800bea8 <HAL_TIM_Base_Start_IT+0x80>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a1e      	ldr	r2, [pc, #120]	@ (800bf08 <HAL_TIM_Base_Start_IT+0xe0>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d009      	beq.n	800bea8 <HAL_TIM_Base_Start_IT+0x80>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4a1c      	ldr	r2, [pc, #112]	@ (800bf0c <HAL_TIM_Base_Start_IT+0xe4>)
 800be9a:	4293      	cmp	r3, r2
 800be9c:	d004      	beq.n	800bea8 <HAL_TIM_Base_Start_IT+0x80>
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a1b      	ldr	r2, [pc, #108]	@ (800bf10 <HAL_TIM_Base_Start_IT+0xe8>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d115      	bne.n	800bed4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	689a      	ldr	r2, [r3, #8]
 800beae:	4b19      	ldr	r3, [pc, #100]	@ (800bf14 <HAL_TIM_Base_Start_IT+0xec>)
 800beb0:	4013      	ands	r3, r2
 800beb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2b06      	cmp	r3, #6
 800beb8:	d015      	beq.n	800bee6 <HAL_TIM_Base_Start_IT+0xbe>
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bec0:	d011      	beq.n	800bee6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f042 0201 	orr.w	r2, r2, #1
 800bed0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bed2:	e008      	b.n	800bee6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	681a      	ldr	r2, [r3, #0]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f042 0201 	orr.w	r2, r2, #1
 800bee2:	601a      	str	r2, [r3, #0]
 800bee4:	e000      	b.n	800bee8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bee6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef4:	4770      	bx	lr
 800bef6:	bf00      	nop
 800bef8:	40010000 	.word	0x40010000
 800befc:	40000400 	.word	0x40000400
 800bf00:	40000800 	.word	0x40000800
 800bf04:	40000c00 	.word	0x40000c00
 800bf08:	40010400 	.word	0x40010400
 800bf0c:	40001800 	.word	0x40001800
 800bf10:	40014000 	.word	0x40014000
 800bf14:	00010007 	.word	0x00010007

0800bf18 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b086      	sub	sp, #24
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
 800bf20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d101      	bne.n	800bf2c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bf28:	2301      	movs	r3, #1
 800bf2a:	e08f      	b.n	800c04c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d106      	bne.n	800bf46 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7f6 fd1d 	bl	8002980 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2202      	movs	r2, #2
 800bf4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	6899      	ldr	r1, [r3, #8]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	4b3e      	ldr	r3, [pc, #248]	@ (800c054 <HAL_TIM_Encoder_Init+0x13c>)
 800bf5a:	400b      	ands	r3, r1
 800bf5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	3304      	adds	r3, #4
 800bf66:	4619      	mov	r1, r3
 800bf68:	4610      	mov	r0, r2
 800bf6a:	f000 fb31 	bl	800c5d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6a1b      	ldr	r3, [r3, #32]
 800bf84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	4313      	orrs	r3, r2
 800bf8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bf90:	693a      	ldr	r2, [r7, #16]
 800bf92:	4b31      	ldr	r3, [pc, #196]	@ (800c058 <HAL_TIM_Encoder_Init+0x140>)
 800bf94:	4013      	ands	r3, r2
 800bf96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	689a      	ldr	r2, [r3, #8]
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	699b      	ldr	r3, [r3, #24]
 800bfa0:	021b      	lsls	r3, r3, #8
 800bfa2:	4313      	orrs	r3, r2
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bfaa:	693a      	ldr	r2, [r7, #16]
 800bfac:	4b2b      	ldr	r3, [pc, #172]	@ (800c05c <HAL_TIM_Encoder_Init+0x144>)
 800bfae:	4013      	ands	r3, r2
 800bfb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	4b2a      	ldr	r3, [pc, #168]	@ (800c060 <HAL_TIM_Encoder_Init+0x148>)
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bfba:	683b      	ldr	r3, [r7, #0]
 800bfbc:	68da      	ldr	r2, [r3, #12]
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	69db      	ldr	r3, [r3, #28]
 800bfc2:	021b      	lsls	r3, r3, #8
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	693a      	ldr	r2, [r7, #16]
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	011a      	lsls	r2, r3, #4
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	6a1b      	ldr	r3, [r3, #32]
 800bfd6:	031b      	lsls	r3, r3, #12
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800bfe6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800bfee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	685a      	ldr	r2, [r3, #4]
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	695b      	ldr	r3, [r3, #20]
 800bff8:	011b      	lsls	r3, r3, #4
 800bffa:	4313      	orrs	r3, r2
 800bffc:	68fa      	ldr	r2, [r7, #12]
 800bffe:	4313      	orrs	r3, r2
 800c000:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	697a      	ldr	r2, [r7, #20]
 800c008:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2201      	movs	r2, #1
 800c01e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	2201      	movs	r2, #1
 800c02e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2201      	movs	r2, #1
 800c036:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2201      	movs	r2, #1
 800c046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3718      	adds	r7, #24
 800c050:	46bd      	mov	sp, r7
 800c052:	bd80      	pop	{r7, pc}
 800c054:	fffebff8 	.word	0xfffebff8
 800c058:	fffffcfc 	.word	0xfffffcfc
 800c05c:	fffff3f3 	.word	0xfffff3f3
 800c060:	ffff0f0f 	.word	0xffff0f0f

0800c064 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c074:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c07c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c084:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c08c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d110      	bne.n	800c0b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c094:	7bfb      	ldrb	r3, [r7, #15]
 800c096:	2b01      	cmp	r3, #1
 800c098:	d102      	bne.n	800c0a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800c09a:	7b7b      	ldrb	r3, [r7, #13]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d001      	beq.n	800c0a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	e069      	b.n	800c178 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2202      	movs	r2, #2
 800c0a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2202      	movs	r2, #2
 800c0b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c0b4:	e031      	b.n	800c11a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	2b04      	cmp	r3, #4
 800c0ba:	d110      	bne.n	800c0de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0bc:	7bbb      	ldrb	r3, [r7, #14]
 800c0be:	2b01      	cmp	r3, #1
 800c0c0:	d102      	bne.n	800c0c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c0c2:	7b3b      	ldrb	r3, [r7, #12]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d001      	beq.n	800c0cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	e055      	b.n	800c178 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2202      	movs	r2, #2
 800c0d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2202      	movs	r2, #2
 800c0d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c0dc:	e01d      	b.n	800c11a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d108      	bne.n	800c0f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	2b01      	cmp	r3, #1
 800c0e8:	d105      	bne.n	800c0f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800c0ea:	7b7b      	ldrb	r3, [r7, #13]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d102      	bne.n	800c0f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800c0f0:	7b3b      	ldrb	r3, [r7, #12]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d001      	beq.n	800c0fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e03e      	b.n	800c178 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2202      	movs	r2, #2
 800c0fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2202      	movs	r2, #2
 800c106:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2202      	movs	r2, #2
 800c10e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2202      	movs	r2, #2
 800c116:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d003      	beq.n	800c128 <HAL_TIM_Encoder_Start+0xc4>
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	2b04      	cmp	r3, #4
 800c124:	d008      	beq.n	800c138 <HAL_TIM_Encoder_Start+0xd4>
 800c126:	e00f      	b.n	800c148 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	2201      	movs	r2, #1
 800c12e:	2100      	movs	r1, #0
 800c130:	4618      	mov	r0, r3
 800c132:	f000 fb91 	bl	800c858 <TIM_CCxChannelCmd>
      break;
 800c136:	e016      	b.n	800c166 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	2201      	movs	r2, #1
 800c13e:	2104      	movs	r1, #4
 800c140:	4618      	mov	r0, r3
 800c142:	f000 fb89 	bl	800c858 <TIM_CCxChannelCmd>
      break;
 800c146:	e00e      	b.n	800c166 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2201      	movs	r2, #1
 800c14e:	2100      	movs	r1, #0
 800c150:	4618      	mov	r0, r3
 800c152:	f000 fb81 	bl	800c858 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2201      	movs	r2, #1
 800c15c:	2104      	movs	r1, #4
 800c15e:	4618      	mov	r0, r3
 800c160:	f000 fb7a 	bl	800c858 <TIM_CCxChannelCmd>
      break;
 800c164:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f042 0201 	orr.w	r2, r2, #1
 800c174:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c176:	2300      	movs	r3, #0
}
 800c178:	4618      	mov	r0, r3
 800c17a:	3710      	adds	r7, #16
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	68db      	ldr	r3, [r3, #12]
 800c18e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c198:	68bb      	ldr	r3, [r7, #8]
 800c19a:	f003 0302 	and.w	r3, r3, #2
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d020      	beq.n	800c1e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f003 0302 	and.w	r3, r3, #2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d01b      	beq.n	800c1e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f06f 0202 	mvn.w	r2, #2
 800c1b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	2201      	movs	r2, #1
 800c1ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	699b      	ldr	r3, [r3, #24]
 800c1c2:	f003 0303 	and.w	r3, r3, #3
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d003      	beq.n	800c1d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f9e2 	bl	800c594 <HAL_TIM_IC_CaptureCallback>
 800c1d0:	e005      	b.n	800c1de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 f9d4 	bl	800c580 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f9e5 	bl	800c5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f003 0304 	and.w	r3, r3, #4
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d020      	beq.n	800c230 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f003 0304 	and.w	r3, r3, #4
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d01b      	beq.n	800c230 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f06f 0204 	mvn.w	r2, #4
 800c200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2202      	movs	r2, #2
 800c206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c212:	2b00      	cmp	r3, #0
 800c214:	d003      	beq.n	800c21e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 f9bc 	bl	800c594 <HAL_TIM_IC_CaptureCallback>
 800c21c:	e005      	b.n	800c22a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f000 f9ae 	bl	800c580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 f9bf 	bl	800c5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2200      	movs	r2, #0
 800c22e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	f003 0308 	and.w	r3, r3, #8
 800c236:	2b00      	cmp	r3, #0
 800c238:	d020      	beq.n	800c27c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f003 0308 	and.w	r3, r3, #8
 800c240:	2b00      	cmp	r3, #0
 800c242:	d01b      	beq.n	800c27c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	f06f 0208 	mvn.w	r2, #8
 800c24c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	2204      	movs	r2, #4
 800c252:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	69db      	ldr	r3, [r3, #28]
 800c25a:	f003 0303 	and.w	r3, r3, #3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d003      	beq.n	800c26a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f000 f996 	bl	800c594 <HAL_TIM_IC_CaptureCallback>
 800c268:	e005      	b.n	800c276 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f988 	bl	800c580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f999 	bl	800c5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2200      	movs	r2, #0
 800c27a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	f003 0310 	and.w	r3, r3, #16
 800c282:	2b00      	cmp	r3, #0
 800c284:	d020      	beq.n	800c2c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	f003 0310 	and.w	r3, r3, #16
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d01b      	beq.n	800c2c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f06f 0210 	mvn.w	r2, #16
 800c298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2208      	movs	r2, #8
 800c29e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	69db      	ldr	r3, [r3, #28]
 800c2a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 f970 	bl	800c594 <HAL_TIM_IC_CaptureCallback>
 800c2b4:	e005      	b.n	800c2c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 f962 	bl	800c580 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2bc:	6878      	ldr	r0, [r7, #4]
 800c2be:	f000 f973 	bl	800c5a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c2c8:	68bb      	ldr	r3, [r7, #8]
 800c2ca:	f003 0301 	and.w	r3, r3, #1
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d00c      	beq.n	800c2ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f003 0301 	and.w	r3, r3, #1
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d007      	beq.n	800c2ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f06f 0201 	mvn.w	r2, #1
 800c2e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f7f6 fc1a 	bl	8002b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c2ec:	68bb      	ldr	r3, [r7, #8]
 800c2ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d104      	bne.n	800c300 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d00c      	beq.n	800c31a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c306:	2b00      	cmp	r3, #0
 800c308:	d007      	beq.n	800c31a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fb5d 	bl	800c9d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c320:	2b00      	cmp	r3, #0
 800c322:	d00c      	beq.n	800c33e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d007      	beq.n	800c33e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 fb55 	bl	800c9e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00c      	beq.n	800c362 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d007      	beq.n	800c362 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c35a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f000 f92d 	bl	800c5bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	f003 0320 	and.w	r3, r3, #32
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00c      	beq.n	800c386 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f003 0320 	and.w	r3, r3, #32
 800c372:	2b00      	cmp	r3, #0
 800c374:	d007      	beq.n	800c386 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f06f 0220 	mvn.w	r2, #32
 800c37e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fb1d 	bl	800c9c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c386:	bf00      	nop
 800c388:	3710      	adds	r7, #16
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
	...

0800c390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c39a:	2300      	movs	r3, #0
 800c39c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3a4:	2b01      	cmp	r3, #1
 800c3a6:	d101      	bne.n	800c3ac <HAL_TIM_ConfigClockSource+0x1c>
 800c3a8:	2302      	movs	r3, #2
 800c3aa:	e0dc      	b.n	800c566 <HAL_TIM_ConfigClockSource+0x1d6>
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	4b6a      	ldr	r3, [pc, #424]	@ (800c570 <HAL_TIM_ConfigClockSource+0x1e0>)
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c3d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a64      	ldr	r2, [pc, #400]	@ (800c574 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c3e2:	4293      	cmp	r3, r2
 800c3e4:	f000 80a9 	beq.w	800c53a <HAL_TIM_ConfigClockSource+0x1aa>
 800c3e8:	4a62      	ldr	r2, [pc, #392]	@ (800c574 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c3ea:	4293      	cmp	r3, r2
 800c3ec:	f200 80ae 	bhi.w	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c3f0:	4a61      	ldr	r2, [pc, #388]	@ (800c578 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	f000 80a1 	beq.w	800c53a <HAL_TIM_ConfigClockSource+0x1aa>
 800c3f8:	4a5f      	ldr	r2, [pc, #380]	@ (800c578 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	f200 80a6 	bhi.w	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c400:	4a5e      	ldr	r2, [pc, #376]	@ (800c57c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c402:	4293      	cmp	r3, r2
 800c404:	f000 8099 	beq.w	800c53a <HAL_TIM_ConfigClockSource+0x1aa>
 800c408:	4a5c      	ldr	r2, [pc, #368]	@ (800c57c <HAL_TIM_ConfigClockSource+0x1ec>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	f200 809e 	bhi.w	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c410:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c414:	f000 8091 	beq.w	800c53a <HAL_TIM_ConfigClockSource+0x1aa>
 800c418:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c41c:	f200 8096 	bhi.w	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c420:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c424:	f000 8089 	beq.w	800c53a <HAL_TIM_ConfigClockSource+0x1aa>
 800c428:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c42c:	f200 808e 	bhi.w	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c430:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c434:	d03e      	beq.n	800c4b4 <HAL_TIM_ConfigClockSource+0x124>
 800c436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c43a:	f200 8087 	bhi.w	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c43e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c442:	f000 8086 	beq.w	800c552 <HAL_TIM_ConfigClockSource+0x1c2>
 800c446:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c44a:	d87f      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c44c:	2b70      	cmp	r3, #112	@ 0x70
 800c44e:	d01a      	beq.n	800c486 <HAL_TIM_ConfigClockSource+0xf6>
 800c450:	2b70      	cmp	r3, #112	@ 0x70
 800c452:	d87b      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c454:	2b60      	cmp	r3, #96	@ 0x60
 800c456:	d050      	beq.n	800c4fa <HAL_TIM_ConfigClockSource+0x16a>
 800c458:	2b60      	cmp	r3, #96	@ 0x60
 800c45a:	d877      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c45c:	2b50      	cmp	r3, #80	@ 0x50
 800c45e:	d03c      	beq.n	800c4da <HAL_TIM_ConfigClockSource+0x14a>
 800c460:	2b50      	cmp	r3, #80	@ 0x50
 800c462:	d873      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c464:	2b40      	cmp	r3, #64	@ 0x40
 800c466:	d058      	beq.n	800c51a <HAL_TIM_ConfigClockSource+0x18a>
 800c468:	2b40      	cmp	r3, #64	@ 0x40
 800c46a:	d86f      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c46c:	2b30      	cmp	r3, #48	@ 0x30
 800c46e:	d064      	beq.n	800c53a <HAL_TIM_ConfigClockSource+0x1aa>
 800c470:	2b30      	cmp	r3, #48	@ 0x30
 800c472:	d86b      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c474:	2b20      	cmp	r3, #32
 800c476:	d060      	beq.n	800c53a <HAL_TIM_ConfigClockSource+0x1aa>
 800c478:	2b20      	cmp	r3, #32
 800c47a:	d867      	bhi.n	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d05c      	beq.n	800c53a <HAL_TIM_ConfigClockSource+0x1aa>
 800c480:	2b10      	cmp	r3, #16
 800c482:	d05a      	beq.n	800c53a <HAL_TIM_ConfigClockSource+0x1aa>
 800c484:	e062      	b.n	800c54c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c496:	f000 f9bf 	bl	800c818 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c4a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	68ba      	ldr	r2, [r7, #8]
 800c4b0:	609a      	str	r2, [r3, #8]
      break;
 800c4b2:	e04f      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4c4:	f000 f9a8 	bl	800c818 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	689a      	ldr	r2, [r3, #8]
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c4d6:	609a      	str	r2, [r3, #8]
      break;
 800c4d8:	e03c      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	f000 f918 	bl	800c71c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2150      	movs	r1, #80	@ 0x50
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f000 f972 	bl	800c7dc <TIM_ITRx_SetConfig>
      break;
 800c4f8:	e02c      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c506:	461a      	mov	r2, r3
 800c508:	f000 f937 	bl	800c77a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2160      	movs	r1, #96	@ 0x60
 800c512:	4618      	mov	r0, r3
 800c514:	f000 f962 	bl	800c7dc <TIM_ITRx_SetConfig>
      break;
 800c518:	e01c      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c526:	461a      	mov	r2, r3
 800c528:	f000 f8f8 	bl	800c71c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2140      	movs	r1, #64	@ 0x40
 800c532:	4618      	mov	r0, r3
 800c534:	f000 f952 	bl	800c7dc <TIM_ITRx_SetConfig>
      break;
 800c538:	e00c      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681a      	ldr	r2, [r3, #0]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4619      	mov	r1, r3
 800c544:	4610      	mov	r0, r2
 800c546:	f000 f949 	bl	800c7dc <TIM_ITRx_SetConfig>
      break;
 800c54a:	e003      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c54c:	2301      	movs	r3, #1
 800c54e:	73fb      	strb	r3, [r7, #15]
      break;
 800c550:	e000      	b.n	800c554 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c552:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2201      	movs	r2, #1
 800c558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2200      	movs	r2, #0
 800c560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c564:	7bfb      	ldrb	r3, [r7, #15]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	ffceff88 	.word	0xffceff88
 800c574:	00100040 	.word	0x00100040
 800c578:	00100030 	.word	0x00100030
 800c57c:	00100020 	.word	0x00100020

0800c580 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c588:	bf00      	nop
 800c58a:	370c      	adds	r7, #12
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c594:	b480      	push	{r7}
 800c596:	b083      	sub	sp, #12
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c59c:	bf00      	nop
 800c59e:	370c      	adds	r7, #12
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a6:	4770      	bx	lr

0800c5a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c5b0:	bf00      	nop
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c5c4:	bf00      	nop
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b085      	sub	sp, #20
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	4a46      	ldr	r2, [pc, #280]	@ (800c6fc <TIM_Base_SetConfig+0x12c>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d013      	beq.n	800c610 <TIM_Base_SetConfig+0x40>
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5ee:	d00f      	beq.n	800c610 <TIM_Base_SetConfig+0x40>
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	4a43      	ldr	r2, [pc, #268]	@ (800c700 <TIM_Base_SetConfig+0x130>)
 800c5f4:	4293      	cmp	r3, r2
 800c5f6:	d00b      	beq.n	800c610 <TIM_Base_SetConfig+0x40>
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	4a42      	ldr	r2, [pc, #264]	@ (800c704 <TIM_Base_SetConfig+0x134>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d007      	beq.n	800c610 <TIM_Base_SetConfig+0x40>
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	4a41      	ldr	r2, [pc, #260]	@ (800c708 <TIM_Base_SetConfig+0x138>)
 800c604:	4293      	cmp	r3, r2
 800c606:	d003      	beq.n	800c610 <TIM_Base_SetConfig+0x40>
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	4a40      	ldr	r2, [pc, #256]	@ (800c70c <TIM_Base_SetConfig+0x13c>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d108      	bne.n	800c622 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c616:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	685b      	ldr	r3, [r3, #4]
 800c61c:	68fa      	ldr	r2, [r7, #12]
 800c61e:	4313      	orrs	r3, r2
 800c620:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	4a35      	ldr	r2, [pc, #212]	@ (800c6fc <TIM_Base_SetConfig+0x12c>)
 800c626:	4293      	cmp	r3, r2
 800c628:	d01f      	beq.n	800c66a <TIM_Base_SetConfig+0x9a>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c630:	d01b      	beq.n	800c66a <TIM_Base_SetConfig+0x9a>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	4a32      	ldr	r2, [pc, #200]	@ (800c700 <TIM_Base_SetConfig+0x130>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d017      	beq.n	800c66a <TIM_Base_SetConfig+0x9a>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4a31      	ldr	r2, [pc, #196]	@ (800c704 <TIM_Base_SetConfig+0x134>)
 800c63e:	4293      	cmp	r3, r2
 800c640:	d013      	beq.n	800c66a <TIM_Base_SetConfig+0x9a>
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a30      	ldr	r2, [pc, #192]	@ (800c708 <TIM_Base_SetConfig+0x138>)
 800c646:	4293      	cmp	r3, r2
 800c648:	d00f      	beq.n	800c66a <TIM_Base_SetConfig+0x9a>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4a2f      	ldr	r2, [pc, #188]	@ (800c70c <TIM_Base_SetConfig+0x13c>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d00b      	beq.n	800c66a <TIM_Base_SetConfig+0x9a>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4a2e      	ldr	r2, [pc, #184]	@ (800c710 <TIM_Base_SetConfig+0x140>)
 800c656:	4293      	cmp	r3, r2
 800c658:	d007      	beq.n	800c66a <TIM_Base_SetConfig+0x9a>
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	4a2d      	ldr	r2, [pc, #180]	@ (800c714 <TIM_Base_SetConfig+0x144>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d003      	beq.n	800c66a <TIM_Base_SetConfig+0x9a>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a2c      	ldr	r2, [pc, #176]	@ (800c718 <TIM_Base_SetConfig+0x148>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d108      	bne.n	800c67c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	68db      	ldr	r3, [r3, #12]
 800c676:	68fa      	ldr	r2, [r7, #12]
 800c678:	4313      	orrs	r3, r2
 800c67a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	695b      	ldr	r3, [r3, #20]
 800c686:	4313      	orrs	r3, r2
 800c688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	689a      	ldr	r2, [r3, #8]
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a16      	ldr	r2, [pc, #88]	@ (800c6fc <TIM_Base_SetConfig+0x12c>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d00f      	beq.n	800c6c8 <TIM_Base_SetConfig+0xf8>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a18      	ldr	r2, [pc, #96]	@ (800c70c <TIM_Base_SetConfig+0x13c>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d00b      	beq.n	800c6c8 <TIM_Base_SetConfig+0xf8>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a17      	ldr	r2, [pc, #92]	@ (800c710 <TIM_Base_SetConfig+0x140>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d007      	beq.n	800c6c8 <TIM_Base_SetConfig+0xf8>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a16      	ldr	r2, [pc, #88]	@ (800c714 <TIM_Base_SetConfig+0x144>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d003      	beq.n	800c6c8 <TIM_Base_SetConfig+0xf8>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4a15      	ldr	r2, [pc, #84]	@ (800c718 <TIM_Base_SetConfig+0x148>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d103      	bne.n	800c6d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	691a      	ldr	r2, [r3, #16]
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	f003 0301 	and.w	r3, r3, #1
 800c6de:	2b01      	cmp	r3, #1
 800c6e0:	d105      	bne.n	800c6ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	f023 0201 	bic.w	r2, r3, #1
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	611a      	str	r2, [r3, #16]
  }
}
 800c6ee:	bf00      	nop
 800c6f0:	3714      	adds	r7, #20
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f8:	4770      	bx	lr
 800c6fa:	bf00      	nop
 800c6fc:	40010000 	.word	0x40010000
 800c700:	40000400 	.word	0x40000400
 800c704:	40000800 	.word	0x40000800
 800c708:	40000c00 	.word	0x40000c00
 800c70c:	40010400 	.word	0x40010400
 800c710:	40014000 	.word	0x40014000
 800c714:	40014400 	.word	0x40014400
 800c718:	40014800 	.word	0x40014800

0800c71c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b087      	sub	sp, #28
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	6a1b      	ldr	r3, [r3, #32]
 800c72c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	6a1b      	ldr	r3, [r3, #32]
 800c732:	f023 0201 	bic.w	r2, r3, #1
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c746:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	011b      	lsls	r3, r3, #4
 800c74c:	693a      	ldr	r2, [r7, #16]
 800c74e:	4313      	orrs	r3, r2
 800c750:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	f023 030a 	bic.w	r3, r3, #10
 800c758:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c75a:	697a      	ldr	r2, [r7, #20]
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	4313      	orrs	r3, r2
 800c760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	697a      	ldr	r2, [r7, #20]
 800c76c:	621a      	str	r2, [r3, #32]
}
 800c76e:	bf00      	nop
 800c770:	371c      	adds	r7, #28
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c77a:	b480      	push	{r7}
 800c77c:	b087      	sub	sp, #28
 800c77e:	af00      	add	r7, sp, #0
 800c780:	60f8      	str	r0, [r7, #12]
 800c782:	60b9      	str	r1, [r7, #8]
 800c784:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6a1b      	ldr	r3, [r3, #32]
 800c78a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6a1b      	ldr	r3, [r3, #32]
 800c790:	f023 0210 	bic.w	r2, r3, #16
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	699b      	ldr	r3, [r3, #24]
 800c79c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c7a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	031b      	lsls	r3, r3, #12
 800c7aa:	693a      	ldr	r2, [r7, #16]
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c7b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	011b      	lsls	r3, r3, #4
 800c7bc:	697a      	ldr	r2, [r7, #20]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	697a      	ldr	r2, [r7, #20]
 800c7cc:	621a      	str	r2, [r3, #32]
}
 800c7ce:	bf00      	nop
 800c7d0:	371c      	adds	r7, #28
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
	...

0800c7dc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	4b09      	ldr	r3, [pc, #36]	@ (800c814 <TIM_ITRx_SetConfig+0x38>)
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c7f4:	683a      	ldr	r2, [r7, #0]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	4313      	orrs	r3, r2
 800c7fa:	f043 0307 	orr.w	r3, r3, #7
 800c7fe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	609a      	str	r2, [r3, #8]
}
 800c806:	bf00      	nop
 800c808:	3714      	adds	r7, #20
 800c80a:	46bd      	mov	sp, r7
 800c80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c810:	4770      	bx	lr
 800c812:	bf00      	nop
 800c814:	ffcfff8f 	.word	0xffcfff8f

0800c818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c818:	b480      	push	{r7}
 800c81a:	b087      	sub	sp, #28
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
 800c824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c82c:	697b      	ldr	r3, [r7, #20]
 800c82e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	021a      	lsls	r2, r3, #8
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	431a      	orrs	r2, r3
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	4313      	orrs	r3, r2
 800c840:	697a      	ldr	r2, [r7, #20]
 800c842:	4313      	orrs	r3, r2
 800c844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	697a      	ldr	r2, [r7, #20]
 800c84a:	609a      	str	r2, [r3, #8]
}
 800c84c:	bf00      	nop
 800c84e:	371c      	adds	r7, #28
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c858:	b480      	push	{r7}
 800c85a:	b087      	sub	sp, #28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	f003 031f 	and.w	r3, r3, #31
 800c86a:	2201      	movs	r2, #1
 800c86c:	fa02 f303 	lsl.w	r3, r2, r3
 800c870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6a1a      	ldr	r2, [r3, #32]
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	43db      	mvns	r3, r3
 800c87a:	401a      	ands	r2, r3
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	6a1a      	ldr	r2, [r3, #32]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	f003 031f 	and.w	r3, r3, #31
 800c88a:	6879      	ldr	r1, [r7, #4]
 800c88c:	fa01 f303 	lsl.w	r3, r1, r3
 800c890:	431a      	orrs	r2, r3
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	621a      	str	r2, [r3, #32]
}
 800c896:	bf00      	nop
 800c898:	371c      	adds	r7, #28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a0:	4770      	bx	lr
	...

0800c8a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c8a4:	b480      	push	{r7}
 800c8a6:	b085      	sub	sp, #20
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d101      	bne.n	800c8bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c8b8:	2302      	movs	r3, #2
 800c8ba:	e06d      	b.n	800c998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2202      	movs	r2, #2
 800c8c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a30      	ldr	r2, [pc, #192]	@ (800c9a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c8e2:	4293      	cmp	r3, r2
 800c8e4:	d004      	beq.n	800c8f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a2f      	ldr	r2, [pc, #188]	@ (800c9a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c8ec:	4293      	cmp	r3, r2
 800c8ee:	d108      	bne.n	800c902 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c8f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c8f8:	683b      	ldr	r3, [r7, #0]
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	68fa      	ldr	r2, [r7, #12]
 800c8fe:	4313      	orrs	r3, r2
 800c900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c908:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	68fa      	ldr	r2, [r7, #12]
 800c910:	4313      	orrs	r3, r2
 800c912:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a20      	ldr	r2, [pc, #128]	@ (800c9a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d022      	beq.n	800c96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c92e:	d01d      	beq.n	800c96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a1d      	ldr	r2, [pc, #116]	@ (800c9ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d018      	beq.n	800c96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	4a1c      	ldr	r2, [pc, #112]	@ (800c9b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c940:	4293      	cmp	r3, r2
 800c942:	d013      	beq.n	800c96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	4a1a      	ldr	r2, [pc, #104]	@ (800c9b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c94a:	4293      	cmp	r3, r2
 800c94c:	d00e      	beq.n	800c96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	4a15      	ldr	r2, [pc, #84]	@ (800c9a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d009      	beq.n	800c96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	4a16      	ldr	r2, [pc, #88]	@ (800c9b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c95e:	4293      	cmp	r3, r2
 800c960:	d004      	beq.n	800c96c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	4a15      	ldr	r2, [pc, #84]	@ (800c9bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c968:	4293      	cmp	r3, r2
 800c96a:	d10c      	bne.n	800c986 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	68ba      	ldr	r2, [r7, #8]
 800c97a:	4313      	orrs	r3, r2
 800c97c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	68ba      	ldr	r2, [r7, #8]
 800c984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2201      	movs	r2, #1
 800c98a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c996:	2300      	movs	r3, #0
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3714      	adds	r7, #20
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr
 800c9a4:	40010000 	.word	0x40010000
 800c9a8:	40010400 	.word	0x40010400
 800c9ac:	40000400 	.word	0x40000400
 800c9b0:	40000800 	.word	0x40000800
 800c9b4:	40000c00 	.word	0x40000c00
 800c9b8:	40001800 	.word	0x40001800
 800c9bc:	40014000 	.word	0x40014000

0800c9c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b083      	sub	sp, #12
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c9c8:	bf00      	nop
 800c9ca:	370c      	adds	r7, #12
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d2:	4770      	bx	lr

0800c9d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b083      	sub	sp, #12
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c9dc:	bf00      	nop
 800c9de:	370c      	adds	r7, #12
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b083      	sub	sp, #12
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c9f0:	bf00      	nop
 800c9f2:	370c      	adds	r7, #12
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9fa:	4770      	bx	lr

0800c9fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d101      	bne.n	800ca0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ca0a:	2301      	movs	r3, #1
 800ca0c:	e042      	b.n	800ca94 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d106      	bne.n	800ca26 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f7f6 fb1b 	bl	800305c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2224      	movs	r2, #36	@ 0x24
 800ca2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f022 0201 	bic.w	r2, r2, #1
 800ca3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d002      	beq.n	800ca4c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 fd90 	bl	800d56c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 f825 	bl	800ca9c <UART_SetConfig>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	d101      	bne.n	800ca5c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e01b      	b.n	800ca94 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	685a      	ldr	r2, [r3, #4]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ca6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	689a      	ldr	r2, [r3, #8]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ca7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f042 0201 	orr.w	r2, r2, #1
 800ca8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f000 fe0f 	bl	800d6b0 <UART_CheckIdleState>
 800ca92:	4603      	mov	r3, r0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800caa0:	b092      	sub	sp, #72	@ 0x48
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	689a      	ldr	r2, [r3, #8]
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	431a      	orrs	r2, r3
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	695b      	ldr	r3, [r3, #20]
 800caba:	431a      	orrs	r2, r3
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	69db      	ldr	r3, [r3, #28]
 800cac0:	4313      	orrs	r3, r2
 800cac2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	681a      	ldr	r2, [r3, #0]
 800caca:	4bbe      	ldr	r3, [pc, #760]	@ (800cdc4 <UART_SetConfig+0x328>)
 800cacc:	4013      	ands	r3, r2
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	6812      	ldr	r2, [r2, #0]
 800cad2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cad4:	430b      	orrs	r3, r1
 800cad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cae2:	697b      	ldr	r3, [r7, #20]
 800cae4:	68da      	ldr	r2, [r3, #12]
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	430a      	orrs	r2, r1
 800caec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800caee:	697b      	ldr	r3, [r7, #20]
 800caf0:	699b      	ldr	r3, [r3, #24]
 800caf2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800caf4:	697b      	ldr	r3, [r7, #20]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	4ab3      	ldr	r2, [pc, #716]	@ (800cdc8 <UART_SetConfig+0x32c>)
 800cafa:	4293      	cmp	r3, r2
 800cafc:	d004      	beq.n	800cb08 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	6a1b      	ldr	r3, [r3, #32]
 800cb02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb04:	4313      	orrs	r3, r2
 800cb06:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	689a      	ldr	r2, [r3, #8]
 800cb0e:	4baf      	ldr	r3, [pc, #700]	@ (800cdcc <UART_SetConfig+0x330>)
 800cb10:	4013      	ands	r3, r2
 800cb12:	697a      	ldr	r2, [r7, #20]
 800cb14:	6812      	ldr	r2, [r2, #0]
 800cb16:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cb18:	430b      	orrs	r3, r1
 800cb1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb22:	f023 010f 	bic.w	r1, r3, #15
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	430a      	orrs	r2, r1
 800cb30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb32:	697b      	ldr	r3, [r7, #20]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	4aa6      	ldr	r2, [pc, #664]	@ (800cdd0 <UART_SetConfig+0x334>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d177      	bne.n	800cc2c <UART_SetConfig+0x190>
 800cb3c:	4ba5      	ldr	r3, [pc, #660]	@ (800cdd4 <UART_SetConfig+0x338>)
 800cb3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb44:	2b28      	cmp	r3, #40	@ 0x28
 800cb46:	d86d      	bhi.n	800cc24 <UART_SetConfig+0x188>
 800cb48:	a201      	add	r2, pc, #4	@ (adr r2, 800cb50 <UART_SetConfig+0xb4>)
 800cb4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb4e:	bf00      	nop
 800cb50:	0800cbf5 	.word	0x0800cbf5
 800cb54:	0800cc25 	.word	0x0800cc25
 800cb58:	0800cc25 	.word	0x0800cc25
 800cb5c:	0800cc25 	.word	0x0800cc25
 800cb60:	0800cc25 	.word	0x0800cc25
 800cb64:	0800cc25 	.word	0x0800cc25
 800cb68:	0800cc25 	.word	0x0800cc25
 800cb6c:	0800cc25 	.word	0x0800cc25
 800cb70:	0800cbfd 	.word	0x0800cbfd
 800cb74:	0800cc25 	.word	0x0800cc25
 800cb78:	0800cc25 	.word	0x0800cc25
 800cb7c:	0800cc25 	.word	0x0800cc25
 800cb80:	0800cc25 	.word	0x0800cc25
 800cb84:	0800cc25 	.word	0x0800cc25
 800cb88:	0800cc25 	.word	0x0800cc25
 800cb8c:	0800cc25 	.word	0x0800cc25
 800cb90:	0800cc05 	.word	0x0800cc05
 800cb94:	0800cc25 	.word	0x0800cc25
 800cb98:	0800cc25 	.word	0x0800cc25
 800cb9c:	0800cc25 	.word	0x0800cc25
 800cba0:	0800cc25 	.word	0x0800cc25
 800cba4:	0800cc25 	.word	0x0800cc25
 800cba8:	0800cc25 	.word	0x0800cc25
 800cbac:	0800cc25 	.word	0x0800cc25
 800cbb0:	0800cc0d 	.word	0x0800cc0d
 800cbb4:	0800cc25 	.word	0x0800cc25
 800cbb8:	0800cc25 	.word	0x0800cc25
 800cbbc:	0800cc25 	.word	0x0800cc25
 800cbc0:	0800cc25 	.word	0x0800cc25
 800cbc4:	0800cc25 	.word	0x0800cc25
 800cbc8:	0800cc25 	.word	0x0800cc25
 800cbcc:	0800cc25 	.word	0x0800cc25
 800cbd0:	0800cc15 	.word	0x0800cc15
 800cbd4:	0800cc25 	.word	0x0800cc25
 800cbd8:	0800cc25 	.word	0x0800cc25
 800cbdc:	0800cc25 	.word	0x0800cc25
 800cbe0:	0800cc25 	.word	0x0800cc25
 800cbe4:	0800cc25 	.word	0x0800cc25
 800cbe8:	0800cc25 	.word	0x0800cc25
 800cbec:	0800cc25 	.word	0x0800cc25
 800cbf0:	0800cc1d 	.word	0x0800cc1d
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cbfa:	e222      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cbfc:	2304      	movs	r3, #4
 800cbfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc02:	e21e      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc04:	2308      	movs	r3, #8
 800cc06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc0a:	e21a      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc0c:	2310      	movs	r3, #16
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc12:	e216      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc14:	2320      	movs	r3, #32
 800cc16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc1a:	e212      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc1c:	2340      	movs	r3, #64	@ 0x40
 800cc1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc22:	e20e      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc24:	2380      	movs	r3, #128	@ 0x80
 800cc26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc2a:	e20a      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a69      	ldr	r2, [pc, #420]	@ (800cdd8 <UART_SetConfig+0x33c>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d130      	bne.n	800cc98 <UART_SetConfig+0x1fc>
 800cc36:	4b67      	ldr	r3, [pc, #412]	@ (800cdd4 <UART_SetConfig+0x338>)
 800cc38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc3a:	f003 0307 	and.w	r3, r3, #7
 800cc3e:	2b05      	cmp	r3, #5
 800cc40:	d826      	bhi.n	800cc90 <UART_SetConfig+0x1f4>
 800cc42:	a201      	add	r2, pc, #4	@ (adr r2, 800cc48 <UART_SetConfig+0x1ac>)
 800cc44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc48:	0800cc61 	.word	0x0800cc61
 800cc4c:	0800cc69 	.word	0x0800cc69
 800cc50:	0800cc71 	.word	0x0800cc71
 800cc54:	0800cc79 	.word	0x0800cc79
 800cc58:	0800cc81 	.word	0x0800cc81
 800cc5c:	0800cc89 	.word	0x0800cc89
 800cc60:	2300      	movs	r3, #0
 800cc62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc66:	e1ec      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc68:	2304      	movs	r3, #4
 800cc6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc6e:	e1e8      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc70:	2308      	movs	r3, #8
 800cc72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc76:	e1e4      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc78:	2310      	movs	r3, #16
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc7e:	e1e0      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc80:	2320      	movs	r3, #32
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc86:	e1dc      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc88:	2340      	movs	r3, #64	@ 0x40
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc8e:	e1d8      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc90:	2380      	movs	r3, #128	@ 0x80
 800cc92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cc96:	e1d4      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cc98:	697b      	ldr	r3, [r7, #20]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a4f      	ldr	r2, [pc, #316]	@ (800cddc <UART_SetConfig+0x340>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d130      	bne.n	800cd04 <UART_SetConfig+0x268>
 800cca2:	4b4c      	ldr	r3, [pc, #304]	@ (800cdd4 <UART_SetConfig+0x338>)
 800cca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cca6:	f003 0307 	and.w	r3, r3, #7
 800ccaa:	2b05      	cmp	r3, #5
 800ccac:	d826      	bhi.n	800ccfc <UART_SetConfig+0x260>
 800ccae:	a201      	add	r2, pc, #4	@ (adr r2, 800ccb4 <UART_SetConfig+0x218>)
 800ccb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb4:	0800cccd 	.word	0x0800cccd
 800ccb8:	0800ccd5 	.word	0x0800ccd5
 800ccbc:	0800ccdd 	.word	0x0800ccdd
 800ccc0:	0800cce5 	.word	0x0800cce5
 800ccc4:	0800cced 	.word	0x0800cced
 800ccc8:	0800ccf5 	.word	0x0800ccf5
 800cccc:	2300      	movs	r3, #0
 800ccce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccd2:	e1b6      	b.n	800d042 <UART_SetConfig+0x5a6>
 800ccd4:	2304      	movs	r3, #4
 800ccd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccda:	e1b2      	b.n	800d042 <UART_SetConfig+0x5a6>
 800ccdc:	2308      	movs	r3, #8
 800ccde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cce2:	e1ae      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cce4:	2310      	movs	r3, #16
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccea:	e1aa      	b.n	800d042 <UART_SetConfig+0x5a6>
 800ccec:	2320      	movs	r3, #32
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccf2:	e1a6      	b.n	800d042 <UART_SetConfig+0x5a6>
 800ccf4:	2340      	movs	r3, #64	@ 0x40
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ccfa:	e1a2      	b.n	800d042 <UART_SetConfig+0x5a6>
 800ccfc:	2380      	movs	r3, #128	@ 0x80
 800ccfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd02:	e19e      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a35      	ldr	r2, [pc, #212]	@ (800cde0 <UART_SetConfig+0x344>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d130      	bne.n	800cd70 <UART_SetConfig+0x2d4>
 800cd0e:	4b31      	ldr	r3, [pc, #196]	@ (800cdd4 <UART_SetConfig+0x338>)
 800cd10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd12:	f003 0307 	and.w	r3, r3, #7
 800cd16:	2b05      	cmp	r3, #5
 800cd18:	d826      	bhi.n	800cd68 <UART_SetConfig+0x2cc>
 800cd1a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd20 <UART_SetConfig+0x284>)
 800cd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd20:	0800cd39 	.word	0x0800cd39
 800cd24:	0800cd41 	.word	0x0800cd41
 800cd28:	0800cd49 	.word	0x0800cd49
 800cd2c:	0800cd51 	.word	0x0800cd51
 800cd30:	0800cd59 	.word	0x0800cd59
 800cd34:	0800cd61 	.word	0x0800cd61
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd3e:	e180      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cd40:	2304      	movs	r3, #4
 800cd42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd46:	e17c      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cd48:	2308      	movs	r3, #8
 800cd4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd4e:	e178      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cd50:	2310      	movs	r3, #16
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd56:	e174      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cd58:	2320      	movs	r3, #32
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd5e:	e170      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cd60:	2340      	movs	r3, #64	@ 0x40
 800cd62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd66:	e16c      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cd68:	2380      	movs	r3, #128	@ 0x80
 800cd6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cd6e:	e168      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a1b      	ldr	r2, [pc, #108]	@ (800cde4 <UART_SetConfig+0x348>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d142      	bne.n	800ce00 <UART_SetConfig+0x364>
 800cd7a:	4b16      	ldr	r3, [pc, #88]	@ (800cdd4 <UART_SetConfig+0x338>)
 800cd7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd7e:	f003 0307 	and.w	r3, r3, #7
 800cd82:	2b05      	cmp	r3, #5
 800cd84:	d838      	bhi.n	800cdf8 <UART_SetConfig+0x35c>
 800cd86:	a201      	add	r2, pc, #4	@ (adr r2, 800cd8c <UART_SetConfig+0x2f0>)
 800cd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd8c:	0800cda5 	.word	0x0800cda5
 800cd90:	0800cdad 	.word	0x0800cdad
 800cd94:	0800cdb5 	.word	0x0800cdb5
 800cd98:	0800cdbd 	.word	0x0800cdbd
 800cd9c:	0800cde9 	.word	0x0800cde9
 800cda0:	0800cdf1 	.word	0x0800cdf1
 800cda4:	2300      	movs	r3, #0
 800cda6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdaa:	e14a      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cdac:	2304      	movs	r3, #4
 800cdae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdb2:	e146      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cdb4:	2308      	movs	r3, #8
 800cdb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdba:	e142      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cdbc:	2310      	movs	r3, #16
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdc2:	e13e      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cdc4:	cfff69f3 	.word	0xcfff69f3
 800cdc8:	58000c00 	.word	0x58000c00
 800cdcc:	11fff4ff 	.word	0x11fff4ff
 800cdd0:	40011000 	.word	0x40011000
 800cdd4:	58024400 	.word	0x58024400
 800cdd8:	40004400 	.word	0x40004400
 800cddc:	40004800 	.word	0x40004800
 800cde0:	40004c00 	.word	0x40004c00
 800cde4:	40005000 	.word	0x40005000
 800cde8:	2320      	movs	r3, #32
 800cdea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdee:	e128      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cdf0:	2340      	movs	r3, #64	@ 0x40
 800cdf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdf6:	e124      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cdf8:	2380      	movs	r3, #128	@ 0x80
 800cdfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cdfe:	e120      	b.n	800d042 <UART_SetConfig+0x5a6>
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4acb      	ldr	r2, [pc, #812]	@ (800d134 <UART_SetConfig+0x698>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d176      	bne.n	800cef8 <UART_SetConfig+0x45c>
 800ce0a:	4bcb      	ldr	r3, [pc, #812]	@ (800d138 <UART_SetConfig+0x69c>)
 800ce0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce12:	2b28      	cmp	r3, #40	@ 0x28
 800ce14:	d86c      	bhi.n	800cef0 <UART_SetConfig+0x454>
 800ce16:	a201      	add	r2, pc, #4	@ (adr r2, 800ce1c <UART_SetConfig+0x380>)
 800ce18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce1c:	0800cec1 	.word	0x0800cec1
 800ce20:	0800cef1 	.word	0x0800cef1
 800ce24:	0800cef1 	.word	0x0800cef1
 800ce28:	0800cef1 	.word	0x0800cef1
 800ce2c:	0800cef1 	.word	0x0800cef1
 800ce30:	0800cef1 	.word	0x0800cef1
 800ce34:	0800cef1 	.word	0x0800cef1
 800ce38:	0800cef1 	.word	0x0800cef1
 800ce3c:	0800cec9 	.word	0x0800cec9
 800ce40:	0800cef1 	.word	0x0800cef1
 800ce44:	0800cef1 	.word	0x0800cef1
 800ce48:	0800cef1 	.word	0x0800cef1
 800ce4c:	0800cef1 	.word	0x0800cef1
 800ce50:	0800cef1 	.word	0x0800cef1
 800ce54:	0800cef1 	.word	0x0800cef1
 800ce58:	0800cef1 	.word	0x0800cef1
 800ce5c:	0800ced1 	.word	0x0800ced1
 800ce60:	0800cef1 	.word	0x0800cef1
 800ce64:	0800cef1 	.word	0x0800cef1
 800ce68:	0800cef1 	.word	0x0800cef1
 800ce6c:	0800cef1 	.word	0x0800cef1
 800ce70:	0800cef1 	.word	0x0800cef1
 800ce74:	0800cef1 	.word	0x0800cef1
 800ce78:	0800cef1 	.word	0x0800cef1
 800ce7c:	0800ced9 	.word	0x0800ced9
 800ce80:	0800cef1 	.word	0x0800cef1
 800ce84:	0800cef1 	.word	0x0800cef1
 800ce88:	0800cef1 	.word	0x0800cef1
 800ce8c:	0800cef1 	.word	0x0800cef1
 800ce90:	0800cef1 	.word	0x0800cef1
 800ce94:	0800cef1 	.word	0x0800cef1
 800ce98:	0800cef1 	.word	0x0800cef1
 800ce9c:	0800cee1 	.word	0x0800cee1
 800cea0:	0800cef1 	.word	0x0800cef1
 800cea4:	0800cef1 	.word	0x0800cef1
 800cea8:	0800cef1 	.word	0x0800cef1
 800ceac:	0800cef1 	.word	0x0800cef1
 800ceb0:	0800cef1 	.word	0x0800cef1
 800ceb4:	0800cef1 	.word	0x0800cef1
 800ceb8:	0800cef1 	.word	0x0800cef1
 800cebc:	0800cee9 	.word	0x0800cee9
 800cec0:	2301      	movs	r3, #1
 800cec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec6:	e0bc      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cec8:	2304      	movs	r3, #4
 800ceca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cece:	e0b8      	b.n	800d042 <UART_SetConfig+0x5a6>
 800ced0:	2308      	movs	r3, #8
 800ced2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced6:	e0b4      	b.n	800d042 <UART_SetConfig+0x5a6>
 800ced8:	2310      	movs	r3, #16
 800ceda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cede:	e0b0      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cee0:	2320      	movs	r3, #32
 800cee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cee6:	e0ac      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cee8:	2340      	movs	r3, #64	@ 0x40
 800ceea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceee:	e0a8      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cef0:	2380      	movs	r3, #128	@ 0x80
 800cef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cef6:	e0a4      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4a8f      	ldr	r2, [pc, #572]	@ (800d13c <UART_SetConfig+0x6a0>)
 800cefe:	4293      	cmp	r3, r2
 800cf00:	d130      	bne.n	800cf64 <UART_SetConfig+0x4c8>
 800cf02:	4b8d      	ldr	r3, [pc, #564]	@ (800d138 <UART_SetConfig+0x69c>)
 800cf04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf06:	f003 0307 	and.w	r3, r3, #7
 800cf0a:	2b05      	cmp	r3, #5
 800cf0c:	d826      	bhi.n	800cf5c <UART_SetConfig+0x4c0>
 800cf0e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf14 <UART_SetConfig+0x478>)
 800cf10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf14:	0800cf2d 	.word	0x0800cf2d
 800cf18:	0800cf35 	.word	0x0800cf35
 800cf1c:	0800cf3d 	.word	0x0800cf3d
 800cf20:	0800cf45 	.word	0x0800cf45
 800cf24:	0800cf4d 	.word	0x0800cf4d
 800cf28:	0800cf55 	.word	0x0800cf55
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf32:	e086      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cf34:	2304      	movs	r3, #4
 800cf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3a:	e082      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cf3c:	2308      	movs	r3, #8
 800cf3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf42:	e07e      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cf44:	2310      	movs	r3, #16
 800cf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf4a:	e07a      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cf4c:	2320      	movs	r3, #32
 800cf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf52:	e076      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cf54:	2340      	movs	r3, #64	@ 0x40
 800cf56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf5a:	e072      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cf5c:	2380      	movs	r3, #128	@ 0x80
 800cf5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf62:	e06e      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a75      	ldr	r2, [pc, #468]	@ (800d140 <UART_SetConfig+0x6a4>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d130      	bne.n	800cfd0 <UART_SetConfig+0x534>
 800cf6e:	4b72      	ldr	r3, [pc, #456]	@ (800d138 <UART_SetConfig+0x69c>)
 800cf70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf72:	f003 0307 	and.w	r3, r3, #7
 800cf76:	2b05      	cmp	r3, #5
 800cf78:	d826      	bhi.n	800cfc8 <UART_SetConfig+0x52c>
 800cf7a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf80 <UART_SetConfig+0x4e4>)
 800cf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf80:	0800cf99 	.word	0x0800cf99
 800cf84:	0800cfa1 	.word	0x0800cfa1
 800cf88:	0800cfa9 	.word	0x0800cfa9
 800cf8c:	0800cfb1 	.word	0x0800cfb1
 800cf90:	0800cfb9 	.word	0x0800cfb9
 800cf94:	0800cfc1 	.word	0x0800cfc1
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9e:	e050      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cfa0:	2304      	movs	r3, #4
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa6:	e04c      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cfa8:	2308      	movs	r3, #8
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfae:	e048      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cfb0:	2310      	movs	r3, #16
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfb6:	e044      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cfb8:	2320      	movs	r3, #32
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfbe:	e040      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cfc0:	2340      	movs	r3, #64	@ 0x40
 800cfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfc6:	e03c      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cfc8:	2380      	movs	r3, #128	@ 0x80
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfce:	e038      	b.n	800d042 <UART_SetConfig+0x5a6>
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a5b      	ldr	r2, [pc, #364]	@ (800d144 <UART_SetConfig+0x6a8>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d130      	bne.n	800d03c <UART_SetConfig+0x5a0>
 800cfda:	4b57      	ldr	r3, [pc, #348]	@ (800d138 <UART_SetConfig+0x69c>)
 800cfdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfde:	f003 0307 	and.w	r3, r3, #7
 800cfe2:	2b05      	cmp	r3, #5
 800cfe4:	d826      	bhi.n	800d034 <UART_SetConfig+0x598>
 800cfe6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfec <UART_SetConfig+0x550>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800d005 	.word	0x0800d005
 800cff0:	0800d00d 	.word	0x0800d00d
 800cff4:	0800d015 	.word	0x0800d015
 800cff8:	0800d01d 	.word	0x0800d01d
 800cffc:	0800d025 	.word	0x0800d025
 800d000:	0800d02d 	.word	0x0800d02d
 800d004:	2302      	movs	r3, #2
 800d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00a:	e01a      	b.n	800d042 <UART_SetConfig+0x5a6>
 800d00c:	2304      	movs	r3, #4
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d012:	e016      	b.n	800d042 <UART_SetConfig+0x5a6>
 800d014:	2308      	movs	r3, #8
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01a:	e012      	b.n	800d042 <UART_SetConfig+0x5a6>
 800d01c:	2310      	movs	r3, #16
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d022:	e00e      	b.n	800d042 <UART_SetConfig+0x5a6>
 800d024:	2320      	movs	r3, #32
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d02a:	e00a      	b.n	800d042 <UART_SetConfig+0x5a6>
 800d02c:	2340      	movs	r3, #64	@ 0x40
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d032:	e006      	b.n	800d042 <UART_SetConfig+0x5a6>
 800d034:	2380      	movs	r3, #128	@ 0x80
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d03a:	e002      	b.n	800d042 <UART_SetConfig+0x5a6>
 800d03c:	2380      	movs	r3, #128	@ 0x80
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a3f      	ldr	r2, [pc, #252]	@ (800d144 <UART_SetConfig+0x6a8>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	f040 80f8 	bne.w	800d23e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d04e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d052:	2b20      	cmp	r3, #32
 800d054:	dc46      	bgt.n	800d0e4 <UART_SetConfig+0x648>
 800d056:	2b02      	cmp	r3, #2
 800d058:	f2c0 8082 	blt.w	800d160 <UART_SetConfig+0x6c4>
 800d05c:	3b02      	subs	r3, #2
 800d05e:	2b1e      	cmp	r3, #30
 800d060:	d87e      	bhi.n	800d160 <UART_SetConfig+0x6c4>
 800d062:	a201      	add	r2, pc, #4	@ (adr r2, 800d068 <UART_SetConfig+0x5cc>)
 800d064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d068:	0800d0eb 	.word	0x0800d0eb
 800d06c:	0800d161 	.word	0x0800d161
 800d070:	0800d0f3 	.word	0x0800d0f3
 800d074:	0800d161 	.word	0x0800d161
 800d078:	0800d161 	.word	0x0800d161
 800d07c:	0800d161 	.word	0x0800d161
 800d080:	0800d103 	.word	0x0800d103
 800d084:	0800d161 	.word	0x0800d161
 800d088:	0800d161 	.word	0x0800d161
 800d08c:	0800d161 	.word	0x0800d161
 800d090:	0800d161 	.word	0x0800d161
 800d094:	0800d161 	.word	0x0800d161
 800d098:	0800d161 	.word	0x0800d161
 800d09c:	0800d161 	.word	0x0800d161
 800d0a0:	0800d113 	.word	0x0800d113
 800d0a4:	0800d161 	.word	0x0800d161
 800d0a8:	0800d161 	.word	0x0800d161
 800d0ac:	0800d161 	.word	0x0800d161
 800d0b0:	0800d161 	.word	0x0800d161
 800d0b4:	0800d161 	.word	0x0800d161
 800d0b8:	0800d161 	.word	0x0800d161
 800d0bc:	0800d161 	.word	0x0800d161
 800d0c0:	0800d161 	.word	0x0800d161
 800d0c4:	0800d161 	.word	0x0800d161
 800d0c8:	0800d161 	.word	0x0800d161
 800d0cc:	0800d161 	.word	0x0800d161
 800d0d0:	0800d161 	.word	0x0800d161
 800d0d4:	0800d161 	.word	0x0800d161
 800d0d8:	0800d161 	.word	0x0800d161
 800d0dc:	0800d161 	.word	0x0800d161
 800d0e0:	0800d153 	.word	0x0800d153
 800d0e4:	2b40      	cmp	r3, #64	@ 0x40
 800d0e6:	d037      	beq.n	800d158 <UART_SetConfig+0x6bc>
 800d0e8:	e03a      	b.n	800d160 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d0ea:	f7fe f8d1 	bl	800b290 <HAL_RCCEx_GetD3PCLK1Freq>
 800d0ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d0f0:	e03c      	b.n	800d16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe f8e0 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d100:	e034      	b.n	800d16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d102:	f107 0318 	add.w	r3, r7, #24
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fa2c 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d10c:	69fb      	ldr	r3, [r7, #28]
 800d10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d110:	e02c      	b.n	800d16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d112:	4b09      	ldr	r3, [pc, #36]	@ (800d138 <UART_SetConfig+0x69c>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	f003 0320 	and.w	r3, r3, #32
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d016      	beq.n	800d14c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d11e:	4b06      	ldr	r3, [pc, #24]	@ (800d138 <UART_SetConfig+0x69c>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	08db      	lsrs	r3, r3, #3
 800d124:	f003 0303 	and.w	r3, r3, #3
 800d128:	4a07      	ldr	r2, [pc, #28]	@ (800d148 <UART_SetConfig+0x6ac>)
 800d12a:	fa22 f303 	lsr.w	r3, r2, r3
 800d12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d130:	e01c      	b.n	800d16c <UART_SetConfig+0x6d0>
 800d132:	bf00      	nop
 800d134:	40011400 	.word	0x40011400
 800d138:	58024400 	.word	0x58024400
 800d13c:	40007800 	.word	0x40007800
 800d140:	40007c00 	.word	0x40007c00
 800d144:	58000c00 	.word	0x58000c00
 800d148:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d14c:	4b9d      	ldr	r3, [pc, #628]	@ (800d3c4 <UART_SetConfig+0x928>)
 800d14e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d150:	e00c      	b.n	800d16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d152:	4b9d      	ldr	r3, [pc, #628]	@ (800d3c8 <UART_SetConfig+0x92c>)
 800d154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d156:	e009      	b.n	800d16c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d158:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d15e:	e005      	b.n	800d16c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d160:	2300      	movs	r3, #0
 800d162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d16a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d16e:	2b00      	cmp	r3, #0
 800d170:	f000 81de 	beq.w	800d530 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d178:	4a94      	ldr	r2, [pc, #592]	@ (800d3cc <UART_SetConfig+0x930>)
 800d17a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d17e:	461a      	mov	r2, r3
 800d180:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d182:	fbb3 f3f2 	udiv	r3, r3, r2
 800d186:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	685a      	ldr	r2, [r3, #4]
 800d18c:	4613      	mov	r3, r2
 800d18e:	005b      	lsls	r3, r3, #1
 800d190:	4413      	add	r3, r2
 800d192:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d194:	429a      	cmp	r2, r3
 800d196:	d305      	bcc.n	800d1a4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	685b      	ldr	r3, [r3, #4]
 800d19c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d19e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d903      	bls.n	800d1ac <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d1a4:	2301      	movs	r3, #1
 800d1a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d1aa:	e1c1      	b.n	800d530 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	60bb      	str	r3, [r7, #8]
 800d1b2:	60fa      	str	r2, [r7, #12]
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1b8:	4a84      	ldr	r2, [pc, #528]	@ (800d3cc <UART_SetConfig+0x930>)
 800d1ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1be:	b29b      	uxth	r3, r3
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	603b      	str	r3, [r7, #0]
 800d1c4:	607a      	str	r2, [r7, #4]
 800d1c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1ce:	f7f3 f883 	bl	80002d8 <__aeabi_uldivmod>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	460b      	mov	r3, r1
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	4619      	mov	r1, r3
 800d1da:	f04f 0200 	mov.w	r2, #0
 800d1de:	f04f 0300 	mov.w	r3, #0
 800d1e2:	020b      	lsls	r3, r1, #8
 800d1e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d1e8:	0202      	lsls	r2, r0, #8
 800d1ea:	6979      	ldr	r1, [r7, #20]
 800d1ec:	6849      	ldr	r1, [r1, #4]
 800d1ee:	0849      	lsrs	r1, r1, #1
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	4605      	mov	r5, r0
 800d1f6:	eb12 0804 	adds.w	r8, r2, r4
 800d1fa:	eb43 0905 	adc.w	r9, r3, r5
 800d1fe:	697b      	ldr	r3, [r7, #20]
 800d200:	685b      	ldr	r3, [r3, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	469a      	mov	sl, r3
 800d206:	4693      	mov	fp, r2
 800d208:	4652      	mov	r2, sl
 800d20a:	465b      	mov	r3, fp
 800d20c:	4640      	mov	r0, r8
 800d20e:	4649      	mov	r1, r9
 800d210:	f7f3 f862 	bl	80002d8 <__aeabi_uldivmod>
 800d214:	4602      	mov	r2, r0
 800d216:	460b      	mov	r3, r1
 800d218:	4613      	mov	r3, r2
 800d21a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d21c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d21e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d222:	d308      	bcc.n	800d236 <UART_SetConfig+0x79a>
 800d224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d226:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d22a:	d204      	bcs.n	800d236 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d22c:	697b      	ldr	r3, [r7, #20]
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d232:	60da      	str	r2, [r3, #12]
 800d234:	e17c      	b.n	800d530 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d236:	2301      	movs	r3, #1
 800d238:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d23c:	e178      	b.n	800d530 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	69db      	ldr	r3, [r3, #28]
 800d242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d246:	f040 80c5 	bne.w	800d3d4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d24a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d24e:	2b20      	cmp	r3, #32
 800d250:	dc48      	bgt.n	800d2e4 <UART_SetConfig+0x848>
 800d252:	2b00      	cmp	r3, #0
 800d254:	db7b      	blt.n	800d34e <UART_SetConfig+0x8b2>
 800d256:	2b20      	cmp	r3, #32
 800d258:	d879      	bhi.n	800d34e <UART_SetConfig+0x8b2>
 800d25a:	a201      	add	r2, pc, #4	@ (adr r2, 800d260 <UART_SetConfig+0x7c4>)
 800d25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d260:	0800d2eb 	.word	0x0800d2eb
 800d264:	0800d2f3 	.word	0x0800d2f3
 800d268:	0800d34f 	.word	0x0800d34f
 800d26c:	0800d34f 	.word	0x0800d34f
 800d270:	0800d2fb 	.word	0x0800d2fb
 800d274:	0800d34f 	.word	0x0800d34f
 800d278:	0800d34f 	.word	0x0800d34f
 800d27c:	0800d34f 	.word	0x0800d34f
 800d280:	0800d30b 	.word	0x0800d30b
 800d284:	0800d34f 	.word	0x0800d34f
 800d288:	0800d34f 	.word	0x0800d34f
 800d28c:	0800d34f 	.word	0x0800d34f
 800d290:	0800d34f 	.word	0x0800d34f
 800d294:	0800d34f 	.word	0x0800d34f
 800d298:	0800d34f 	.word	0x0800d34f
 800d29c:	0800d34f 	.word	0x0800d34f
 800d2a0:	0800d31b 	.word	0x0800d31b
 800d2a4:	0800d34f 	.word	0x0800d34f
 800d2a8:	0800d34f 	.word	0x0800d34f
 800d2ac:	0800d34f 	.word	0x0800d34f
 800d2b0:	0800d34f 	.word	0x0800d34f
 800d2b4:	0800d34f 	.word	0x0800d34f
 800d2b8:	0800d34f 	.word	0x0800d34f
 800d2bc:	0800d34f 	.word	0x0800d34f
 800d2c0:	0800d34f 	.word	0x0800d34f
 800d2c4:	0800d34f 	.word	0x0800d34f
 800d2c8:	0800d34f 	.word	0x0800d34f
 800d2cc:	0800d34f 	.word	0x0800d34f
 800d2d0:	0800d34f 	.word	0x0800d34f
 800d2d4:	0800d34f 	.word	0x0800d34f
 800d2d8:	0800d34f 	.word	0x0800d34f
 800d2dc:	0800d34f 	.word	0x0800d34f
 800d2e0:	0800d341 	.word	0x0800d341
 800d2e4:	2b40      	cmp	r3, #64	@ 0x40
 800d2e6:	d02e      	beq.n	800d346 <UART_SetConfig+0x8aa>
 800d2e8:	e031      	b.n	800d34e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2ea:	f7fc f81b 	bl	8009324 <HAL_RCC_GetPCLK1Freq>
 800d2ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d2f0:	e033      	b.n	800d35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d2f2:	f7fc f82d 	bl	8009350 <HAL_RCC_GetPCLK2Freq>
 800d2f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d2f8:	e02f      	b.n	800d35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d2fe:	4618      	mov	r0, r3
 800d300:	f7fd ffdc 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d308:	e027      	b.n	800d35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d30a:	f107 0318 	add.w	r3, r7, #24
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fe f928 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d318:	e01f      	b.n	800d35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d31a:	4b2d      	ldr	r3, [pc, #180]	@ (800d3d0 <UART_SetConfig+0x934>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	f003 0320 	and.w	r3, r3, #32
 800d322:	2b00      	cmp	r3, #0
 800d324:	d009      	beq.n	800d33a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d326:	4b2a      	ldr	r3, [pc, #168]	@ (800d3d0 <UART_SetConfig+0x934>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	08db      	lsrs	r3, r3, #3
 800d32c:	f003 0303 	and.w	r3, r3, #3
 800d330:	4a24      	ldr	r2, [pc, #144]	@ (800d3c4 <UART_SetConfig+0x928>)
 800d332:	fa22 f303 	lsr.w	r3, r2, r3
 800d336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d338:	e00f      	b.n	800d35a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d33a:	4b22      	ldr	r3, [pc, #136]	@ (800d3c4 <UART_SetConfig+0x928>)
 800d33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d33e:	e00c      	b.n	800d35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d340:	4b21      	ldr	r3, [pc, #132]	@ (800d3c8 <UART_SetConfig+0x92c>)
 800d342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d344:	e009      	b.n	800d35a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d34c:	e005      	b.n	800d35a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d34e:	2300      	movs	r3, #0
 800d350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d352:	2301      	movs	r3, #1
 800d354:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d358:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d35a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f000 80e7 	beq.w	800d530 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d366:	4a19      	ldr	r2, [pc, #100]	@ (800d3cc <UART_SetConfig+0x930>)
 800d368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d36c:	461a      	mov	r2, r3
 800d36e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d370:	fbb3 f3f2 	udiv	r3, r3, r2
 800d374:	005a      	lsls	r2, r3, #1
 800d376:	697b      	ldr	r3, [r7, #20]
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	085b      	lsrs	r3, r3, #1
 800d37c:	441a      	add	r2, r3
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	fbb2 f3f3 	udiv	r3, r2, r3
 800d386:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d38a:	2b0f      	cmp	r3, #15
 800d38c:	d916      	bls.n	800d3bc <UART_SetConfig+0x920>
 800d38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d394:	d212      	bcs.n	800d3bc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d398:	b29b      	uxth	r3, r3
 800d39a:	f023 030f 	bic.w	r3, r3, #15
 800d39e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3a2:	085b      	lsrs	r3, r3, #1
 800d3a4:	b29b      	uxth	r3, r3
 800d3a6:	f003 0307 	and.w	r3, r3, #7
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d3b2:	697b      	ldr	r3, [r7, #20]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d3b8:	60da      	str	r2, [r3, #12]
 800d3ba:	e0b9      	b.n	800d530 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d3c2:	e0b5      	b.n	800d530 <UART_SetConfig+0xa94>
 800d3c4:	03d09000 	.word	0x03d09000
 800d3c8:	003d0900 	.word	0x003d0900
 800d3cc:	0800dca4 	.word	0x0800dca4
 800d3d0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d3d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d3d8:	2b20      	cmp	r3, #32
 800d3da:	dc49      	bgt.n	800d470 <UART_SetConfig+0x9d4>
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	db7c      	blt.n	800d4da <UART_SetConfig+0xa3e>
 800d3e0:	2b20      	cmp	r3, #32
 800d3e2:	d87a      	bhi.n	800d4da <UART_SetConfig+0xa3e>
 800d3e4:	a201      	add	r2, pc, #4	@ (adr r2, 800d3ec <UART_SetConfig+0x950>)
 800d3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ea:	bf00      	nop
 800d3ec:	0800d477 	.word	0x0800d477
 800d3f0:	0800d47f 	.word	0x0800d47f
 800d3f4:	0800d4db 	.word	0x0800d4db
 800d3f8:	0800d4db 	.word	0x0800d4db
 800d3fc:	0800d487 	.word	0x0800d487
 800d400:	0800d4db 	.word	0x0800d4db
 800d404:	0800d4db 	.word	0x0800d4db
 800d408:	0800d4db 	.word	0x0800d4db
 800d40c:	0800d497 	.word	0x0800d497
 800d410:	0800d4db 	.word	0x0800d4db
 800d414:	0800d4db 	.word	0x0800d4db
 800d418:	0800d4db 	.word	0x0800d4db
 800d41c:	0800d4db 	.word	0x0800d4db
 800d420:	0800d4db 	.word	0x0800d4db
 800d424:	0800d4db 	.word	0x0800d4db
 800d428:	0800d4db 	.word	0x0800d4db
 800d42c:	0800d4a7 	.word	0x0800d4a7
 800d430:	0800d4db 	.word	0x0800d4db
 800d434:	0800d4db 	.word	0x0800d4db
 800d438:	0800d4db 	.word	0x0800d4db
 800d43c:	0800d4db 	.word	0x0800d4db
 800d440:	0800d4db 	.word	0x0800d4db
 800d444:	0800d4db 	.word	0x0800d4db
 800d448:	0800d4db 	.word	0x0800d4db
 800d44c:	0800d4db 	.word	0x0800d4db
 800d450:	0800d4db 	.word	0x0800d4db
 800d454:	0800d4db 	.word	0x0800d4db
 800d458:	0800d4db 	.word	0x0800d4db
 800d45c:	0800d4db 	.word	0x0800d4db
 800d460:	0800d4db 	.word	0x0800d4db
 800d464:	0800d4db 	.word	0x0800d4db
 800d468:	0800d4db 	.word	0x0800d4db
 800d46c:	0800d4cd 	.word	0x0800d4cd
 800d470:	2b40      	cmp	r3, #64	@ 0x40
 800d472:	d02e      	beq.n	800d4d2 <UART_SetConfig+0xa36>
 800d474:	e031      	b.n	800d4da <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d476:	f7fb ff55 	bl	8009324 <HAL_RCC_GetPCLK1Freq>
 800d47a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d47c:	e033      	b.n	800d4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d47e:	f7fb ff67 	bl	8009350 <HAL_RCC_GetPCLK2Freq>
 800d482:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d484:	e02f      	b.n	800d4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fd ff16 	bl	800b2bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d492:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d494:	e027      	b.n	800d4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d496:	f107 0318 	add.w	r3, r7, #24
 800d49a:	4618      	mov	r0, r3
 800d49c:	f7fe f862 	bl	800b564 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4a4:	e01f      	b.n	800d4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4a6:	4b2d      	ldr	r3, [pc, #180]	@ (800d55c <UART_SetConfig+0xac0>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f003 0320 	and.w	r3, r3, #32
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d009      	beq.n	800d4c6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d4b2:	4b2a      	ldr	r3, [pc, #168]	@ (800d55c <UART_SetConfig+0xac0>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	08db      	lsrs	r3, r3, #3
 800d4b8:	f003 0303 	and.w	r3, r3, #3
 800d4bc:	4a28      	ldr	r2, [pc, #160]	@ (800d560 <UART_SetConfig+0xac4>)
 800d4be:	fa22 f303 	lsr.w	r3, r2, r3
 800d4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d4c4:	e00f      	b.n	800d4e6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d4c6:	4b26      	ldr	r3, [pc, #152]	@ (800d560 <UART_SetConfig+0xac4>)
 800d4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4ca:	e00c      	b.n	800d4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d4cc:	4b25      	ldr	r3, [pc, #148]	@ (800d564 <UART_SetConfig+0xac8>)
 800d4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4d0:	e009      	b.n	800d4e6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4d8:	e005      	b.n	800d4e6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d4e4:	bf00      	nop
    }

    if (pclk != 0U)
 800d4e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d021      	beq.n	800d530 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f0:	4a1d      	ldr	r2, [pc, #116]	@ (800d568 <UART_SetConfig+0xacc>)
 800d4f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4f6:	461a      	mov	r2, r3
 800d4f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4fa:	fbb3 f2f2 	udiv	r2, r3, r2
 800d4fe:	697b      	ldr	r3, [r7, #20]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	085b      	lsrs	r3, r3, #1
 800d504:	441a      	add	r2, r3
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d50e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d512:	2b0f      	cmp	r3, #15
 800d514:	d909      	bls.n	800d52a <UART_SetConfig+0xa8e>
 800d516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d51c:	d205      	bcs.n	800d52a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d51e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d520:	b29a      	uxth	r2, r3
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	60da      	str	r2, [r3, #12]
 800d528:	e002      	b.n	800d530 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	2201      	movs	r2, #1
 800d534:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	2201      	movs	r2, #1
 800d53c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2200      	movs	r2, #0
 800d544:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	2200      	movs	r2, #0
 800d54a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d54c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d550:	4618      	mov	r0, r3
 800d552:	3748      	adds	r7, #72	@ 0x48
 800d554:	46bd      	mov	sp, r7
 800d556:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d55a:	bf00      	nop
 800d55c:	58024400 	.word	0x58024400
 800d560:	03d09000 	.word	0x03d09000
 800d564:	003d0900 	.word	0x003d0900
 800d568:	0800dca4 	.word	0x0800dca4

0800d56c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d56c:	b480      	push	{r7}
 800d56e:	b083      	sub	sp, #12
 800d570:	af00      	add	r7, sp, #0
 800d572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d578:	f003 0308 	and.w	r3, r3, #8
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00a      	beq.n	800d596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	430a      	orrs	r2, r1
 800d594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d59a:	f003 0301 	and.w	r3, r3, #1
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00a      	beq.n	800d5b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	430a      	orrs	r2, r1
 800d5b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5bc:	f003 0302 	and.w	r3, r3, #2
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00a      	beq.n	800d5da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	685b      	ldr	r3, [r3, #4]
 800d5ca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	430a      	orrs	r2, r1
 800d5d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5de:	f003 0304 	and.w	r3, r3, #4
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00a      	beq.n	800d5fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	685b      	ldr	r3, [r3, #4]
 800d5ec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	430a      	orrs	r2, r1
 800d5fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d600:	f003 0310 	and.w	r3, r3, #16
 800d604:	2b00      	cmp	r3, #0
 800d606:	d00a      	beq.n	800d61e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	430a      	orrs	r2, r1
 800d61c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d622:	f003 0320 	and.w	r3, r3, #32
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00a      	beq.n	800d640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	689b      	ldr	r3, [r3, #8]
 800d630:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	430a      	orrs	r2, r1
 800d63e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d01a      	beq.n	800d682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	430a      	orrs	r2, r1
 800d660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d666:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d66a:	d10a      	bne.n	800d682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	430a      	orrs	r2, r1
 800d680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d00a      	beq.n	800d6a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	685b      	ldr	r3, [r3, #4]
 800d694:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	430a      	orrs	r2, r1
 800d6a2:	605a      	str	r2, [r3, #4]
  }
}
 800d6a4:	bf00      	nop
 800d6a6:	370c      	adds	r7, #12
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b098      	sub	sp, #96	@ 0x60
 800d6b4:	af02      	add	r7, sp, #8
 800d6b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d6c0:	f7f5 fe84 	bl	80033cc <HAL_GetTick>
 800d6c4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f003 0308 	and.w	r3, r3, #8
 800d6d0:	2b08      	cmp	r3, #8
 800d6d2:	d12f      	bne.n	800d734 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d6dc:	2200      	movs	r2, #0
 800d6de:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 f88e 	bl	800d804 <UART_WaitOnFlagUntilTimeout>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d022      	beq.n	800d734 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6f6:	e853 3f00 	ldrex	r3, [r3]
 800d6fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d6fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d702:	653b      	str	r3, [r7, #80]	@ 0x50
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	461a      	mov	r2, r3
 800d70a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d70c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d70e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d710:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d712:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d714:	e841 2300 	strex	r3, r2, [r1]
 800d718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d71a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d1e6      	bne.n	800d6ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2220      	movs	r2, #32
 800d724:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2200      	movs	r2, #0
 800d72c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d730:	2303      	movs	r3, #3
 800d732:	e063      	b.n	800d7fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	f003 0304 	and.w	r3, r3, #4
 800d73e:	2b04      	cmp	r3, #4
 800d740:	d149      	bne.n	800d7d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d742:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d746:	9300      	str	r3, [sp, #0]
 800d748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d74a:	2200      	movs	r2, #0
 800d74c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 f857 	bl	800d804 <UART_WaitOnFlagUntilTimeout>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d03c      	beq.n	800d7d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d764:	e853 3f00 	ldrex	r3, [r3]
 800d768:	623b      	str	r3, [r7, #32]
   return(result);
 800d76a:	6a3b      	ldr	r3, [r7, #32]
 800d76c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	461a      	mov	r2, r3
 800d778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d77a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d77c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d77e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d782:	e841 2300 	strex	r3, r2, [r1]
 800d786:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1e6      	bne.n	800d75c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	3308      	adds	r3, #8
 800d794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d796:	693b      	ldr	r3, [r7, #16]
 800d798:	e853 3f00 	ldrex	r3, [r3]
 800d79c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f023 0301 	bic.w	r3, r3, #1
 800d7a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	3308      	adds	r3, #8
 800d7ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d7ae:	61fa      	str	r2, [r7, #28]
 800d7b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b2:	69b9      	ldr	r1, [r7, #24]
 800d7b4:	69fa      	ldr	r2, [r7, #28]
 800d7b6:	e841 2300 	strex	r3, r2, [r1]
 800d7ba:	617b      	str	r3, [r7, #20]
   return(result);
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d1e5      	bne.n	800d78e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2220      	movs	r2, #32
 800d7c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7d2:	2303      	movs	r3, #3
 800d7d4:	e012      	b.n	800d7fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2220      	movs	r2, #32
 800d7da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2220      	movs	r2, #32
 800d7e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7fa:	2300      	movs	r3, #0
}
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	3758      	adds	r7, #88	@ 0x58
 800d800:	46bd      	mov	sp, r7
 800d802:	bd80      	pop	{r7, pc}

0800d804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b084      	sub	sp, #16
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	603b      	str	r3, [r7, #0]
 800d810:	4613      	mov	r3, r2
 800d812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d814:	e04f      	b.n	800d8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d816:	69bb      	ldr	r3, [r7, #24]
 800d818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d81c:	d04b      	beq.n	800d8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d81e:	f7f5 fdd5 	bl	80033cc <HAL_GetTick>
 800d822:	4602      	mov	r2, r0
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	1ad3      	subs	r3, r2, r3
 800d828:	69ba      	ldr	r2, [r7, #24]
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d302      	bcc.n	800d834 <UART_WaitOnFlagUntilTimeout+0x30>
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d101      	bne.n	800d838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d834:	2303      	movs	r3, #3
 800d836:	e04e      	b.n	800d8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	f003 0304 	and.w	r3, r3, #4
 800d842:	2b00      	cmp	r3, #0
 800d844:	d037      	beq.n	800d8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	2b80      	cmp	r3, #128	@ 0x80
 800d84a:	d034      	beq.n	800d8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	2b40      	cmp	r3, #64	@ 0x40
 800d850:	d031      	beq.n	800d8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	69db      	ldr	r3, [r3, #28]
 800d858:	f003 0308 	and.w	r3, r3, #8
 800d85c:	2b08      	cmp	r3, #8
 800d85e:	d110      	bne.n	800d882 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	2208      	movs	r2, #8
 800d866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d868:	68f8      	ldr	r0, [r7, #12]
 800d86a:	f000 f839 	bl	800d8e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	2208      	movs	r2, #8
 800d872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2200      	movs	r2, #0
 800d87a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e029      	b.n	800d8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	69db      	ldr	r3, [r3, #28]
 800d888:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d88c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d890:	d111      	bne.n	800d8b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d89a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d89c:	68f8      	ldr	r0, [r7, #12]
 800d89e:	f000 f81f 	bl	800d8e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2220      	movs	r2, #32
 800d8a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d8b2:	2303      	movs	r3, #3
 800d8b4:	e00f      	b.n	800d8d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	69da      	ldr	r2, [r3, #28]
 800d8bc:	68bb      	ldr	r3, [r7, #8]
 800d8be:	4013      	ands	r3, r2
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	bf0c      	ite	eq
 800d8c6:	2301      	moveq	r3, #1
 800d8c8:	2300      	movne	r3, #0
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	79fb      	ldrb	r3, [r7, #7]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d0a0      	beq.n	800d816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d8d4:	2300      	movs	r3, #0
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
	...

0800d8e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b095      	sub	sp, #84	@ 0x54
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d8f0:	e853 3f00 	ldrex	r3, [r3]
 800d8f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d8fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	461a      	mov	r2, r3
 800d904:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d906:	643b      	str	r3, [r7, #64]	@ 0x40
 800d908:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d90a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d90c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d90e:	e841 2300 	strex	r3, r2, [r1]
 800d912:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d916:	2b00      	cmp	r3, #0
 800d918:	d1e6      	bne.n	800d8e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	3308      	adds	r3, #8
 800d920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d922:	6a3b      	ldr	r3, [r7, #32]
 800d924:	e853 3f00 	ldrex	r3, [r3]
 800d928:	61fb      	str	r3, [r7, #28]
   return(result);
 800d92a:	69fa      	ldr	r2, [r7, #28]
 800d92c:	4b1e      	ldr	r3, [pc, #120]	@ (800d9a8 <UART_EndRxTransfer+0xc8>)
 800d92e:	4013      	ands	r3, r2
 800d930:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	3308      	adds	r3, #8
 800d938:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d93a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d93c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d93e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d940:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d942:	e841 2300 	strex	r3, r2, [r1]
 800d946:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d1e5      	bne.n	800d91a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d952:	2b01      	cmp	r3, #1
 800d954:	d118      	bne.n	800d988 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	e853 3f00 	ldrex	r3, [r3]
 800d962:	60bb      	str	r3, [r7, #8]
   return(result);
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	f023 0310 	bic.w	r3, r3, #16
 800d96a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	461a      	mov	r2, r3
 800d972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d974:	61bb      	str	r3, [r7, #24]
 800d976:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d978:	6979      	ldr	r1, [r7, #20]
 800d97a:	69ba      	ldr	r2, [r7, #24]
 800d97c:	e841 2300 	strex	r3, r2, [r1]
 800d980:	613b      	str	r3, [r7, #16]
   return(result);
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d1e6      	bne.n	800d956 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2220      	movs	r2, #32
 800d98c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d99c:	bf00      	nop
 800d99e:	3754      	adds	r7, #84	@ 0x54
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr
 800d9a8:	effffffe 	.word	0xeffffffe

0800d9ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d101      	bne.n	800d9c2 <HAL_UARTEx_DisableFifoMode+0x16>
 800d9be:	2302      	movs	r3, #2
 800d9c0:	e027      	b.n	800da12 <HAL_UARTEx_DisableFifoMode+0x66>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2201      	movs	r2, #1
 800d9c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2224      	movs	r2, #36	@ 0x24
 800d9ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f022 0201 	bic.w	r2, r2, #1
 800d9e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d9f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	68fa      	ldr	r2, [r7, #12]
 800d9fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2220      	movs	r2, #32
 800da04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	2200      	movs	r2, #0
 800da0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr

0800da1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da1e:	b580      	push	{r7, lr}
 800da20:	b084      	sub	sp, #16
 800da22:	af00      	add	r7, sp, #0
 800da24:	6078      	str	r0, [r7, #4]
 800da26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d101      	bne.n	800da36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da32:	2302      	movs	r3, #2
 800da34:	e02d      	b.n	800da92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2201      	movs	r2, #1
 800da3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2224      	movs	r2, #36	@ 0x24
 800da42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	681a      	ldr	r2, [r3, #0]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f022 0201 	bic.w	r2, r2, #1
 800da5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	689b      	ldr	r3, [r3, #8]
 800da64:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	683a      	ldr	r2, [r7, #0]
 800da6e:	430a      	orrs	r2, r1
 800da70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f000 f850 	bl	800db18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68fa      	ldr	r2, [r7, #12]
 800da7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2220      	movs	r2, #32
 800da84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800da90:	2300      	movs	r3, #0
}
 800da92:	4618      	mov	r0, r3
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b084      	sub	sp, #16
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d101      	bne.n	800dab2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800daae:	2302      	movs	r3, #2
 800dab0:	e02d      	b.n	800db0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2201      	movs	r2, #1
 800dab6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2224      	movs	r2, #36	@ 0x24
 800dabe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f022 0201 	bic.w	r2, r2, #1
 800dad8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	683a      	ldr	r2, [r7, #0]
 800daea:	430a      	orrs	r2, r1
 800daec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 f812 	bl	800db18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	68fa      	ldr	r2, [r7, #12]
 800dafa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2220      	movs	r2, #32
 800db00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2200      	movs	r2, #0
 800db08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
	...

0800db18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db18:	b480      	push	{r7}
 800db1a:	b085      	sub	sp, #20
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800db24:	2b00      	cmp	r3, #0
 800db26:	d108      	bne.n	800db3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2201      	movs	r2, #1
 800db34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db38:	e031      	b.n	800db9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db3a:	2310      	movs	r3, #16
 800db3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db3e:	2310      	movs	r3, #16
 800db40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	0e5b      	lsrs	r3, r3, #25
 800db4a:	b2db      	uxtb	r3, r3
 800db4c:	f003 0307 	and.w	r3, r3, #7
 800db50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	689b      	ldr	r3, [r3, #8]
 800db58:	0f5b      	lsrs	r3, r3, #29
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	f003 0307 	and.w	r3, r3, #7
 800db60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db62:	7bbb      	ldrb	r3, [r7, #14]
 800db64:	7b3a      	ldrb	r2, [r7, #12]
 800db66:	4911      	ldr	r1, [pc, #68]	@ (800dbac <UARTEx_SetNbDataToProcess+0x94>)
 800db68:	5c8a      	ldrb	r2, [r1, r2]
 800db6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800db6e:	7b3a      	ldrb	r2, [r7, #12]
 800db70:	490f      	ldr	r1, [pc, #60]	@ (800dbb0 <UARTEx_SetNbDataToProcess+0x98>)
 800db72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db74:	fb93 f3f2 	sdiv	r3, r3, r2
 800db78:	b29a      	uxth	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db80:	7bfb      	ldrb	r3, [r7, #15]
 800db82:	7b7a      	ldrb	r2, [r7, #13]
 800db84:	4909      	ldr	r1, [pc, #36]	@ (800dbac <UARTEx_SetNbDataToProcess+0x94>)
 800db86:	5c8a      	ldrb	r2, [r1, r2]
 800db88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800db8c:	7b7a      	ldrb	r2, [r7, #13]
 800db8e:	4908      	ldr	r1, [pc, #32]	@ (800dbb0 <UARTEx_SetNbDataToProcess+0x98>)
 800db90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db92:	fb93 f3f2 	sdiv	r3, r3, r2
 800db96:	b29a      	uxth	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800db9e:	bf00      	nop
 800dba0:	3714      	adds	r7, #20
 800dba2:	46bd      	mov	sp, r7
 800dba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba8:	4770      	bx	lr
 800dbaa:	bf00      	nop
 800dbac:	0800dcbc 	.word	0x0800dcbc
 800dbb0:	0800dcc4 	.word	0x0800dcc4

0800dbb4 <memset>:
 800dbb4:	4402      	add	r2, r0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	4293      	cmp	r3, r2
 800dbba:	d100      	bne.n	800dbbe <memset+0xa>
 800dbbc:	4770      	bx	lr
 800dbbe:	f803 1b01 	strb.w	r1, [r3], #1
 800dbc2:	e7f9      	b.n	800dbb8 <memset+0x4>

0800dbc4 <__libc_init_array>:
 800dbc4:	b570      	push	{r4, r5, r6, lr}
 800dbc6:	4d0d      	ldr	r5, [pc, #52]	@ (800dbfc <__libc_init_array+0x38>)
 800dbc8:	4c0d      	ldr	r4, [pc, #52]	@ (800dc00 <__libc_init_array+0x3c>)
 800dbca:	1b64      	subs	r4, r4, r5
 800dbcc:	10a4      	asrs	r4, r4, #2
 800dbce:	2600      	movs	r6, #0
 800dbd0:	42a6      	cmp	r6, r4
 800dbd2:	d109      	bne.n	800dbe8 <__libc_init_array+0x24>
 800dbd4:	4d0b      	ldr	r5, [pc, #44]	@ (800dc04 <__libc_init_array+0x40>)
 800dbd6:	4c0c      	ldr	r4, [pc, #48]	@ (800dc08 <__libc_init_array+0x44>)
 800dbd8:	f000 f826 	bl	800dc28 <_init>
 800dbdc:	1b64      	subs	r4, r4, r5
 800dbde:	10a4      	asrs	r4, r4, #2
 800dbe0:	2600      	movs	r6, #0
 800dbe2:	42a6      	cmp	r6, r4
 800dbe4:	d105      	bne.n	800dbf2 <__libc_init_array+0x2e>
 800dbe6:	bd70      	pop	{r4, r5, r6, pc}
 800dbe8:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbec:	4798      	blx	r3
 800dbee:	3601      	adds	r6, #1
 800dbf0:	e7ee      	b.n	800dbd0 <__libc_init_array+0xc>
 800dbf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbf6:	4798      	blx	r3
 800dbf8:	3601      	adds	r6, #1
 800dbfa:	e7f2      	b.n	800dbe2 <__libc_init_array+0x1e>
 800dbfc:	0800dcd4 	.word	0x0800dcd4
 800dc00:	0800dcd4 	.word	0x0800dcd4
 800dc04:	0800dcd4 	.word	0x0800dcd4
 800dc08:	0800dcd8 	.word	0x0800dcd8

0800dc0c <memcpy>:
 800dc0c:	440a      	add	r2, r1
 800dc0e:	4291      	cmp	r1, r2
 800dc10:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc14:	d100      	bne.n	800dc18 <memcpy+0xc>
 800dc16:	4770      	bx	lr
 800dc18:	b510      	push	{r4, lr}
 800dc1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc22:	4291      	cmp	r1, r2
 800dc24:	d1f9      	bne.n	800dc1a <memcpy+0xe>
 800dc26:	bd10      	pop	{r4, pc}

0800dc28 <_init>:
 800dc28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc2a:	bf00      	nop
 800dc2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc2e:	bc08      	pop	{r3}
 800dc30:	469e      	mov	lr, r3
 800dc32:	4770      	bx	lr

0800dc34 <_fini>:
 800dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc36:	bf00      	nop
 800dc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3a:	bc08      	pop	{r3}
 800dc3c:	469e      	mov	lr, r3
 800dc3e:	4770      	bx	lr

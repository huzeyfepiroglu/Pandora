
Pandora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf28  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800d1c0  0800d1c0  0001d1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d24c  0800d24c  0001d24c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d254  0800d254  0001d254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d258  0800d258  0001d258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800d25c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800d270  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800d2d0  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f4  240000d4  0800d330  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240008c8  0800d330  000208c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e0a7  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ed9  00000000  00000000  0004e1ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ee8  00000000  00000000  000530c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001833  00000000  00000000  00054fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ea7f  00000000  00000000  000567e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e0df  00000000  00000000  00095262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018ab71  00000000  00000000  000c3341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008458  00000000  00000000  0024deb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0025630c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d1a8 	.word	0x0800d1a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	0800d1a8 	.word	0x0800d1a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f8:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <MX_ADC1_Init+0xe4>)
 80005fa:	4a30      	ldr	r2, [pc, #192]	; (80006bc <MX_ADC1_Init+0xe8>)
 80005fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000612:	2204      	movs	r2, #4
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000618:	2200      	movs	r2, #0
 800061a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800061e:	2201      	movs	r2, #1
 8000620:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000624:	2201      	movs	r2, #1
 8000626:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800062a:	2200      	movs	r2, #0
 800062c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000642:	2200      	movs	r2, #0
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000656:	f002 fe0b 	bl	8003270 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000660:	f001 fc70 	bl	8001f44 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000670:	f003 fe2e 	bl	80042d0 <HAL_ADCEx_MultiModeConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800067a:	f001 fc63 	bl	8001f44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_ADC1_Init+0xec>)
 8000680:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000682:	2306      	movs	r3, #6
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800068e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000690:	2304      	movs	r3, #4
 8000692:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_ADC1_Init+0xe4>)
 80006a2:	f003 f869 	bl	8003778 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006ac:	f001 fc4a 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	240000f0 	.word	0x240000f0
 80006bc:	40022000 	.word	0x40022000
 80006c0:	08600004 	.word	0x08600004

080006c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006de:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <MX_ADC2_Init+0xc4>)
 80006e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000702:	2201      	movs	r2, #1
 8000704:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000708:	2201      	movs	r2, #1
 800070a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC2_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_ADC2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_ADC2_Init+0xc0>)
 800073a:	f002 fd99 	bl	8003270 <HAL_ADC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000744:	f001 fbfe 	bl	8001f44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_ADC2_Init+0xc8>)
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074c:	2306      	movs	r3, #6
 800074e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000754:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000758:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_ADC2_Init+0xc0>)
 800076c:	f003 f804 	bl	8003778 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000776:	f001 fbe5 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	24000154 	.word	0x24000154
 8000788:	40022100 	.word	0x40022100
 800078c:	08600004 	.word	0x08600004

08000790 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007aa:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <MX_ADC3_Init+0xc4>)
 80007ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_ADC3_Init+0xc0>)
 8000806:	f002 fd33 	bl	8003270 <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000810:	f001 fb98 	bl	8001f44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_ADC3_Init+0xc8>)
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000818:	2306      	movs	r3, #6
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000820:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000826:	2304      	movs	r3, #4
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_ADC3_Init+0xc0>)
 8000838:	f002 ff9e 	bl	8003778 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000842:	f001 fb7f 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	240001b8 	.word	0x240001b8
 8000854:	58026000 	.word	0x58026000
 8000858:	21800100 	.word	0x21800100

0800085c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a99      	ldr	r2, [pc, #612]	; (8000ae0 <HAL_ADC_MspInit+0x284>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d164      	bne.n	8000948 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800087e:	4b99      	ldr	r3, [pc, #612]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a97      	ldr	r2, [pc, #604]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000886:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000888:	4b96      	ldr	r3, [pc, #600]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10e      	bne.n	80008ae <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000890:	4b95      	ldr	r3, [pc, #596]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000896:	4a94      	ldr	r2, [pc, #592]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008a0:	4b91      	ldr	r3, [pc, #580]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	623b      	str	r3, [r7, #32]
 80008ac:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b8e      	ldr	r3, [pc, #568]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b4:	4a8c      	ldr	r2, [pc, #560]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008be:	4b8a      	ldr	r3, [pc, #552]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = EOS_CURRENT_Pin|KKU_CURRENT_Pin;
 80008cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4882      	ldr	r0, [pc, #520]	; (8000aec <HAL_ADC_MspInit+0x290>)
 80008e2:	f006 ff53 	bl	800778c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80008e6:	4b82      	ldr	r3, [pc, #520]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008e8:	4a82      	ldr	r2, [pc, #520]	; (8000af4 <HAL_ADC_MspInit+0x298>)
 80008ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008ec:	4b80      	ldr	r3, [pc, #512]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008ee:	2209      	movs	r2, #9
 80008f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f2:	4b7f      	ldr	r3, [pc, #508]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f8:	4b7d      	ldr	r3, [pc, #500]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008fe:	4b7c      	ldr	r3, [pc, #496]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000904:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000906:	4b7a      	ldr	r3, [pc, #488]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800090c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800090e:	4b78      	ldr	r3, [pc, #480]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000910:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000914:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000916:	4b76      	ldr	r3, [pc, #472]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800091c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b74      	ldr	r3, [pc, #464]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000924:	4b72      	ldr	r3, [pc, #456]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800092a:	4871      	ldr	r0, [pc, #452]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 800092c:	f003 febe 	bl	80046ac <HAL_DMA_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000936:	f001 fb05 	bl	8001f44 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a6c      	ldr	r2, [pc, #432]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 800093e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000940:	4a6b      	ldr	r2, [pc, #428]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000946:	e0c6      	b.n	8000ad6 <HAL_ADC_MspInit+0x27a>
  else if(adcHandle->Instance==ADC2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a6a      	ldr	r2, [pc, #424]	; (8000af8 <HAL_ADC_MspInit+0x29c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d164      	bne.n	8000a1c <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000952:	4b64      	ldr	r3, [pc, #400]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	4a62      	ldr	r2, [pc, #392]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800095a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800095c:	4b61      	ldr	r3, [pc, #388]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10e      	bne.n	8000982 <HAL_ADC_MspInit+0x126>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000964:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800096a:	4a5f      	ldr	r2, [pc, #380]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 800096c:	f043 0320 	orr.w	r3, r3, #32
 8000970:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000974:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000976:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800097a:	f003 0320 	and.w	r3, r3, #32
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000982:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a57      	ldr	r2, [pc, #348]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b55      	ldr	r3, [pc, #340]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AKB_CURRENT_Pin|SERVO_CURRENT_Pin;
 80009a0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a6:	2303      	movs	r3, #3
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	484d      	ldr	r0, [pc, #308]	; (8000aec <HAL_ADC_MspInit+0x290>)
 80009b6:	f006 fee9 	bl	800778c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 80009ba:	4b50      	ldr	r3, [pc, #320]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009bc:	4a50      	ldr	r2, [pc, #320]	; (8000b00 <HAL_ADC_MspInit+0x2a4>)
 80009be:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009c0:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009c2:	220a      	movs	r2, #10
 80009c4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c6:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009cc:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009d2:	4b4a      	ldr	r3, [pc, #296]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009da:	4b48      	ldr	r3, [pc, #288]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009e2:	4b46      	ldr	r3, [pc, #280]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80009f2:	4b42      	ldr	r3, [pc, #264]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009f8:	4b40      	ldr	r3, [pc, #256]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009fe:	483f      	ldr	r0, [pc, #252]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a00:	f003 fe54 	bl	80046ac <HAL_DMA_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8000a0a:	f001 fa9b 	bl	8001f44 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a12:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a14:	4a39      	ldr	r2, [pc, #228]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a1a:	e05c      	b.n	8000ad6 <HAL_ADC_MspInit+0x27a>
  else if(adcHandle->Instance==ADC3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a38      	ldr	r2, [pc, #224]	; (8000b04 <HAL_ADC_MspInit+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d157      	bne.n	8000ad6 <HAL_ADC_MspInit+0x27a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a4c:	f043 0320 	orr.w	r3, r3, #32
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAIN_POWER_VOLTAGE_Pin|MAIN_POWER_CURRENT_Pin|SOLENOID_CURRENT_Pin|COCKING_HANDLE_CURRENT_Pin;
 8000a62:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	481d      	ldr	r0, [pc, #116]	; (8000aec <HAL_ADC_MspInit+0x290>)
 8000a78:	f006 fe88 	bl	800778c <HAL_GPIO_Init>
    hdma_adc3.Instance = BDMA_Channel0;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_ADC_MspInit+0x2b0>)
 8000a80:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a84:	2211      	movs	r2, #17
 8000a86:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aa2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aaa:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000aba:	4813      	ldr	r0, [pc, #76]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000abc:	f003 fdf6 	bl	80046ac <HAL_DMA_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_ADC_MspInit+0x26e>
      Error_Handler();
 8000ac6:	f001 fa3d 	bl	8001f44 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ace:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ad6:	bf00      	nop
 8000ad8:	3738      	adds	r7, #56	; 0x38
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000
 8000ae4:	24000384 	.word	0x24000384
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58021400 	.word	0x58021400
 8000af0:	2400021c 	.word	0x2400021c
 8000af4:	40020010 	.word	0x40020010
 8000af8:	40022100 	.word	0x40022100
 8000afc:	24000294 	.word	0x24000294
 8000b00:	40020028 	.word	0x40020028
 8000b04:	58026000 	.word	0x58026000
 8000b08:	2400030c 	.word	0x2400030c
 8000b0c:	58025408 	.word	0x58025408

08000b10 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	2081      	movs	r0, #129	; 0x81
 8000b3a:	f003 fd82 	bl	8004642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000b3e:	2081      	movs	r0, #129	; 0x81
 8000b40:	f003 fd99 	bl	8004676 <HAL_NVIC_EnableIRQ>

}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400

08000b50 <functionCockingMotorDrive>:

// variables needed for just cocking_handle_maingun.c not global
int32_t lastCount = 0;

void functionCockingMotorDrive(bool direction)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	if(direction == FORWARD)
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00d      	beq.n	8000b7c <functionCockingMotorDrive+0x2c>
	{
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,OFF);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2102      	movs	r1, #2
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b66:	f006 ffc1 	bl	8007aec <HAL_GPIO_WritePin>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,ON);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b70:	f006 ffbc 	bl	8007aec <HAL_GPIO_WritePin>

		pandora.gun.cockingHandle.motorState = FORWARD;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <functionCockingMotorDrive+0x60>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	715a      	strb	r2, [r3, #5]
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,ON);

		pandora.gun.cockingHandle.motorState = BACKWARD;
	}
}
 8000b7a:	e012      	b.n	8000ba2 <functionCockingMotorDrive+0x52>
	else if(direction == BACKWARD)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f083 0301 	eor.w	r3, r3, #1
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00c      	beq.n	8000ba2 <functionCockingMotorDrive+0x52>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b8e:	f006 ffad 	bl	8007aec <HAL_GPIO_WritePin>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,ON);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2102      	movs	r1, #2
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b98:	f006 ffa8 	bl	8007aec <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.motorState = BACKWARD;
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <functionCockingMotorDrive+0x60>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	715a      	strb	r2, [r3, #5]
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	58021800 	.word	0x58021800
 8000bb0:	24000570 	.word	0x24000570

08000bb4 <functionCockingMotorBrake>:

void functionCockingMotorBrake (bool state)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	if(state == ON)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d009      	beq.n	8000bd8 <functionCockingMotorBrake+0x24>
	{
		MOTOR_CONTROL(BRAKE_DRV_28V,ON);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <functionCockingMotorBrake+0x4c>)
 8000bcc:	f006 ff8e 	bl	8007aec <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.brakeState = ON;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <functionCockingMotorBrake+0x50>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	719a      	strb	r2, [r3, #6]
	{
		MOTOR_CONTROL(BRAKE_DRV_28V,OFF);
		pandora.gun.cockingHandle.brakeState = OFF;
	}

}
 8000bd6:	e00e      	b.n	8000bf6 <functionCockingMotorBrake+0x42>
	else if (state == OFF)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f083 0301 	eor.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d008      	beq.n	8000bf6 <functionCockingMotorBrake+0x42>
		MOTOR_CONTROL(BRAKE_DRV_28V,OFF);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <functionCockingMotorBrake+0x4c>)
 8000bec:	f006 ff7e 	bl	8007aec <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.brakeState = OFF;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <functionCockingMotorBrake+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	719a      	strb	r2, [r3, #6]
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	58020c00 	.word	0x58020c00
 8000c04:	24000570 	.word	0x24000570

08000c08 <functionCockingMotorStop>:

void functionCockingMotorStop(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,OFF);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <functionCockingMotorStop+0x24>)
 8000c12:	f006 ff6b 	bl	8007aec <HAL_GPIO_WritePin>
	MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <functionCockingMotorStop+0x24>)
 8000c1c:	f006 ff66 	bl	8007aec <HAL_GPIO_WritePin>

	pandora.gun.cockingHandle.motorState = IDLE;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <functionCockingMotorStop+0x28>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	715a      	strb	r2, [r3, #5]
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	58021800 	.word	0x58021800
 8000c30:	24000570 	.word	0x24000570

08000c34 <functionCockingHandleGoSafe>:
	pandora.gun.cockingHandle.safe  = false;
	pandora.gun.cockingHandle.home  = true;
}

void functionCockingHandleGoSafe (void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	if(!pandora.switches.switches_cocking_handle_home)
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c3a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000c3e:	f083 0301 	eor.w	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00f      	beq.n	8000c68 <functionCockingHandleGoSafe+0x34>
	{
		functionCockingMotorBrake(OFF);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff ffb3 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff ff7e 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c56:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f7      	bne.n	8000c4e <functionCockingHandleGoSafe+0x1a>

		functionCockingMotorStop();
 8000c5e:	f7ff ffd3 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f7ff ffa6 	bl	8000bb4 <functionCockingMotorBrake>
	}

	if(pandora.switches.switches_cocking_handle_home)
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c6a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d014      	beq.n	8000c9c <functionCockingHandleGoSafe+0x68>
	{
		functionCockingMotorBrake(OFF);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff ff9e 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(FORWARD);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff ff69 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(!functionCountEncoderPulse(SAFE_POSITION));
 8000c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c82:	f000 f873 	bl	8000d6c <functionCountEncoderPulse>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f083 0301 	eor.w	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f2      	bne.n	8000c78 <functionCockingHandleGoSafe+0x44>

		functionCockingMotorStop();
 8000c92:	f7ff ffb9 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff ff8c 	bl	8000bb4 <functionCockingMotorBrake>
	}

	pandora.gun.cockingHandle.armed = false;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	71da      	strb	r2, [r3, #7]
	pandora.gun.cockingHandle.safe  = true;
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	721a      	strb	r2, [r3, #8]
	pandora.gun.cockingHandle.home  = true;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	725a      	strb	r2, [r3, #9]
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24000570 	.word	0x24000570

08000cb8 <functionCockingHandleGoArm>:

void functionCockingHandleGoArm (void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	if(!pandora.switches.switches_cocking_handle_home)
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000cbe:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000cc2:	f083 0301 	eor.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00f      	beq.n	8000cec <functionCockingHandleGoArm+0x34>
	{
		functionCockingMotorBrake(OFF);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff ff71 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff ff3c 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000cda:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f7      	bne.n	8000cd2 <functionCockingHandleGoArm+0x1a>

		functionCockingMotorStop();
 8000ce2:	f7ff ff91 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff ff64 	bl	8000bb4 <functionCockingMotorBrake>
	}

	if(pandora.switches.switches_cocking_handle_home)
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000cee:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d014      	beq.n	8000d20 <functionCockingHandleGoArm+0x68>
	{
		functionCockingMotorBrake(OFF);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ff5c 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(FORWARD);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff ff27 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(!functionCountEncoderPulse(ARM_POSITION));
 8000d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d06:	f000 f831 	bl	8000d6c <functionCountEncoderPulse>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f083 0301 	eor.w	r3, r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f2      	bne.n	8000cfc <functionCockingHandleGoArm+0x44>

		functionCockingMotorStop();
 8000d16:	f7ff ff77 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff ff4a 	bl	8000bb4 <functionCockingMotorBrake>
	}

	if(!pandora.switches.switches_cocking_handle_home)
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d22:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000d26:	f083 0301 	eor.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00f      	beq.n	8000d50 <functionCockingHandleGoArm+0x98>
	{
		functionCockingMotorBrake(OFF);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff ff3f 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff0a 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d3e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f7      	bne.n	8000d36 <functionCockingHandleGoArm+0x7e>


		functionCockingMotorStop();
 8000d46:	f7ff ff5f 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff ff32 	bl	8000bb4 <functionCockingMotorBrake>
	}

	pandora.gun.cockingHandle.armed = true;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	71da      	strb	r2, [r3, #7]
	pandora.gun.cockingHandle.safe  = false;
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	721a      	strb	r2, [r3, #8]
	pandora.gun.cockingHandle.home  = true;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	725a      	strb	r2, [r3, #9]
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	24000570 	.word	0x24000570

08000d6c <functionCountEncoderPulse>:

bool functionCountEncoderPulse(uint32_t position)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if(pandora.gun.cockingHandle.encoderCounter <= position)								// main içerisinde functionEncoderCounter saymalı..! OK #huzeyfe
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <functionCountEncoderPulse+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d301      	bcc.n	8000d84 <functionCountEncoderPulse+0x18>
		return true;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <functionCountEncoderPulse+0x1a>
	else
		return false;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	24000570 	.word	0x24000570

08000d98 <functionEncoderRead>:

void functionEncoderRead(TIM_HandleTypeDef *htim)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	int32_t currentCount = __HAL_TIM_GET_COUNTER(htim);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	60fb      	str	r3, [r7, #12]
	int32_t difference = currentCount - lastCount;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <functionEncoderRead+0x74>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	60bb      	str	r3, [r7, #8]

	if(pandora.switches.switches_cocking_handle_home)
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <functionEncoderRead+0x78>)
 8000db4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <functionEncoderRead+0x30>
	{
		currentCount = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
		lastCount = 0;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <functionEncoderRead+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]

		return;
 8000dc6:	e01b      	b.n	8000e00 <functionEncoderRead+0x68>
	}

	if(difference > 0)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dd09      	ble.n	8000de2 <functionEncoderRead+0x4a>
	{
		pandora.gun.cockingHandle.encoderRotation = FORWARD;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <functionEncoderRead+0x78>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	711a      	strb	r2, [r3, #4]
		pandora.gun.cockingHandle.encoderCounter += difference;
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <functionEncoderRead+0x78>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <functionEncoderRead+0x78>)
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	e00b      	b.n	8000dfa <functionEncoderRead+0x62>
	}

	else if (difference < 0)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da08      	bge.n	8000dfa <functionEncoderRead+0x62>
	{
		pandora.gun.cockingHandle.encoderRotation = BACKWARD;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <functionEncoderRead+0x78>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	711a      	strb	r2, [r3, #4]
		pandora.gun.cockingHandle.encoderCounter += difference;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <functionEncoderRead+0x78>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <functionEncoderRead+0x78>)
 8000df8:	6013      	str	r3, [r2, #0]

	}

	lastCount = currentCount;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <functionEncoderRead+0x74>)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	24000388 	.word	0x24000388
 8000e10:	24000570 	.word	0x24000570

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_DMA_Init+0x4c>)
 8000e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e20:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <MX_DMA_Init+0x4c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_DMA_Init+0x4c>)
 8000e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	200b      	movs	r0, #11
 8000e3e:	f003 fc00 	bl	8004642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e42:	200b      	movs	r0, #11
 8000e44:	f003 fc17 	bl	8004676 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	200c      	movs	r0, #12
 8000e4e:	f003 fbf8 	bl	8004642 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e52:	200c      	movs	r0, #12
 8000e54:	f003 fc0f 	bl	8004676 <HAL_NVIC_EnableIRQ>

}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400

08000e64 <functionErrorCurrentVoltageCheck>:
#include "power_management.h"

extern pandoraStructer pandora;

void functionErrorCurrentVoltageCheck (void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	pandora.error.solenoidCurrentHigh		= (pandora.powerManagement.SCurrent		 	> AMPER_5) 	? true : false;
 8000e68:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	bf8c      	ite	hi
 8000e72:	2301      	movhi	r3, #1
 8000e74:	2300      	movls	r3, #0
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e7a:	745a      	strb	r2, [r3, #17]
	pandora.error.cockingHandleCurrentHigh	= (pandora.powerManagement.CHCurrent		> AMPER_5) 	? true : false;
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	bf8c      	ite	hi
 8000e86:	2301      	movhi	r3, #1
 8000e88:	2300      	movls	r3, #0
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e8e:	74da      	strb	r2, [r3, #19]
	pandora.error.herculeCurrentHigh 		= (pandora.powerManagement.HERCULECurrent 	> AMPER_5) 	? true : false;
 8000e90:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	bf8c      	ite	hi
 8000e9a:	2301      	movhi	r3, #1
 8000e9c:	2300      	movls	r3, #0
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ea2:	755a      	strb	r2, [r3, #21]
	pandora.error.kkuCurrentHigh 			= (pandora.powerManagement.KKUCurrent 		> AMPER_5) 	? true : false;
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ea6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000eaa:	2b05      	cmp	r3, #5
 8000eac:	bf8c      	ite	hi
 8000eae:	2301      	movhi	r3, #1
 8000eb0:	2300      	movls	r3, #0
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000eb6:	765a      	strb	r2, [r3, #25]
	pandora.error.akbCurrentHigh 			= (pandora.powerManagement.AKBCurrent 		> AMPER_5) 	? true : false;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000eba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	bf8c      	ite	hi
 8000ec2:	2301      	movhi	r3, #1
 8000ec4:	2300      	movls	r3, #0
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000eca:	75da      	strb	r2, [r3, #23]
	pandora.error.gdbCurrentHigh 			= (pandora.powerManagement.GDBCurrent 		> AMPER_5) 	? true : false;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000ed2:	2b05      	cmp	r3, #5
 8000ed4:	bf8c      	ite	hi
 8000ed6:	2301      	movhi	r3, #1
 8000ed8:	2300      	movls	r3, #0
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ede:	775a      	strb	r2, [r3, #29]
	pandora.error.eosCurrentHigh 			= (pandora.powerManagement.EOSCurrent 		> AMPER_5) 	? true : false;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	bf8c      	ite	hi
 8000eea:	2301      	movhi	r3, #1
 8000eec:	2300      	movls	r3, #0
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ef2:	76da      	strb	r2, [r3, #27]
	pandora.error.gdbVoltageHigh 			= (pandora.powerManagement.BATVoltage 		> VOLT_28) 	? true : false;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ef6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000efa:	2b1c      	cmp	r3, #28
 8000efc:	bf8c      	ite	hi
 8000efe:	2301      	movhi	r3, #1
 8000f00:	2300      	movls	r3, #0
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f06:	77da      	strb	r2, [r3, #31]
	pandora.error.gdbVoltageLow	 			= (pandora.powerManagement.BATVoltage 		< VOLT_22) 	? true : false;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000f0e:	2b15      	cmp	r3, #21
 8000f10:	bf94      	ite	ls
 8000f12:	2301      	movls	r3, #1
 8000f14:	2300      	movhi	r3, #0
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f1a:	779a      	strb	r2, [r3, #30]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	24000570 	.word	0x24000570

08000f2c <functionErrorMosfetCheck>:

void functionErrorMosfetCheck (void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	if((pandora.switches.switches_fire_order 	== true)	&&
 8000f30:	4b49      	ldr	r3, [pc, #292]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f32:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d014      	beq.n	8000f64 <functionErrorMosfetCheck+0x38>
	   (pandora.states.firing 					== true )   &&
 8000f3a:	4b47      	ldr	r3, [pc, #284]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	if((pandora.switches.switches_fire_order 	== true)	&&
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00f      	beq.n	8000f64 <functionErrorMosfetCheck+0x38>
	   (pandora.powerManagement.SCurrent 		< AMPER_1)  &&
 8000f44:	4b44      	ldr	r3, [pc, #272]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	   (pandora.states.firing 					== true )   &&
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10a      	bne.n	8000f64 <functionErrorMosfetCheck+0x38>
	   (pandora.error.system 					== false))
 8000f4e:	4b42      	ldr	r3, [pc, #264]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000f54:	f083 0301 	eor.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.SCurrent 		< AMPER_1)  &&
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <functionErrorMosfetCheck+0x38>
	{
		pandora.error.solenoidCurrentLow = true; // mosfet hatası. LOOP kontrolü var olduğu için atış durumunda akım çekmiyorsa mosfet arızalıdır.
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	741a      	strb	r2, [r3, #16]
	}

	if((pandora.switches.switches_cocking_handle_order 	== true    )	&&
 8000f64:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01a      	beq.n	8000fa4 <functionErrorMosfetCheck+0x78>
	   (pandora.gun.cockingHandle.brakeState 			== OFF     )	&&
 8000f6e:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f70:	799b      	ldrb	r3, [r3, #6]
 8000f72:	f083 0301 	eor.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
	if((pandora.switches.switches_cocking_handle_order 	== true    )	&&
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <functionErrorMosfetCheck+0x78>
	   (pandora.gun.cockingHandle.motorState 			!= IDLE    )	&&
 8000f7c:	4b36      	ldr	r3, [pc, #216]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f7e:	795b      	ldrb	r3, [r3, #5]
	   (pandora.gun.cockingHandle.brakeState 			== OFF     )	&&
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d00f      	beq.n	8000fa4 <functionErrorMosfetCheck+0x78>
	   (pandora.powerManagement.CHCurrent				<  AMPER_1 ) 	&&
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	   (pandora.gun.cockingHandle.motorState 			!= IDLE    )	&&
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10a      	bne.n	8000fa4 <functionErrorMosfetCheck+0x78>
	   (pandora.error.system 							== false   ))
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000f94:	f083 0301 	eor.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.CHCurrent				<  AMPER_1 ) 	&&
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <functionErrorMosfetCheck+0x78>
	{
		pandora.error.cockingHandleCurrentLow = true; // mosfet hatası. LOOP kontrolü var olduğu için atış durumunda akım çekmiyorsa mosfet arızalıdır.
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	749a      	strb	r2, [r3, #18]
	}

	if((pandora.states.AKBPowerOnOff				 	== true    )	&&
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fa6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00f      	beq.n	8000fce <functionErrorMosfetCheck+0xa2>
	   (pandora.powerManagement.AKBCurrent				<  AMPER_1 ) 	&&
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
	if((pandora.states.AKBPowerOnOff				 	== true    )	&&
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10a      	bne.n	8000fce <functionErrorMosfetCheck+0xa2>
	   (pandora.error.system 							== false   ))
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000fbe:	f083 0301 	eor.w	r3, r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.AKBCurrent				<  AMPER_1 ) 	&&
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <functionErrorMosfetCheck+0xa2>
	{
		pandora.error.akbCurrentLow = true;
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	759a      	strb	r2, [r3, #22]
	}

	if((pandora.states.KKBPowerOnOff				 	== true    )	&&
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fd0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00f      	beq.n	8000ff8 <functionErrorMosfetCheck+0xcc>
	   (pandora.powerManagement.KKUCurrent				<  AMPER_1 ) 	&&
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if((pandora.states.KKBPowerOnOff				 	== true    )	&&
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10a      	bne.n	8000ff8 <functionErrorMosfetCheck+0xcc>
	   (pandora.error.system 							== false   ))
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fe4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.KKUCurrent				<  AMPER_1 ) 	&&
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <functionErrorMosfetCheck+0xcc>
	{
		pandora.error.kkuCurrentLow = true;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	761a      	strb	r2, [r3, #24]
	}

	if((pandora.states.EOSPowerOnOff				 	== true    )	&&
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000ffa:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00f      	beq.n	8001022 <functionErrorMosfetCheck+0xf6>
	   (pandora.powerManagement.EOSCurrent				<  AMPER_1 ) 	&&
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8001004:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if((pandora.states.EOSPowerOnOff				 	== true    )	&&
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10a      	bne.n	8001022 <functionErrorMosfetCheck+0xf6>
	   (pandora.error.system 							== false   ))
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 800100e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001012:	f083 0301 	eor.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.EOSCurrent				<  AMPER_1 ) 	&&
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <functionErrorMosfetCheck+0xf6>
	{
		pandora.error.eosCurrentLow = true;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 800101e:	2201      	movs	r2, #1
 8001020:	769a      	strb	r2, [r3, #26]
	}

	if((pandora.states.HERCULEPowerOnOff				== true    )	&&
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8001024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00f      	beq.n	800104c <functionErrorMosfetCheck+0x120>
	   (pandora.powerManagement.HERCULECurrent			<  AMPER_1 ) 	&&
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 800102e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	if((pandora.states.HERCULEPowerOnOff				== true    )	&&
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10a      	bne.n	800104c <functionErrorMosfetCheck+0x120>
	   (pandora.error.system 							== false   ))
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8001038:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800103c:	f083 0301 	eor.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.HERCULECurrent			<  AMPER_1 ) 	&&
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <functionErrorMosfetCheck+0x120>
	{
		pandora.error.herculeCurrentLow = true;
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8001048:	2201      	movs	r2, #1
 800104a:	751a      	strb	r2, [r3, #20]
	}
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	24000570 	.word	0x24000570

0800105c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_ETH_Init+0x80>)
 8001062:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <MX_ETH_Init+0x84>)
 8001064:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_ETH_Init+0x88>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_ETH_Init+0x88>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_ETH_Init+0x88>)
 8001074:	22e1      	movs	r2, #225	; 0xe1
 8001076:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_ETH_Init+0x88>)
 800107a:	2200      	movs	r2, #0
 800107c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_ETH_Init+0x88>)
 8001080:	2200      	movs	r2, #0
 8001082:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_ETH_Init+0x88>)
 8001086:	2200      	movs	r2, #0
 8001088:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_ETH_Init+0x80>)
 800108c:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_ETH_Init+0x88>)
 800108e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_ETH_Init+0x80>)
 8001092:	2201      	movs	r2, #1
 8001094:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_ETH_Init+0x80>)
 8001098:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <MX_ETH_Init+0x8c>)
 800109a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_ETH_Init+0x80>)
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_ETH_Init+0x90>)
 80010a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_ETH_Init+0x80>)
 80010a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_ETH_Init+0x80>)
 80010ac:	f005 fbd6 	bl	800685c <HAL_ETH_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80010b6:	f000 ff45 	bl	8001f44 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010ba:	2238      	movs	r2, #56	; 0x38
 80010bc:	2100      	movs	r1, #0
 80010be:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_ETH_Init+0x94>)
 80010c0:	f00c f838 	bl	800d134 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_ETH_Init+0x94>)
 80010c6:	2221      	movs	r2, #33	; 0x21
 80010c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_ETH_Init+0x94>)
 80010cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MX_ETH_Init+0x94>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	240003c4 	.word	0x240003c4
 80010e0:	40028000 	.word	0x40028000
 80010e4:	24000474 	.word	0x24000474
 80010e8:	24000074 	.word	0x24000074
 80010ec:	24000014 	.word	0x24000014
 80010f0:	2400038c 	.word	0x2400038c

080010f4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a49      	ldr	r2, [pc, #292]	; (8001238 <HAL_ETH_MspInit+0x144>)
 8001112:	4293      	cmp	r3, r2
 8001114:	f040 808b 	bne.w	800122e <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001118:	4b48      	ldr	r3, [pc, #288]	; (800123c <HAL_ETH_MspInit+0x148>)
 800111a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800111e:	4a47      	ldr	r2, [pc, #284]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001124:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001128:	4b44      	ldr	r3, [pc, #272]	; (800123c <HAL_ETH_MspInit+0x148>)
 800112a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800112e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001136:	4b41      	ldr	r3, [pc, #260]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001138:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800113c:	4a3f      	ldr	r2, [pc, #252]	; (800123c <HAL_ETH_MspInit+0x148>)
 800113e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001142:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001146:	4b3d      	ldr	r3, [pc, #244]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001154:	4b39      	ldr	r3, [pc, #228]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001156:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800115a:	4a38      	ldr	r2, [pc, #224]	; (800123c <HAL_ETH_MspInit+0x148>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001166:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001178:	4a30      	ldr	r2, [pc, #192]	; (800123c <HAL_ETH_MspInit+0x148>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001182:	4b2e      	ldr	r3, [pc, #184]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b2a      	ldr	r3, [pc, #168]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001196:	4a29      	ldr	r2, [pc, #164]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_ETH_MspInit+0x148>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_ETH_MspInit+0x148>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	4a21      	ldr	r2, [pc, #132]	; (800123c <HAL_ETH_MspInit+0x148>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_ETH_MspInit+0x148>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80011cc:	2332      	movs	r3, #50	; 0x32
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011dc:	230b      	movs	r3, #11
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4816      	ldr	r0, [pc, #88]	; (8001240 <HAL_ETH_MspInit+0x14c>)
 80011e8:	f006 fad0 	bl	800778c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80011ec:	2386      	movs	r3, #134	; 0x86
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011fc:	230b      	movs	r3, #11
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	4619      	mov	r1, r3
 8001206:	480f      	ldr	r0, [pc, #60]	; (8001244 <HAL_ETH_MspInit+0x150>)
 8001208:	f006 fac0 	bl	800778c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800120c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800121e:	230b      	movs	r3, #11
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <HAL_ETH_MspInit+0x154>)
 800122a:	f006 faaf 	bl	800778c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800122e:	bf00      	nop
 8001230:	3738      	adds	r7, #56	; 0x38
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40028000 	.word	0x40028000
 800123c:	58024400 	.word	0x58024400
 8001240:	58020800 	.word	0x58020800
 8001244:	58020000 	.word	0x58020000
 8001248:	58020400 	.word	0x58020400

0800124c <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <MX_FDCAN2_Init+0xc4>)
 8001254:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <MX_FDCAN2_Init+0xc0>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001264:	2200      	movs	r2, #0
 8001266:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <MX_FDCAN2_Init+0xc0>)
 800126a:	2200      	movs	r2, #0
 800126c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001270:	2200      	movs	r2, #0
 8001272:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001276:	2210      	movs	r2, #16
 8001278:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_FDCAN2_Init+0xc0>)
 800127c:	2201      	movs	r2, #1
 800127e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001282:	2202      	movs	r2, #2
 8001284:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001288:	2202      	movs	r2, #2
 800128a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_FDCAN2_Init+0xc0>)
 800128e:	2201      	movs	r2, #1
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001294:	2201      	movs	r2, #1
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_FDCAN2_Init+0xc0>)
 800129a:	2201      	movs	r2, #1
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012be:	2204      	movs	r2, #4
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012d6:	2204      	movs	r2, #4
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012f4:	2204      	movs	r2, #4
 80012f6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012fa:	f005 fee3 	bl	80070c4 <HAL_FDCAN_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001304:	f000 fe1e 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2400047c 	.word	0x2400047c
 8001310:	4000a400 	.word	0x4000a400

08001314 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b0ba      	sub	sp, #232	; 0xe8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	22c0      	movs	r2, #192	; 0xc0
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f00b fefd 	bl	800d134 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_FDCAN_MspInit+0xc8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d146      	bne.n	80013d2 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001344:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001350:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4618      	mov	r0, r3
 800135e:	f007 fd33 	bl	8008dc8 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001368:	f000 fdec 	bl	8001f44 <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 800136e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 800137e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013a8:	2360      	movs	r3, #96	; 0x60
 80013aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80013c0:	2309      	movs	r3, #9
 80013c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <HAL_FDCAN_MspInit+0xd0>)
 80013ce:	f006 f9dd 	bl	800778c <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80013d2:	bf00      	nop
 80013d4:	37e8      	adds	r7, #232	; 0xe8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	4000a400 	.word	0x4000a400
 80013e0:	58024400 	.word	0x58024400
 80013e4:	58020400 	.word	0x58020400

080013e8 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fe:	4b6b      	ldr	r3, [pc, #428]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	4a69      	ldr	r2, [pc, #420]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001406:	f043 0320 	orr.w	r3, r3, #32
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140e:	4b67      	ldr	r3, [pc, #412]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141c:	4b63      	ldr	r3, [pc, #396]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	4a62      	ldr	r2, [pc, #392]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142c:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a5a      	ldr	r2, [pc, #360]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b58      	ldr	r3, [pc, #352]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b54      	ldr	r3, [pc, #336]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a53      	ldr	r2, [pc, #332]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b50      	ldr	r3, [pc, #320]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001476:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800147e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b49      	ldr	r3, [pc, #292]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a44      	ldr	r2, [pc, #272]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b41      	ldr	r3, [pc, #260]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	4b36      	ldr	r3, [pc, #216]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a35      	ldr	r2, [pc, #212]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, COCKING_HANDLE_DRV_H_BACKWARD_Pin|COCKING_HANDLE_DRV_H_FORWARD_Pin|COCKING_HANDLE_POWER_Pin|SOLENOID_POWER_Pin
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80014f4:	482e      	ldr	r0, [pc, #184]	; (80015b0 <MX_GPIO_Init+0x1c8>)
 80014f6:	f006 faf9 	bl	8007aec <HAL_GPIO_WritePin>
                          |SOLENOID_DRV_2_Pin|SOLENOID_DRV_1_Pin|SOLENOID_DRV_H_REVERSE_Pin|SOLENOID_DRV_H_FORWARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CASE_LED_GPIO_Port, CASE_LED_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001500:	482c      	ldr	r0, [pc, #176]	; (80015b4 <MX_GPIO_Init+0x1cc>)
 8001502:	f006 faf3 	bl	8007aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EOS_POWER_Pin|SERVO_POWER_Pin|AKB_POWER_Pin|KKU_POWER_Pin
 8001506:	2200      	movs	r2, #0
 8001508:	f64d 6121 	movw	r1, #56865	; 0xde21
 800150c:	482a      	ldr	r0, [pc, #168]	; (80015b8 <MX_GPIO_Init+0x1d0>)
 800150e:	f006 faed 	bl	8007aec <HAL_GPIO_WritePin>
                          |BRAKE_DRV_12V_Pin|BRAKE_DRV_28V_Pin|EMERGENCY_STOP_RESET_Pin|SYSTEM_ON_OFFD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = COCKING_HANDLE_DRV_H_BACKWARD_Pin|COCKING_HANDLE_DRV_H_FORWARD_Pin|COCKING_HANDLE_POWER_Pin|SOLENOID_POWER_Pin
 8001512:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
                          |SOLENOID_DRV_2_Pin|SOLENOID_DRV_1_Pin|SOLENOID_DRV_H_REVERSE_Pin|SOLENOID_DRV_H_FORWARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	4821      	ldr	r0, [pc, #132]	; (80015b0 <MX_GPIO_Init+0x1c8>)
 800152c:	f006 f92e 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CASE_LED_Pin;
 8001530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CASE_LED_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <MX_GPIO_Init+0x1cc>)
 800154a:	f006 f91f 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = EOS_POWER_Pin|SERVO_POWER_Pin|AKB_POWER_Pin|KKU_POWER_Pin
 800154e:	f64d 6321 	movw	r3, #56865	; 0xde21
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
                          |BRAKE_DRV_12V_Pin|BRAKE_DRV_28V_Pin|EMERGENCY_STOP_RESET_Pin|SYSTEM_ON_OFFD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	4814      	ldr	r0, [pc, #80]	; (80015b8 <MX_GPIO_Init+0x1d0>)
 8001568:	f006 f910 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_FEEDBACK_Pin|SYSTEM_ON_OFF_Pin|SWITCHES_FIRE_ORDER_Pin|SWITCHES_SAFETY_Pin
 800156c:	23de      	movs	r3, #222	; 0xde
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SWITCHES_COCKING_HANDLE_ORDER_Pin|SWITCHES_MOVEMENT_ALLOWED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001570:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <MX_GPIO_Init+0x1d0>)
 8001582:	f006 f903 	bl	800778c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = SWITCHES_SMGA_Pin|SWITCHES_SYSTEM_ON_OFF_Pin|SWITCHES_CREW_1_Pin|SWITCHES_CREW_2_Pin
 8001586:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SWITCHES_COCKING_HANDLE_HOME_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800158c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_GPIO_Init+0x1c8>)
 800159e:	f006 f8f5 	bl	800778c <HAL_GPIO_Init>

}
 80015a2:	bf00      	nop
 80015a4:	3738      	adds	r7, #56	; 0x38
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58021800 	.word	0x58021800
 80015b4:	58021000 	.word	0x58021000
 80015b8:	58020c00 	.word	0x58020c00

080015bc <functionGunControlGetShotInterval>:

// global structer
extern pandoraStructer pandora;

static uint32_t functionGunControlGetShotInterval(uint16_t rpm)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
    return 60000 / rpm;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80015cc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <functionGunControlInit>:

void functionGunControlInit(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	SOLENOID(SOLENOID_DRV_1,OFF);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2140      	movs	r1, #64	; 0x40
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <functionGunControlInit+0x38>)
 80015e6:	f006 fa81 	bl	8007aec <HAL_GPIO_WritePin>
//	pandora.configurations.solenoidTime 		= pandora.eeprom.solenoidTime;
//	pandora.configurations.solenoidActiveTime  	= pandora.eeprom.solenoidActiveTime;
//	pandora.configurations.solenoidPassiveTime 	= pandora.eeprom.solenoidPassiveTime;
//	pandora.configurations.solenoidFireMode 	= pandora.eeprom.fireMode;

	pandora.states.solenoidActive 		= false;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <functionGunControlInit+0x3c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pandora.states.triggerHeld 			= false;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <functionGunControlInit+0x3c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	pandora.states.changeTime 			= 0;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <functionGunControlInit+0x3c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
	pandora.states.burstCounter 		= 0;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <functionGunControlInit+0x3c>)
 8001602:	2200      	movs	r2, #0
 8001604:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	pandora.states.ammoCounter			= 0;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <functionGunControlInit+0x3c>)
 800160a:	2200      	movs	r2, #0
 800160c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	58021800 	.word	0x58021800
 8001618:	24000570 	.word	0x24000570

0800161c <functionGunControlSetMode>:

void functionGunControlSetMode(FireMode_t mode)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	pandora.canMessages.AKB.commandFireMode = mode;
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <functionGunControlSetMode+0x20>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	24000570 	.word	0x24000570

08001640 <functionGunControlTriggerPressed>:

void functionGunControlTriggerPressed(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
    pandora.states.triggerHeld = true;
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <functionGunControlTriggerPressed+0x68>)
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    pandora.states.burstCounter = 0;
 800164c:	4b16      	ldr	r3, [pc, #88]	; (80016a8 <functionGunControlTriggerPressed+0x68>)
 800164e:	2200      	movs	r2, #0
 8001650:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pandora.states.changeTime = HAL_GetTick();
 8001654:	f001 fbf8 	bl	8002e48 <HAL_GetTick>
 8001658:	4603      	mov	r3, r0
 800165a:	4a13      	ldr	r2, [pc, #76]	; (80016a8 <functionGunControlTriggerPressed+0x68>)
 800165c:	6453      	str	r3, [r2, #68]	; 0x44

    if (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_SINGLE)
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <functionGunControlTriggerPressed+0x68>)
 8001660:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001664:	2b00      	cmp	r3, #0
 8001666:	d109      	bne.n	800167c <functionGunControlTriggerPressed+0x3c>
    {
        SOLENOID(SOLENOID_DRV_1,ON);
 8001668:	2201      	movs	r2, #1
 800166a:	2140      	movs	r1, #64	; 0x40
 800166c:	480f      	ldr	r0, [pc, #60]	; (80016ac <functionGunControlTriggerPressed+0x6c>)
 800166e:	f006 fa3d 	bl	8007aec <HAL_GPIO_WritePin>
        pandora.states.solenoidActive = true;
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <functionGunControlTriggerPressed+0x68>)
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    else if (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_3 || pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_5)
    {
        pandora.states.solenoidActive = true;
        SOLENOID(SOLENOID_DRV_1,ON);
    }
}
 800167a:	e012      	b.n	80016a2 <functionGunControlTriggerPressed+0x62>
    else if (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_3 || pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_5)
 800167c:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <functionGunControlTriggerPressed+0x68>)
 800167e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001682:	2b02      	cmp	r3, #2
 8001684:	d004      	beq.n	8001690 <functionGunControlTriggerPressed+0x50>
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <functionGunControlTriggerPressed+0x68>)
 8001688:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800168c:	2b03      	cmp	r3, #3
 800168e:	d108      	bne.n	80016a2 <functionGunControlTriggerPressed+0x62>
        pandora.states.solenoidActive = true;
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <functionGunControlTriggerPressed+0x68>)
 8001692:	2201      	movs	r2, #1
 8001694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        SOLENOID(SOLENOID_DRV_1,ON);
 8001698:	2201      	movs	r2, #1
 800169a:	2140      	movs	r1, #64	; 0x40
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <functionGunControlTriggerPressed+0x6c>)
 800169e:	f006 fa25 	bl	8007aec <HAL_GPIO_WritePin>
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	24000570 	.word	0x24000570
 80016ac:	58021800 	.word	0x58021800

080016b0 <functionGunControlTriggerReleased>:

void functionGunControlTriggerReleased(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
    pandora.states.triggerHeld = false;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <functionGunControlTriggerReleased+0x2c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    pandora.states.solenoidActive = false;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <functionGunControlTriggerReleased+0x2c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    pandora.states.burstCounter = 0;
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <functionGunControlTriggerReleased+0x2c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SOLENOID(SOLENOID_DRV_1,OFF);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2140      	movs	r1, #64	; 0x40
 80016d0:	4803      	ldr	r0, [pc, #12]	; (80016e0 <functionGunControlTriggerReleased+0x30>)
 80016d2:	f006 fa0b 	bl	8007aec <HAL_GPIO_WritePin>
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	24000570 	.word	0x24000570
 80016e0:	58021800 	.word	0x58021800

080016e4 <functionGunControlProcess>:

void functionGunControlProcess(uint32_t now)
{
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
    if (!pandora.states.triggerHeld && pandora.canMessages.AKB.commandFireMode != FIRE_MODE_SINGLE) return;
 80016ec:	4bab      	ldr	r3, [pc, #684]	; (800199c <functionGunControlProcess+0x2b8>)
 80016ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80016f2:	f083 0301 	eor.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <functionGunControlProcess+0x24>
 80016fc:	4ba7      	ldr	r3, [pc, #668]	; (800199c <functionGunControlProcess+0x2b8>)
 80016fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 813c 	bne.w	8001980 <functionGunControlProcess+0x29c>

    switch (pandora.canMessages.AKB.commandFireMode)
 8001708:	4ba4      	ldr	r3, [pc, #656]	; (800199c <functionGunControlProcess+0x2b8>)
 800170a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800170e:	2b06      	cmp	r3, #6
 8001710:	f200 8138 	bhi.w	8001984 <functionGunControlProcess+0x2a0>
 8001714:	a201      	add	r2, pc, #4	; (adr r2, 800171c <functionGunControlProcess+0x38>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	08001739 	.word	0x08001739
 8001720:	08001777 	.word	0x08001777
 8001724:	080017f1 	.word	0x080017f1
 8001728:	080017f1 	.word	0x080017f1
 800172c:	08001855 	.word	0x08001855
 8001730:	080018d3 	.word	0x080018d3
 8001734:	080018d3 	.word	0x080018d3
    {
        case FIRE_MODE_SINGLE:
            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidTime)
 8001738:	4b98      	ldr	r3, [pc, #608]	; (800199c <functionGunControlProcess+0x2b8>)
 800173a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 8122 	beq.w	8001988 <functionGunControlProcess+0x2a4>
 8001744:	4b95      	ldr	r3, [pc, #596]	; (800199c <functionGunControlProcess+0x2b8>)
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	4a93      	ldr	r2, [pc, #588]	; (800199c <functionGunControlProcess+0x2b8>)
 800174e:	f892 207a 	ldrb.w	r2, [r2, #122]	; 0x7a
 8001752:	4293      	cmp	r3, r2
 8001754:	f0c0 8118 	bcc.w	8001988 <functionGunControlProcess+0x2a4>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001758:	2200      	movs	r2, #0
 800175a:	2140      	movs	r1, #64	; 0x40
 800175c:	4890      	ldr	r0, [pc, #576]	; (80019a0 <functionGunControlProcess+0x2bc>)
 800175e:	f006 f9c5 	bl	8007aec <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001762:	4b8e      	ldr	r3, [pc, #568]	; (800199c <functionGunControlProcess+0x2b8>)
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.ammoCounter++;
 800176a:	4b8c      	ldr	r3, [pc, #560]	; (800199c <functionGunControlProcess+0x2b8>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	3301      	adds	r3, #1
 8001770:	4a8a      	ldr	r2, [pc, #552]	; (800199c <functionGunControlProcess+0x2b8>)
 8001772:	64d3      	str	r3, [r2, #76]	; 0x4c
            }
            break;
 8001774:	e108      	b.n	8001988 <functionGunControlProcess+0x2a4>

        case FIRE_MODE_FAST_AUTO:
            if (pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidActiveTime)
 8001776:	4b89      	ldr	r3, [pc, #548]	; (800199c <functionGunControlProcess+0x2b8>)
 8001778:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800177c:	2b00      	cmp	r3, #0
 800177e:	d01a      	beq.n	80017b6 <functionGunControlProcess+0xd2>
 8001780:	4b86      	ldr	r3, [pc, #536]	; (800199c <functionGunControlProcess+0x2b8>)
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	4a84      	ldr	r2, [pc, #528]	; (800199c <functionGunControlProcess+0x2b8>)
 800178a:	f892 207b 	ldrb.w	r2, [r2, #123]	; 0x7b
 800178e:	4293      	cmp	r3, r2
 8001790:	d311      	bcc.n	80017b6 <functionGunControlProcess+0xd2>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001792:	2200      	movs	r2, #0
 8001794:	2140      	movs	r1, #64	; 0x40
 8001796:	4882      	ldr	r0, [pc, #520]	; (80019a0 <functionGunControlProcess+0x2bc>)
 8001798:	f006 f9a8 	bl	8007aec <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 800179c:	4b7f      	ldr	r3, [pc, #508]	; (800199c <functionGunControlProcess+0x2b8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.ammoCounter++;
 80017a4:	4b7d      	ldr	r3, [pc, #500]	; (800199c <functionGunControlProcess+0x2b8>)
 80017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a7c      	ldr	r2, [pc, #496]	; (800199c <functionGunControlProcess+0x2b8>)
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
                pandora.states.changeTime = now;
 80017ae:	4a7b      	ldr	r2, [pc, #492]	; (800199c <functionGunControlProcess+0x2b8>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6453      	str	r3, [r2, #68]	; 0x44
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
                pandora.states.solenoidActive = true;
                pandora.states.changeTime = now;
            }
            break;
 80017b4:	e0ea      	b.n	800198c <functionGunControlProcess+0x2a8>
            else if (!pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidPassiveTime)
 80017b6:	4b79      	ldr	r3, [pc, #484]	; (800199c <functionGunControlProcess+0x2b8>)
 80017b8:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f040 80e5 	bne.w	800198c <functionGunControlProcess+0x2a8>
 80017c2:	4b76      	ldr	r3, [pc, #472]	; (800199c <functionGunControlProcess+0x2b8>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	4a74      	ldr	r2, [pc, #464]	; (800199c <functionGunControlProcess+0x2b8>)
 80017cc:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 80017d0:	4293      	cmp	r3, r2
 80017d2:	f0c0 80db 	bcc.w	800198c <functionGunControlProcess+0x2a8>
            	SOLENOID(SOLENOID_DRV_1,ON);
 80017d6:	2201      	movs	r2, #1
 80017d8:	2140      	movs	r1, #64	; 0x40
 80017da:	4871      	ldr	r0, [pc, #452]	; (80019a0 <functionGunControlProcess+0x2bc>)
 80017dc:	f006 f986 	bl	8007aec <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 80017e0:	4b6e      	ldr	r3, [pc, #440]	; (800199c <functionGunControlProcess+0x2b8>)
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.changeTime = now;
 80017e8:	4a6c      	ldr	r2, [pc, #432]	; (800199c <functionGunControlProcess+0x2b8>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80017ee:	e0cd      	b.n	800198c <functionGunControlProcess+0x2a8>

        case FIRE_MODE_FAST_BURST_3:
        case FIRE_MODE_FAST_BURST_5:
        {
            uint8_t target = (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_3) ? 3 : 5;
 80017f0:	4b6a      	ldr	r3, [pc, #424]	; (800199c <functionGunControlProcess+0x2b8>)
 80017f2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d101      	bne.n	80017fe <functionGunControlProcess+0x11a>
 80017fa:	2303      	movs	r3, #3
 80017fc:	e000      	b.n	8001800 <functionGunControlProcess+0x11c>
 80017fe:	2305      	movs	r3, #5
 8001800:	73bb      	strb	r3, [r7, #14]
            uint32_t burst_duration = functionGunControlGetShotInterval(pandora.canMessages.AKB.solenoidFastRpm) * target;
 8001802:	4b66      	ldr	r3, [pc, #408]	; (800199c <functionGunControlProcess+0x2b8>)
 8001804:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fed7 	bl	80015bc <functionGunControlGetShotInterval>
 800180e:	4602      	mov	r2, r0
 8001810:	7bbb      	ldrb	r3, [r7, #14]
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	60bb      	str	r3, [r7, #8]

            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= burst_duration)
 8001818:	4b60      	ldr	r3, [pc, #384]	; (800199c <functionGunControlProcess+0x2b8>)
 800181a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 80b6 	beq.w	8001990 <functionGunControlProcess+0x2ac>
 8001824:	4b5d      	ldr	r3, [pc, #372]	; (800199c <functionGunControlProcess+0x2b8>)
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	429a      	cmp	r2, r3
 8001830:	f200 80ae 	bhi.w	8001990 <functionGunControlProcess+0x2ac>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001834:	2200      	movs	r2, #0
 8001836:	2140      	movs	r1, #64	; 0x40
 8001838:	4859      	ldr	r0, [pc, #356]	; (80019a0 <functionGunControlProcess+0x2bc>)
 800183a:	f006 f957 	bl	8007aec <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 800183e:	4b57      	ldr	r3, [pc, #348]	; (800199c <functionGunControlProcess+0x2b8>)
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.ammoCounter += target;
 8001846:	4b55      	ldr	r3, [pc, #340]	; (800199c <functionGunControlProcess+0x2b8>)
 8001848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800184a:	7bbb      	ldrb	r3, [r7, #14]
 800184c:	4413      	add	r3, r2
 800184e:	4a53      	ldr	r2, [pc, #332]	; (800199c <functionGunControlProcess+0x2b8>)
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
            }
            break;
 8001852:	e09d      	b.n	8001990 <functionGunControlProcess+0x2ac>
        }

        case FIRE_MODE_SLOW_AUTO:
            if (!pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= functionGunControlGetShotInterval(pandora.canMessages.AKB.solenoidSlowRpm))
 8001854:	4b51      	ldr	r3, [pc, #324]	; (800199c <functionGunControlProcess+0x2b8>)
 8001856:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800185a:	2b00      	cmp	r3, #0
 800185c:	d119      	bne.n	8001892 <functionGunControlProcess+0x1ae>
 800185e:	4b4f      	ldr	r3, [pc, #316]	; (800199c <functionGunControlProcess+0x2b8>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	1ad4      	subs	r4, r2, r3
 8001866:	4b4d      	ldr	r3, [pc, #308]	; (800199c <functionGunControlProcess+0x2b8>)
 8001868:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff fea5 	bl	80015bc <functionGunControlGetShotInterval>
 8001872:	4603      	mov	r3, r0
 8001874:	429c      	cmp	r4, r3
 8001876:	d30c      	bcc.n	8001892 <functionGunControlProcess+0x1ae>
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
 8001878:	2201      	movs	r2, #1
 800187a:	2140      	movs	r1, #64	; 0x40
 800187c:	4848      	ldr	r0, [pc, #288]	; (80019a0 <functionGunControlProcess+0x2bc>)
 800187e:	f006 f935 	bl	8007aec <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 8001882:	4b46      	ldr	r3, [pc, #280]	; (800199c <functionGunControlProcess+0x2b8>)
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.changeTime = now;
 800188a:	4a44      	ldr	r2, [pc, #272]	; (800199c <functionGunControlProcess+0x2b8>)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6453      	str	r3, [r2, #68]	; 0x44
            	SOLENOID(SOLENOID_DRV_1,OFF);
                pandora.states.solenoidActive = false;
                pandora.states.ammoCounter++;
                pandora.states.changeTime = now;
            }
            break;
 8001890:	e080      	b.n	8001994 <functionGunControlProcess+0x2b0>
            else if (pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidTime)
 8001892:	4b42      	ldr	r3, [pc, #264]	; (800199c <functionGunControlProcess+0x2b8>)
 8001894:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001898:	2b00      	cmp	r3, #0
 800189a:	d07b      	beq.n	8001994 <functionGunControlProcess+0x2b0>
 800189c:	4b3f      	ldr	r3, [pc, #252]	; (800199c <functionGunControlProcess+0x2b8>)
 800189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	4a3d      	ldr	r2, [pc, #244]	; (800199c <functionGunControlProcess+0x2b8>)
 80018a6:	f892 207a 	ldrb.w	r2, [r2, #122]	; 0x7a
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d372      	bcc.n	8001994 <functionGunControlProcess+0x2b0>
            	SOLENOID(SOLENOID_DRV_1,OFF);
 80018ae:	2200      	movs	r2, #0
 80018b0:	2140      	movs	r1, #64	; 0x40
 80018b2:	483b      	ldr	r0, [pc, #236]	; (80019a0 <functionGunControlProcess+0x2bc>)
 80018b4:	f006 f91a 	bl	8007aec <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 80018b8:	4b38      	ldr	r3, [pc, #224]	; (800199c <functionGunControlProcess+0x2b8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.ammoCounter++;
 80018c0:	4b36      	ldr	r3, [pc, #216]	; (800199c <functionGunControlProcess+0x2b8>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	3301      	adds	r3, #1
 80018c6:	4a35      	ldr	r2, [pc, #212]	; (800199c <functionGunControlProcess+0x2b8>)
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
                pandora.states.changeTime = now;
 80018ca:	4a34      	ldr	r2, [pc, #208]	; (800199c <functionGunControlProcess+0x2b8>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80018d0:	e060      	b.n	8001994 <functionGunControlProcess+0x2b0>

        case FIRE_MODE_SLOW_BURST_3:
        case FIRE_MODE_SLOW_BURST_5:
        {
            uint8_t target = (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_SLOW_BURST_3) ? 3 : 5;
 80018d2:	4b32      	ldr	r3, [pc, #200]	; (800199c <functionGunControlProcess+0x2b8>)
 80018d4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80018d8:	2b05      	cmp	r3, #5
 80018da:	d101      	bne.n	80018e0 <functionGunControlProcess+0x1fc>
 80018dc:	2303      	movs	r3, #3
 80018de:	e000      	b.n	80018e2 <functionGunControlProcess+0x1fe>
 80018e0:	2305      	movs	r3, #5
 80018e2:	73fb      	strb	r3, [r7, #15]
            if (pandora.states.burstCounter >= target) break;
 80018e4:	4b2d      	ldr	r3, [pc, #180]	; (800199c <functionGunControlProcess+0x2b8>)
 80018e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d252      	bcs.n	8001998 <functionGunControlProcess+0x2b4>

            if (!pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= functionGunControlGetShotInterval(pandora.canMessages.AKB.solenoidSlowRpm))
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <functionGunControlProcess+0x2b8>)
 80018f4:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d119      	bne.n	8001930 <functionGunControlProcess+0x24c>
 80018fc:	4b27      	ldr	r3, [pc, #156]	; (800199c <functionGunControlProcess+0x2b8>)
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	1ad4      	subs	r4, r2, r3
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <functionGunControlProcess+0x2b8>)
 8001906:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fe56 	bl	80015bc <functionGunControlGetShotInterval>
 8001910:	4603      	mov	r3, r0
 8001912:	429c      	cmp	r4, r3
 8001914:	d30c      	bcc.n	8001930 <functionGunControlProcess+0x24c>
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
 8001916:	2201      	movs	r2, #1
 8001918:	2140      	movs	r1, #64	; 0x40
 800191a:	4821      	ldr	r0, [pc, #132]	; (80019a0 <functionGunControlProcess+0x2bc>)
 800191c:	f006 f8e6 	bl	8007aec <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 8001920:	4b1e      	ldr	r3, [pc, #120]	; (800199c <functionGunControlProcess+0x2b8>)
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.changeTime = now;
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <functionGunControlProcess+0x2b8>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
                pandora.states.solenoidActive = false;
                pandora.states.ammoCounter++;
                pandora.states.burstCounter++;
                pandora.states.changeTime = now;
            }
            break;
 800192e:	e039      	b.n	80019a4 <functionGunControlProcess+0x2c0>
            else if (pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidTime)
 8001930:	4b1a      	ldr	r3, [pc, #104]	; (800199c <functionGunControlProcess+0x2b8>)
 8001932:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001936:	2b00      	cmp	r3, #0
 8001938:	d034      	beq.n	80019a4 <functionGunControlProcess+0x2c0>
 800193a:	4b18      	ldr	r3, [pc, #96]	; (800199c <functionGunControlProcess+0x2b8>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	4a16      	ldr	r2, [pc, #88]	; (800199c <functionGunControlProcess+0x2b8>)
 8001944:	f892 207a 	ldrb.w	r2, [r2, #122]	; 0x7a
 8001948:	4293      	cmp	r3, r2
 800194a:	d32b      	bcc.n	80019a4 <functionGunControlProcess+0x2c0>
            	SOLENOID(SOLENOID_DRV_1,OFF);
 800194c:	2200      	movs	r2, #0
 800194e:	2140      	movs	r1, #64	; 0x40
 8001950:	4813      	ldr	r0, [pc, #76]	; (80019a0 <functionGunControlProcess+0x2bc>)
 8001952:	f006 f8cb 	bl	8007aec <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <functionGunControlProcess+0x2b8>)
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.ammoCounter++;
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <functionGunControlProcess+0x2b8>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	3301      	adds	r3, #1
 8001964:	4a0d      	ldr	r2, [pc, #52]	; (800199c <functionGunControlProcess+0x2b8>)
 8001966:	64d3      	str	r3, [r2, #76]	; 0x4c
                pandora.states.burstCounter++;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <functionGunControlProcess+0x2b8>)
 800196a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800196e:	3301      	adds	r3, #1
 8001970:	b29a      	uxth	r2, r3
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <functionGunControlProcess+0x2b8>)
 8001974:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                pandora.states.changeTime = now;
 8001978:	4a08      	ldr	r2, [pc, #32]	; (800199c <functionGunControlProcess+0x2b8>)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 800197e:	e011      	b.n	80019a4 <functionGunControlProcess+0x2c0>
    if (!pandora.states.triggerHeld && pandora.canMessages.AKB.commandFireMode != FIRE_MODE_SINGLE) return;
 8001980:	bf00      	nop
 8001982:	e010      	b.n	80019a6 <functionGunControlProcess+0x2c2>
        }

        default:
            break;
 8001984:	bf00      	nop
 8001986:	e00e      	b.n	80019a6 <functionGunControlProcess+0x2c2>
            break;
 8001988:	bf00      	nop
 800198a:	e00c      	b.n	80019a6 <functionGunControlProcess+0x2c2>
            break;
 800198c:	bf00      	nop
 800198e:	e00a      	b.n	80019a6 <functionGunControlProcess+0x2c2>
            break;
 8001990:	bf00      	nop
 8001992:	e008      	b.n	80019a6 <functionGunControlProcess+0x2c2>
            break;
 8001994:	bf00      	nop
 8001996:	e006      	b.n	80019a6 <functionGunControlProcess+0x2c2>
            if (pandora.states.burstCounter >= target) break;
 8001998:	bf00      	nop
 800199a:	e004      	b.n	80019a6 <functionGunControlProcess+0x2c2>
 800199c:	24000570 	.word	0x24000570
 80019a0:	58021800 	.word	0x58021800
            break;
 80019a4:	bf00      	nop
    }
}
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}

080019ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019b2:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <MX_I2C1_Init+0x78>)
 80019b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019b8:	4a1b      	ldr	r2, [pc, #108]	; (8001a28 <MX_I2C1_Init+0x7c>)
 80019ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80019bc:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019e6:	480e      	ldr	r0, [pc, #56]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019e8:	f006 f89a 	bl	8007b20 <HAL_I2C_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019f2:	f000 faa7 	bl	8001f44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019f6:	2100      	movs	r1, #0
 80019f8:	4809      	ldr	r0, [pc, #36]	; (8001a20 <MX_I2C1_Init+0x74>)
 80019fa:	f006 f92d 	bl	8007c58 <HAL_I2CEx_ConfigAnalogFilter>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a04:	f000 fa9e 	bl	8001f44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_I2C1_Init+0x74>)
 8001a0c:	f006 f96f 	bl	8007cee <HAL_I2CEx_ConfigDigitalFilter>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a16:	f000 fa95 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2400051c 	.word	0x2400051c
 8001a24:	40005400 	.word	0x40005400
 8001a28:	307075b1 	.word	0x307075b1

08001a2c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b0ba      	sub	sp, #232	; 0xe8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a34:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
 8001a3c:	605a      	str	r2, [r3, #4]
 8001a3e:	609a      	str	r2, [r3, #8]
 8001a40:	60da      	str	r2, [r3, #12]
 8001a42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a44:	f107 0310 	add.w	r3, r7, #16
 8001a48:	22c0      	movs	r2, #192	; 0xc0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00b fb71 	bl	800d134 <memset>
  if(i2cHandle->Instance==I2C1)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <HAL_I2C_MspInit+0xc8>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d146      	bne.n	8001aea <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a5c:	f04f 0208 	mov.w	r2, #8
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a6e:	f107 0310 	add.w	r3, r7, #16
 8001a72:	4618      	mov	r0, r3
 8001a74:	f007 f9a8 	bl	8008dc8 <HAL_RCCEx_PeriphCLKConfig>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001a7e:	f000 fa61 	bl	8001f44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_I2C_MspInit+0xcc>)
 8001a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <HAL_I2C_MspInit+0xcc>)
 8001a8a:	f043 0302 	orr.w	r3, r3, #2
 8001a8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_I2C_MspInit+0xcc>)
 8001a94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = RTC_I2C_SDA_Pin|RTC_I2C_SCL_Pin;
 8001aa0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aa4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aa8:	2312      	movs	r3, #18
 8001aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aba:	2304      	movs	r3, #4
 8001abc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	480d      	ldr	r0, [pc, #52]	; (8001afc <HAL_I2C_MspInit+0xd0>)
 8001ac8:	f005 fe60 	bl	800778c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <HAL_I2C_MspInit+0xcc>)
 8001ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ad2:	4a09      	ldr	r2, [pc, #36]	; (8001af8 <HAL_I2C_MspInit+0xcc>)
 8001ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ad8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_I2C_MspInit+0xcc>)
 8001ade:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ae2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001aea:	bf00      	nop
 8001aec:	37e8      	adds	r7, #232	; 0xe8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40005400 	.word	0x40005400
 8001af8:	58024400 	.word	0x58024400
 8001afc:	58020400 	.word	0x58020400

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b04:	f001 f91a 	bl	8002d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b08:	f000 f93e 	bl	8001d88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001b0c:	f000 f9ea 	bl	8001ee4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b10:	f7ff fc6a 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b14:	f7ff f97e 	bl	8000e14 <MX_DMA_Init>
  MX_BDMA_Init();
 8001b18:	f7fe fffa 	bl	8000b10 <MX_BDMA_Init>
  MX_TIM1_Init();
 8001b1c:	f000 fc0a 	bl	8002334 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001b20:	f7fe fdd0 	bl	80006c4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001b24:	f7fe fe34 	bl	8000790 <MX_ADC3_Init>
  MX_ETH_Init();
 8001b28:	f7ff fa98 	bl	800105c <MX_ETH_Init>
  MX_FDCAN2_Init();
 8001b2c:	f7ff fb8e 	bl	800124c <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001b30:	f7ff ff3c 	bl	80019ac <MX_I2C1_Init>
  MX_UART4_Init();
 8001b34:	f000 feec 	bl	8002910 <MX_UART4_Init>
  MX_UART7_Init();
 8001b38:	f000 ff36 	bl	80029a8 <MX_UART7_Init>
  MX_ADC1_Init();
 8001b3c:	f7fe fd4a 	bl	80005d4 <MX_ADC1_Init>
  MX_UART8_Init();
 8001b40:	f000 ff7e 	bl	8002a40 <MX_UART8_Init>
  MX_TIM3_Init();
 8001b44:	f000 fc50 	bl	80023e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, pandora.analogDigitalConverter.hadc1Buffer, 1);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	4986      	ldr	r1, [pc, #536]	; (8001d64 <main+0x264>)
 8001b4c:	4886      	ldr	r0, [pc, #536]	; (8001d68 <main+0x268>)
 8001b4e:	f001 fd31 	bl	80035b4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, pandora.analogDigitalConverter.hadc2Buffer, 1);
 8001b52:	2201      	movs	r2, #1
 8001b54:	4985      	ldr	r1, [pc, #532]	; (8001d6c <main+0x26c>)
 8001b56:	4886      	ldr	r0, [pc, #536]	; (8001d70 <main+0x270>)
 8001b58:	f001 fd2c 	bl	80035b4 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, pandora.analogDigitalConverter.hadc3Buffer, 1);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	4985      	ldr	r1, [pc, #532]	; (8001d74 <main+0x274>)
 8001b60:	4885      	ldr	r0, [pc, #532]	; (8001d78 <main+0x278>)
 8001b62:	f001 fd27 	bl	80035b4 <HAL_ADC_Start_DMA>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b66:	213c      	movs	r1, #60	; 0x3c
 8001b68:	4884      	ldr	r0, [pc, #528]	; (8001d7c <main+0x27c>)
 8001b6a:	f009 fed1 	bl	800b910 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim3,0);
 8001b6e:	4b83      	ldr	r3, [pc, #524]	; (8001d7c <main+0x27c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2200      	movs	r2, #0
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24
//  pandora.error.isPluggedAKB 	 = (pandora.powerManagement.actualAKBOK 	|| pandora.configurations.overrideAKBOK); // takılı olmadan da çalışabilmesi için override'a bak
//  pandora.error.isPluggedEOS	 = (pandora.powerManagement.actualEOSOK 	|| pandora.configurations.overrideEOSOK);
//  pandora.error.isPluggedHERCULE = (pandora.powerManagement.actualHERCULEOK || pandora.configurations.overrideHERCULEOK);
//  pandora.error.isPluggedKKU	 = (pandora.powerManagement.actualKKUOK	    || pandora.configurations.overrideKKUOK);

  pandora.error.system 			 =!(pandora.error.AKBOK &&
 8001b76:	4b82      	ldr	r3, [pc, #520]	; (8001d80 <main+0x280>)
 8001b78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11f      	bne.n	8001bc6 <main+0xc6>
										pandora.error.EOSOK &&
 8001b86:	4b7e      	ldr	r3, [pc, #504]	; (8001d80 <main+0x280>)
 8001b88:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
  pandora.error.system 			 =!(pandora.error.AKBOK &&
 8001b8c:	f083 0301 	eor.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d117      	bne.n	8001bc6 <main+0xc6>
											pandora.error.GDBOK &&
 8001b96:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <main+0x280>)
 8001b98:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
										pandora.error.EOSOK &&
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <main+0xc6>
												pandora.error.HERCULEOK &&
 8001ba6:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <main+0x280>)
 8001ba8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
											pandora.error.GDBOK &&
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d107      	bne.n	8001bc6 <main+0xc6>
													pandora.error.KKUOK);
 8001bb6:	4b72      	ldr	r3, [pc, #456]	; (8001d80 <main+0x280>)
 8001bb8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
												pandora.error.HERCULEOK &&
 8001bbc:	f083 0301 	eor.w	r3, r3, #1
 8001bc0:	b2db      	uxtb	r3, r3
  pandora.error.system 			 =!(pandora.error.AKBOK &&
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <main+0xca>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <main+0xcc>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b6b      	ldr	r3, [pc, #428]	; (8001d80 <main+0x280>)
 8001bd4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /*
   * 	SWITCHES CHECK
   */

  pandora.states.firePermission = !pandora.switches.switches_smga;
 8001bd8:	4b69      	ldr	r3, [pc, #420]	; (8001d80 <main+0x280>)
 8001bda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b62      	ldr	r3, [pc, #392]	; (8001d80 <main+0x280>)
 8001bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /*
   * 	SYSTEM CHECK
   */
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  functionGunControlInit();
 8001bfa:	f7ff fcef 	bl	80015dc <functionGunControlInit>
  functionGunControlSetMode(FIRE_MODE_SINGLE);
 8001bfe:	2000      	movs	r0, #0
 8001c00:	f7ff fd0c 	bl	800161c <functionGunControlSetMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startTimeScanFlags();
 8001c04:	f000 fdb6 	bl	8002774 <startTimeScanFlags>

	  if(_100msFlag)
 8001c08:	4b5e      	ldr	r3, [pc, #376]	; (8001d84 <main+0x284>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d007      	beq.n	8001c20 <main+0x120>
	  {
		  functionMeasureVoltage();
 8001c10:	f000 f99e 	bl	8001f50 <functionMeasureVoltage>
		  functionMeasureCurrent();
 8001c14:	f000 f9d0 	bl	8001fb8 <functionMeasureCurrent>

		  functionErrorCurrentVoltageCheck();
 8001c18:	f7ff f924 	bl	8000e64 <functionErrorCurrentVoltageCheck>
		  functionErrorMosfetCheck();
 8001c1c:	f7ff f986 	bl	8000f2c <functionErrorMosfetCheck>
	  }

	  if(!pandora.error.system 						&&
 8001c20:	4b57      	ldr	r3, [pc, #348]	; (8001d80 <main+0x280>)
 8001c22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c26:	f083 0301 	eor.w	r3, r3, #1
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d039      	beq.n	8001ca4 <main+0x1a4>
		 pandora.gun.cockingHandle.armed 			&&
 8001c30:	4b53      	ldr	r3, [pc, #332]	; (8001d80 <main+0x280>)
 8001c32:	79db      	ldrb	r3, [r3, #7]
	  if(!pandora.error.system 						&&
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d035      	beq.n	8001ca4 <main+0x1a4>
	  	 pandora.switches.switches_movement_allowed &&
 8001c38:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <main+0x280>)
 8001c3a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
		 pandora.gun.cockingHandle.armed 			&&
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d030      	beq.n	8001ca4 <main+0x1a4>
		 pandora.switches.switches_safety 			&&
 8001c42:	4b4f      	ldr	r3, [pc, #316]	; (8001d80 <main+0x280>)
 8001c44:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
	  	 pandora.switches.switches_movement_allowed &&
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d02b      	beq.n	8001ca4 <main+0x1a4>
		 (!pandora.switches.switches_smga || pandora.canMessages.AKB.commandSmgaOveride) &&
 8001c4c:	4b4c      	ldr	r3, [pc, #304]	; (8001d80 <main+0x280>)
 8001c4e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c52:	f083 0301 	eor.w	r3, r3, #1
 8001c56:	b2db      	uxtb	r3, r3
		 pandora.switches.switches_safety 			&&
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d104      	bne.n	8001c66 <main+0x166>
		 (!pandora.switches.switches_smga || pandora.canMessages.AKB.commandSmgaOveride) &&
 8001c5c:	4b48      	ldr	r3, [pc, #288]	; (8001d80 <main+0x280>)
 8001c5e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d01e      	beq.n	8001ca4 <main+0x1a4>
		 pandora.switches.switches_fire_order 		&&
 8001c66:	4b46      	ldr	r3, [pc, #280]	; (8001d80 <main+0x280>)
 8001c68:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
		 (!pandora.switches.switches_smga || pandora.canMessages.AKB.commandSmgaOveride) &&
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d019      	beq.n	8001ca4 <main+0x1a4>
		 !pandora.canMessages.AKB.commandEmergencyStop 				&&
 8001c70:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <main+0x280>)
 8001c72:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001c76:	f083 0301 	eor.w	r3, r3, #1
 8001c7a:	b2db      	uxtb	r3, r3
		 pandora.switches.switches_fire_order 		&&
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d011      	beq.n	8001ca4 <main+0x1a4>
		 (!pandora.canMessages.AKB.commandFireBlockedArea || pandora.canMessages.AKB.commandFireBlockedAreaOveride))
 8001c80:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <main+0x280>)
 8001c82:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001c86:	f083 0301 	eor.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
		 !pandora.canMessages.AKB.commandEmergencyStop 				&&
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d104      	bne.n	8001c9a <main+0x19a>
		 (!pandora.canMessages.AKB.commandFireBlockedArea || pandora.canMessages.AKB.commandFireBlockedAreaOveride))
 8001c90:	4b3b      	ldr	r3, [pc, #236]	; (8001d80 <main+0x280>)
 8001c92:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d004      	beq.n	8001ca4 <main+0x1a4>
	  {
		  pandora.states.firePermission = true;
 8001c9a:	4b39      	ldr	r3, [pc, #228]	; (8001d80 <main+0x280>)
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ca2:	e003      	b.n	8001cac <main+0x1ac>
	  }
	  else
	  {
		  pandora.states.firePermission = false;
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <main+0x280>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  }

	  /* COCKING HANDLE LOOP BEGIN */
	  if(pandora.gun.cockingHandle.motorState != IDLE)
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <main+0x280>)
 8001cae:	795b      	ldrb	r3, [r3, #5]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d002      	beq.n	8001cba <main+0x1ba>
	  {
		  functionEncoderRead(&htim3);
 8001cb4:	4831      	ldr	r0, [pc, #196]	; (8001d7c <main+0x27c>)
 8001cb6:	f7ff f86f 	bl	8000d98 <functionEncoderRead>
	  }

	  if(pandora.switches.switches_cocking_handle_order && pandora.switches.switches_safety && !pandora.gun.cockingHandle.armed)
 8001cba:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <main+0x280>)
 8001cbc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00e      	beq.n	8001ce2 <main+0x1e2>
 8001cc4:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <main+0x280>)
 8001cc6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <main+0x1e2>
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <main+0x280>)
 8001cd0:	79db      	ldrb	r3, [r3, #7]
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <main+0x1e2>
	  {
		  functionCockingHandleGoArm();
 8001cdc:	f7fe ffec 	bl	8000cb8 <functionCockingHandleGoArm>
 8001ce0:	e010      	b.n	8001d04 <main+0x204>
	  }

	  else if (!pandora.switches.switches_safety && !pandora.gun.cockingHandle.safe)
 8001ce2:	4b27      	ldr	r3, [pc, #156]	; (8001d80 <main+0x280>)
 8001ce4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ce8:	f083 0301 	eor.w	r3, r3, #1
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <main+0x204>
 8001cf2:	4b23      	ldr	r3, [pc, #140]	; (8001d80 <main+0x280>)
 8001cf4:	7a1b      	ldrb	r3, [r3, #8]
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <main+0x204>
	  {
		  functionCockingHandleGoSafe();
 8001d00:	f7fe ff98 	bl	8000c34 <functionCockingHandleGoSafe>
	  }
	  /* COCKING HANDLE LOOP END */

	  /* SOLENOID LOOP BEGIN */
	  functionGunControlProcess(HAL_GetTick());
 8001d04:	f001 f8a0 	bl	8002e48 <HAL_GetTick>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fcea 	bl	80016e4 <functionGunControlProcess>

	  if((pandora.switches.switches_fire_order ||  pandora.canMessages.AKB.commandGunFireOveride)		&&   // ama bence tehlikeli
 8001d10:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <main+0x280>)
 8001d12:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d104      	bne.n	8001d24 <main+0x224>
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <main+0x280>)
 8001d1c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d019      	beq.n	8001d58 <main+0x258>
		 pandora.switches.switches_safety 			&&
 8001d24:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <main+0x280>)
 8001d26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
	  if((pandora.switches.switches_fire_order ||  pandora.canMessages.AKB.commandGunFireOveride)		&&   // ama bence tehlikeli
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d014      	beq.n	8001d58 <main+0x258>
		 pandora.switches.switches_movement_allowed &&
 8001d2e:	4b14      	ldr	r3, [pc, #80]	; (8001d80 <main+0x280>)
 8001d30:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
		 pandora.switches.switches_safety 			&&
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00f      	beq.n	8001d58 <main+0x258>
		(!pandora.switches.switches_smga || pandora.states.overrideSmga)) // atış emniyet anahtarı ve hareket anahtarı
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <main+0x280>)
 8001d3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d3e:	f083 0301 	eor.w	r3, r3, #1
 8001d42:	b2db      	uxtb	r3, r3
		 pandora.switches.switches_movement_allowed &&
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d104      	bne.n	8001d52 <main+0x252>
		(!pandora.switches.switches_smga || pandora.states.overrideSmga)) // atış emniyet anahtarı ve hareket anahtarı
 8001d48:	4b0d      	ldr	r3, [pc, #52]	; (8001d80 <main+0x280>)
 8001d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d002      	beq.n	8001d58 <main+0x258>
	  {
		  functionGunControlTriggerPressed();
 8001d52:	f7ff fc75 	bl	8001640 <functionGunControlTriggerPressed>
 8001d56:	e001      	b.n	8001d5c <main+0x25c>
	  }
	  else
	  {
		  functionGunControlTriggerReleased();
 8001d58:	f7ff fcaa 	bl	80016b0 <functionGunControlTriggerReleased>
	  }
	  /* SOLENOID LOOP END */

	  clearTimeScanFlags();
 8001d5c:	f000 fd9e 	bl	800289c <clearTimeScanFlags>
	  startTimeScanFlags();
 8001d60:	e750      	b.n	8001c04 <main+0x104>
 8001d62:	bf00      	nop
 8001d64:	2400062c 	.word	0x2400062c
 8001d68:	240000f0 	.word	0x240000f0
 8001d6c:	24000634 	.word	0x24000634
 8001d70:	24000154 	.word	0x24000154
 8001d74:	2400063c 	.word	0x2400063c
 8001d78:	240001b8 	.word	0x240001b8
 8001d7c:	24000698 	.word	0x24000698
 8001d80:	24000570 	.word	0x24000570
 8001d84:	24000701 	.word	0x24000701

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09e      	sub	sp, #120	; 0x78
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d92:	224c      	movs	r2, #76	; 0x4c
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f00b f9cc 	bl	800d134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	2220      	movs	r2, #32
 8001da2:	2100      	movs	r1, #0
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00b f9c5 	bl	800d134 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001daa:	2002      	movs	r0, #2
 8001dac:	f005 ffec 	bl	8007d88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db0:	2300      	movs	r3, #0
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	4b48      	ldr	r3, [pc, #288]	; (8001ed8 <SystemClock_Config+0x150>)
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	4a47      	ldr	r2, [pc, #284]	; (8001ed8 <SystemClock_Config+0x150>)
 8001dba:	f023 0301 	bic.w	r3, r3, #1
 8001dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001dc0:	4b45      	ldr	r3, [pc, #276]	; (8001ed8 <SystemClock_Config+0x150>)
 8001dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b44      	ldr	r3, [pc, #272]	; (8001edc <SystemClock_Config+0x154>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	4a43      	ldr	r2, [pc, #268]	; (8001edc <SystemClock_Config+0x154>)
 8001dd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dd4:	6193      	str	r3, [r2, #24]
 8001dd6:	4b41      	ldr	r3, [pc, #260]	; (8001edc <SystemClock_Config+0x154>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001de2:	bf00      	nop
 8001de4:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <SystemClock_Config+0x154>)
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df0:	d1f8      	bne.n	8001de4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	4b3b      	ldr	r3, [pc, #236]	; (8001ee0 <SystemClock_Config+0x158>)
 8001df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001df8:	4a39      	ldr	r2, [pc, #228]	; (8001ee0 <SystemClock_Config+0x158>)
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e02:	4b37      	ldr	r3, [pc, #220]	; (8001ee0 <SystemClock_Config+0x158>)
 8001e04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001e10:	2300      	movs	r3, #0
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <SystemClock_Config+0x154>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a30      	ldr	r2, [pc, #192]	; (8001edc <SystemClock_Config+0x154>)
 8001e1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b2e      	ldr	r3, [pc, #184]	; (8001edc <SystemClock_Config+0x154>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e28:	603b      	str	r3, [r7, #0]
 8001e2a:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <SystemClock_Config+0x150>)
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	4a2a      	ldr	r2, [pc, #168]	; (8001ed8 <SystemClock_Config+0x150>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e36:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <SystemClock_Config+0x150>)
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	603b      	str	r3, [r7, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e42:	bf00      	nop
 8001e44:	4b25      	ldr	r3, [pc, #148]	; (8001edc <SystemClock_Config+0x154>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e50:	d1f8      	bne.n	8001e44 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e52:	2301      	movs	r3, #1
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e60:	2302      	movs	r3, #2
 8001e62:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001e68:	2350      	movs	r3, #80	; 0x50
 8001e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001e70:	2308      	movs	r3, #8
 8001e72:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e74:	2302      	movs	r3, #2
 8001e76:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e78:	230c      	movs	r3, #12
 8001e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f005 ffb7 	bl	8007dfc <HAL_RCC_OscConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001e94:	f000 f856 	bl	8001f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e98:	233f      	movs	r3, #63	; 0x3f
 8001e9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001ea8:	2340      	movs	r3, #64	; 0x40
 8001eaa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001eac:	2340      	movs	r3, #64	; 0x40
 8001eae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001eb6:	2340      	movs	r3, #64	; 0x40
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001eba:	f107 030c 	add.w	r3, r7, #12
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f006 fbf5 	bl	80086b0 <HAL_RCC_ClockConfig>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001ecc:	f000 f83a 	bl	8001f44 <Error_Handler>
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3778      	adds	r7, #120	; 0x78
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	58000400 	.word	0x58000400
 8001edc:	58024800 	.word	0x58024800
 8001ee0:	58024400 	.word	0x58024400

08001ee4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b0b0      	sub	sp, #192	; 0xc0
 8001ee8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eea:	463b      	mov	r3, r7
 8001eec:	22c0      	movs	r2, #192	; 0xc0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f00b f91f 	bl	800d134 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ef6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001efa:	f04f 0300 	mov.w	r3, #0
 8001efe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001f06:	230c      	movs	r3, #12
 8001f08:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f12:	2302      	movs	r3, #2
 8001f14:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f16:	23c0      	movs	r3, #192	; 0xc0
 8001f18:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001f1a:	2320      	movs	r3, #32
 8001f1c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001f1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2a:	463b      	mov	r3, r7
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f006 ff4b 	bl	8008dc8 <HAL_RCCEx_PeriphCLKConfig>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001f38:	f000 f804 	bl	8001f44 <Error_Handler>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	37c0      	adds	r7, #192	; 0xc0
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f48:	b672      	cpsid	i
}
 8001f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <Error_Handler+0x8>
	...

08001f50 <functionMeasureVoltage>:
 * 28 Volt için 0.935 Volt #28/0.935#=29.94652 				Katsayı
 * #3.3/65535# = 0.000050354 								1 Bite Gelen Volt Değeri
 * VOLTAGE = ((ADC_VALUE * 3.3)/65535)*(28/0.935)			Formül
 */
void functionMeasureVoltage(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
	pandora.powerManagement.BATVoltage = (((pandora.analogDigitalConverter.hadc3Buffer[3])*3.3)/65535)*(28/0.935);
 8001f54:	4b16      	ldr	r3, [pc, #88]	; (8001fb0 <functionMeasureVoltage+0x60>)
 8001f56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f5a:	ee07 3a90 	vmov	s15, r3
 8001f5e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001f62:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001f98 <functionMeasureVoltage+0x48>
 8001f66:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f6a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001fa0 <functionMeasureVoltage+0x50>
 8001f6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f72:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001fa8 <functionMeasureVoltage+0x58>
 8001f76:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f7a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f7e:	ee17 2a90 	vmov	r2, s15
 8001f82:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <functionMeasureVoltage+0x60>)
 8001f84:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	f3af 8000 	nop.w
 8001f98:	66666666 	.word	0x66666666
 8001f9c:	400a6666 	.word	0x400a6666
 8001fa0:	00000000 	.word	0x00000000
 8001fa4:	40efffe0 	.word	0x40efffe0
 8001fa8:	66ac7df2 	.word	0x66ac7df2
 8001fac:	403df24f 	.word	0x403df24f
 8001fb0:	24000570 	.word	0x24000570
 8001fb4:	00000000 	.word	0x00000000

08001fb8 <functionMeasureCurrent>:
 * CURRENT = ((ADC_VALUE * 3.3)/65535)*(5/0.8)				Formül
 */


void functionMeasureCurrent(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
	pandora.powerManagement.SCurrent 				= ((pandora.analogDigitalConverter.hadc3Buffer[2] * 3.3)/65535)*(5/0.8); // #DÜZENLE KESME DEĞERLERİNİ
 8001fbc:	4b62      	ldr	r3, [pc, #392]	; (8002148 <functionMeasureCurrent+0x190>)
 8001fbe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001fca:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8002138 <functionMeasureCurrent+0x180>
 8001fce:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fd2:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 8002140 <functionMeasureCurrent+0x188>
 8001fd6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fda:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 8001fde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fe2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fe6:	ee17 2a90 	vmov	r2, s15
 8001fea:	4b57      	ldr	r3, [pc, #348]	; (8002148 <functionMeasureCurrent+0x190>)
 8001fec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pandora.powerManagement.CHCurrent 				= ((pandora.analogDigitalConverter.hadc3Buffer[0] * 3.3)/65535)*(5/0.8);
 8001ff0:	4b55      	ldr	r3, [pc, #340]	; (8002148 <functionMeasureCurrent+0x190>)
 8001ff2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001ffe:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8002138 <functionMeasureCurrent+0x180>
 8002002:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002006:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8002140 <functionMeasureCurrent+0x188>
 800200a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800200e:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 8002012:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002016:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800201a:	ee17 2a90 	vmov	r2, s15
 800201e:	4b4a      	ldr	r3, [pc, #296]	; (8002148 <functionMeasureCurrent+0x190>)
 8002020:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pandora.powerManagement.HERCULECurrent 			= ((pandora.analogDigitalConverter.hadc2Buffer[1] * 3.3)/65535)*(5/0.8);
 8002024:	4b48      	ldr	r3, [pc, #288]	; (8002148 <functionMeasureCurrent+0x190>)
 8002026:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002032:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8002138 <functionMeasureCurrent+0x180>
 8002036:	ee27 6b06 	vmul.f64	d6, d7, d6
 800203a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8002140 <functionMeasureCurrent+0x188>
 800203e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002042:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 8002046:	ee27 7b06 	vmul.f64	d7, d7, d6
 800204a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800204e:	ee17 2a90 	vmov	r2, s15
 8002052:	4b3d      	ldr	r3, [pc, #244]	; (8002148 <functionMeasureCurrent+0x190>)
 8002054:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pandora.powerManagement.AKBCurrent 				= ((pandora.analogDigitalConverter.hadc2Buffer[0] * 3.3)/65535)*(5/0.8);
 8002058:	4b3b      	ldr	r3, [pc, #236]	; (8002148 <functionMeasureCurrent+0x190>)
 800205a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002066:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8002138 <functionMeasureCurrent+0x180>
 800206a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800206e:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8002140 <functionMeasureCurrent+0x188>
 8002072:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002076:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 800207a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800207e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002082:	ee17 2a90 	vmov	r2, s15
 8002086:	4b30      	ldr	r3, [pc, #192]	; (8002148 <functionMeasureCurrent+0x190>)
 8002088:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	pandora.powerManagement.EOSCurrent 				= ((pandora.analogDigitalConverter.hadc1Buffer[0] * 3.3)/65535)*(5/0.8);
 800208c:	4b2e      	ldr	r3, [pc, #184]	; (8002148 <functionMeasureCurrent+0x190>)
 800208e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800209a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8002138 <functionMeasureCurrent+0x180>
 800209e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020a2:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8002140 <functionMeasureCurrent+0x188>
 80020a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020aa:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 80020ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020b2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020b6:	ee17 2a90 	vmov	r2, s15
 80020ba:	4b23      	ldr	r3, [pc, #140]	; (8002148 <functionMeasureCurrent+0x190>)
 80020bc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	pandora.powerManagement.GDBCurrent 				= ((pandora.analogDigitalConverter.hadc3Buffer[0] * 3.3)/65535)*(5/0.8);
 80020c0:	4b21      	ldr	r3, [pc, #132]	; (8002148 <functionMeasureCurrent+0x190>)
 80020c2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80020c6:	ee07 3a90 	vmov	s15, r3
 80020ca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020ce:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8002138 <functionMeasureCurrent+0x180>
 80020d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020d6:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8002140 <functionMeasureCurrent+0x188>
 80020da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020de:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 80020e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020e6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020ea:	ee17 2a90 	vmov	r2, s15
 80020ee:	4b16      	ldr	r3, [pc, #88]	; (8002148 <functionMeasureCurrent+0x190>)
 80020f0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	pandora.powerManagement.KKUCurrent 				= ((pandora.analogDigitalConverter.hadc1Buffer[1] * 3.3)/65535)*(5/0.8);
 80020f4:	4b14      	ldr	r3, [pc, #80]	; (8002148 <functionMeasureCurrent+0x190>)
 80020f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020fa:	ee07 3a90 	vmov	s15, r3
 80020fe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002102:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002138 <functionMeasureCurrent+0x180>
 8002106:	ee27 6b06 	vmul.f64	d6, d7, d6
 800210a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8002140 <functionMeasureCurrent+0x188>
 800210e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002112:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 8002116:	ee27 7b06 	vmul.f64	d7, d7, d6
 800211a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800211e:	ee17 2a90 	vmov	r2, s15
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <functionMeasureCurrent+0x190>)
 8002124:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8002128:	bf00      	nop
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	f3af 8000 	nop.w
 8002138:	66666666 	.word	0x66666666
 800213c:	400a6666 	.word	0x400a6666
 8002140:	00000000 	.word	0x00000000
 8002144:	40efffe0 	.word	0x40efffe0
 8002148:	24000570 	.word	0x24000570

0800214c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	4b0a      	ldr	r3, [pc, #40]	; (800217c <HAL_MspInit+0x30>)
 8002154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002158:	4a08      	ldr	r2, [pc, #32]	; (800217c <HAL_MspInit+0x30>)
 800215a:	f043 0302 	orr.w	r3, r3, #2
 800215e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_MspInit+0x30>)
 8002164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	607b      	str	r3, [r7, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	58024400 	.word	0x58024400

08002180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002184:	e7fe      	b.n	8002184 <NMI_Handler+0x4>

08002186 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218a:	e7fe      	b.n	800218a <HardFault_Handler+0x4>

0800218c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002190:	e7fe      	b.n	8002190 <MemManage_Handler+0x4>

08002192 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <BusFault_Handler+0x4>

08002198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <UsageFault_Handler+0x4>

0800219e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a2:	bf00      	nop
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b0:	bf00      	nop
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021cc:	f000 fe28 	bl	8002e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021d8:	4802      	ldr	r0, [pc, #8]	; (80021e4 <DMA1_Stream0_IRQHandler+0x10>)
 80021da:	f003 f82d 	bl	8005238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2400021c 	.word	0x2400021c

080021e8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <DMA1_Stream1_IRQHandler+0x10>)
 80021ee:	f003 f823 	bl	8005238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24000294 	.word	0x24000294

080021fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <TIM3_IRQHandler+0x10>)
 8002202:	f009 fc13 	bl	800ba2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	24000698 	.word	0x24000698

08002210 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <BDMA_Channel0_IRQHandler+0x10>)
 8002216:	f003 f80f 	bl	8005238 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	2400030c 	.word	0x2400030c

08002224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002228:	4b37      	ldr	r3, [pc, #220]	; (8002308 <SystemInit+0xe4>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222e:	4a36      	ldr	r2, [pc, #216]	; (8002308 <SystemInit+0xe4>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002238:	4b34      	ldr	r3, [pc, #208]	; (800230c <SystemInit+0xe8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	2b06      	cmp	r3, #6
 8002242:	d807      	bhi.n	8002254 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <SystemInit+0xe8>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f023 030f 	bic.w	r3, r3, #15
 800224c:	4a2f      	ldr	r2, [pc, #188]	; (800230c <SystemInit+0xe8>)
 800224e:	f043 0307 	orr.w	r3, r3, #7
 8002252:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002254:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <SystemInit+0xec>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a2d      	ldr	r2, [pc, #180]	; (8002310 <SystemInit+0xec>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002260:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <SystemInit+0xec>)
 8002262:	2200      	movs	r2, #0
 8002264:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <SystemInit+0xec>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4929      	ldr	r1, [pc, #164]	; (8002310 <SystemInit+0xec>)
 800226c:	4b29      	ldr	r3, [pc, #164]	; (8002314 <SystemInit+0xf0>)
 800226e:	4013      	ands	r3, r2
 8002270:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <SystemInit+0xe8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800227e:	4b23      	ldr	r3, [pc, #140]	; (800230c <SystemInit+0xe8>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 030f 	bic.w	r3, r3, #15
 8002286:	4a21      	ldr	r2, [pc, #132]	; (800230c <SystemInit+0xe8>)
 8002288:	f043 0307 	orr.w	r3, r3, #7
 800228c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <SystemInit+0xec>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <SystemInit+0xec>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800229a:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <SystemInit+0xec>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80022a0:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <SystemInit+0xec>)
 80022a2:	4a1d      	ldr	r2, [pc, #116]	; (8002318 <SystemInit+0xf4>)
 80022a4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80022a6:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <SystemInit+0xec>)
 80022a8:	4a1c      	ldr	r2, [pc, #112]	; (800231c <SystemInit+0xf8>)
 80022aa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <SystemInit+0xec>)
 80022ae:	4a1c      	ldr	r2, [pc, #112]	; (8002320 <SystemInit+0xfc>)
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <SystemInit+0xec>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <SystemInit+0xec>)
 80022ba:	4a19      	ldr	r2, [pc, #100]	; (8002320 <SystemInit+0xfc>)
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022be:	4b14      	ldr	r3, [pc, #80]	; (8002310 <SystemInit+0xec>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <SystemInit+0xec>)
 80022c6:	4a16      	ldr	r2, [pc, #88]	; (8002320 <SystemInit+0xfc>)
 80022c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <SystemInit+0xec>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <SystemInit+0xec>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a0e      	ldr	r2, [pc, #56]	; (8002310 <SystemInit+0xec>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022da:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <SystemInit+0xec>)
 80022de:	2200      	movs	r2, #0
 80022e0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022e2:	4b10      	ldr	r3, [pc, #64]	; (8002324 <SystemInit+0x100>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <SystemInit+0x104>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022ee:	d202      	bcs.n	80022f6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <SystemInit+0x108>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <SystemInit+0x10c>)
 80022f8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022fc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	52002000 	.word	0x52002000
 8002310:	58024400 	.word	0x58024400
 8002314:	eaf6ed7f 	.word	0xeaf6ed7f
 8002318:	02020200 	.word	0x02020200
 800231c:	01ff0000 	.word	0x01ff0000
 8002320:	01010280 	.word	0x01010280
 8002324:	5c001000 	.word	0x5c001000
 8002328:	ffff0000 	.word	0xffff0000
 800232c:	51008108 	.word	0x51008108
 8002330:	52004000 	.word	0x52004000

08002334 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08c      	sub	sp, #48	; 0x30
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800233a:	f107 030c 	add.w	r3, r7, #12
 800233e:	2224      	movs	r2, #36	; 0x24
 8002340:	2100      	movs	r1, #0
 8002342:	4618      	mov	r0, r3
 8002344:	f00a fef6 	bl	800d134 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002348:	463b      	mov	r3, r7
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002352:	4b23      	ldr	r3, [pc, #140]	; (80023e0 <MX_TIM1_Init+0xac>)
 8002354:	4a23      	ldr	r2, [pc, #140]	; (80023e4 <MX_TIM1_Init+0xb0>)
 8002356:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002358:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <MX_TIM1_Init+0xac>)
 800235a:	2200      	movs	r2, #0
 800235c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235e:	4b20      	ldr	r3, [pc, #128]	; (80023e0 <MX_TIM1_Init+0xac>)
 8002360:	2200      	movs	r2, #0
 8002362:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002364:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <MX_TIM1_Init+0xac>)
 8002366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800236a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236c:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <MX_TIM1_Init+0xac>)
 800236e:	2200      	movs	r2, #0
 8002370:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002372:	4b1b      	ldr	r3, [pc, #108]	; (80023e0 <MX_TIM1_Init+0xac>)
 8002374:	2200      	movs	r2, #0
 8002376:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <MX_TIM1_Init+0xac>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800237e:	2301      	movs	r3, #1
 8002380:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002382:	2300      	movs	r3, #0
 8002384:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002386:	2301      	movs	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002396:	2301      	movs	r3, #1
 8002398:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800239a:	2300      	movs	r3, #0
 800239c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80023a2:	f107 030c 	add.w	r3, r7, #12
 80023a6:	4619      	mov	r1, r3
 80023a8:	480d      	ldr	r0, [pc, #52]	; (80023e0 <MX_TIM1_Init+0xac>)
 80023aa:	f009 fa0b 	bl	800b7c4 <HAL_TIM_Encoder_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80023b4:	f7ff fdc6 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023c4:	463b      	mov	r3, r7
 80023c6:	4619      	mov	r1, r3
 80023c8:	4805      	ldr	r0, [pc, #20]	; (80023e0 <MX_TIM1_Init+0xac>)
 80023ca:	f009 fd2b 	bl	800be24 <HAL_TIMEx_MasterConfigSynchronization>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80023d4:	f7ff fdb6 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	3730      	adds	r7, #48	; 0x30
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	2400064c 	.word	0x2400064c
 80023e4:	40010000 	.word	0x40010000

080023e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80023ee:	f107 030c 	add.w	r3, r7, #12
 80023f2:	2224      	movs	r2, #36	; 0x24
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f00a fe9c 	bl	800d134 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fc:	463b      	mov	r3, r7
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	605a      	str	r2, [r3, #4]
 8002404:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <MX_TIM3_Init+0xa4>)
 8002408:	4a21      	ldr	r2, [pc, #132]	; (8002490 <MX_TIM3_Init+0xa8>)
 800240a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <MX_TIM3_Init+0xa4>)
 800240e:	2200      	movs	r2, #0
 8002410:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <MX_TIM3_Init+0xa4>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002418:	4b1c      	ldr	r3, [pc, #112]	; (800248c <MX_TIM3_Init+0xa4>)
 800241a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800241e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <MX_TIM3_Init+0xa4>)
 8002422:	2200      	movs	r2, #0
 8002424:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <MX_TIM3_Init+0xa4>)
 8002428:	2200      	movs	r2, #0
 800242a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800242c:	2301      	movs	r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002434:	2301      	movs	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002444:	2301      	movs	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002448:	2300      	movs	r3, #0
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	4619      	mov	r1, r3
 8002456:	480d      	ldr	r0, [pc, #52]	; (800248c <MX_TIM3_Init+0xa4>)
 8002458:	f009 f9b4 	bl	800b7c4 <HAL_TIM_Encoder_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002462:	f7ff fd6f 	bl	8001f44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800246e:	463b      	mov	r3, r7
 8002470:	4619      	mov	r1, r3
 8002472:	4806      	ldr	r0, [pc, #24]	; (800248c <MX_TIM3_Init+0xa4>)
 8002474:	f009 fcd6 	bl	800be24 <HAL_TIMEx_MasterConfigSynchronization>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800247e:	f7ff fd61 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002482:	bf00      	nop
 8002484:	3730      	adds	r7, #48	; 0x30
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	24000698 	.word	0x24000698
 8002490:	40000400 	.word	0x40000400

08002494 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b08c      	sub	sp, #48	; 0x30
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 031c 	add.w	r3, r7, #28
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a38      	ldr	r2, [pc, #224]	; (8002594 <HAL_TIM_Encoder_MspInit+0x100>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d12f      	bne.n	8002516 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024b6:	4b38      	ldr	r3, [pc, #224]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 80024b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024bc:	4a36      	ldr	r2, [pc, #216]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80024c6:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 80024c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	61bb      	str	r3, [r7, #24]
 80024d2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d4:	4b30      	ldr	r3, [pc, #192]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 80024d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024da:	4a2f      	ldr	r2, [pc, #188]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024e4:	4b2c      	ldr	r3, [pc, #176]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 80024e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_2_PHASE_A_Pin|ENCODER_2_PHASE_B_Pin;
 80024f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f8:	2302      	movs	r3, #2
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002500:	2300      	movs	r3, #0
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002504:	2301      	movs	r3, #1
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002508:	f107 031c 	add.w	r3, r7, #28
 800250c:	4619      	mov	r1, r3
 800250e:	4823      	ldr	r0, [pc, #140]	; (800259c <HAL_TIM_Encoder_MspInit+0x108>)
 8002510:	f005 f93c 	bl	800778c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002514:	e03a      	b.n	800258c <HAL_TIM_Encoder_MspInit+0xf8>
  else if(tim_encoderHandle->Instance==TIM3)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d135      	bne.n	800258c <HAL_TIM_Encoder_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 8002522:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002526:	4a1c      	ldr	r2, [pc, #112]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 8002528:	f043 0302 	orr.w	r3, r3, #2
 800252c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002530:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 8002532:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800253e:	4b16      	ldr	r3, [pc, #88]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 8002540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002544:	4a14      	ldr	r2, [pc, #80]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_TIM_Encoder_MspInit+0x104>)
 8002550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_1_PHASE_A_Pin|ENCODER_1_PHASE_B_Pin;
 800255c:	23c0      	movs	r3, #192	; 0xc0
 800255e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002560:	2302      	movs	r3, #2
 8002562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002564:	2300      	movs	r3, #0
 8002566:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800256c:	2302      	movs	r3, #2
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002570:	f107 031c 	add.w	r3, r7, #28
 8002574:	4619      	mov	r1, r3
 8002576:	480b      	ldr	r0, [pc, #44]	; (80025a4 <HAL_TIM_Encoder_MspInit+0x110>)
 8002578:	f005 f908 	bl	800778c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800257c:	2200      	movs	r2, #0
 800257e:	2100      	movs	r1, #0
 8002580:	201d      	movs	r0, #29
 8002582:	f002 f85e 	bl	8004642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002586:	201d      	movs	r0, #29
 8002588:	f002 f875 	bl	8004676 <HAL_NVIC_EnableIRQ>
}
 800258c:	bf00      	nop
 800258e:	3730      	adds	r7, #48	; 0x30
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40010000 	.word	0x40010000
 8002598:	58024400 	.word	0x58024400
 800259c:	58020000 	.word	0x58020000
 80025a0:	40000400 	.word	0x40000400
 80025a4:	58020800 	.word	0x58020800

080025a8 <HAL_TIM_PeriodElapsedCallback>:
bool _500msFlag		 		= false;
bool _1sFlag				= false;
bool _10sFlag				= false;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)   // şuan 50ms 1msye  ayarla
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a58      	ldr	r2, [pc, #352]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	f040 80a9 	bne.w	800270e <HAL_TIM_PeriodElapsedCallback+0x166>
    {
    	functionEncoderRead(&htim3);		// her ms değerinde çağrılır. IDLE durumunda çağrılmayabilir #huzeyfe
 80025bc:	4857      	ldr	r0, [pc, #348]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x174>)
 80025be:	f7fe fbeb 	bl	8000d98 <functionEncoderRead>

    	_configurableCounter++;
 80025c2:	4b57      	ldr	r3, [pc, #348]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	3301      	adds	r3, #1
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b55      	ldr	r3, [pc, #340]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80025cc:	701a      	strb	r2, [r3, #0]
    	if(_configurableCounter>configurableTime)
 80025ce:	4b54      	ldr	r3, [pc, #336]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d905      	bls.n	80025e6 <HAL_TIM_PeriodElapsedCallback+0x3e>
    	{
    		_configurableFlagScanStart = true;
 80025da:	4b53      	ldr	r3, [pc, #332]	; (8002728 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80025dc:	2201      	movs	r2, #1
 80025de:	701a      	strb	r2, [r3, #0]
    		_configurableCounter = 0;
 80025e0:	4b4f      	ldr	r3, [pc, #316]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	701a      	strb	r2, [r3, #0]
    	}

    	_1msCounter++;
 80025e6:	4b51      	ldr	r3, [pc, #324]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b4f      	ldr	r3, [pc, #316]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80025f0:	701a      	strb	r2, [r3, #0]
    	if(_1msCounter>0)
 80025f2:	4b4e      	ldr	r3, [pc, #312]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_TIM_PeriodElapsedCallback+0x5e>
    	{
    		_1msFlagScanStart = true;
 80025fa:	4b4d      	ldr	r3, [pc, #308]	; (8002730 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80025fc:	2201      	movs	r2, #1
 80025fe:	701a      	strb	r2, [r3, #0]
    		_1msCounter = 0;
 8002600:	4b4a      	ldr	r3, [pc, #296]	; (800272c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002602:	2200      	movs	r2, #0
 8002604:	701a      	strb	r2, [r3, #0]
    	}


    	_10msCounter++;
 8002606:	4b4b      	ldr	r3, [pc, #300]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4b49      	ldr	r3, [pc, #292]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002610:	701a      	strb	r2, [r3, #0]
    	if(_10msCounter>9)
 8002612:	4b48      	ldr	r3, [pc, #288]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b09      	cmp	r3, #9
 8002618:	d905      	bls.n	8002626 <HAL_TIM_PeriodElapsedCallback+0x7e>
    	{
    		_10msFlagScanStart = true;
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
    		_10msCounter = 0;
 8002620:	4b44      	ldr	r3, [pc, #272]	; (8002734 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
    	}

    	_25msCounter++;
 8002626:	4b45      	ldr	r3, [pc, #276]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	3301      	adds	r3, #1
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4b43      	ldr	r3, [pc, #268]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002630:	701a      	strb	r2, [r3, #0]
    	if(_25msCounter>24)
 8002632:	4b42      	ldr	r3, [pc, #264]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b18      	cmp	r3, #24
 8002638:	d905      	bls.n	8002646 <HAL_TIM_PeriodElapsedCallback+0x9e>
    	{
    		_25msFlagScanStart = true;
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800263c:	2201      	movs	r2, #1
 800263e:	701a      	strb	r2, [r3, #0]
    		_25msCounter = 0;
 8002640:	4b3e      	ldr	r3, [pc, #248]	; (800273c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
    	}

    	_50msCounter++;
 8002646:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	3301      	adds	r3, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002650:	701a      	strb	r2, [r3, #0]
    	if(_50msCounter>49)
 8002652:	4b3c      	ldr	r3, [pc, #240]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b31      	cmp	r3, #49	; 0x31
 8002658:	d905      	bls.n	8002666 <HAL_TIM_PeriodElapsedCallback+0xbe>
    	{
    		_50msFlagScanStart = true;
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800265c:	2201      	movs	r2, #1
 800265e:	701a      	strb	r2, [r3, #0]
    		_50msCounter = 0;
 8002660:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
    	}

    	_100msCounter++;
 8002666:	4b39      	ldr	r3, [pc, #228]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b37      	ldr	r3, [pc, #220]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002670:	701a      	strb	r2, [r3, #0]
    	if(_100msCounter>99)
 8002672:	4b36      	ldr	r3, [pc, #216]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b63      	cmp	r3, #99	; 0x63
 8002678:	d905      	bls.n	8002686 <HAL_TIM_PeriodElapsedCallback+0xde>
    	{
    		_100msFlagScanStart = true;
 800267a:	4b35      	ldr	r3, [pc, #212]	; (8002750 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
    		_100msCounter = 0;
 8002680:	4b32      	ldr	r3, [pc, #200]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]

    	}

    	_250msCounter++;
 8002686:	4b33      	ldr	r3, [pc, #204]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	3301      	adds	r3, #1
 800268c:	b2da      	uxtb	r2, r3
 800268e:	4b31      	ldr	r3, [pc, #196]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002690:	701a      	strb	r2, [r3, #0]
    	if(_250msCounter>249)
 8002692:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2bf9      	cmp	r3, #249	; 0xf9
 8002698:	d905      	bls.n	80026a6 <HAL_TIM_PeriodElapsedCallback+0xfe>
    	{
    		_250msFlagScanStart = true;
 800269a:	4b2f      	ldr	r3, [pc, #188]	; (8002758 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800269c:	2201      	movs	r2, #1
 800269e:	701a      	strb	r2, [r3, #0]
    		_250msCounter = 0;
 80026a0:	4b2c      	ldr	r3, [pc, #176]	; (8002754 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
    	}

    	_500msCounter++;
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	3301      	adds	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	4b2b      	ldr	r3, [pc, #172]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80026b0:	801a      	strh	r2, [r3, #0]
    	if(_500msCounter>499)
 80026b2:	4b2a      	ldr	r3, [pc, #168]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026ba:	d305      	bcc.n	80026c8 <HAL_TIM_PeriodElapsedCallback+0x120>
    	{
    		_500msFlagScanStart = true;
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
    		_500msCounter = 0;
 80026c2:	4b26      	ldr	r3, [pc, #152]	; (800275c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	801a      	strh	r2, [r3, #0]
    	}

    	_1sCounter++;
 80026c8:	4b26      	ldr	r3, [pc, #152]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80026ca:	881b      	ldrh	r3, [r3, #0]
 80026cc:	3301      	adds	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80026d2:	801a      	strh	r2, [r3, #0]
    	if(_1sCounter>999)
 80026d4:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80026d6:	881b      	ldrh	r3, [r3, #0]
 80026d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026dc:	d305      	bcc.n	80026ea <HAL_TIM_PeriodElapsedCallback+0x142>
    	{
    		_1sFlagScanStart = true;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80026e0:	2201      	movs	r2, #1
 80026e2:	701a      	strb	r2, [r3, #0]
    		_1sCounter = 0;
 80026e4:	4b1f      	ldr	r3, [pc, #124]	; (8002764 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	801a      	strh	r2, [r3, #0]
    	}

    	_10sCounter++;
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	b29a      	uxth	r2, r3
 80026f2:	4b1e      	ldr	r3, [pc, #120]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80026f4:	801a      	strh	r2, [r3, #0]
    	if(_10sCounter>9999)
 80026f6:	4b1d      	ldr	r3, [pc, #116]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	f242 720f 	movw	r2, #9999	; 0x270f
 80026fe:	4293      	cmp	r3, r2
 8002700:	d905      	bls.n	800270e <HAL_TIM_PeriodElapsedCallback+0x166>
    	{
    		_10sFlagScanStart = true;
 8002702:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
    		_10sCounter = 0;
 8002708:	4b18      	ldr	r3, [pc, #96]	; (800276c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800270a:	2200      	movs	r2, #0
 800270c:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40000400 	.word	0x40000400
 800271c:	24000698 	.word	0x24000698
 8002720:	240006e4 	.word	0x240006e4
 8002724:	24000008 	.word	0x24000008
 8002728:	240006f2 	.word	0x240006f2
 800272c:	240006e5 	.word	0x240006e5
 8002730:	240006f3 	.word	0x240006f3
 8002734:	240006e6 	.word	0x240006e6
 8002738:	240006f4 	.word	0x240006f4
 800273c:	240006e7 	.word	0x240006e7
 8002740:	240006f5 	.word	0x240006f5
 8002744:	240006e8 	.word	0x240006e8
 8002748:	240006f6 	.word	0x240006f6
 800274c:	240006e9 	.word	0x240006e9
 8002750:	240006f7 	.word	0x240006f7
 8002754:	240006ea 	.word	0x240006ea
 8002758:	240006f8 	.word	0x240006f8
 800275c:	240006ec 	.word	0x240006ec
 8002760:	240006f9 	.word	0x240006f9
 8002764:	240006ee 	.word	0x240006ee
 8002768:	240006fa 	.word	0x240006fa
 800276c:	240006f0 	.word	0x240006f0
 8002770:	240006fb 	.word	0x240006fb

08002774 <startTimeScanFlags>:

void startTimeScanFlags(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
	if(_configurableFlagScanStart)
 8002778:	4b34      	ldr	r3, [pc, #208]	; (800284c <startTimeScanFlags+0xd8>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d005      	beq.n	800278c <startTimeScanFlags+0x18>
	{
		_configurableFlag = true;
 8002780:	4b33      	ldr	r3, [pc, #204]	; (8002850 <startTimeScanFlags+0xdc>)
 8002782:	2201      	movs	r2, #1
 8002784:	701a      	strb	r2, [r3, #0]
		_configurableFlagScanStart = false;
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <startTimeScanFlags+0xd8>)
 8002788:	2200      	movs	r2, #0
 800278a:	701a      	strb	r2, [r3, #0]
	}
	if(_1msFlagScanStart)
 800278c:	4b31      	ldr	r3, [pc, #196]	; (8002854 <startTimeScanFlags+0xe0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <startTimeScanFlags+0x2c>
	{
		_1msFlag = true;
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <startTimeScanFlags+0xe4>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
		_1msFlagScanStart = false;
 800279a:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <startTimeScanFlags+0xe0>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]
	}
	if(_10msFlagScanStart)
 80027a0:	4b2e      	ldr	r3, [pc, #184]	; (800285c <startTimeScanFlags+0xe8>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <startTimeScanFlags+0x40>
	{
		_10msFlag = true;
 80027a8:	4b2d      	ldr	r3, [pc, #180]	; (8002860 <startTimeScanFlags+0xec>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
		_10msFlagScanStart = false;
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <startTimeScanFlags+0xe8>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
	}
	if(_25msFlagScanStart)
 80027b4:	4b2b      	ldr	r3, [pc, #172]	; (8002864 <startTimeScanFlags+0xf0>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <startTimeScanFlags+0x54>
	{
		_25msFlag = true;
 80027bc:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <startTimeScanFlags+0xf4>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
		_25msFlagScanStart = false;
 80027c2:	4b28      	ldr	r3, [pc, #160]	; (8002864 <startTimeScanFlags+0xf0>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	701a      	strb	r2, [r3, #0]
	}
	if(_50msFlagScanStart)
 80027c8:	4b28      	ldr	r3, [pc, #160]	; (800286c <startTimeScanFlags+0xf8>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <startTimeScanFlags+0x68>
	{
		_50msFlag = true;
 80027d0:	4b27      	ldr	r3, [pc, #156]	; (8002870 <startTimeScanFlags+0xfc>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]
		_50msFlagScanStart = false;
 80027d6:	4b25      	ldr	r3, [pc, #148]	; (800286c <startTimeScanFlags+0xf8>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
	}
	if(_100msFlagScanStart)
 80027dc:	4b25      	ldr	r3, [pc, #148]	; (8002874 <startTimeScanFlags+0x100>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <startTimeScanFlags+0x7c>
	{
		_100msFlag = true;
 80027e4:	4b24      	ldr	r3, [pc, #144]	; (8002878 <startTimeScanFlags+0x104>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
		_100msFlagScanStart = false;
 80027ea:	4b22      	ldr	r3, [pc, #136]	; (8002874 <startTimeScanFlags+0x100>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	701a      	strb	r2, [r3, #0]
	}
	if(_250msFlagScanStart)
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <startTimeScanFlags+0x108>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <startTimeScanFlags+0x90>
	{
		_250msFlag = true;
 80027f8:	4b21      	ldr	r3, [pc, #132]	; (8002880 <startTimeScanFlags+0x10c>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
		_250msFlagScanStart = false;
 80027fe:	4b1f      	ldr	r3, [pc, #124]	; (800287c <startTimeScanFlags+0x108>)
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
	}
	if(_500msFlagScanStart)
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <startTimeScanFlags+0x110>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d005      	beq.n	8002818 <startTimeScanFlags+0xa4>
	{
		_500msFlag = true;
 800280c:	4b1e      	ldr	r3, [pc, #120]	; (8002888 <startTimeScanFlags+0x114>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
		_500msFlagScanStart = false;
 8002812:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <startTimeScanFlags+0x110>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
	}
	if(_1sFlagScanStart)
 8002818:	4b1c      	ldr	r3, [pc, #112]	; (800288c <startTimeScanFlags+0x118>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <startTimeScanFlags+0xb8>
	{
		_1sFlag = true;
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <startTimeScanFlags+0x11c>)
 8002822:	2201      	movs	r2, #1
 8002824:	701a      	strb	r2, [r3, #0]
		_1sFlagScanStart = false;
 8002826:	4b19      	ldr	r3, [pc, #100]	; (800288c <startTimeScanFlags+0x118>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
	}
	if(_10sFlagScanStart)
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <startTimeScanFlags+0x120>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <startTimeScanFlags+0xcc>
	{
		_10sFlag = true;
 8002834:	4b18      	ldr	r3, [pc, #96]	; (8002898 <startTimeScanFlags+0x124>)
 8002836:	2201      	movs	r2, #1
 8002838:	701a      	strb	r2, [r3, #0]
		_10sFlagScanStart = false;
 800283a:	4b16      	ldr	r3, [pc, #88]	; (8002894 <startTimeScanFlags+0x120>)
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
	}
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	240006f2 	.word	0x240006f2
 8002850:	240006fc 	.word	0x240006fc
 8002854:	240006f3 	.word	0x240006f3
 8002858:	240006fd 	.word	0x240006fd
 800285c:	240006f4 	.word	0x240006f4
 8002860:	240006fe 	.word	0x240006fe
 8002864:	240006f5 	.word	0x240006f5
 8002868:	240006ff 	.word	0x240006ff
 800286c:	240006f6 	.word	0x240006f6
 8002870:	24000700 	.word	0x24000700
 8002874:	240006f7 	.word	0x240006f7
 8002878:	24000701 	.word	0x24000701
 800287c:	240006f8 	.word	0x240006f8
 8002880:	24000702 	.word	0x24000702
 8002884:	240006f9 	.word	0x240006f9
 8002888:	24000703 	.word	0x24000703
 800288c:	240006fa 	.word	0x240006fa
 8002890:	24000704 	.word	0x24000704
 8002894:	240006fb 	.word	0x240006fb
 8002898:	24000705 	.word	0x24000705

0800289c <clearTimeScanFlags>:

void clearTimeScanFlags(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
	_configurableFlag 	= false;
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <clearTimeScanFlags+0x4c>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	701a      	strb	r2, [r3, #0]
	_1msFlag 	= false;
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <clearTimeScanFlags+0x50>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
	_10msFlag 	= false;
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <clearTimeScanFlags+0x54>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
	_25msFlag 	= false;
 80028b2:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <clearTimeScanFlags+0x58>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	701a      	strb	r2, [r3, #0]
	_50msFlag 	= false;
 80028b8:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <clearTimeScanFlags+0x5c>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]
	_100msFlag 	= false;
 80028be:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <clearTimeScanFlags+0x60>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
	_250msFlag 	= false;
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <clearTimeScanFlags+0x64>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	701a      	strb	r2, [r3, #0]
	_500msFlag 	= false;
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <clearTimeScanFlags+0x68>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
	_1sFlag 	= false;
 80028d0:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <clearTimeScanFlags+0x6c>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	701a      	strb	r2, [r3, #0]
	_10sFlag 	= false;
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <clearTimeScanFlags+0x70>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	240006fc 	.word	0x240006fc
 80028ec:	240006fd 	.word	0x240006fd
 80028f0:	240006fe 	.word	0x240006fe
 80028f4:	240006ff 	.word	0x240006ff
 80028f8:	24000700 	.word	0x24000700
 80028fc:	24000701 	.word	0x24000701
 8002900:	24000702 	.word	0x24000702
 8002904:	24000703 	.word	0x24000703
 8002908:	24000704 	.word	0x24000704
 800290c:	24000705 	.word	0x24000705

08002910 <MX_UART4_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <MX_UART4_Init+0x90>)
 8002916:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <MX_UART4_Init+0x94>)
 8002918:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800291a:	4b21      	ldr	r3, [pc, #132]	; (80029a0 <MX_UART4_Init+0x90>)
 800291c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002920:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002922:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <MX_UART4_Init+0x90>)
 8002924:	2200      	movs	r2, #0
 8002926:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <MX_UART4_Init+0x90>)
 800292a:	2200      	movs	r2, #0
 800292c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800292e:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <MX_UART4_Init+0x90>)
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002934:	4b1a      	ldr	r3, [pc, #104]	; (80029a0 <MX_UART4_Init+0x90>)
 8002936:	220c      	movs	r2, #12
 8002938:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800293a:	4b19      	ldr	r3, [pc, #100]	; (80029a0 <MX_UART4_Init+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <MX_UART4_Init+0x90>)
 8002942:	2200      	movs	r2, #0
 8002944:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <MX_UART4_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800294c:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <MX_UART4_Init+0x90>)
 800294e:	2200      	movs	r2, #0
 8002950:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002952:	4b13      	ldr	r3, [pc, #76]	; (80029a0 <MX_UART4_Init+0x90>)
 8002954:	2200      	movs	r2, #0
 8002956:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002958:	4811      	ldr	r0, [pc, #68]	; (80029a0 <MX_UART4_Init+0x90>)
 800295a:	f009 fb0f 	bl	800bf7c <HAL_UART_Init>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002964:	f7ff faee 	bl	8001f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002968:	2100      	movs	r1, #0
 800296a:	480d      	ldr	r0, [pc, #52]	; (80029a0 <MX_UART4_Init+0x90>)
 800296c:	f00a fb17 	bl	800cf9e <HAL_UARTEx_SetTxFifoThreshold>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002976:	f7ff fae5 	bl	8001f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800297a:	2100      	movs	r1, #0
 800297c:	4808      	ldr	r0, [pc, #32]	; (80029a0 <MX_UART4_Init+0x90>)
 800297e:	f00a fb4c 	bl	800d01a <HAL_UARTEx_SetRxFifoThreshold>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002988:	f7ff fadc 	bl	8001f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800298c:	4804      	ldr	r0, [pc, #16]	; (80029a0 <MX_UART4_Init+0x90>)
 800298e:	f00a facd 	bl	800cf2c <HAL_UARTEx_DisableFifoMode>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002998:	f7ff fad4 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	24000708 	.word	0x24000708
 80029a4:	40004c00 	.word	0x40004c00

080029a8 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80029ac:	4b22      	ldr	r3, [pc, #136]	; (8002a38 <MX_UART7_Init+0x90>)
 80029ae:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <MX_UART7_Init+0x94>)
 80029b0:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80029b2:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <MX_UART7_Init+0x90>)
 80029b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029b8:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <MX_UART7_Init+0x90>)
 80029bc:	2200      	movs	r2, #0
 80029be:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80029c0:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <MX_UART7_Init+0x90>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <MX_UART7_Init+0x90>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80029cc:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <MX_UART7_Init+0x90>)
 80029ce:	220c      	movs	r2, #12
 80029d0:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <MX_UART7_Init+0x90>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80029d8:	4b17      	ldr	r3, [pc, #92]	; (8002a38 <MX_UART7_Init+0x90>)
 80029da:	2200      	movs	r2, #0
 80029dc:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <MX_UART7_Init+0x90>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <MX_UART7_Init+0x90>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <MX_UART7_Init+0x90>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80029f0:	4811      	ldr	r0, [pc, #68]	; (8002a38 <MX_UART7_Init+0x90>)
 80029f2:	f009 fac3 	bl	800bf7c <HAL_UART_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d001      	beq.n	8002a00 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 80029fc:	f7ff faa2 	bl	8001f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a00:	2100      	movs	r1, #0
 8002a02:	480d      	ldr	r0, [pc, #52]	; (8002a38 <MX_UART7_Init+0x90>)
 8002a04:	f00a facb 	bl	800cf9e <HAL_UARTEx_SetTxFifoThreshold>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002a0e:	f7ff fa99 	bl	8001f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a12:	2100      	movs	r1, #0
 8002a14:	4808      	ldr	r0, [pc, #32]	; (8002a38 <MX_UART7_Init+0x90>)
 8002a16:	f00a fb00 	bl	800d01a <HAL_UARTEx_SetRxFifoThreshold>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002a20:	f7ff fa90 	bl	8001f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002a24:	4804      	ldr	r0, [pc, #16]	; (8002a38 <MX_UART7_Init+0x90>)
 8002a26:	f00a fa81 	bl	800cf2c <HAL_UARTEx_DisableFifoMode>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002a30:	f7ff fa88 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	2400079c 	.word	0x2400079c
 8002a3c:	40007800 	.word	0x40007800

08002a40 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a46:	4a23      	ldr	r2, [pc, #140]	; (8002ad4 <MX_UART8_Init+0x94>)
 8002a48:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002a4a:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a50:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002a52:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002a58:	4b1d      	ldr	r3, [pc, #116]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002a64:	4b1a      	ldr	r3, [pc, #104]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a66:	220c      	movs	r2, #12
 8002a68:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a6a:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a70:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a76:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a7c:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a82:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002a88:	4811      	ldr	r0, [pc, #68]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a8a:	f009 fa77 	bl	800bf7c <HAL_UART_Init>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002a94:	f7ff fa56 	bl	8001f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a98:	2100      	movs	r1, #0
 8002a9a:	480d      	ldr	r0, [pc, #52]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002a9c:	f00a fa7f 	bl	800cf9e <HAL_UARTEx_SetTxFifoThreshold>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d001      	beq.n	8002aaa <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002aa6:	f7ff fa4d 	bl	8001f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4808      	ldr	r0, [pc, #32]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002aae:	f00a fab4 	bl	800d01a <HAL_UARTEx_SetRxFifoThreshold>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002ab8:	f7ff fa44 	bl	8001f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002abc:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <MX_UART8_Init+0x90>)
 8002abe:	f00a fa35 	bl	800cf2c <HAL_UARTEx_DisableFifoMode>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002ac8:	f7ff fa3c 	bl	8001f44 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002acc:	bf00      	nop
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	24000830 	.word	0x24000830
 8002ad4:	40007c00 	.word	0x40007c00

08002ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b0be      	sub	sp, #248	; 0xf8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af0:	f107 0320 	add.w	r3, r7, #32
 8002af4:	22c0      	movs	r2, #192	; 0xc0
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f00a fb1b 	bl	800d134 <memset>
  if(uartHandle->Instance==UART4)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a73      	ldr	r2, [pc, #460]	; (8002cd0 <HAL_UART_MspInit+0x1f8>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d147      	bne.n	8002b98 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002b08:	f04f 0202 	mov.w	r2, #2
 8002b0c:	f04f 0300 	mov.w	r3, #0
 8002b10:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b14:	2300      	movs	r3, #0
 8002b16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b1a:	f107 0320 	add.w	r3, r7, #32
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f006 f952 	bl	8008dc8 <HAL_RCCEx_PeriphCLKConfig>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002b2a:	f7ff fa0b 	bl	8001f44 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002b2e:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002b30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b34:	4a67      	ldr	r2, [pc, #412]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002b3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b4c:	4b61      	ldr	r3, [pc, #388]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b52:	4a60      	ldr	r2, [pc, #384]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b5c:	4b5d      	ldr	r3, [pc, #372]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b62:	f003 0304 	and.w	r3, r3, #4
 8002b66:	61bb      	str	r3, [r7, #24]
 8002b68:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = RS422_TX_1_Pin|RS422_RX_1_Pin;
 8002b6a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002b84:	2308      	movs	r3, #8
 8002b86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4851      	ldr	r0, [pc, #324]	; (8002cd8 <HAL_UART_MspInit+0x200>)
 8002b92:	f004 fdfb 	bl	800778c <HAL_GPIO_Init>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8002b96:	e097      	b.n	8002cc8 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==UART7)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a4f      	ldr	r2, [pc, #316]	; (8002cdc <HAL_UART_MspInit+0x204>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d147      	bne.n	8002c32 <HAL_UART_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002ba2:	f04f 0202 	mov.w	r2, #2
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb4:	f107 0320 	add.w	r3, r7, #32
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f006 f905 	bl	8008dc8 <HAL_RCCEx_PeriphCLKConfig>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002bc4:	f7ff f9be 	bl	8001f44 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002bc8:	4b42      	ldr	r3, [pc, #264]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002bca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bce:	4a41      	ldr	r2, [pc, #260]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002bd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002bd4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002bd8:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002bda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002bde:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002be6:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bec:	4a39      	ldr	r2, [pc, #228]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002bee:	f043 0310 	orr.w	r3, r3, #16
 8002bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bf6:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfc:	f003 0310 	and.w	r3, r3, #16
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RS422_RX_2_Pin|RS422_TX_2_Pin;
 8002c04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002c08:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002c1e:	2307      	movs	r3, #7
 8002c20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	482d      	ldr	r0, [pc, #180]	; (8002ce0 <HAL_UART_MspInit+0x208>)
 8002c2c:	f004 fdae 	bl	800778c <HAL_GPIO_Init>
}
 8002c30:	e04a      	b.n	8002cc8 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==UART8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2b      	ldr	r2, [pc, #172]	; (8002ce4 <HAL_UART_MspInit+0x20c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d145      	bne.n	8002cc8 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002c3c:	f04f 0202 	mov.w	r2, #2
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c4e:	f107 0320 	add.w	r3, r7, #32
 8002c52:	4618      	mov	r0, r3
 8002c54:	f006 f8b8 	bl	8008dc8 <HAL_RCCEx_PeriphCLKConfig>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_UART_MspInit+0x18a>
      Error_Handler();
 8002c5e:	f7ff f971 	bl	8001f44 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c68:	4a1a      	ldr	r2, [pc, #104]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002c6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c72:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c86:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002c88:	f043 0310 	orr.w	r3, r3, #16
 8002c8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_UART_MspInit+0x1fc>)
 8002c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cbc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	4807      	ldr	r0, [pc, #28]	; (8002ce0 <HAL_UART_MspInit+0x208>)
 8002cc4:	f004 fd62 	bl	800778c <HAL_GPIO_Init>
}
 8002cc8:	bf00      	nop
 8002cca:	37f8      	adds	r7, #248	; 0xf8
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40004c00 	.word	0x40004c00
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	58020800 	.word	0x58020800
 8002cdc:	40007800 	.word	0x40007800
 8002ce0:	58021000 	.word	0x58021000
 8002ce4:	40007c00 	.word	0x40007c00

08002ce8 <Reset_Handler>:
 8002ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d20 <LoopFillZerobss+0xe>
 8002cec:	f7ff fa9a 	bl	8002224 <SystemInit>
 8002cf0:	480c      	ldr	r0, [pc, #48]	; (8002d24 <LoopFillZerobss+0x12>)
 8002cf2:	490d      	ldr	r1, [pc, #52]	; (8002d28 <LoopFillZerobss+0x16>)
 8002cf4:	4a0d      	ldr	r2, [pc, #52]	; (8002d2c <LoopFillZerobss+0x1a>)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e002      	b.n	8002d00 <LoopCopyDataInit>

08002cfa <CopyDataInit>:
 8002cfa:	58d4      	ldr	r4, [r2, r3]
 8002cfc:	50c4      	str	r4, [r0, r3]
 8002cfe:	3304      	adds	r3, #4

08002d00 <LoopCopyDataInit>:
 8002d00:	18c4      	adds	r4, r0, r3
 8002d02:	428c      	cmp	r4, r1
 8002d04:	d3f9      	bcc.n	8002cfa <CopyDataInit>
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <LoopFillZerobss+0x1e>)
 8002d08:	4c0a      	ldr	r4, [pc, #40]	; (8002d34 <LoopFillZerobss+0x22>)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	e001      	b.n	8002d12 <LoopFillZerobss>

08002d0e <FillZerobss>:
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	3204      	adds	r2, #4

08002d12 <LoopFillZerobss>:
 8002d12:	42a2      	cmp	r2, r4
 8002d14:	d3fb      	bcc.n	8002d0e <FillZerobss>
 8002d16:	f00a fa15 	bl	800d144 <__libc_init_array>
 8002d1a:	f7fe fef1 	bl	8001b00 <main>
 8002d1e:	4770      	bx	lr
 8002d20:	24080000 	.word	0x24080000
 8002d24:	24000000 	.word	0x24000000
 8002d28:	24000014 	.word	0x24000014
 8002d2c:	0800d25c 	.word	0x0800d25c
 8002d30:	240000d4 	.word	0x240000d4
 8002d34:	240008c8 	.word	0x240008c8

08002d38 <ADC3_IRQHandler>:
 8002d38:	e7fe      	b.n	8002d38 <ADC3_IRQHandler>
	...

08002d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d42:	2003      	movs	r0, #3
 8002d44:	f001 fc72 	bl	800462c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d48:	f005 fe68 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_Init+0x68>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	4913      	ldr	r1, [pc, #76]	; (8002da8 <HAL_Init+0x6c>)
 8002d5a:	5ccb      	ldrb	r3, [r1, r3]
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	fa22 f303 	lsr.w	r3, r2, r3
 8002d64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d66:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <HAL_Init+0x68>)
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	4a0e      	ldr	r2, [pc, #56]	; (8002da8 <HAL_Init+0x6c>)
 8002d70:	5cd3      	ldrb	r3, [r2, r3]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7c:	4a0b      	ldr	r2, [pc, #44]	; (8002dac <HAL_Init+0x70>)
 8002d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d80:	4a0b      	ldr	r2, [pc, #44]	; (8002db0 <HAL_Init+0x74>)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d86:	200f      	movs	r0, #15
 8002d88:	f000 f814 	bl	8002db4 <HAL_InitTick>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e002      	b.n	8002d9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d96:	f7ff f9d9 	bl	800214c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3708      	adds	r7, #8
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	58024400 	.word	0x58024400
 8002da8:	0800d20c 	.word	0x0800d20c
 8002dac:	24000004 	.word	0x24000004
 8002db0:	24000000 	.word	0x24000000

08002db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002dbc:	4b15      	ldr	r3, [pc, #84]	; (8002e14 <HAL_InitTick+0x60>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e021      	b.n	8002e0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002dc8:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_InitTick+0x64>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <HAL_InitTick+0x60>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 fc57 	bl	8004692 <HAL_SYSTICK_Config>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e00e      	b.n	8002e0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b0f      	cmp	r3, #15
 8002df2:	d80a      	bhi.n	8002e0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df4:	2200      	movs	r2, #0
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dfc:	f001 fc21 	bl	8004642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e00:	4a06      	ldr	r2, [pc, #24]	; (8002e1c <HAL_InitTick+0x68>)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	e000      	b.n	8002e0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3708      	adds	r7, #8
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	24000010 	.word	0x24000010
 8002e18:	24000000 	.word	0x24000000
 8002e1c:	2400000c 	.word	0x2400000c

08002e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_IncTick+0x20>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b06      	ldr	r3, [pc, #24]	; (8002e44 <HAL_IncTick+0x24>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4413      	add	r3, r2
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_IncTick+0x24>)
 8002e32:	6013      	str	r3, [r2, #0]
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	24000010 	.word	0x24000010
 8002e44:	240008c4 	.word	0x240008c4

08002e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e4c:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <HAL_GetTick+0x14>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	240008c4 	.word	0x240008c4

08002e60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_GetREVID+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0c1b      	lsrs	r3, r3, #16
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	5c001000 	.word	0x5c001000

08002e78 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002e80:	4b06      	ldr	r3, [pc, #24]	; (8002e9c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e88:	4904      	ldr	r1, [pc, #16]	; (8002e9c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	604b      	str	r3, [r1, #4]
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	58000400 	.word	0x58000400

08002ea0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	431a      	orrs	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	609a      	str	r2, [r3, #8]
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	609a      	str	r2, [r3, #8]
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3360      	adds	r3, #96	; 0x60
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	430b      	orrs	r3, r1
 8002f36:	431a      	orrs	r2, r3
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	371c      	adds	r7, #28
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 031f 	and.w	r3, r3, #31
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	fa01 f303 	lsl.w	r3, r1, r3
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	611a      	str	r2, [r3, #16]
}
 8002f6e:	bf00      	nop
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b087      	sub	sp, #28
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	3360      	adds	r3, #96	; 0x60
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	431a      	orrs	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	601a      	str	r2, [r3, #0]
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr

08002fb0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b087      	sub	sp, #28
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	3330      	adds	r3, #48	; 0x30
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	4413      	add	r3, r2
 8002ff4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	211f      	movs	r1, #31
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	401a      	ands	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0e9b      	lsrs	r3, r3, #26
 800300e:	f003 011f 	and.w	r1, r3, #31
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f003 031f 	and.w	r3, r3, #31
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	431a      	orrs	r2, r3
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003022:	bf00      	nop
 8003024:	371c      	adds	r7, #28
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	f023 0203 	bic.w	r2, r3, #3
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	60da      	str	r2, [r3, #12]
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	3314      	adds	r3, #20
 8003064:	461a      	mov	r2, r3
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	0e5b      	lsrs	r3, r3, #25
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	4413      	add	r3, r2
 8003072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	0d1b      	lsrs	r3, r3, #20
 800307c:	f003 031f 	and.w	r3, r3, #31
 8003080:	2107      	movs	r1, #7
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	401a      	ands	r2, r3
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	0d1b      	lsrs	r3, r3, #20
 800308e:	f003 031f 	and.w	r3, r3, #31
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	fa01 f303 	lsl.w	r3, r1, r3
 8003098:	431a      	orrs	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800309e:	bf00      	nop
 80030a0:	371c      	adds	r7, #28
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
	...

080030ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030c4:	43db      	mvns	r3, r3
 80030c6:	401a      	ands	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f003 0318 	and.w	r3, r3, #24
 80030ce:	4908      	ldr	r1, [pc, #32]	; (80030f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030d0:	40d9      	lsrs	r1, r3
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	400b      	ands	r3, r1
 80030d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030da:	431a      	orrs	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	000fffff 	.word	0x000fffff

080030f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f003 031f 	and.w	r3, r3, #31
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	4b04      	ldr	r3, [pc, #16]	; (8003130 <LL_ADC_DisableDeepPowerDown+0x20>)
 800311e:	4013      	ands	r3, r2
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6093      	str	r3, [r2, #8]
}
 8003124:	bf00      	nop
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	5fffffc0 	.word	0x5fffffc0

08003134 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003148:	d101      	bne.n	800314e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <LL_ADC_EnableInternalRegulator+0x24>)
 800316a:	4013      	ands	r3, r2
 800316c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	6fffffc0 	.word	0x6fffffc0

08003184 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003198:	d101      	bne.n	800319e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <LL_ADC_Enable+0x24>)
 80031ba:	4013      	ands	r3, r2
 80031bc:	f043 0201 	orr.w	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	7fffffc0 	.word	0x7fffffc0

080031d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d101      	bne.n	80031ec <LL_ADC_IsEnabled+0x18>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <LL_ADC_IsEnabled+0x1a>
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
	...

080031fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	4b05      	ldr	r3, [pc, #20]	; (8003220 <LL_ADC_REG_StartConversion+0x24>)
 800320a:	4013      	ands	r3, r2
 800320c:	f043 0204 	orr.w	r2, r3, #4
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	7fffffc0 	.word	0x7fffffc0

08003224 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b04      	cmp	r3, #4
 8003236:	d101      	bne.n	800323c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	2b08      	cmp	r3, #8
 800325c:	d101      	bne.n	8003262 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b089      	sub	sp, #36	; 0x24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800327c:	2300      	movs	r3, #0
 800327e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e18f      	b.n	80035aa <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003294:	2b00      	cmp	r3, #0
 8003296:	d109      	bne.n	80032ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7fd fadf 	bl	800085c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7ff ff3f 	bl	8003134 <LL_ADC_IsDeepPowerDownEnabled>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d004      	beq.n	80032c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff25 	bl	8003110 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff5a 	bl	8003184 <LL_ADC_IsInternalRegulatorEnabled>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d114      	bne.n	8003300 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff3e 	bl	800315c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032e0:	4b87      	ldr	r3, [pc, #540]	; (8003500 <HAL_ADC_Init+0x290>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	4a87      	ldr	r2, [pc, #540]	; (8003504 <HAL_ADC_Init+0x294>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	3301      	adds	r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032f2:	e002      	b.n	80032fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f9      	bne.n	80032f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff ff3d 	bl	8003184 <LL_ADC_IsInternalRegulatorEnabled>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d10d      	bne.n	800332c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f043 0210 	orr.w	r2, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003320:	f043 0201 	orr.w	r2, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff77 	bl	8003224 <LL_ADC_REG_IsConversionOngoing>
 8003336:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	f040 8129 	bne.w	8003598 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f040 8125 	bne.w	8003598 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003352:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003356:	f043 0202 	orr.w	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff36 	bl	80031d4 <LL_ADC_IsEnabled>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d136      	bne.n	80033dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a65      	ldr	r2, [pc, #404]	; (8003508 <HAL_ADC_Init+0x298>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d004      	beq.n	8003382 <HAL_ADC_Init+0x112>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a63      	ldr	r2, [pc, #396]	; (800350c <HAL_ADC_Init+0x29c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d10e      	bne.n	80033a0 <HAL_ADC_Init+0x130>
 8003382:	4861      	ldr	r0, [pc, #388]	; (8003508 <HAL_ADC_Init+0x298>)
 8003384:	f7ff ff26 	bl	80031d4 <LL_ADC_IsEnabled>
 8003388:	4604      	mov	r4, r0
 800338a:	4860      	ldr	r0, [pc, #384]	; (800350c <HAL_ADC_Init+0x29c>)
 800338c:	f7ff ff22 	bl	80031d4 <LL_ADC_IsEnabled>
 8003390:	4603      	mov	r3, r0
 8003392:	4323      	orrs	r3, r4
 8003394:	2b00      	cmp	r3, #0
 8003396:	bf0c      	ite	eq
 8003398:	2301      	moveq	r3, #1
 800339a:	2300      	movne	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e008      	b.n	80033b2 <HAL_ADC_Init+0x142>
 80033a0:	485b      	ldr	r0, [pc, #364]	; (8003510 <HAL_ADC_Init+0x2a0>)
 80033a2:	f7ff ff17 	bl	80031d4 <LL_ADC_IsEnabled>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d012      	beq.n	80033dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a53      	ldr	r2, [pc, #332]	; (8003508 <HAL_ADC_Init+0x298>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d004      	beq.n	80033ca <HAL_ADC_Init+0x15a>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a51      	ldr	r2, [pc, #324]	; (800350c <HAL_ADC_Init+0x29c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d101      	bne.n	80033ce <HAL_ADC_Init+0x15e>
 80033ca:	4a52      	ldr	r2, [pc, #328]	; (8003514 <HAL_ADC_Init+0x2a4>)
 80033cc:	e000      	b.n	80033d0 <HAL_ADC_Init+0x160>
 80033ce:	4a52      	ldr	r2, [pc, #328]	; (8003518 <HAL_ADC_Init+0x2a8>)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4619      	mov	r1, r3
 80033d6:	4610      	mov	r0, r2
 80033d8:	f7ff fd62 	bl	8002ea0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80033dc:	f7ff fd40 	bl	8002e60 <HAL_GetREVID>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d914      	bls.n	8003414 <HAL_ADC_Init+0x1a4>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d110      	bne.n	8003414 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	7d5b      	ldrb	r3, [r3, #21]
 80033f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80033fc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003402:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7f1b      	ldrb	r3, [r3, #28]
 8003408:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800340a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800340c:	f043 030c 	orr.w	r3, r3, #12
 8003410:	61bb      	str	r3, [r7, #24]
 8003412:	e00d      	b.n	8003430 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	7d5b      	ldrb	r3, [r3, #21]
 8003418:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800341e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003424:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7f1b      	ldrb	r3, [r3, #28]
 800342a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7f1b      	ldrb	r3, [r3, #28]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d106      	bne.n	8003446 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	3b01      	subs	r3, #1
 800343e:	045b      	lsls	r3, r3, #17
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4313      	orrs	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	4b2c      	ldr	r3, [pc, #176]	; (800351c <HAL_ADC_Init+0x2ac>)
 800346a:	4013      	ands	r3, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6812      	ldr	r2, [r2, #0]
 8003470:	69b9      	ldr	r1, [r7, #24]
 8003472:	430b      	orrs	r3, r1
 8003474:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fed2 	bl	8003224 <LL_ADC_REG_IsConversionOngoing>
 8003480:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7ff fedf 	bl	800324a <LL_ADC_INJ_IsConversionOngoing>
 800348c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d15f      	bne.n	8003554 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d15c      	bne.n	8003554 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	7d1b      	ldrb	r3, [r3, #20]
 800349e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	4b1c      	ldr	r3, [pc, #112]	; (8003520 <HAL_ADC_Init+0x2b0>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	69b9      	ldr	r1, [r7, #24]
 80034b8:	430b      	orrs	r3, r1
 80034ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d130      	bne.n	8003528 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	4b14      	ldr	r3, [pc, #80]	; (8003524 <HAL_ADC_Init+0x2b4>)
 80034d4:	4013      	ands	r3, r2
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034da:	3a01      	subs	r2, #1
 80034dc:	0411      	lsls	r1, r2, #16
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034e2:	4311      	orrs	r1, r2
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80034e8:	4311      	orrs	r1, r2
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034ee:	430a      	orrs	r2, r1
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	611a      	str	r2, [r3, #16]
 80034fc:	e01c      	b.n	8003538 <HAL_ADC_Init+0x2c8>
 80034fe:	bf00      	nop
 8003500:	24000000 	.word	0x24000000
 8003504:	053e2d63 	.word	0x053e2d63
 8003508:	40022000 	.word	0x40022000
 800350c:	40022100 	.word	0x40022100
 8003510:	58026000 	.word	0x58026000
 8003514:	40022300 	.word	0x40022300
 8003518:	58026300 	.word	0x58026300
 800351c:	fff0c003 	.word	0xfff0c003
 8003520:	ffffbffc 	.word	0xffffbffc
 8003524:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fd8c 	bl	800406c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d10c      	bne.n	8003576 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f023 010f 	bic.w	r1, r3, #15
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	1e5a      	subs	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	631a      	str	r2, [r3, #48]	; 0x30
 8003574:	e007      	b.n	8003586 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 020f 	bic.w	r2, r2, #15
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	f023 0303 	bic.w	r3, r3, #3
 800358e:	f043 0201 	orr.w	r2, r3, #1
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
 8003596:	e007      	b.n	80035a8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800359c:	f043 0210 	orr.w	r2, r3, #16
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3724      	adds	r7, #36	; 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd90      	pop	{r4, r7, pc}
 80035b2:	bf00      	nop

080035b4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a55      	ldr	r2, [pc, #340]	; (800371c <HAL_ADC_Start_DMA+0x168>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d004      	beq.n	80035d4 <HAL_ADC_Start_DMA+0x20>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a54      	ldr	r2, [pc, #336]	; (8003720 <HAL_ADC_Start_DMA+0x16c>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_ADC_Start_DMA+0x24>
 80035d4:	4b53      	ldr	r3, [pc, #332]	; (8003724 <HAL_ADC_Start_DMA+0x170>)
 80035d6:	e000      	b.n	80035da <HAL_ADC_Start_DMA+0x26>
 80035d8:	4b53      	ldr	r3, [pc, #332]	; (8003728 <HAL_ADC_Start_DMA+0x174>)
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff fd8a 	bl	80030f4 <LL_ADC_GetMultimode>
 80035e0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff fe1c 	bl	8003224 <LL_ADC_REG_IsConversionOngoing>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 808c 	bne.w	800370c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d101      	bne.n	8003602 <HAL_ADC_Start_DMA+0x4e>
 80035fe:	2302      	movs	r3, #2
 8003600:	e087      	b.n	8003712 <HAL_ADC_Start_DMA+0x15e>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	2b05      	cmp	r3, #5
 8003614:	d002      	beq.n	800361c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	2b09      	cmp	r3, #9
 800361a:	d170      	bne.n	80036fe <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fc07 	bl	8003e30 <ADC_Enable>
 8003622:	4603      	mov	r3, r0
 8003624:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d163      	bne.n	80036f4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003630:	4b3e      	ldr	r3, [pc, #248]	; (800372c <HAL_ADC_Start_DMA+0x178>)
 8003632:	4013      	ands	r3, r2
 8003634:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a37      	ldr	r2, [pc, #220]	; (8003720 <HAL_ADC_Start_DMA+0x16c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d002      	beq.n	800364c <HAL_ADC_Start_DMA+0x98>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	e000      	b.n	800364e <HAL_ADC_Start_DMA+0x9a>
 800364c:	4b33      	ldr	r3, [pc, #204]	; (800371c <HAL_ADC_Start_DMA+0x168>)
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	4293      	cmp	r3, r2
 8003654:	d002      	beq.n	800365c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d105      	bne.n	8003668 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800366c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d006      	beq.n	8003682 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f023 0206 	bic.w	r2, r3, #6
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	659a      	str	r2, [r3, #88]	; 0x58
 8003680:	e002      	b.n	8003688 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368c:	4a28      	ldr	r2, [pc, #160]	; (8003730 <HAL_ADC_Start_DMA+0x17c>)
 800368e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003694:	4a27      	ldr	r2, [pc, #156]	; (8003734 <HAL_ADC_Start_DMA+0x180>)
 8003696:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369c:	4a26      	ldr	r2, [pc, #152]	; (8003738 <HAL_ADC_Start_DMA+0x184>)
 800369e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	221c      	movs	r2, #28
 80036a6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0210 	orr.w	r2, r2, #16
 80036be:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f7ff fcaf 	bl	800302e <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3340      	adds	r3, #64	; 0x40
 80036da:	4619      	mov	r1, r3
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f001 fb40 	bl	8004d64 <HAL_DMA_Start_IT>
 80036e4:	4603      	mov	r3, r0
 80036e6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fd85 	bl	80031fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80036f2:	e00d      	b.n	8003710 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80036fc:	e008      	b.n	8003710 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800370a:	e001      	b.n	8003710 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800370c:	2302      	movs	r3, #2
 800370e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003710:	7dfb      	ldrb	r3, [r7, #23]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	40022000 	.word	0x40022000
 8003720:	40022100 	.word	0x40022100
 8003724:	40022300 	.word	0x40022300
 8003728:	58026300 	.word	0x58026300
 800372c:	fffff0fe 	.word	0xfffff0fe
 8003730:	08003f45 	.word	0x08003f45
 8003734:	0800401d 	.word	0x0800401d
 8003738:	08004039 	.word	0x08004039

0800373c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003758:	bf00      	nop
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003778:	b590      	push	{r4, r7, lr}
 800377a:	b0a1      	sub	sp, #132	; 0x84
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a65      	ldr	r2, [pc, #404]	; (8003928 <HAL_ADC_ConfigChannel+0x1b0>)
 8003792:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x2a>
 800379e:	2302      	movs	r3, #2
 80037a0:	e32e      	b.n	8003e00 <HAL_ADC_ConfigChannel+0x688>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7ff fd38 	bl	8003224 <LL_ADC_REG_IsConversionOngoing>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f040 8313 	bne.w	8003de2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	db2c      	blt.n	800381e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d108      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x6a>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	0e9b      	lsrs	r3, r3, #26
 80037d6:	f003 031f 	and.w	r3, r3, #31
 80037da:	2201      	movs	r2, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	e016      	b.n	8003810 <HAL_ADC_ConfigChannel+0x98>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037ea:	fa93 f3a3 	rbit	r3, r3
 80037ee:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037f2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80037f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d101      	bne.n	80037fe <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80037fa:	2320      	movs	r3, #32
 80037fc:	e003      	b.n	8003806 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80037fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003800:	fab3 f383 	clz	r3, r3
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f003 031f 	and.w	r3, r3, #31
 800380a:	2201      	movs	r2, #1
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	69d1      	ldr	r1, [r2, #28]
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	430b      	orrs	r3, r1
 800381c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	f7ff fbd3 	bl	8002fd6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff fcf5 	bl	8003224 <LL_ADC_REG_IsConversionOngoing>
 800383a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fd02 	bl	800324a <LL_ADC_INJ_IsConversionOngoing>
 8003846:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800384a:	2b00      	cmp	r3, #0
 800384c:	f040 80b8 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 80b4 	bne.w	80039c0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6818      	ldr	r0, [r3, #0]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	6819      	ldr	r1, [r3, #0]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	461a      	mov	r2, r3
 8003866:	f7ff fbf5 	bl	8003054 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800386a:	4b30      	ldr	r3, [pc, #192]	; (800392c <HAL_ADC_ConfigChannel+0x1b4>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003872:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003876:	d10b      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x118>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	695a      	ldr	r2, [r3, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	089b      	lsrs	r3, r3, #2
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	e01d      	b.n	80038cc <HAL_ADC_ConfigChannel+0x154>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f003 0310 	and.w	r3, r3, #16
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10b      	bne.n	80038b6 <HAL_ADC_ConfigChannel+0x13e>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	089b      	lsrs	r3, r3, #2
 80038aa:	f003 0307 	and.w	r3, r3, #7
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	fa02 f303 	lsl.w	r3, r2, r3
 80038b4:	e00a      	b.n	80038cc <HAL_ADC_ConfigChannel+0x154>
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d02c      	beq.n	8003930 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	6919      	ldr	r1, [r3, #16]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038e4:	f7ff fb10 	bl	8002f08 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	6919      	ldr	r1, [r3, #16]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	7e5b      	ldrb	r3, [r3, #25]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d102      	bne.n	80038fe <HAL_ADC_ConfigChannel+0x186>
 80038f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80038fc:	e000      	b.n	8003900 <HAL_ADC_ConfigChannel+0x188>
 80038fe:	2300      	movs	r3, #0
 8003900:	461a      	mov	r2, r3
 8003902:	f7ff fb3a 	bl	8002f7a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6818      	ldr	r0, [r3, #0]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	6919      	ldr	r1, [r3, #16]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	7e1b      	ldrb	r3, [r3, #24]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d102      	bne.n	800391c <HAL_ADC_ConfigChannel+0x1a4>
 8003916:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800391a:	e000      	b.n	800391e <HAL_ADC_ConfigChannel+0x1a6>
 800391c:	2300      	movs	r3, #0
 800391e:	461a      	mov	r2, r3
 8003920:	f7ff fb12 	bl	8002f48 <LL_ADC_SetDataRightShift>
 8003924:	e04c      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x248>
 8003926:	bf00      	nop
 8003928:	47ff0000 	.word	0x47ff0000
 800392c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003936:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	069b      	lsls	r3, r3, #26
 8003940:	429a      	cmp	r2, r3
 8003942:	d107      	bne.n	8003954 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003952:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800395a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	069b      	lsls	r3, r3, #26
 8003964:	429a      	cmp	r2, r3
 8003966:	d107      	bne.n	8003978 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003976:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800397e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	069b      	lsls	r3, r3, #26
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800399a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	069b      	lsls	r3, r3, #26
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d107      	bne.n	80039c0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80039be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff fc05 	bl	80031d4 <LL_ADC_IsEnabled>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f040 8211 	bne.w	8003df4 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6818      	ldr	r0, [r3, #0]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6819      	ldr	r1, [r3, #0]
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	461a      	mov	r2, r3
 80039e0:	f7ff fb64 	bl	80030ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	4aa1      	ldr	r2, [pc, #644]	; (8003c70 <HAL_ADC_ConfigChannel+0x4f8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	f040 812e 	bne.w	8003c4c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10b      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x2a0>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	0e9b      	lsrs	r3, r3, #26
 8003a06:	3301      	adds	r3, #1
 8003a08:	f003 031f 	and.w	r3, r3, #31
 8003a0c:	2b09      	cmp	r3, #9
 8003a0e:	bf94      	ite	ls
 8003a10:	2301      	movls	r3, #1
 8003a12:	2300      	movhi	r3, #0
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	e019      	b.n	8003a4c <HAL_ADC_ConfigChannel+0x2d4>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a20:	fa93 f3a3 	rbit	r3, r3
 8003a24:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003a2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003a30:	2320      	movs	r3, #32
 8003a32:	e003      	b.n	8003a3c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003a34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a36:	fab3 f383 	clz	r3, r3
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	2b09      	cmp	r3, #9
 8003a44:	bf94      	ite	ls
 8003a46:	2301      	movls	r3, #1
 8003a48:	2300      	movhi	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d079      	beq.n	8003b44 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d107      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x2f4>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	0e9b      	lsrs	r3, r3, #26
 8003a62:	3301      	adds	r3, #1
 8003a64:	069b      	lsls	r3, r3, #26
 8003a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a6a:	e015      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x320>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a74:	fa93 f3a3 	rbit	r3, r3
 8003a78:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a7c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003a84:	2320      	movs	r3, #32
 8003a86:	e003      	b.n	8003a90 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003a88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a8a:	fab3 f383 	clz	r3, r3
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	3301      	adds	r3, #1
 8003a92:	069b      	lsls	r3, r3, #26
 8003a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x340>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	0e9b      	lsrs	r3, r3, #26
 8003aaa:	3301      	adds	r3, #1
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab6:	e017      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x370>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ac0:	fa93 f3a3 	rbit	r3, r3
 8003ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003aca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	e003      	b.n	8003adc <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad6:	fab3 f383 	clz	r3, r3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	3301      	adds	r3, #1
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	ea42 0103 	orr.w	r1, r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10a      	bne.n	8003b0e <HAL_ADC_ConfigChannel+0x396>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	0e9b      	lsrs	r3, r3, #26
 8003afe:	3301      	adds	r3, #1
 8003b00:	f003 021f 	and.w	r2, r3, #31
 8003b04:	4613      	mov	r3, r2
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	4413      	add	r3, r2
 8003b0a:	051b      	lsls	r3, r3, #20
 8003b0c:	e018      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x3c8>
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b16:	fa93 f3a3 	rbit	r3, r3
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003b26:	2320      	movs	r3, #32
 8003b28:	e003      	b.n	8003b32 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2c:	fab3 f383 	clz	r3, r3
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	3301      	adds	r3, #1
 8003b34:	f003 021f 	and.w	r2, r3, #31
 8003b38:	4613      	mov	r3, r2
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	4413      	add	r3, r2
 8003b3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b40:	430b      	orrs	r3, r1
 8003b42:	e07e      	b.n	8003c42 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_ADC_ConfigChannel+0x3e8>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	0e9b      	lsrs	r3, r3, #26
 8003b56:	3301      	adds	r3, #1
 8003b58:	069b      	lsls	r3, r3, #26
 8003b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b5e:	e015      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x414>
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b68:	fa93 f3a3 	rbit	r3, r3
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d101      	bne.n	8003b7c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003b78:	2320      	movs	r3, #32
 8003b7a:	e003      	b.n	8003b84 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	fab3 f383 	clz	r3, r3
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	3301      	adds	r3, #1
 8003b86:	069b      	lsls	r3, r3, #26
 8003b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d109      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x434>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	0e9b      	lsrs	r3, r3, #26
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	f003 031f 	and.w	r3, r3, #31
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	e017      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x464>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	fa93 f3a3 	rbit	r3, r3
 8003bb8:	61bb      	str	r3, [r7, #24]
  return result;
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003bc4:	2320      	movs	r3, #32
 8003bc6:	e003      	b.n	8003bd0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003bc8:	6a3b      	ldr	r3, [r7, #32]
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f003 031f 	and.w	r3, r3, #31
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bdc:	ea42 0103 	orr.w	r1, r2, r3
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d10d      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x490>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	0e9b      	lsrs	r3, r3, #26
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f003 021f 	and.w	r2, r3, #31
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3b1e      	subs	r3, #30
 8003c00:	051b      	lsls	r3, r3, #20
 8003c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c06:	e01b      	b.n	8003c40 <HAL_ADC_ConfigChannel+0x4c8>
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	fa93 f3a3 	rbit	r3, r3
 8003c14:	60fb      	str	r3, [r7, #12]
  return result;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003c20:	2320      	movs	r3, #32
 8003c22:	e003      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fab3 f383 	clz	r3, r3
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	f003 021f 	and.w	r2, r3, #31
 8003c32:	4613      	mov	r3, r2
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	4413      	add	r3, r2
 8003c38:	3b1e      	subs	r3, #30
 8003c3a:	051b      	lsls	r3, r3, #20
 8003c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c40:	430b      	orrs	r3, r1
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	6892      	ldr	r2, [r2, #8]
 8003c46:	4619      	mov	r1, r3
 8003c48:	f7ff fa04 	bl	8003054 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f280 80cf 	bge.w	8003df4 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a06      	ldr	r2, [pc, #24]	; (8003c74 <HAL_ADC_ConfigChannel+0x4fc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d004      	beq.n	8003c6a <HAL_ADC_ConfigChannel+0x4f2>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a04      	ldr	r2, [pc, #16]	; (8003c78 <HAL_ADC_ConfigChannel+0x500>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d10a      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x508>
 8003c6a:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <HAL_ADC_ConfigChannel+0x504>)
 8003c6c:	e009      	b.n	8003c82 <HAL_ADC_ConfigChannel+0x50a>
 8003c6e:	bf00      	nop
 8003c70:	47ff0000 	.word	0x47ff0000
 8003c74:	40022000 	.word	0x40022000
 8003c78:	40022100 	.word	0x40022100
 8003c7c:	40022300 	.word	0x40022300
 8003c80:	4b61      	ldr	r3, [pc, #388]	; (8003e08 <HAL_ADC_ConfigChannel+0x690>)
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff f932 	bl	8002eec <LL_ADC_GetCommonPathInternalCh>
 8003c88:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a5f      	ldr	r2, [pc, #380]	; (8003e0c <HAL_ADC_ConfigChannel+0x694>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d004      	beq.n	8003c9e <HAL_ADC_ConfigChannel+0x526>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a5d      	ldr	r2, [pc, #372]	; (8003e10 <HAL_ADC_ConfigChannel+0x698>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d10e      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x544>
 8003c9e:	485b      	ldr	r0, [pc, #364]	; (8003e0c <HAL_ADC_ConfigChannel+0x694>)
 8003ca0:	f7ff fa98 	bl	80031d4 <LL_ADC_IsEnabled>
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	485a      	ldr	r0, [pc, #360]	; (8003e10 <HAL_ADC_ConfigChannel+0x698>)
 8003ca8:	f7ff fa94 	bl	80031d4 <LL_ADC_IsEnabled>
 8003cac:	4603      	mov	r3, r0
 8003cae:	4323      	orrs	r3, r4
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	e008      	b.n	8003cce <HAL_ADC_ConfigChannel+0x556>
 8003cbc:	4855      	ldr	r0, [pc, #340]	; (8003e14 <HAL_ADC_ConfigChannel+0x69c>)
 8003cbe:	f7ff fa89 	bl	80031d4 <LL_ADC_IsEnabled>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d07d      	beq.n	8003dce <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a50      	ldr	r2, [pc, #320]	; (8003e18 <HAL_ADC_ConfigChannel+0x6a0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d130      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x5c6>
 8003cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d12b      	bne.n	8003d3e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a4a      	ldr	r2, [pc, #296]	; (8003e14 <HAL_ADC_ConfigChannel+0x69c>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	f040 8081 	bne.w	8003df4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a45      	ldr	r2, [pc, #276]	; (8003e0c <HAL_ADC_ConfigChannel+0x694>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_ADC_ConfigChannel+0x58e>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a43      	ldr	r2, [pc, #268]	; (8003e10 <HAL_ADC_ConfigChannel+0x698>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d101      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x592>
 8003d06:	4a45      	ldr	r2, [pc, #276]	; (8003e1c <HAL_ADC_ConfigChannel+0x6a4>)
 8003d08:	e000      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x594>
 8003d0a:	4a3f      	ldr	r2, [pc, #252]	; (8003e08 <HAL_ADC_ConfigChannel+0x690>)
 8003d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d12:	4619      	mov	r1, r3
 8003d14:	4610      	mov	r0, r2
 8003d16:	f7ff f8d6 	bl	8002ec6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d1a:	4b41      	ldr	r3, [pc, #260]	; (8003e20 <HAL_ADC_ConfigChannel+0x6a8>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	099b      	lsrs	r3, r3, #6
 8003d20:	4a40      	ldr	r2, [pc, #256]	; (8003e24 <HAL_ADC_ConfigChannel+0x6ac>)
 8003d22:	fba2 2303 	umull	r2, r3, r2, r3
 8003d26:	099b      	lsrs	r3, r3, #6
 8003d28:	3301      	adds	r3, #1
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003d2e:	e002      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f9      	bne.n	8003d30 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d3c:	e05a      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a39      	ldr	r2, [pc, #228]	; (8003e28 <HAL_ADC_ConfigChannel+0x6b0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d11e      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x60e>
 8003d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d119      	bne.n	8003d86 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2f      	ldr	r2, [pc, #188]	; (8003e14 <HAL_ADC_ConfigChannel+0x69c>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d14b      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2a      	ldr	r2, [pc, #168]	; (8003e0c <HAL_ADC_ConfigChannel+0x694>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d004      	beq.n	8003d70 <HAL_ADC_ConfigChannel+0x5f8>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <HAL_ADC_ConfigChannel+0x698>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_ADC_ConfigChannel+0x5fc>
 8003d70:	4a2a      	ldr	r2, [pc, #168]	; (8003e1c <HAL_ADC_ConfigChannel+0x6a4>)
 8003d72:	e000      	b.n	8003d76 <HAL_ADC_ConfigChannel+0x5fe>
 8003d74:	4a24      	ldr	r2, [pc, #144]	; (8003e08 <HAL_ADC_ConfigChannel+0x690>)
 8003d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4610      	mov	r0, r2
 8003d80:	f7ff f8a1 	bl	8002ec6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d84:	e036      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a28      	ldr	r2, [pc, #160]	; (8003e2c <HAL_ADC_ConfigChannel+0x6b4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d131      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x67c>
 8003d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d12c      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <HAL_ADC_ConfigChannel+0x69c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d127      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <HAL_ADC_ConfigChannel+0x694>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d004      	beq.n	8003db8 <HAL_ADC_ConfigChannel+0x640>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <HAL_ADC_ConfigChannel+0x698>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <HAL_ADC_ConfigChannel+0x644>
 8003db8:	4a18      	ldr	r2, [pc, #96]	; (8003e1c <HAL_ADC_ConfigChannel+0x6a4>)
 8003dba:	e000      	b.n	8003dbe <HAL_ADC_ConfigChannel+0x646>
 8003dbc:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <HAL_ADC_ConfigChannel+0x690>)
 8003dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f7ff f87d 	bl	8002ec6 <LL_ADC_SetCommonPathInternalCh>
 8003dcc:	e012      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003de0:	e008      	b.n	8003df4 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003dfc:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3784      	adds	r7, #132	; 0x84
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd90      	pop	{r4, r7, pc}
 8003e08:	58026300 	.word	0x58026300
 8003e0c:	40022000 	.word	0x40022000
 8003e10:	40022100 	.word	0x40022100
 8003e14:	58026000 	.word	0x58026000
 8003e18:	cb840000 	.word	0xcb840000
 8003e1c:	40022300 	.word	0x40022300
 8003e20:	24000000 	.word	0x24000000
 8003e24:	053e2d63 	.word	0x053e2d63
 8003e28:	c7520000 	.word	0xc7520000
 8003e2c:	cfb80000 	.word	0xcfb80000

08003e30 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff f9c9 	bl	80031d4 <LL_ADC_IsEnabled>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d16e      	bne.n	8003f26 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	4b38      	ldr	r3, [pc, #224]	; (8003f30 <ADC_Enable+0x100>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d00d      	beq.n	8003e72 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5a:	f043 0210 	orr.w	r2, r3, #16
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e05a      	b.n	8003f28 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f7ff f998 	bl	80031ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e7c:	f7fe ffe4 	bl	8002e48 <HAL_GetTick>
 8003e80:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2b      	ldr	r2, [pc, #172]	; (8003f34 <ADC_Enable+0x104>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d004      	beq.n	8003e96 <ADC_Enable+0x66>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a29      	ldr	r2, [pc, #164]	; (8003f38 <ADC_Enable+0x108>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d101      	bne.n	8003e9a <ADC_Enable+0x6a>
 8003e96:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <ADC_Enable+0x10c>)
 8003e98:	e000      	b.n	8003e9c <ADC_Enable+0x6c>
 8003e9a:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <ADC_Enable+0x110>)
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff f929 	bl	80030f4 <LL_ADC_GetMultimode>
 8003ea2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a23      	ldr	r2, [pc, #140]	; (8003f38 <ADC_Enable+0x108>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d002      	beq.n	8003eb4 <ADC_Enable+0x84>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	e000      	b.n	8003eb6 <ADC_Enable+0x86>
 8003eb4:	4b1f      	ldr	r3, [pc, #124]	; (8003f34 <ADC_Enable+0x104>)
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d02c      	beq.n	8003f18 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d130      	bne.n	8003f26 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ec4:	e028      	b.n	8003f18 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff f982 	bl	80031d4 <LL_ADC_IsEnabled>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d104      	bne.n	8003ee0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7ff f966 	bl	80031ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ee0:	f7fe ffb2 	bl	8002e48 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d914      	bls.n	8003f18 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d00d      	beq.n	8003f18 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f00:	f043 0210 	orr.w	r2, r3, #16
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	f043 0201 	orr.w	r2, r3, #1
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e007      	b.n	8003f28 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d1cf      	bne.n	8003ec6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	8000003f 	.word	0x8000003f
 8003f34:	40022000 	.word	0x40022000
 8003f38:	40022100 	.word	0x40022100
 8003f3c:	40022300 	.word	0x40022300
 8003f40:	58026300 	.word	0x58026300

08003f44 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d14b      	bne.n	8003ff6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d021      	beq.n	8003fbc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff f817 	bl	8002fb0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d032      	beq.n	8003fee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d12b      	bne.n	8003fee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d11f      	bne.n	8003fee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb2:	f043 0201 	orr.w	r2, r3, #1
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	655a      	str	r2, [r3, #84]	; 0x54
 8003fba:	e018      	b.n	8003fee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d111      	bne.n	8003fee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d105      	bne.n	8003fee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe6:	f043 0201 	orr.w	r2, r3, #1
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7ff fba4 	bl	800373c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ff4:	e00e      	b.n	8004014 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	f003 0310 	and.w	r3, r3, #16
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f7ff fbae 	bl	8003764 <HAL_ADC_ErrorCallback>
}
 8004008:	e004      	b.n	8004014 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800400e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	4798      	blx	r3
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004028:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7ff fb90 	bl	8003750 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004030:	bf00      	nop
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	f043 0204 	orr.w	r2, r3, #4
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff fb80 	bl	8003764 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a7a      	ldr	r2, [pc, #488]	; (8004264 <ADC_ConfigureBoostMode+0x1f8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d004      	beq.n	8004088 <ADC_ConfigureBoostMode+0x1c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a79      	ldr	r2, [pc, #484]	; (8004268 <ADC_ConfigureBoostMode+0x1fc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d109      	bne.n	800409c <ADC_ConfigureBoostMode+0x30>
 8004088:	4b78      	ldr	r3, [pc, #480]	; (800426c <ADC_ConfigureBoostMode+0x200>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf14      	ite	ne
 8004094:	2301      	movne	r3, #1
 8004096:	2300      	moveq	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e008      	b.n	80040ae <ADC_ConfigureBoostMode+0x42>
 800409c:	4b74      	ldr	r3, [pc, #464]	; (8004270 <ADC_ConfigureBoostMode+0x204>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	bf14      	ite	ne
 80040a8:	2301      	movne	r3, #1
 80040aa:	2300      	moveq	r3, #0
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01c      	beq.n	80040ec <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80040b2:	f004 fe2d 	bl	8008d10 <HAL_RCC_GetHCLKFreq>
 80040b6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040c0:	d010      	beq.n	80040e4 <ADC_ConfigureBoostMode+0x78>
 80040c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80040c6:	d873      	bhi.n	80041b0 <ADC_ConfigureBoostMode+0x144>
 80040c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040cc:	d002      	beq.n	80040d4 <ADC_ConfigureBoostMode+0x68>
 80040ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040d2:	d16d      	bne.n	80041b0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e0:	60fb      	str	r3, [r7, #12]
        break;
 80040e2:	e068      	b.n	80041b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	089b      	lsrs	r3, r3, #2
 80040e8:	60fb      	str	r3, [r7, #12]
        break;
 80040ea:	e064      	b.n	80041b6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80040ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	f006 f872 	bl	800a1dc <HAL_RCCEx_GetPeriphCLKFreq>
 80040f8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004102:	d051      	beq.n	80041a8 <ADC_ConfigureBoostMode+0x13c>
 8004104:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004108:	d854      	bhi.n	80041b4 <ADC_ConfigureBoostMode+0x148>
 800410a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800410e:	d047      	beq.n	80041a0 <ADC_ConfigureBoostMode+0x134>
 8004110:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004114:	d84e      	bhi.n	80041b4 <ADC_ConfigureBoostMode+0x148>
 8004116:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800411a:	d03d      	beq.n	8004198 <ADC_ConfigureBoostMode+0x12c>
 800411c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004120:	d848      	bhi.n	80041b4 <ADC_ConfigureBoostMode+0x148>
 8004122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004126:	d033      	beq.n	8004190 <ADC_ConfigureBoostMode+0x124>
 8004128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800412c:	d842      	bhi.n	80041b4 <ADC_ConfigureBoostMode+0x148>
 800412e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004132:	d029      	beq.n	8004188 <ADC_ConfigureBoostMode+0x11c>
 8004134:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004138:	d83c      	bhi.n	80041b4 <ADC_ConfigureBoostMode+0x148>
 800413a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800413e:	d01a      	beq.n	8004176 <ADC_ConfigureBoostMode+0x10a>
 8004140:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004144:	d836      	bhi.n	80041b4 <ADC_ConfigureBoostMode+0x148>
 8004146:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800414a:	d014      	beq.n	8004176 <ADC_ConfigureBoostMode+0x10a>
 800414c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004150:	d830      	bhi.n	80041b4 <ADC_ConfigureBoostMode+0x148>
 8004152:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004156:	d00e      	beq.n	8004176 <ADC_ConfigureBoostMode+0x10a>
 8004158:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800415c:	d82a      	bhi.n	80041b4 <ADC_ConfigureBoostMode+0x148>
 800415e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004162:	d008      	beq.n	8004176 <ADC_ConfigureBoostMode+0x10a>
 8004164:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004168:	d824      	bhi.n	80041b4 <ADC_ConfigureBoostMode+0x148>
 800416a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800416e:	d002      	beq.n	8004176 <ADC_ConfigureBoostMode+0x10a>
 8004170:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004174:	d11e      	bne.n	80041b4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	0c9b      	lsrs	r3, r3, #18
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	fbb2 f3f3 	udiv	r3, r2, r3
 8004184:	60fb      	str	r3, [r7, #12]
        break;
 8004186:	e016      	b.n	80041b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	091b      	lsrs	r3, r3, #4
 800418c:	60fb      	str	r3, [r7, #12]
        break;
 800418e:	e012      	b.n	80041b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	095b      	lsrs	r3, r3, #5
 8004194:	60fb      	str	r3, [r7, #12]
        break;
 8004196:	e00e      	b.n	80041b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	099b      	lsrs	r3, r3, #6
 800419c:	60fb      	str	r3, [r7, #12]
        break;
 800419e:	e00a      	b.n	80041b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	09db      	lsrs	r3, r3, #7
 80041a4:	60fb      	str	r3, [r7, #12]
        break;
 80041a6:	e006      	b.n	80041b6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	60fb      	str	r3, [r7, #12]
        break;
 80041ae:	e002      	b.n	80041b6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80041b0:	bf00      	nop
 80041b2:	e000      	b.n	80041b6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80041b4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80041b6:	f7fe fe53 	bl	8002e60 <HAL_GetREVID>
 80041ba:	4603      	mov	r3, r0
 80041bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d815      	bhi.n	80041f0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4a2b      	ldr	r2, [pc, #172]	; (8004274 <ADC_ConfigureBoostMode+0x208>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d908      	bls.n	80041de <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041da:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80041dc:	e03e      	b.n	800425c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041ec:	609a      	str	r2, [r3, #8]
}
 80041ee:	e035      	b.n	800425c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <ADC_ConfigureBoostMode+0x20c>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d808      	bhi.n	8004210 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800420c:	609a      	str	r2, [r3, #8]
}
 800420e:	e025      	b.n	800425c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a1a      	ldr	r2, [pc, #104]	; (800427c <ADC_ConfigureBoostMode+0x210>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d80a      	bhi.n	800422e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422a:	609a      	str	r2, [r3, #8]
}
 800422c:	e016      	b.n	800425c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	4a13      	ldr	r2, [pc, #76]	; (8004280 <ADC_ConfigureBoostMode+0x214>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d80a      	bhi.n	800424c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004248:	609a      	str	r2, [r3, #8]
}
 800424a:	e007      	b.n	800425c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800425a:	609a      	str	r2, [r3, #8]
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	40022000 	.word	0x40022000
 8004268:	40022100 	.word	0x40022100
 800426c:	40022300 	.word	0x40022300
 8004270:	58026300 	.word	0x58026300
 8004274:	01312d00 	.word	0x01312d00
 8004278:	005f5e10 	.word	0x005f5e10
 800427c:	00bebc20 	.word	0x00bebc20
 8004280:	017d7840 	.word	0x017d7840

08004284 <LL_ADC_IsEnabled>:
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <LL_ADC_IsEnabled+0x18>
 8004298:	2301      	movs	r3, #1
 800429a:	e000      	b.n	800429e <LL_ADC_IsEnabled+0x1a>
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <LL_ADC_REG_IsConversionOngoing>:
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d101      	bne.n	80042c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042be:	2301      	movs	r3, #1
 80042c0:	e000      	b.n	80042c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ce:	4770      	bx	lr

080042d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80042d0:	b590      	push	{r4, r7, lr}
 80042d2:	b09f      	sub	sp, #124	; 0x7c
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e0be      	b.n	800446c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80042f6:	2300      	movs	r3, #0
 80042f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80042fa:	2300      	movs	r3, #0
 80042fc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a5c      	ldr	r2, [pc, #368]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d102      	bne.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004308:	4b5b      	ldr	r3, [pc, #364]	; (8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	e001      	b.n	8004312 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431c:	f043 0220 	orr.w	r2, r3, #32
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e09d      	b.n	800446c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ffb9 	bl	80042aa <LL_ADC_REG_IsConversionOngoing>
 8004338:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ffb3 	bl	80042aa <LL_ADC_REG_IsConversionOngoing>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d17f      	bne.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800434a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800434c:	2b00      	cmp	r3, #0
 800434e:	d17c      	bne.n	800444a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a47      	ldr	r2, [pc, #284]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d004      	beq.n	8004364 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a46      	ldr	r2, [pc, #280]	; (8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d101      	bne.n	8004368 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004364:	4b45      	ldr	r3, [pc, #276]	; (800447c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004366:	e000      	b.n	800436a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004368:	4b45      	ldr	r3, [pc, #276]	; (8004480 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800436a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d039      	beq.n	80043e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	431a      	orrs	r2, r3
 8004382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004384:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a3a      	ldr	r2, [pc, #232]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d004      	beq.n	800439a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a38      	ldr	r2, [pc, #224]	; (8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10e      	bne.n	80043b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800439a:	4836      	ldr	r0, [pc, #216]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800439c:	f7ff ff72 	bl	8004284 <LL_ADC_IsEnabled>
 80043a0:	4604      	mov	r4, r0
 80043a2:	4835      	ldr	r0, [pc, #212]	; (8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80043a4:	f7ff ff6e 	bl	8004284 <LL_ADC_IsEnabled>
 80043a8:	4603      	mov	r3, r0
 80043aa:	4323      	orrs	r3, r4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e008      	b.n	80043ca <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80043b8:	4832      	ldr	r0, [pc, #200]	; (8004484 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80043ba:	f7ff ff63 	bl	8004284 <LL_ADC_IsEnabled>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf0c      	ite	eq
 80043c4:	2301      	moveq	r3, #1
 80043c6:	2300      	movne	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d047      	beq.n	800445e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80043ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	4b2d      	ldr	r3, [pc, #180]	; (8004488 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	6811      	ldr	r1, [r2, #0]
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	6892      	ldr	r2, [r2, #8]
 80043de:	430a      	orrs	r2, r1
 80043e0:	431a      	orrs	r2, r3
 80043e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043e6:	e03a      	b.n	800445e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80043e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80043f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1e      	ldr	r2, [pc, #120]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a1d      	ldr	r2, [pc, #116]	; (8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d10e      	bne.n	8004426 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8004408:	481a      	ldr	r0, [pc, #104]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800440a:	f7ff ff3b 	bl	8004284 <LL_ADC_IsEnabled>
 800440e:	4604      	mov	r4, r0
 8004410:	4819      	ldr	r0, [pc, #100]	; (8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004412:	f7ff ff37 	bl	8004284 <LL_ADC_IsEnabled>
 8004416:	4603      	mov	r3, r0
 8004418:	4323      	orrs	r3, r4
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf0c      	ite	eq
 800441e:	2301      	moveq	r3, #1
 8004420:	2300      	movne	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	e008      	b.n	8004438 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004426:	4817      	ldr	r0, [pc, #92]	; (8004484 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004428:	f7ff ff2c 	bl	8004284 <LL_ADC_IsEnabled>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d010      	beq.n	800445e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800443c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	4b11      	ldr	r3, [pc, #68]	; (8004488 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004442:	4013      	ands	r3, r2
 8004444:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004446:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004448:	e009      	b.n	800445e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f043 0220 	orr.w	r2, r3, #32
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800445c:	e000      	b.n	8004460 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800445e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004468:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800446c:	4618      	mov	r0, r3
 800446e:	377c      	adds	r7, #124	; 0x7c
 8004470:	46bd      	mov	sp, r7
 8004472:	bd90      	pop	{r4, r7, pc}
 8004474:	40022000 	.word	0x40022000
 8004478:	40022100 	.word	0x40022100
 800447c:	40022300 	.word	0x40022300
 8004480:	58026300 	.word	0x58026300
 8004484:	58026000 	.word	0x58026000
 8004488:	fffff0e0 	.word	0xfffff0e0

0800448c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800449c:	4b0b      	ldr	r3, [pc, #44]	; (80044cc <__NVIC_SetPriorityGrouping+0x40>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044a8:	4013      	ands	r3, r2
 80044aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044b4:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <__NVIC_SetPriorityGrouping+0x44>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ba:	4a04      	ldr	r2, [pc, #16]	; (80044cc <__NVIC_SetPriorityGrouping+0x40>)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	60d3      	str	r3, [r2, #12]
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	e000ed00 	.word	0xe000ed00
 80044d0:	05fa0000 	.word	0x05fa0000

080044d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d8:	4b04      	ldr	r3, [pc, #16]	; (80044ec <__NVIC_GetPriorityGrouping+0x18>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	0a1b      	lsrs	r3, r3, #8
 80044de:	f003 0307 	and.w	r3, r3, #7
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	e000ed00 	.word	0xe000ed00

080044f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80044fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	db0b      	blt.n	800451a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004502:	88fb      	ldrh	r3, [r7, #6]
 8004504:	f003 021f 	and.w	r2, r3, #31
 8004508:	4907      	ldr	r1, [pc, #28]	; (8004528 <__NVIC_EnableIRQ+0x38>)
 800450a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2001      	movs	r0, #1
 8004512:	fa00 f202 	lsl.w	r2, r0, r2
 8004516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	; (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	; (800457c <__NVIC_SetPriority+0x50>)
 800455c:	88fb      	ldrh	r3, [r7, #6]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	; 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	; 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045f8:	d301      	bcc.n	80045fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045fa:	2301      	movs	r3, #1
 80045fc:	e00f      	b.n	800461e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fe:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <SysTick_Config+0x40>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3b01      	subs	r3, #1
 8004604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004606:	210f      	movs	r1, #15
 8004608:	f04f 30ff 	mov.w	r0, #4294967295
 800460c:	f7ff ff8e 	bl	800452c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004610:	4b05      	ldr	r3, [pc, #20]	; (8004628 <SysTick_Config+0x40>)
 8004612:	2200      	movs	r2, #0
 8004614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004616:	4b04      	ldr	r3, [pc, #16]	; (8004628 <SysTick_Config+0x40>)
 8004618:	2207      	movs	r2, #7
 800461a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	e000e010 	.word	0xe000e010

0800462c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff ff29 	bl	800448c <__NVIC_SetPriorityGrouping>
}
 800463a:	bf00      	nop
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004642:	b580      	push	{r7, lr}
 8004644:	b086      	sub	sp, #24
 8004646:	af00      	add	r7, sp, #0
 8004648:	4603      	mov	r3, r0
 800464a:	60b9      	str	r1, [r7, #8]
 800464c:	607a      	str	r2, [r7, #4]
 800464e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004650:	f7ff ff40 	bl	80044d4 <__NVIC_GetPriorityGrouping>
 8004654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	6978      	ldr	r0, [r7, #20]
 800465c:	f7ff ff90 	bl	8004580 <NVIC_EncodePriority>
 8004660:	4602      	mov	r2, r0
 8004662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff5f 	bl	800452c <__NVIC_SetPriority>
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	4603      	mov	r3, r0
 800467e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004680:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ff33 	bl	80044f0 <__NVIC_EnableIRQ>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff ffa4 	bl	80045e8 <SysTick_Config>
 80046a0:	4603      	mov	r3, r0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80046b4:	f7fe fbc8 	bl	8002e48 <HAL_GetTick>
 80046b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e316      	b.n	8004cf2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a66      	ldr	r2, [pc, #408]	; (8004864 <HAL_DMA_Init+0x1b8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d04a      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a65      	ldr	r2, [pc, #404]	; (8004868 <HAL_DMA_Init+0x1bc>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d045      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a63      	ldr	r2, [pc, #396]	; (800486c <HAL_DMA_Init+0x1c0>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d040      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a62      	ldr	r2, [pc, #392]	; (8004870 <HAL_DMA_Init+0x1c4>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d03b      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a60      	ldr	r2, [pc, #384]	; (8004874 <HAL_DMA_Init+0x1c8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d036      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a5f      	ldr	r2, [pc, #380]	; (8004878 <HAL_DMA_Init+0x1cc>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d031      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a5d      	ldr	r2, [pc, #372]	; (800487c <HAL_DMA_Init+0x1d0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d02c      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a5c      	ldr	r2, [pc, #368]	; (8004880 <HAL_DMA_Init+0x1d4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d027      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a5a      	ldr	r2, [pc, #360]	; (8004884 <HAL_DMA_Init+0x1d8>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d022      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a59      	ldr	r2, [pc, #356]	; (8004888 <HAL_DMA_Init+0x1dc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d01d      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a57      	ldr	r2, [pc, #348]	; (800488c <HAL_DMA_Init+0x1e0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d018      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a56      	ldr	r2, [pc, #344]	; (8004890 <HAL_DMA_Init+0x1e4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a54      	ldr	r2, [pc, #336]	; (8004894 <HAL_DMA_Init+0x1e8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00e      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a53      	ldr	r2, [pc, #332]	; (8004898 <HAL_DMA_Init+0x1ec>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a51      	ldr	r2, [pc, #324]	; (800489c <HAL_DMA_Init+0x1f0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_DMA_Init+0xb8>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a50      	ldr	r2, [pc, #320]	; (80048a0 <HAL_DMA_Init+0x1f4>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d101      	bne.n	8004768 <HAL_DMA_Init+0xbc>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <HAL_DMA_Init+0xbe>
 8004768:	2300      	movs	r3, #0
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 813b 	beq.w	80049e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a37      	ldr	r2, [pc, #220]	; (8004864 <HAL_DMA_Init+0x1b8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d04a      	beq.n	8004820 <HAL_DMA_Init+0x174>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a36      	ldr	r2, [pc, #216]	; (8004868 <HAL_DMA_Init+0x1bc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d045      	beq.n	8004820 <HAL_DMA_Init+0x174>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a34      	ldr	r2, [pc, #208]	; (800486c <HAL_DMA_Init+0x1c0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d040      	beq.n	8004820 <HAL_DMA_Init+0x174>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a33      	ldr	r2, [pc, #204]	; (8004870 <HAL_DMA_Init+0x1c4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d03b      	beq.n	8004820 <HAL_DMA_Init+0x174>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a31      	ldr	r2, [pc, #196]	; (8004874 <HAL_DMA_Init+0x1c8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d036      	beq.n	8004820 <HAL_DMA_Init+0x174>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a30      	ldr	r2, [pc, #192]	; (8004878 <HAL_DMA_Init+0x1cc>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d031      	beq.n	8004820 <HAL_DMA_Init+0x174>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a2e      	ldr	r2, [pc, #184]	; (800487c <HAL_DMA_Init+0x1d0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d02c      	beq.n	8004820 <HAL_DMA_Init+0x174>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a2d      	ldr	r2, [pc, #180]	; (8004880 <HAL_DMA_Init+0x1d4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d027      	beq.n	8004820 <HAL_DMA_Init+0x174>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a2b      	ldr	r2, [pc, #172]	; (8004884 <HAL_DMA_Init+0x1d8>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d022      	beq.n	8004820 <HAL_DMA_Init+0x174>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2a      	ldr	r2, [pc, #168]	; (8004888 <HAL_DMA_Init+0x1dc>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d01d      	beq.n	8004820 <HAL_DMA_Init+0x174>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a28      	ldr	r2, [pc, #160]	; (800488c <HAL_DMA_Init+0x1e0>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d018      	beq.n	8004820 <HAL_DMA_Init+0x174>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a27      	ldr	r2, [pc, #156]	; (8004890 <HAL_DMA_Init+0x1e4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <HAL_DMA_Init+0x174>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a25      	ldr	r2, [pc, #148]	; (8004894 <HAL_DMA_Init+0x1e8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <HAL_DMA_Init+0x174>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a24      	ldr	r2, [pc, #144]	; (8004898 <HAL_DMA_Init+0x1ec>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_DMA_Init+0x174>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a22      	ldr	r2, [pc, #136]	; (800489c <HAL_DMA_Init+0x1f0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_DMA_Init+0x174>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <HAL_DMA_Init+0x1f4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d108      	bne.n	8004832 <HAL_DMA_Init+0x186>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e007      	b.n	8004842 <HAL_DMA_Init+0x196>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 0201 	bic.w	r2, r2, #1
 8004840:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004842:	e02f      	b.n	80048a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004844:	f7fe fb00 	bl	8002e48 <HAL_GetTick>
 8004848:	4602      	mov	r2, r0
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	2b05      	cmp	r3, #5
 8004850:	d928      	bls.n	80048a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2220      	movs	r2, #32
 8004856:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2203      	movs	r2, #3
 800485c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e246      	b.n	8004cf2 <HAL_DMA_Init+0x646>
 8004864:	40020010 	.word	0x40020010
 8004868:	40020028 	.word	0x40020028
 800486c:	40020040 	.word	0x40020040
 8004870:	40020058 	.word	0x40020058
 8004874:	40020070 	.word	0x40020070
 8004878:	40020088 	.word	0x40020088
 800487c:	400200a0 	.word	0x400200a0
 8004880:	400200b8 	.word	0x400200b8
 8004884:	40020410 	.word	0x40020410
 8004888:	40020428 	.word	0x40020428
 800488c:	40020440 	.word	0x40020440
 8004890:	40020458 	.word	0x40020458
 8004894:	40020470 	.word	0x40020470
 8004898:	40020488 	.word	0x40020488
 800489c:	400204a0 	.word	0x400204a0
 80048a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1c8      	bne.n	8004844 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4b83      	ldr	r3, [pc, #524]	; (8004acc <HAL_DMA_Init+0x420>)
 80048be:	4013      	ands	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80048ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d107      	bne.n	8004908 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	4313      	orrs	r3, r2
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004908:	4b71      	ldr	r3, [pc, #452]	; (8004ad0 <HAL_DMA_Init+0x424>)
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	4b71      	ldr	r3, [pc, #452]	; (8004ad4 <HAL_DMA_Init+0x428>)
 800490e:	4013      	ands	r3, r2
 8004910:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004914:	d328      	bcc.n	8004968 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b28      	cmp	r3, #40	; 0x28
 800491c:	d903      	bls.n	8004926 <HAL_DMA_Init+0x27a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b2e      	cmp	r3, #46	; 0x2e
 8004924:	d917      	bls.n	8004956 <HAL_DMA_Init+0x2aa>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b3e      	cmp	r3, #62	; 0x3e
 800492c:	d903      	bls.n	8004936 <HAL_DMA_Init+0x28a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b42      	cmp	r3, #66	; 0x42
 8004934:	d90f      	bls.n	8004956 <HAL_DMA_Init+0x2aa>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b46      	cmp	r3, #70	; 0x46
 800493c:	d903      	bls.n	8004946 <HAL_DMA_Init+0x29a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b48      	cmp	r3, #72	; 0x48
 8004944:	d907      	bls.n	8004956 <HAL_DMA_Init+0x2aa>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	2b4e      	cmp	r3, #78	; 0x4e
 800494c:	d905      	bls.n	800495a <HAL_DMA_Init+0x2ae>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	2b52      	cmp	r3, #82	; 0x52
 8004954:	d801      	bhi.n	800495a <HAL_DMA_Init+0x2ae>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <HAL_DMA_Init+0x2b0>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004966:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0307 	bic.w	r3, r3, #7
 800497e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	2b04      	cmp	r3, #4
 8004990:	d117      	bne.n	80049c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00e      	beq.n	80049c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f001 fdcf 	bl	8006548 <DMA_CheckFifoParam>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2240      	movs	r2, #64	; 0x40
 80049b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e197      	b.n	8004cf2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	697a      	ldr	r2, [r7, #20]
 80049c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f001 fd0a 	bl	80063e4 <DMA_CalcBaseAndBitshift>
 80049d0:	4603      	mov	r3, r0
 80049d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d8:	f003 031f 	and.w	r3, r3, #31
 80049dc:	223f      	movs	r2, #63	; 0x3f
 80049de:	409a      	lsls	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	609a      	str	r2, [r3, #8]
 80049e4:	e0cd      	b.n	8004b82 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a3b      	ldr	r2, [pc, #236]	; (8004ad8 <HAL_DMA_Init+0x42c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <HAL_DMA_Init+0x38a>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a39      	ldr	r2, [pc, #228]	; (8004adc <HAL_DMA_Init+0x430>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <HAL_DMA_Init+0x38a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a38      	ldr	r2, [pc, #224]	; (8004ae0 <HAL_DMA_Init+0x434>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <HAL_DMA_Init+0x38a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a36      	ldr	r2, [pc, #216]	; (8004ae4 <HAL_DMA_Init+0x438>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <HAL_DMA_Init+0x38a>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a35      	ldr	r2, [pc, #212]	; (8004ae8 <HAL_DMA_Init+0x43c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <HAL_DMA_Init+0x38a>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a33      	ldr	r2, [pc, #204]	; (8004aec <HAL_DMA_Init+0x440>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <HAL_DMA_Init+0x38a>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a32      	ldr	r2, [pc, #200]	; (8004af0 <HAL_DMA_Init+0x444>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <HAL_DMA_Init+0x38a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a30      	ldr	r2, [pc, #192]	; (8004af4 <HAL_DMA_Init+0x448>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <HAL_DMA_Init+0x38e>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_DMA_Init+0x390>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 8097 	beq.w	8004b70 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a24      	ldr	r2, [pc, #144]	; (8004ad8 <HAL_DMA_Init+0x42c>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d021      	beq.n	8004a90 <HAL_DMA_Init+0x3e4>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a22      	ldr	r2, [pc, #136]	; (8004adc <HAL_DMA_Init+0x430>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d01c      	beq.n	8004a90 <HAL_DMA_Init+0x3e4>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a21      	ldr	r2, [pc, #132]	; (8004ae0 <HAL_DMA_Init+0x434>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d017      	beq.n	8004a90 <HAL_DMA_Init+0x3e4>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a1f      	ldr	r2, [pc, #124]	; (8004ae4 <HAL_DMA_Init+0x438>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d012      	beq.n	8004a90 <HAL_DMA_Init+0x3e4>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <HAL_DMA_Init+0x43c>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00d      	beq.n	8004a90 <HAL_DMA_Init+0x3e4>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a1c      	ldr	r2, [pc, #112]	; (8004aec <HAL_DMA_Init+0x440>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d008      	beq.n	8004a90 <HAL_DMA_Init+0x3e4>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a1b      	ldr	r2, [pc, #108]	; (8004af0 <HAL_DMA_Init+0x444>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d003      	beq.n	8004a90 <HAL_DMA_Init+0x3e4>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <HAL_DMA_Init+0x448>)
 8004a8e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <HAL_DMA_Init+0x44c>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d021      	beq.n	8004afc <HAL_DMA_Init+0x450>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b80      	cmp	r3, #128	; 0x80
 8004abe:	d102      	bne.n	8004ac6 <HAL_DMA_Init+0x41a>
 8004ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ac4:	e01b      	b.n	8004afe <HAL_DMA_Init+0x452>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	e019      	b.n	8004afe <HAL_DMA_Init+0x452>
 8004aca:	bf00      	nop
 8004acc:	fe10803f 	.word	0xfe10803f
 8004ad0:	5c001000 	.word	0x5c001000
 8004ad4:	ffff0000 	.word	0xffff0000
 8004ad8:	58025408 	.word	0x58025408
 8004adc:	5802541c 	.word	0x5802541c
 8004ae0:	58025430 	.word	0x58025430
 8004ae4:	58025444 	.word	0x58025444
 8004ae8:	58025458 	.word	0x58025458
 8004aec:	5802546c 	.word	0x5802546c
 8004af0:	58025480 	.word	0x58025480
 8004af4:	58025494 	.word	0x58025494
 8004af8:	fffe000f 	.word	0xfffe000f
 8004afc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68d2      	ldr	r2, [r2, #12]
 8004b02:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a1b      	ldr	r3, [r3, #32]
 8004b2a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b2c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b6e      	ldr	r3, [pc, #440]	; (8004cfc <HAL_DMA_Init+0x650>)
 8004b44:	4413      	add	r3, r2
 8004b46:	4a6e      	ldr	r2, [pc, #440]	; (8004d00 <HAL_DMA_Init+0x654>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	091b      	lsrs	r3, r3, #4
 8004b4e:	009a      	lsls	r2, r3, #2
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f001 fc45 	bl	80063e4 <DMA_CalcBaseAndBitshift>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b62:	f003 031f 	and.w	r3, r3, #31
 8004b66:	2201      	movs	r2, #1
 8004b68:	409a      	lsls	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	e008      	b.n	8004b82 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2240      	movs	r2, #64	; 0x40
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2203      	movs	r2, #3
 8004b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e0b7      	b.n	8004cf2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a5f      	ldr	r2, [pc, #380]	; (8004d04 <HAL_DMA_Init+0x658>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d072      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a5d      	ldr	r2, [pc, #372]	; (8004d08 <HAL_DMA_Init+0x65c>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d06d      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a5c      	ldr	r2, [pc, #368]	; (8004d0c <HAL_DMA_Init+0x660>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d068      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a5a      	ldr	r2, [pc, #360]	; (8004d10 <HAL_DMA_Init+0x664>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d063      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a59      	ldr	r2, [pc, #356]	; (8004d14 <HAL_DMA_Init+0x668>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d05e      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a57      	ldr	r2, [pc, #348]	; (8004d18 <HAL_DMA_Init+0x66c>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d059      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a56      	ldr	r2, [pc, #344]	; (8004d1c <HAL_DMA_Init+0x670>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d054      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a54      	ldr	r2, [pc, #336]	; (8004d20 <HAL_DMA_Init+0x674>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d04f      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a53      	ldr	r2, [pc, #332]	; (8004d24 <HAL_DMA_Init+0x678>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d04a      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a51      	ldr	r2, [pc, #324]	; (8004d28 <HAL_DMA_Init+0x67c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d045      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a50      	ldr	r2, [pc, #320]	; (8004d2c <HAL_DMA_Init+0x680>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d040      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a4e      	ldr	r2, [pc, #312]	; (8004d30 <HAL_DMA_Init+0x684>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d03b      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a4d      	ldr	r2, [pc, #308]	; (8004d34 <HAL_DMA_Init+0x688>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d036      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a4b      	ldr	r2, [pc, #300]	; (8004d38 <HAL_DMA_Init+0x68c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d031      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a4a      	ldr	r2, [pc, #296]	; (8004d3c <HAL_DMA_Init+0x690>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d02c      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a48      	ldr	r2, [pc, #288]	; (8004d40 <HAL_DMA_Init+0x694>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d027      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a47      	ldr	r2, [pc, #284]	; (8004d44 <HAL_DMA_Init+0x698>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d022      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a45      	ldr	r2, [pc, #276]	; (8004d48 <HAL_DMA_Init+0x69c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d01d      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a44      	ldr	r2, [pc, #272]	; (8004d4c <HAL_DMA_Init+0x6a0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d018      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a42      	ldr	r2, [pc, #264]	; (8004d50 <HAL_DMA_Init+0x6a4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d013      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a41      	ldr	r2, [pc, #260]	; (8004d54 <HAL_DMA_Init+0x6a8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d00e      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a3f      	ldr	r2, [pc, #252]	; (8004d58 <HAL_DMA_Init+0x6ac>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d009      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a3e      	ldr	r2, [pc, #248]	; (8004d5c <HAL_DMA_Init+0x6b0>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d004      	beq.n	8004c72 <HAL_DMA_Init+0x5c6>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a3c      	ldr	r2, [pc, #240]	; (8004d60 <HAL_DMA_Init+0x6b4>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d101      	bne.n	8004c76 <HAL_DMA_Init+0x5ca>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <HAL_DMA_Init+0x5cc>
 8004c76:	2300      	movs	r3, #0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d032      	beq.n	8004ce2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f001 fcdf 	bl	8006640 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b80      	cmp	r3, #128	; 0x80
 8004c88:	d102      	bne.n	8004c90 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	b2d2      	uxtb	r2, r2
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004ca4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d010      	beq.n	8004cd0 <HAL_DMA_Init+0x624>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d80c      	bhi.n	8004cd0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f001 fd5c 	bl	8006774 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	e008      	b.n	8004ce2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004cf0:	2300      	movs	r3, #0
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	a7fdabf8 	.word	0xa7fdabf8
 8004d00:	cccccccd 	.word	0xcccccccd
 8004d04:	40020010 	.word	0x40020010
 8004d08:	40020028 	.word	0x40020028
 8004d0c:	40020040 	.word	0x40020040
 8004d10:	40020058 	.word	0x40020058
 8004d14:	40020070 	.word	0x40020070
 8004d18:	40020088 	.word	0x40020088
 8004d1c:	400200a0 	.word	0x400200a0
 8004d20:	400200b8 	.word	0x400200b8
 8004d24:	40020410 	.word	0x40020410
 8004d28:	40020428 	.word	0x40020428
 8004d2c:	40020440 	.word	0x40020440
 8004d30:	40020458 	.word	0x40020458
 8004d34:	40020470 	.word	0x40020470
 8004d38:	40020488 	.word	0x40020488
 8004d3c:	400204a0 	.word	0x400204a0
 8004d40:	400204b8 	.word	0x400204b8
 8004d44:	58025408 	.word	0x58025408
 8004d48:	5802541c 	.word	0x5802541c
 8004d4c:	58025430 	.word	0x58025430
 8004d50:	58025444 	.word	0x58025444
 8004d54:	58025458 	.word	0x58025458
 8004d58:	5802546c 	.word	0x5802546c
 8004d5c:	58025480 	.word	0x58025480
 8004d60:	58025494 	.word	0x58025494

08004d64 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e226      	b.n	80051ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_DMA_Start_IT+0x2a>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e21f      	b.n	80051ce <HAL_DMA_Start_IT+0x46a>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	f040 820a 	bne.w	80051b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2202      	movs	r2, #2
 8004da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a68      	ldr	r2, [pc, #416]	; (8004f58 <HAL_DMA_Start_IT+0x1f4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d04a      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a66      	ldr	r2, [pc, #408]	; (8004f5c <HAL_DMA_Start_IT+0x1f8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d045      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a65      	ldr	r2, [pc, #404]	; (8004f60 <HAL_DMA_Start_IT+0x1fc>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d040      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a63      	ldr	r2, [pc, #396]	; (8004f64 <HAL_DMA_Start_IT+0x200>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d03b      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a62      	ldr	r2, [pc, #392]	; (8004f68 <HAL_DMA_Start_IT+0x204>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d036      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a60      	ldr	r2, [pc, #384]	; (8004f6c <HAL_DMA_Start_IT+0x208>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d031      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a5f      	ldr	r2, [pc, #380]	; (8004f70 <HAL_DMA_Start_IT+0x20c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d02c      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a5d      	ldr	r2, [pc, #372]	; (8004f74 <HAL_DMA_Start_IT+0x210>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d027      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a5c      	ldr	r2, [pc, #368]	; (8004f78 <HAL_DMA_Start_IT+0x214>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d022      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a5a      	ldr	r2, [pc, #360]	; (8004f7c <HAL_DMA_Start_IT+0x218>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01d      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a59      	ldr	r2, [pc, #356]	; (8004f80 <HAL_DMA_Start_IT+0x21c>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d018      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a57      	ldr	r2, [pc, #348]	; (8004f84 <HAL_DMA_Start_IT+0x220>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d013      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a56      	ldr	r2, [pc, #344]	; (8004f88 <HAL_DMA_Start_IT+0x224>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00e      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a54      	ldr	r2, [pc, #336]	; (8004f8c <HAL_DMA_Start_IT+0x228>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d009      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a53      	ldr	r2, [pc, #332]	; (8004f90 <HAL_DMA_Start_IT+0x22c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d004      	beq.n	8004e52 <HAL_DMA_Start_IT+0xee>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a51      	ldr	r2, [pc, #324]	; (8004f94 <HAL_DMA_Start_IT+0x230>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d108      	bne.n	8004e64 <HAL_DMA_Start_IT+0x100>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e007      	b.n	8004e74 <HAL_DMA_Start_IT+0x110>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0201 	bic.w	r2, r2, #1
 8004e72:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f001 f906 	bl	800608c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a34      	ldr	r2, [pc, #208]	; (8004f58 <HAL_DMA_Start_IT+0x1f4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d04a      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a33      	ldr	r2, [pc, #204]	; (8004f5c <HAL_DMA_Start_IT+0x1f8>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d045      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a31      	ldr	r2, [pc, #196]	; (8004f60 <HAL_DMA_Start_IT+0x1fc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d040      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a30      	ldr	r2, [pc, #192]	; (8004f64 <HAL_DMA_Start_IT+0x200>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d03b      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a2e      	ldr	r2, [pc, #184]	; (8004f68 <HAL_DMA_Start_IT+0x204>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d036      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a2d      	ldr	r2, [pc, #180]	; (8004f6c <HAL_DMA_Start_IT+0x208>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d031      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a2b      	ldr	r2, [pc, #172]	; (8004f70 <HAL_DMA_Start_IT+0x20c>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d02c      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a2a      	ldr	r2, [pc, #168]	; (8004f74 <HAL_DMA_Start_IT+0x210>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d027      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a28      	ldr	r2, [pc, #160]	; (8004f78 <HAL_DMA_Start_IT+0x214>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d022      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <HAL_DMA_Start_IT+0x218>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d01d      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a25      	ldr	r2, [pc, #148]	; (8004f80 <HAL_DMA_Start_IT+0x21c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d018      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a24      	ldr	r2, [pc, #144]	; (8004f84 <HAL_DMA_Start_IT+0x220>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a22      	ldr	r2, [pc, #136]	; (8004f88 <HAL_DMA_Start_IT+0x224>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00e      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a21      	ldr	r2, [pc, #132]	; (8004f8c <HAL_DMA_Start_IT+0x228>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d009      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a1f      	ldr	r2, [pc, #124]	; (8004f90 <HAL_DMA_Start_IT+0x22c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_DMA_Start_IT+0x1bc>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <HAL_DMA_Start_IT+0x230>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d101      	bne.n	8004f24 <HAL_DMA_Start_IT+0x1c0>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <HAL_DMA_Start_IT+0x1c2>
 8004f24:	2300      	movs	r3, #0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d036      	beq.n	8004f98 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f023 021e 	bic.w	r2, r3, #30
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f042 0216 	orr.w	r2, r2, #22
 8004f3c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d03e      	beq.n	8004fc4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0208 	orr.w	r2, r2, #8
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e035      	b.n	8004fc4 <HAL_DMA_Start_IT+0x260>
 8004f58:	40020010 	.word	0x40020010
 8004f5c:	40020028 	.word	0x40020028
 8004f60:	40020040 	.word	0x40020040
 8004f64:	40020058 	.word	0x40020058
 8004f68:	40020070 	.word	0x40020070
 8004f6c:	40020088 	.word	0x40020088
 8004f70:	400200a0 	.word	0x400200a0
 8004f74:	400200b8 	.word	0x400200b8
 8004f78:	40020410 	.word	0x40020410
 8004f7c:	40020428 	.word	0x40020428
 8004f80:	40020440 	.word	0x40020440
 8004f84:	40020458 	.word	0x40020458
 8004f88:	40020470 	.word	0x40020470
 8004f8c:	40020488 	.word	0x40020488
 8004f90:	400204a0 	.word	0x400204a0
 8004f94:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f023 020e 	bic.w	r2, r3, #14
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 020a 	orr.w	r2, r2, #10
 8004faa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0204 	orr.w	r2, r2, #4
 8004fc2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a83      	ldr	r2, [pc, #524]	; (80051d8 <HAL_DMA_Start_IT+0x474>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d072      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a82      	ldr	r2, [pc, #520]	; (80051dc <HAL_DMA_Start_IT+0x478>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d06d      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a80      	ldr	r2, [pc, #512]	; (80051e0 <HAL_DMA_Start_IT+0x47c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d068      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a7f      	ldr	r2, [pc, #508]	; (80051e4 <HAL_DMA_Start_IT+0x480>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d063      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a7d      	ldr	r2, [pc, #500]	; (80051e8 <HAL_DMA_Start_IT+0x484>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d05e      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a7c      	ldr	r2, [pc, #496]	; (80051ec <HAL_DMA_Start_IT+0x488>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d059      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7a      	ldr	r2, [pc, #488]	; (80051f0 <HAL_DMA_Start_IT+0x48c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d054      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a79      	ldr	r2, [pc, #484]	; (80051f4 <HAL_DMA_Start_IT+0x490>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d04f      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a77      	ldr	r2, [pc, #476]	; (80051f8 <HAL_DMA_Start_IT+0x494>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d04a      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a76      	ldr	r2, [pc, #472]	; (80051fc <HAL_DMA_Start_IT+0x498>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d045      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a74      	ldr	r2, [pc, #464]	; (8005200 <HAL_DMA_Start_IT+0x49c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d040      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a73      	ldr	r2, [pc, #460]	; (8005204 <HAL_DMA_Start_IT+0x4a0>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d03b      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a71      	ldr	r2, [pc, #452]	; (8005208 <HAL_DMA_Start_IT+0x4a4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d036      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a70      	ldr	r2, [pc, #448]	; (800520c <HAL_DMA_Start_IT+0x4a8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d031      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a6e      	ldr	r2, [pc, #440]	; (8005210 <HAL_DMA_Start_IT+0x4ac>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d02c      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a6d      	ldr	r2, [pc, #436]	; (8005214 <HAL_DMA_Start_IT+0x4b0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d027      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a6b      	ldr	r2, [pc, #428]	; (8005218 <HAL_DMA_Start_IT+0x4b4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d022      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6a      	ldr	r2, [pc, #424]	; (800521c <HAL_DMA_Start_IT+0x4b8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d01d      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a68      	ldr	r2, [pc, #416]	; (8005220 <HAL_DMA_Start_IT+0x4bc>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d018      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a67      	ldr	r2, [pc, #412]	; (8005224 <HAL_DMA_Start_IT+0x4c0>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d013      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a65      	ldr	r2, [pc, #404]	; (8005228 <HAL_DMA_Start_IT+0x4c4>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00e      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a64      	ldr	r2, [pc, #400]	; (800522c <HAL_DMA_Start_IT+0x4c8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d009      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a62      	ldr	r2, [pc, #392]	; (8005230 <HAL_DMA_Start_IT+0x4cc>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_DMA_Start_IT+0x350>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a61      	ldr	r2, [pc, #388]	; (8005234 <HAL_DMA_Start_IT+0x4d0>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d101      	bne.n	80050b8 <HAL_DMA_Start_IT+0x354>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e000      	b.n	80050ba <HAL_DMA_Start_IT+0x356>
 80050b8:	2300      	movs	r3, #0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d01a      	beq.n	80050f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d007      	beq.n	80050dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a37      	ldr	r2, [pc, #220]	; (80051d8 <HAL_DMA_Start_IT+0x474>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d04a      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a36      	ldr	r2, [pc, #216]	; (80051dc <HAL_DMA_Start_IT+0x478>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d045      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a34      	ldr	r2, [pc, #208]	; (80051e0 <HAL_DMA_Start_IT+0x47c>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d040      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a33      	ldr	r2, [pc, #204]	; (80051e4 <HAL_DMA_Start_IT+0x480>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d03b      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a31      	ldr	r2, [pc, #196]	; (80051e8 <HAL_DMA_Start_IT+0x484>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d036      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a30      	ldr	r2, [pc, #192]	; (80051ec <HAL_DMA_Start_IT+0x488>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d031      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a2e      	ldr	r2, [pc, #184]	; (80051f0 <HAL_DMA_Start_IT+0x48c>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d02c      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a2d      	ldr	r2, [pc, #180]	; (80051f4 <HAL_DMA_Start_IT+0x490>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d027      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a2b      	ldr	r2, [pc, #172]	; (80051f8 <HAL_DMA_Start_IT+0x494>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d022      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <HAL_DMA_Start_IT+0x498>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d01d      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a28      	ldr	r2, [pc, #160]	; (8005200 <HAL_DMA_Start_IT+0x49c>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d018      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a27      	ldr	r2, [pc, #156]	; (8005204 <HAL_DMA_Start_IT+0x4a0>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d013      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a25      	ldr	r2, [pc, #148]	; (8005208 <HAL_DMA_Start_IT+0x4a4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00e      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a24      	ldr	r2, [pc, #144]	; (800520c <HAL_DMA_Start_IT+0x4a8>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a22      	ldr	r2, [pc, #136]	; (8005210 <HAL_DMA_Start_IT+0x4ac>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d004      	beq.n	8005194 <HAL_DMA_Start_IT+0x430>
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a21      	ldr	r2, [pc, #132]	; (8005214 <HAL_DMA_Start_IT+0x4b0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d108      	bne.n	80051a6 <HAL_DMA_Start_IT+0x442>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e012      	b.n	80051cc <HAL_DMA_Start_IT+0x468>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f042 0201 	orr.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e009      	b.n	80051cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	40020010 	.word	0x40020010
 80051dc:	40020028 	.word	0x40020028
 80051e0:	40020040 	.word	0x40020040
 80051e4:	40020058 	.word	0x40020058
 80051e8:	40020070 	.word	0x40020070
 80051ec:	40020088 	.word	0x40020088
 80051f0:	400200a0 	.word	0x400200a0
 80051f4:	400200b8 	.word	0x400200b8
 80051f8:	40020410 	.word	0x40020410
 80051fc:	40020428 	.word	0x40020428
 8005200:	40020440 	.word	0x40020440
 8005204:	40020458 	.word	0x40020458
 8005208:	40020470 	.word	0x40020470
 800520c:	40020488 	.word	0x40020488
 8005210:	400204a0 	.word	0x400204a0
 8005214:	400204b8 	.word	0x400204b8
 8005218:	58025408 	.word	0x58025408
 800521c:	5802541c 	.word	0x5802541c
 8005220:	58025430 	.word	0x58025430
 8005224:	58025444 	.word	0x58025444
 8005228:	58025458 	.word	0x58025458
 800522c:	5802546c 	.word	0x5802546c
 8005230:	58025480 	.word	0x58025480
 8005234:	58025494 	.word	0x58025494

08005238 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005244:	4b67      	ldr	r3, [pc, #412]	; (80053e4 <HAL_DMA_IRQHandler+0x1ac>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a67      	ldr	r2, [pc, #412]	; (80053e8 <HAL_DMA_IRQHandler+0x1b0>)
 800524a:	fba2 2303 	umull	r2, r3, r2, r3
 800524e:	0a9b      	lsrs	r3, r3, #10
 8005250:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005256:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800525e:	6a3b      	ldr	r3, [r7, #32]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a5f      	ldr	r2, [pc, #380]	; (80053ec <HAL_DMA_IRQHandler+0x1b4>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d04a      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a5d      	ldr	r2, [pc, #372]	; (80053f0 <HAL_DMA_IRQHandler+0x1b8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d045      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a5c      	ldr	r2, [pc, #368]	; (80053f4 <HAL_DMA_IRQHandler+0x1bc>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d040      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a5a      	ldr	r2, [pc, #360]	; (80053f8 <HAL_DMA_IRQHandler+0x1c0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d03b      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a59      	ldr	r2, [pc, #356]	; (80053fc <HAL_DMA_IRQHandler+0x1c4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d036      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a57      	ldr	r2, [pc, #348]	; (8005400 <HAL_DMA_IRQHandler+0x1c8>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d031      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a56      	ldr	r2, [pc, #344]	; (8005404 <HAL_DMA_IRQHandler+0x1cc>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d02c      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a54      	ldr	r2, [pc, #336]	; (8005408 <HAL_DMA_IRQHandler+0x1d0>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d027      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a53      	ldr	r2, [pc, #332]	; (800540c <HAL_DMA_IRQHandler+0x1d4>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d022      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a51      	ldr	r2, [pc, #324]	; (8005410 <HAL_DMA_IRQHandler+0x1d8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d01d      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a50      	ldr	r2, [pc, #320]	; (8005414 <HAL_DMA_IRQHandler+0x1dc>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d018      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a4e      	ldr	r2, [pc, #312]	; (8005418 <HAL_DMA_IRQHandler+0x1e0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d013      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a4d      	ldr	r2, [pc, #308]	; (800541c <HAL_DMA_IRQHandler+0x1e4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00e      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a4b      	ldr	r2, [pc, #300]	; (8005420 <HAL_DMA_IRQHandler+0x1e8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d009      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a4a      	ldr	r2, [pc, #296]	; (8005424 <HAL_DMA_IRQHandler+0x1ec>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d004      	beq.n	800530a <HAL_DMA_IRQHandler+0xd2>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a48      	ldr	r2, [pc, #288]	; (8005428 <HAL_DMA_IRQHandler+0x1f0>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d101      	bne.n	800530e <HAL_DMA_IRQHandler+0xd6>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_DMA_IRQHandler+0xd8>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 842b 	beq.w	8005b6c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	2208      	movs	r2, #8
 8005320:	409a      	lsls	r2, r3
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	f000 80a2 	beq.w	8005470 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2e      	ldr	r2, [pc, #184]	; (80053ec <HAL_DMA_IRQHandler+0x1b4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d04a      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a2d      	ldr	r2, [pc, #180]	; (80053f0 <HAL_DMA_IRQHandler+0x1b8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d045      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2b      	ldr	r2, [pc, #172]	; (80053f4 <HAL_DMA_IRQHandler+0x1bc>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d040      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a2a      	ldr	r2, [pc, #168]	; (80053f8 <HAL_DMA_IRQHandler+0x1c0>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d03b      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4a28      	ldr	r2, [pc, #160]	; (80053fc <HAL_DMA_IRQHandler+0x1c4>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d036      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a27      	ldr	r2, [pc, #156]	; (8005400 <HAL_DMA_IRQHandler+0x1c8>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d031      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a25      	ldr	r2, [pc, #148]	; (8005404 <HAL_DMA_IRQHandler+0x1cc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d02c      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4a24      	ldr	r2, [pc, #144]	; (8005408 <HAL_DMA_IRQHandler+0x1d0>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d027      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a22      	ldr	r2, [pc, #136]	; (800540c <HAL_DMA_IRQHandler+0x1d4>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d022      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a21      	ldr	r2, [pc, #132]	; (8005410 <HAL_DMA_IRQHandler+0x1d8>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d01d      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1f      	ldr	r2, [pc, #124]	; (8005414 <HAL_DMA_IRQHandler+0x1dc>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d018      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <HAL_DMA_IRQHandler+0x1e0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d013      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a1c      	ldr	r2, [pc, #112]	; (800541c <HAL_DMA_IRQHandler+0x1e4>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00e      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <HAL_DMA_IRQHandler+0x1e8>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d009      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a19      	ldr	r2, [pc, #100]	; (8005424 <HAL_DMA_IRQHandler+0x1ec>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d004      	beq.n	80053cc <HAL_DMA_IRQHandler+0x194>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a18      	ldr	r2, [pc, #96]	; (8005428 <HAL_DMA_IRQHandler+0x1f0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d12f      	bne.n	800542c <HAL_DMA_IRQHandler+0x1f4>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bf14      	ite	ne
 80053da:	2301      	movne	r3, #1
 80053dc:	2300      	moveq	r3, #0
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	e02e      	b.n	8005440 <HAL_DMA_IRQHandler+0x208>
 80053e2:	bf00      	nop
 80053e4:	24000000 	.word	0x24000000
 80053e8:	1b4e81b5 	.word	0x1b4e81b5
 80053ec:	40020010 	.word	0x40020010
 80053f0:	40020028 	.word	0x40020028
 80053f4:	40020040 	.word	0x40020040
 80053f8:	40020058 	.word	0x40020058
 80053fc:	40020070 	.word	0x40020070
 8005400:	40020088 	.word	0x40020088
 8005404:	400200a0 	.word	0x400200a0
 8005408:	400200b8 	.word	0x400200b8
 800540c:	40020410 	.word	0x40020410
 8005410:	40020428 	.word	0x40020428
 8005414:	40020440 	.word	0x40020440
 8005418:	40020458 	.word	0x40020458
 800541c:	40020470 	.word	0x40020470
 8005420:	40020488 	.word	0x40020488
 8005424:	400204a0 	.word	0x400204a0
 8005428:	400204b8 	.word	0x400204b8
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	bf14      	ite	ne
 800543a:	2301      	movne	r3, #1
 800543c:	2300      	moveq	r3, #0
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b00      	cmp	r3, #0
 8005442:	d015      	beq.n	8005470 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0204 	bic.w	r2, r2, #4
 8005452:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005458:	f003 031f 	and.w	r3, r3, #31
 800545c:	2208      	movs	r2, #8
 800545e:	409a      	lsls	r2, r3
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005468:	f043 0201 	orr.w	r2, r3, #1
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	69ba      	ldr	r2, [r7, #24]
 800547a:	fa22 f303 	lsr.w	r3, r2, r3
 800547e:	f003 0301 	and.w	r3, r3, #1
 8005482:	2b00      	cmp	r3, #0
 8005484:	d06e      	beq.n	8005564 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a69      	ldr	r2, [pc, #420]	; (8005630 <HAL_DMA_IRQHandler+0x3f8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d04a      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a67      	ldr	r2, [pc, #412]	; (8005634 <HAL_DMA_IRQHandler+0x3fc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d045      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a66      	ldr	r2, [pc, #408]	; (8005638 <HAL_DMA_IRQHandler+0x400>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d040      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a64      	ldr	r2, [pc, #400]	; (800563c <HAL_DMA_IRQHandler+0x404>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d03b      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a63      	ldr	r2, [pc, #396]	; (8005640 <HAL_DMA_IRQHandler+0x408>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d036      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a61      	ldr	r2, [pc, #388]	; (8005644 <HAL_DMA_IRQHandler+0x40c>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d031      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a60      	ldr	r2, [pc, #384]	; (8005648 <HAL_DMA_IRQHandler+0x410>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d02c      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a5e      	ldr	r2, [pc, #376]	; (800564c <HAL_DMA_IRQHandler+0x414>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d027      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a5d      	ldr	r2, [pc, #372]	; (8005650 <HAL_DMA_IRQHandler+0x418>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d022      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a5b      	ldr	r2, [pc, #364]	; (8005654 <HAL_DMA_IRQHandler+0x41c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01d      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a5a      	ldr	r2, [pc, #360]	; (8005658 <HAL_DMA_IRQHandler+0x420>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d018      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a58      	ldr	r2, [pc, #352]	; (800565c <HAL_DMA_IRQHandler+0x424>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a57      	ldr	r2, [pc, #348]	; (8005660 <HAL_DMA_IRQHandler+0x428>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00e      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a55      	ldr	r2, [pc, #340]	; (8005664 <HAL_DMA_IRQHandler+0x42c>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d009      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a54      	ldr	r2, [pc, #336]	; (8005668 <HAL_DMA_IRQHandler+0x430>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d004      	beq.n	8005526 <HAL_DMA_IRQHandler+0x2ee>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a52      	ldr	r2, [pc, #328]	; (800566c <HAL_DMA_IRQHandler+0x434>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d10a      	bne.n	800553c <HAL_DMA_IRQHandler+0x304>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005530:	2b00      	cmp	r3, #0
 8005532:	bf14      	ite	ne
 8005534:	2301      	movne	r3, #1
 8005536:	2300      	moveq	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	e003      	b.n	8005544 <HAL_DMA_IRQHandler+0x30c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2300      	movs	r3, #0
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00d      	beq.n	8005564 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554c:	f003 031f 	and.w	r3, r3, #31
 8005550:	2201      	movs	r2, #1
 8005552:	409a      	lsls	r2, r3
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800555c:	f043 0202 	orr.w	r2, r3, #2
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	2204      	movs	r2, #4
 800556e:	409a      	lsls	r2, r3
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 808f 	beq.w	8005698 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a2c      	ldr	r2, [pc, #176]	; (8005630 <HAL_DMA_IRQHandler+0x3f8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d04a      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a2a      	ldr	r2, [pc, #168]	; (8005634 <HAL_DMA_IRQHandler+0x3fc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d045      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a29      	ldr	r2, [pc, #164]	; (8005638 <HAL_DMA_IRQHandler+0x400>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d040      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a27      	ldr	r2, [pc, #156]	; (800563c <HAL_DMA_IRQHandler+0x404>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d03b      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a26      	ldr	r2, [pc, #152]	; (8005640 <HAL_DMA_IRQHandler+0x408>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d036      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a24      	ldr	r2, [pc, #144]	; (8005644 <HAL_DMA_IRQHandler+0x40c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d031      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a23      	ldr	r2, [pc, #140]	; (8005648 <HAL_DMA_IRQHandler+0x410>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d02c      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a21      	ldr	r2, [pc, #132]	; (800564c <HAL_DMA_IRQHandler+0x414>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d027      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a20      	ldr	r2, [pc, #128]	; (8005650 <HAL_DMA_IRQHandler+0x418>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d022      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <HAL_DMA_IRQHandler+0x41c>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01d      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a1d      	ldr	r2, [pc, #116]	; (8005658 <HAL_DMA_IRQHandler+0x420>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d018      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a1b      	ldr	r2, [pc, #108]	; (800565c <HAL_DMA_IRQHandler+0x424>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d013      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a1a      	ldr	r2, [pc, #104]	; (8005660 <HAL_DMA_IRQHandler+0x428>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d00e      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a18      	ldr	r2, [pc, #96]	; (8005664 <HAL_DMA_IRQHandler+0x42c>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d009      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a17      	ldr	r2, [pc, #92]	; (8005668 <HAL_DMA_IRQHandler+0x430>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_DMA_IRQHandler+0x3e2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a15      	ldr	r2, [pc, #84]	; (800566c <HAL_DMA_IRQHandler+0x434>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d12a      	bne.n	8005670 <HAL_DMA_IRQHandler+0x438>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf14      	ite	ne
 8005628:	2301      	movne	r3, #1
 800562a:	2300      	moveq	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	e023      	b.n	8005678 <HAL_DMA_IRQHandler+0x440>
 8005630:	40020010 	.word	0x40020010
 8005634:	40020028 	.word	0x40020028
 8005638:	40020040 	.word	0x40020040
 800563c:	40020058 	.word	0x40020058
 8005640:	40020070 	.word	0x40020070
 8005644:	40020088 	.word	0x40020088
 8005648:	400200a0 	.word	0x400200a0
 800564c:	400200b8 	.word	0x400200b8
 8005650:	40020410 	.word	0x40020410
 8005654:	40020428 	.word	0x40020428
 8005658:	40020440 	.word	0x40020440
 800565c:	40020458 	.word	0x40020458
 8005660:	40020470 	.word	0x40020470
 8005664:	40020488 	.word	0x40020488
 8005668:	400204a0 	.word	0x400204a0
 800566c:	400204b8 	.word	0x400204b8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2300      	movs	r3, #0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	2204      	movs	r2, #4
 8005686:	409a      	lsls	r2, r3
 8005688:	6a3b      	ldr	r3, [r7, #32]
 800568a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005690:	f043 0204 	orr.w	r2, r3, #4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	2210      	movs	r2, #16
 80056a2:	409a      	lsls	r2, r3
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	4013      	ands	r3, r2
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 80a6 	beq.w	80057fa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a85      	ldr	r2, [pc, #532]	; (80058c8 <HAL_DMA_IRQHandler+0x690>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d04a      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a83      	ldr	r2, [pc, #524]	; (80058cc <HAL_DMA_IRQHandler+0x694>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d045      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a82      	ldr	r2, [pc, #520]	; (80058d0 <HAL_DMA_IRQHandler+0x698>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d040      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a80      	ldr	r2, [pc, #512]	; (80058d4 <HAL_DMA_IRQHandler+0x69c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d03b      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a7f      	ldr	r2, [pc, #508]	; (80058d8 <HAL_DMA_IRQHandler+0x6a0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d036      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a7d      	ldr	r2, [pc, #500]	; (80058dc <HAL_DMA_IRQHandler+0x6a4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d031      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a7c      	ldr	r2, [pc, #496]	; (80058e0 <HAL_DMA_IRQHandler+0x6a8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d02c      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a7a      	ldr	r2, [pc, #488]	; (80058e4 <HAL_DMA_IRQHandler+0x6ac>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d027      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a79      	ldr	r2, [pc, #484]	; (80058e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d022      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a77      	ldr	r2, [pc, #476]	; (80058ec <HAL_DMA_IRQHandler+0x6b4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d01d      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a76      	ldr	r2, [pc, #472]	; (80058f0 <HAL_DMA_IRQHandler+0x6b8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d018      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a74      	ldr	r2, [pc, #464]	; (80058f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a73      	ldr	r2, [pc, #460]	; (80058f8 <HAL_DMA_IRQHandler+0x6c0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00e      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a71      	ldr	r2, [pc, #452]	; (80058fc <HAL_DMA_IRQHandler+0x6c4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a70      	ldr	r2, [pc, #448]	; (8005900 <HAL_DMA_IRQHandler+0x6c8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_DMA_IRQHandler+0x516>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a6e      	ldr	r2, [pc, #440]	; (8005904 <HAL_DMA_IRQHandler+0x6cc>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d10a      	bne.n	8005764 <HAL_DMA_IRQHandler+0x52c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf14      	ite	ne
 800575c:	2301      	movne	r3, #1
 800575e:	2300      	moveq	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	e009      	b.n	8005778 <HAL_DMA_IRQHandler+0x540>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf14      	ite	ne
 8005772:	2301      	movne	r3, #1
 8005774:	2300      	moveq	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d03e      	beq.n	80057fa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005780:	f003 031f 	and.w	r3, r3, #31
 8005784:	2210      	movs	r2, #16
 8005786:	409a      	lsls	r2, r3
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d018      	beq.n	80057cc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d108      	bne.n	80057ba <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d024      	beq.n	80057fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	4798      	blx	r3
 80057b8:	e01f      	b.n	80057fa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01b      	beq.n	80057fa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	4798      	blx	r3
 80057ca:	e016      	b.n	80057fa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d107      	bne.n	80057ea <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0208 	bic.w	r2, r2, #8
 80057e8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fe:	f003 031f 	and.w	r3, r3, #31
 8005802:	2220      	movs	r2, #32
 8005804:	409a      	lsls	r2, r3
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	4013      	ands	r3, r2
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 8110 	beq.w	8005a30 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a2c      	ldr	r2, [pc, #176]	; (80058c8 <HAL_DMA_IRQHandler+0x690>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d04a      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2b      	ldr	r2, [pc, #172]	; (80058cc <HAL_DMA_IRQHandler+0x694>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d045      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a29      	ldr	r2, [pc, #164]	; (80058d0 <HAL_DMA_IRQHandler+0x698>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d040      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a28      	ldr	r2, [pc, #160]	; (80058d4 <HAL_DMA_IRQHandler+0x69c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d03b      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a26      	ldr	r2, [pc, #152]	; (80058d8 <HAL_DMA_IRQHandler+0x6a0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d036      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a25      	ldr	r2, [pc, #148]	; (80058dc <HAL_DMA_IRQHandler+0x6a4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d031      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a23      	ldr	r2, [pc, #140]	; (80058e0 <HAL_DMA_IRQHandler+0x6a8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d02c      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a22      	ldr	r2, [pc, #136]	; (80058e4 <HAL_DMA_IRQHandler+0x6ac>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d027      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a20      	ldr	r2, [pc, #128]	; (80058e8 <HAL_DMA_IRQHandler+0x6b0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d022      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a1f      	ldr	r2, [pc, #124]	; (80058ec <HAL_DMA_IRQHandler+0x6b4>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d01d      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <HAL_DMA_IRQHandler+0x6b8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d018      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a1c      	ldr	r2, [pc, #112]	; (80058f4 <HAL_DMA_IRQHandler+0x6bc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d013      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1a      	ldr	r2, [pc, #104]	; (80058f8 <HAL_DMA_IRQHandler+0x6c0>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00e      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a19      	ldr	r2, [pc, #100]	; (80058fc <HAL_DMA_IRQHandler+0x6c4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d009      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a17      	ldr	r2, [pc, #92]	; (8005900 <HAL_DMA_IRQHandler+0x6c8>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d004      	beq.n	80058b0 <HAL_DMA_IRQHandler+0x678>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a16      	ldr	r2, [pc, #88]	; (8005904 <HAL_DMA_IRQHandler+0x6cc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d12b      	bne.n	8005908 <HAL_DMA_IRQHandler+0x6d0>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	e02a      	b.n	800591c <HAL_DMA_IRQHandler+0x6e4>
 80058c6:	bf00      	nop
 80058c8:	40020010 	.word	0x40020010
 80058cc:	40020028 	.word	0x40020028
 80058d0:	40020040 	.word	0x40020040
 80058d4:	40020058 	.word	0x40020058
 80058d8:	40020070 	.word	0x40020070
 80058dc:	40020088 	.word	0x40020088
 80058e0:	400200a0 	.word	0x400200a0
 80058e4:	400200b8 	.word	0x400200b8
 80058e8:	40020410 	.word	0x40020410
 80058ec:	40020428 	.word	0x40020428
 80058f0:	40020440 	.word	0x40020440
 80058f4:	40020458 	.word	0x40020458
 80058f8:	40020470 	.word	0x40020470
 80058fc:	40020488 	.word	0x40020488
 8005900:	400204a0 	.word	0x400204a0
 8005904:	400204b8 	.word	0x400204b8
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	bf14      	ite	ne
 8005916:	2301      	movne	r3, #1
 8005918:	2300      	moveq	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 8087 	beq.w	8005a30 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005926:	f003 031f 	and.w	r3, r3, #31
 800592a:	2220      	movs	r2, #32
 800592c:	409a      	lsls	r2, r3
 800592e:	6a3b      	ldr	r3, [r7, #32]
 8005930:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b04      	cmp	r3, #4
 800593c:	d139      	bne.n	80059b2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f022 0216 	bic.w	r2, r2, #22
 800594c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695a      	ldr	r2, [r3, #20]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800595c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	2b00      	cmp	r3, #0
 8005964:	d103      	bne.n	800596e <HAL_DMA_IRQHandler+0x736>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800596a:	2b00      	cmp	r3, #0
 800596c:	d007      	beq.n	800597e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0208 	bic.w	r2, r2, #8
 800597c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005982:	f003 031f 	and.w	r3, r3, #31
 8005986:	223f      	movs	r2, #63	; 0x3f
 8005988:	409a      	lsls	r2, r3
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f000 834a 	beq.w	800603c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	4798      	blx	r3
          }
          return;
 80059b0:	e344      	b.n	800603c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d018      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d108      	bne.n	80059e0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d02c      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	4798      	blx	r3
 80059de:	e027      	b.n	8005a30 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d023      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	4798      	blx	r3
 80059f0:	e01e      	b.n	8005a30 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10f      	bne.n	8005a20 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0210 	bic.w	r2, r2, #16
 8005a0e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2201      	movs	r2, #1
 8005a14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 8306 	beq.w	8006046 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 8088 	beq.w	8005b58 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a7a      	ldr	r2, [pc, #488]	; (8005c40 <HAL_DMA_IRQHandler+0xa08>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d04a      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a79      	ldr	r2, [pc, #484]	; (8005c44 <HAL_DMA_IRQHandler+0xa0c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d045      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a77      	ldr	r2, [pc, #476]	; (8005c48 <HAL_DMA_IRQHandler+0xa10>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d040      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a76      	ldr	r2, [pc, #472]	; (8005c4c <HAL_DMA_IRQHandler+0xa14>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d03b      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a74      	ldr	r2, [pc, #464]	; (8005c50 <HAL_DMA_IRQHandler+0xa18>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d036      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a73      	ldr	r2, [pc, #460]	; (8005c54 <HAL_DMA_IRQHandler+0xa1c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d031      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a71      	ldr	r2, [pc, #452]	; (8005c58 <HAL_DMA_IRQHandler+0xa20>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d02c      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a70      	ldr	r2, [pc, #448]	; (8005c5c <HAL_DMA_IRQHandler+0xa24>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d027      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a6e      	ldr	r2, [pc, #440]	; (8005c60 <HAL_DMA_IRQHandler+0xa28>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d022      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a6d      	ldr	r2, [pc, #436]	; (8005c64 <HAL_DMA_IRQHandler+0xa2c>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d01d      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a6b      	ldr	r2, [pc, #428]	; (8005c68 <HAL_DMA_IRQHandler+0xa30>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d018      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a6a      	ldr	r2, [pc, #424]	; (8005c6c <HAL_DMA_IRQHandler+0xa34>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d013      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a68      	ldr	r2, [pc, #416]	; (8005c70 <HAL_DMA_IRQHandler+0xa38>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d00e      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a67      	ldr	r2, [pc, #412]	; (8005c74 <HAL_DMA_IRQHandler+0xa3c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d009      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a65      	ldr	r2, [pc, #404]	; (8005c78 <HAL_DMA_IRQHandler+0xa40>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d004      	beq.n	8005af0 <HAL_DMA_IRQHandler+0x8b8>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a64      	ldr	r2, [pc, #400]	; (8005c7c <HAL_DMA_IRQHandler+0xa44>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d108      	bne.n	8005b02 <HAL_DMA_IRQHandler+0x8ca>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 0201 	bic.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e007      	b.n	8005b12 <HAL_DMA_IRQHandler+0x8da>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f022 0201 	bic.w	r2, r2, #1
 8005b10:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3301      	adds	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]
 8005b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d307      	bcc.n	8005b2e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f2      	bne.n	8005b12 <HAL_DMA_IRQHandler+0x8da>
 8005b2c:	e000      	b.n	8005b30 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005b2e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d004      	beq.n	8005b48 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2203      	movs	r2, #3
 8005b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005b46:	e003      	b.n	8005b50 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 8272 	beq.w	8006046 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
 8005b6a:	e26c      	b.n	8006046 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a43      	ldr	r2, [pc, #268]	; (8005c80 <HAL_DMA_IRQHandler+0xa48>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d022      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x984>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a42      	ldr	r2, [pc, #264]	; (8005c84 <HAL_DMA_IRQHandler+0xa4c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d01d      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x984>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a40      	ldr	r2, [pc, #256]	; (8005c88 <HAL_DMA_IRQHandler+0xa50>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d018      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x984>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a3f      	ldr	r2, [pc, #252]	; (8005c8c <HAL_DMA_IRQHandler+0xa54>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d013      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x984>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a3d      	ldr	r2, [pc, #244]	; (8005c90 <HAL_DMA_IRQHandler+0xa58>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d00e      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x984>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a3c      	ldr	r2, [pc, #240]	; (8005c94 <HAL_DMA_IRQHandler+0xa5c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d009      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x984>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a3a      	ldr	r2, [pc, #232]	; (8005c98 <HAL_DMA_IRQHandler+0xa60>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d004      	beq.n	8005bbc <HAL_DMA_IRQHandler+0x984>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a39      	ldr	r2, [pc, #228]	; (8005c9c <HAL_DMA_IRQHandler+0xa64>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d101      	bne.n	8005bc0 <HAL_DMA_IRQHandler+0x988>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e000      	b.n	8005bc2 <HAL_DMA_IRQHandler+0x98a>
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 823f 	beq.w	8006046 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd4:	f003 031f 	and.w	r3, r3, #31
 8005bd8:	2204      	movs	r2, #4
 8005bda:	409a      	lsls	r2, r3
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	4013      	ands	r3, r2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80cd 	beq.w	8005d80 <HAL_DMA_IRQHandler+0xb48>
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 80c7 	beq.w	8005d80 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf6:	f003 031f 	and.w	r3, r3, #31
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	409a      	lsls	r2, r3
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d049      	beq.n	8005ca0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8210 	beq.w	8006040 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c28:	e20a      	b.n	8006040 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	f000 8206 	beq.w	8006040 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c3c:	e200      	b.n	8006040 <HAL_DMA_IRQHandler+0xe08>
 8005c3e:	bf00      	nop
 8005c40:	40020010 	.word	0x40020010
 8005c44:	40020028 	.word	0x40020028
 8005c48:	40020040 	.word	0x40020040
 8005c4c:	40020058 	.word	0x40020058
 8005c50:	40020070 	.word	0x40020070
 8005c54:	40020088 	.word	0x40020088
 8005c58:	400200a0 	.word	0x400200a0
 8005c5c:	400200b8 	.word	0x400200b8
 8005c60:	40020410 	.word	0x40020410
 8005c64:	40020428 	.word	0x40020428
 8005c68:	40020440 	.word	0x40020440
 8005c6c:	40020458 	.word	0x40020458
 8005c70:	40020470 	.word	0x40020470
 8005c74:	40020488 	.word	0x40020488
 8005c78:	400204a0 	.word	0x400204a0
 8005c7c:	400204b8 	.word	0x400204b8
 8005c80:	58025408 	.word	0x58025408
 8005c84:	5802541c 	.word	0x5802541c
 8005c88:	58025430 	.word	0x58025430
 8005c8c:	58025444 	.word	0x58025444
 8005c90:	58025458 	.word	0x58025458
 8005c94:	5802546c 	.word	0x5802546c
 8005c98:	58025480 	.word	0x58025480
 8005c9c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f003 0320 	and.w	r3, r3, #32
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d160      	bne.n	8005d6c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a7f      	ldr	r2, [pc, #508]	; (8005eac <HAL_DMA_IRQHandler+0xc74>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d04a      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a7d      	ldr	r2, [pc, #500]	; (8005eb0 <HAL_DMA_IRQHandler+0xc78>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d045      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a7c      	ldr	r2, [pc, #496]	; (8005eb4 <HAL_DMA_IRQHandler+0xc7c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d040      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a7a      	ldr	r2, [pc, #488]	; (8005eb8 <HAL_DMA_IRQHandler+0xc80>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d03b      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a79      	ldr	r2, [pc, #484]	; (8005ebc <HAL_DMA_IRQHandler+0xc84>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d036      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a77      	ldr	r2, [pc, #476]	; (8005ec0 <HAL_DMA_IRQHandler+0xc88>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d031      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a76      	ldr	r2, [pc, #472]	; (8005ec4 <HAL_DMA_IRQHandler+0xc8c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d02c      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a74      	ldr	r2, [pc, #464]	; (8005ec8 <HAL_DMA_IRQHandler+0xc90>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d027      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a73      	ldr	r2, [pc, #460]	; (8005ecc <HAL_DMA_IRQHandler+0xc94>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d022      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a71      	ldr	r2, [pc, #452]	; (8005ed0 <HAL_DMA_IRQHandler+0xc98>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01d      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a70      	ldr	r2, [pc, #448]	; (8005ed4 <HAL_DMA_IRQHandler+0xc9c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d018      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a6e      	ldr	r2, [pc, #440]	; (8005ed8 <HAL_DMA_IRQHandler+0xca0>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a6d      	ldr	r2, [pc, #436]	; (8005edc <HAL_DMA_IRQHandler+0xca4>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00e      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a6b      	ldr	r2, [pc, #428]	; (8005ee0 <HAL_DMA_IRQHandler+0xca8>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d009      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a6a      	ldr	r2, [pc, #424]	; (8005ee4 <HAL_DMA_IRQHandler+0xcac>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d004      	beq.n	8005d4a <HAL_DMA_IRQHandler+0xb12>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a68      	ldr	r2, [pc, #416]	; (8005ee8 <HAL_DMA_IRQHandler+0xcb0>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d108      	bne.n	8005d5c <HAL_DMA_IRQHandler+0xb24>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f022 0208 	bic.w	r2, r2, #8
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	e007      	b.n	8005d6c <HAL_DMA_IRQHandler+0xb34>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0204 	bic.w	r2, r2, #4
 8005d6a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8165 	beq.w	8006040 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d7e:	e15f      	b.n	8006040 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	2202      	movs	r2, #2
 8005d8a:	409a      	lsls	r2, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 80c5 	beq.w	8005f20 <HAL_DMA_IRQHandler+0xce8>
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f003 0302 	and.w	r3, r3, #2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f000 80bf 	beq.w	8005f20 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	2202      	movs	r2, #2
 8005dac:	409a      	lsls	r2, r3
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d018      	beq.n	8005dee <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 813a 	beq.w	8006044 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dd8:	e134      	b.n	8006044 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8130 	beq.w	8006044 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dec:	e12a      	b.n	8006044 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f003 0320 	and.w	r3, r3, #32
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f040 8089 	bne.w	8005f0c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a2b      	ldr	r2, [pc, #172]	; (8005eac <HAL_DMA_IRQHandler+0xc74>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d04a      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a29      	ldr	r2, [pc, #164]	; (8005eb0 <HAL_DMA_IRQHandler+0xc78>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d045      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a28      	ldr	r2, [pc, #160]	; (8005eb4 <HAL_DMA_IRQHandler+0xc7c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d040      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a26      	ldr	r2, [pc, #152]	; (8005eb8 <HAL_DMA_IRQHandler+0xc80>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d03b      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a25      	ldr	r2, [pc, #148]	; (8005ebc <HAL_DMA_IRQHandler+0xc84>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d036      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a23      	ldr	r2, [pc, #140]	; (8005ec0 <HAL_DMA_IRQHandler+0xc88>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d031      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a22      	ldr	r2, [pc, #136]	; (8005ec4 <HAL_DMA_IRQHandler+0xc8c>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d02c      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a20      	ldr	r2, [pc, #128]	; (8005ec8 <HAL_DMA_IRQHandler+0xc90>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d027      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	; (8005ecc <HAL_DMA_IRQHandler+0xc94>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d022      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1d      	ldr	r2, [pc, #116]	; (8005ed0 <HAL_DMA_IRQHandler+0xc98>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d01d      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1c      	ldr	r2, [pc, #112]	; (8005ed4 <HAL_DMA_IRQHandler+0xc9c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d018      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1a      	ldr	r2, [pc, #104]	; (8005ed8 <HAL_DMA_IRQHandler+0xca0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a19      	ldr	r2, [pc, #100]	; (8005edc <HAL_DMA_IRQHandler+0xca4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00e      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a17      	ldr	r2, [pc, #92]	; (8005ee0 <HAL_DMA_IRQHandler+0xca8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d009      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a16      	ldr	r2, [pc, #88]	; (8005ee4 <HAL_DMA_IRQHandler+0xcac>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d004      	beq.n	8005e9a <HAL_DMA_IRQHandler+0xc62>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a14      	ldr	r2, [pc, #80]	; (8005ee8 <HAL_DMA_IRQHandler+0xcb0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d128      	bne.n	8005eec <HAL_DMA_IRQHandler+0xcb4>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f022 0214 	bic.w	r2, r2, #20
 8005ea8:	601a      	str	r2, [r3, #0]
 8005eaa:	e027      	b.n	8005efc <HAL_DMA_IRQHandler+0xcc4>
 8005eac:	40020010 	.word	0x40020010
 8005eb0:	40020028 	.word	0x40020028
 8005eb4:	40020040 	.word	0x40020040
 8005eb8:	40020058 	.word	0x40020058
 8005ebc:	40020070 	.word	0x40020070
 8005ec0:	40020088 	.word	0x40020088
 8005ec4:	400200a0 	.word	0x400200a0
 8005ec8:	400200b8 	.word	0x400200b8
 8005ecc:	40020410 	.word	0x40020410
 8005ed0:	40020428 	.word	0x40020428
 8005ed4:	40020440 	.word	0x40020440
 8005ed8:	40020458 	.word	0x40020458
 8005edc:	40020470 	.word	0x40020470
 8005ee0:	40020488 	.word	0x40020488
 8005ee4:	400204a0 	.word	0x400204a0
 8005ee8:	400204b8 	.word	0x400204b8
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 020a 	bic.w	r2, r2, #10
 8005efa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	f000 8097 	beq.w	8006044 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f1e:	e091      	b.n	8006044 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f24:	f003 031f 	and.w	r3, r3, #31
 8005f28:	2208      	movs	r2, #8
 8005f2a:	409a      	lsls	r2, r3
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8088 	beq.w	8006046 <HAL_DMA_IRQHandler+0xe0e>
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	f003 0308 	and.w	r3, r3, #8
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8082 	beq.w	8006046 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a41      	ldr	r2, [pc, #260]	; (800604c <HAL_DMA_IRQHandler+0xe14>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d04a      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a3f      	ldr	r2, [pc, #252]	; (8006050 <HAL_DMA_IRQHandler+0xe18>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d045      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a3e      	ldr	r2, [pc, #248]	; (8006054 <HAL_DMA_IRQHandler+0xe1c>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d040      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a3c      	ldr	r2, [pc, #240]	; (8006058 <HAL_DMA_IRQHandler+0xe20>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d03b      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a3b      	ldr	r2, [pc, #236]	; (800605c <HAL_DMA_IRQHandler+0xe24>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d036      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a39      	ldr	r2, [pc, #228]	; (8006060 <HAL_DMA_IRQHandler+0xe28>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d031      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a38      	ldr	r2, [pc, #224]	; (8006064 <HAL_DMA_IRQHandler+0xe2c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d02c      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a36      	ldr	r2, [pc, #216]	; (8006068 <HAL_DMA_IRQHandler+0xe30>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d027      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a35      	ldr	r2, [pc, #212]	; (800606c <HAL_DMA_IRQHandler+0xe34>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d022      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a33      	ldr	r2, [pc, #204]	; (8006070 <HAL_DMA_IRQHandler+0xe38>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d01d      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a32      	ldr	r2, [pc, #200]	; (8006074 <HAL_DMA_IRQHandler+0xe3c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d018      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a30      	ldr	r2, [pc, #192]	; (8006078 <HAL_DMA_IRQHandler+0xe40>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d013      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a2f      	ldr	r2, [pc, #188]	; (800607c <HAL_DMA_IRQHandler+0xe44>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d00e      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2d      	ldr	r2, [pc, #180]	; (8006080 <HAL_DMA_IRQHandler+0xe48>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d009      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2c      	ldr	r2, [pc, #176]	; (8006084 <HAL_DMA_IRQHandler+0xe4c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d004      	beq.n	8005fe2 <HAL_DMA_IRQHandler+0xdaa>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2a      	ldr	r2, [pc, #168]	; (8006088 <HAL_DMA_IRQHandler+0xe50>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d108      	bne.n	8005ff4 <HAL_DMA_IRQHandler+0xdbc>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 021c 	bic.w	r2, r2, #28
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	e007      	b.n	8006004 <HAL_DMA_IRQHandler+0xdcc>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 020e 	bic.w	r2, r2, #14
 8006002:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	2201      	movs	r2, #1
 800600e:	409a      	lsls	r2, r3
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800602e:	2b00      	cmp	r3, #0
 8006030:	d009      	beq.n	8006046 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
 800603a:	e004      	b.n	8006046 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800603c:	bf00      	nop
 800603e:	e002      	b.n	8006046 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006040:	bf00      	nop
 8006042:	e000      	b.n	8006046 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006044:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006046:	3728      	adds	r7, #40	; 0x28
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	40020010 	.word	0x40020010
 8006050:	40020028 	.word	0x40020028
 8006054:	40020040 	.word	0x40020040
 8006058:	40020058 	.word	0x40020058
 800605c:	40020070 	.word	0x40020070
 8006060:	40020088 	.word	0x40020088
 8006064:	400200a0 	.word	0x400200a0
 8006068:	400200b8 	.word	0x400200b8
 800606c:	40020410 	.word	0x40020410
 8006070:	40020428 	.word	0x40020428
 8006074:	40020440 	.word	0x40020440
 8006078:	40020458 	.word	0x40020458
 800607c:	40020470 	.word	0x40020470
 8006080:	40020488 	.word	0x40020488
 8006084:	400204a0 	.word	0x400204a0
 8006088:	400204b8 	.word	0x400204b8

0800608c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800609e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a7f      	ldr	r2, [pc, #508]	; (80062a8 <DMA_SetConfig+0x21c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d072      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a7d      	ldr	r2, [pc, #500]	; (80062ac <DMA_SetConfig+0x220>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d06d      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a7c      	ldr	r2, [pc, #496]	; (80062b0 <DMA_SetConfig+0x224>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d068      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a7a      	ldr	r2, [pc, #488]	; (80062b4 <DMA_SetConfig+0x228>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d063      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a79      	ldr	r2, [pc, #484]	; (80062b8 <DMA_SetConfig+0x22c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d05e      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a77      	ldr	r2, [pc, #476]	; (80062bc <DMA_SetConfig+0x230>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d059      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a76      	ldr	r2, [pc, #472]	; (80062c0 <DMA_SetConfig+0x234>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d054      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a74      	ldr	r2, [pc, #464]	; (80062c4 <DMA_SetConfig+0x238>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d04f      	beq.n	8006196 <DMA_SetConfig+0x10a>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a73      	ldr	r2, [pc, #460]	; (80062c8 <DMA_SetConfig+0x23c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d04a      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a71      	ldr	r2, [pc, #452]	; (80062cc <DMA_SetConfig+0x240>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d045      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a70      	ldr	r2, [pc, #448]	; (80062d0 <DMA_SetConfig+0x244>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d040      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a6e      	ldr	r2, [pc, #440]	; (80062d4 <DMA_SetConfig+0x248>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d03b      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a6d      	ldr	r2, [pc, #436]	; (80062d8 <DMA_SetConfig+0x24c>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d036      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a6b      	ldr	r2, [pc, #428]	; (80062dc <DMA_SetConfig+0x250>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d031      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a6a      	ldr	r2, [pc, #424]	; (80062e0 <DMA_SetConfig+0x254>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d02c      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a68      	ldr	r2, [pc, #416]	; (80062e4 <DMA_SetConfig+0x258>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d027      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a67      	ldr	r2, [pc, #412]	; (80062e8 <DMA_SetConfig+0x25c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d022      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a65      	ldr	r2, [pc, #404]	; (80062ec <DMA_SetConfig+0x260>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d01d      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a64      	ldr	r2, [pc, #400]	; (80062f0 <DMA_SetConfig+0x264>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d018      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a62      	ldr	r2, [pc, #392]	; (80062f4 <DMA_SetConfig+0x268>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d013      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a61      	ldr	r2, [pc, #388]	; (80062f8 <DMA_SetConfig+0x26c>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d00e      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a5f      	ldr	r2, [pc, #380]	; (80062fc <DMA_SetConfig+0x270>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d009      	beq.n	8006196 <DMA_SetConfig+0x10a>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a5e      	ldr	r2, [pc, #376]	; (8006300 <DMA_SetConfig+0x274>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d004      	beq.n	8006196 <DMA_SetConfig+0x10a>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a5c      	ldr	r2, [pc, #368]	; (8006304 <DMA_SetConfig+0x278>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d101      	bne.n	800619a <DMA_SetConfig+0x10e>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <DMA_SetConfig+0x110>
 800619a:	2300      	movs	r3, #0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00d      	beq.n	80061bc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80061a8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d004      	beq.n	80061bc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80061ba:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a39      	ldr	r2, [pc, #228]	; (80062a8 <DMA_SetConfig+0x21c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d04a      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a38      	ldr	r2, [pc, #224]	; (80062ac <DMA_SetConfig+0x220>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d045      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a36      	ldr	r2, [pc, #216]	; (80062b0 <DMA_SetConfig+0x224>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d040      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a35      	ldr	r2, [pc, #212]	; (80062b4 <DMA_SetConfig+0x228>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d03b      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a33      	ldr	r2, [pc, #204]	; (80062b8 <DMA_SetConfig+0x22c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d036      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a32      	ldr	r2, [pc, #200]	; (80062bc <DMA_SetConfig+0x230>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d031      	beq.n	800625c <DMA_SetConfig+0x1d0>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a30      	ldr	r2, [pc, #192]	; (80062c0 <DMA_SetConfig+0x234>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d02c      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a2f      	ldr	r2, [pc, #188]	; (80062c4 <DMA_SetConfig+0x238>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d027      	beq.n	800625c <DMA_SetConfig+0x1d0>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a2d      	ldr	r2, [pc, #180]	; (80062c8 <DMA_SetConfig+0x23c>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d022      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a2c      	ldr	r2, [pc, #176]	; (80062cc <DMA_SetConfig+0x240>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d01d      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a2a      	ldr	r2, [pc, #168]	; (80062d0 <DMA_SetConfig+0x244>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d018      	beq.n	800625c <DMA_SetConfig+0x1d0>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a29      	ldr	r2, [pc, #164]	; (80062d4 <DMA_SetConfig+0x248>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <DMA_SetConfig+0x24c>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00e      	beq.n	800625c <DMA_SetConfig+0x1d0>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a26      	ldr	r2, [pc, #152]	; (80062dc <DMA_SetConfig+0x250>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d009      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a24      	ldr	r2, [pc, #144]	; (80062e0 <DMA_SetConfig+0x254>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <DMA_SetConfig+0x1d0>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a23      	ldr	r2, [pc, #140]	; (80062e4 <DMA_SetConfig+0x258>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d101      	bne.n	8006260 <DMA_SetConfig+0x1d4>
 800625c:	2301      	movs	r3, #1
 800625e:	e000      	b.n	8006262 <DMA_SetConfig+0x1d6>
 8006260:	2300      	movs	r3, #0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d059      	beq.n	800631a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800626a:	f003 031f 	and.w	r3, r3, #31
 800626e:	223f      	movs	r2, #63	; 0x3f
 8006270:	409a      	lsls	r2, r3
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681a      	ldr	r2, [r3, #0]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006284:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b40      	cmp	r3, #64	; 0x40
 8006294:	d138      	bne.n	8006308 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68ba      	ldr	r2, [r7, #8]
 80062a4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80062a6:	e086      	b.n	80063b6 <DMA_SetConfig+0x32a>
 80062a8:	40020010 	.word	0x40020010
 80062ac:	40020028 	.word	0x40020028
 80062b0:	40020040 	.word	0x40020040
 80062b4:	40020058 	.word	0x40020058
 80062b8:	40020070 	.word	0x40020070
 80062bc:	40020088 	.word	0x40020088
 80062c0:	400200a0 	.word	0x400200a0
 80062c4:	400200b8 	.word	0x400200b8
 80062c8:	40020410 	.word	0x40020410
 80062cc:	40020428 	.word	0x40020428
 80062d0:	40020440 	.word	0x40020440
 80062d4:	40020458 	.word	0x40020458
 80062d8:	40020470 	.word	0x40020470
 80062dc:	40020488 	.word	0x40020488
 80062e0:	400204a0 	.word	0x400204a0
 80062e4:	400204b8 	.word	0x400204b8
 80062e8:	58025408 	.word	0x58025408
 80062ec:	5802541c 	.word	0x5802541c
 80062f0:	58025430 	.word	0x58025430
 80062f4:	58025444 	.word	0x58025444
 80062f8:	58025458 	.word	0x58025458
 80062fc:	5802546c 	.word	0x5802546c
 8006300:	58025480 	.word	0x58025480
 8006304:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68ba      	ldr	r2, [r7, #8]
 800630e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	60da      	str	r2, [r3, #12]
}
 8006318:	e04d      	b.n	80063b6 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a29      	ldr	r2, [pc, #164]	; (80063c4 <DMA_SetConfig+0x338>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d022      	beq.n	800636a <DMA_SetConfig+0x2de>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a27      	ldr	r2, [pc, #156]	; (80063c8 <DMA_SetConfig+0x33c>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d01d      	beq.n	800636a <DMA_SetConfig+0x2de>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a26      	ldr	r2, [pc, #152]	; (80063cc <DMA_SetConfig+0x340>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d018      	beq.n	800636a <DMA_SetConfig+0x2de>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a24      	ldr	r2, [pc, #144]	; (80063d0 <DMA_SetConfig+0x344>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <DMA_SetConfig+0x2de>
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a23      	ldr	r2, [pc, #140]	; (80063d4 <DMA_SetConfig+0x348>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00e      	beq.n	800636a <DMA_SetConfig+0x2de>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a21      	ldr	r2, [pc, #132]	; (80063d8 <DMA_SetConfig+0x34c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d009      	beq.n	800636a <DMA_SetConfig+0x2de>
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a20      	ldr	r2, [pc, #128]	; (80063dc <DMA_SetConfig+0x350>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d004      	beq.n	800636a <DMA_SetConfig+0x2de>
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a1e      	ldr	r2, [pc, #120]	; (80063e0 <DMA_SetConfig+0x354>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d101      	bne.n	800636e <DMA_SetConfig+0x2e2>
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <DMA_SetConfig+0x2e4>
 800636e:	2300      	movs	r3, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d020      	beq.n	80063b6 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006378:	f003 031f 	and.w	r3, r3, #31
 800637c:	2201      	movs	r2, #1
 800637e:	409a      	lsls	r2, r3
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	2b40      	cmp	r3, #64	; 0x40
 8006392:	d108      	bne.n	80063a6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68ba      	ldr	r2, [r7, #8]
 80063a2:	60da      	str	r2, [r3, #12]
}
 80063a4:	e007      	b.n	80063b6 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	60da      	str	r2, [r3, #12]
}
 80063b6:	bf00      	nop
 80063b8:	371c      	adds	r7, #28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	58025408 	.word	0x58025408
 80063c8:	5802541c 	.word	0x5802541c
 80063cc:	58025430 	.word	0x58025430
 80063d0:	58025444 	.word	0x58025444
 80063d4:	58025458 	.word	0x58025458
 80063d8:	5802546c 	.word	0x5802546c
 80063dc:	58025480 	.word	0x58025480
 80063e0:	58025494 	.word	0x58025494

080063e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a42      	ldr	r2, [pc, #264]	; (80064fc <DMA_CalcBaseAndBitshift+0x118>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d04a      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a41      	ldr	r2, [pc, #260]	; (8006500 <DMA_CalcBaseAndBitshift+0x11c>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d045      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a3f      	ldr	r2, [pc, #252]	; (8006504 <DMA_CalcBaseAndBitshift+0x120>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d040      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a3e      	ldr	r2, [pc, #248]	; (8006508 <DMA_CalcBaseAndBitshift+0x124>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d03b      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a3c      	ldr	r2, [pc, #240]	; (800650c <DMA_CalcBaseAndBitshift+0x128>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d036      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a3b      	ldr	r2, [pc, #236]	; (8006510 <DMA_CalcBaseAndBitshift+0x12c>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d031      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a39      	ldr	r2, [pc, #228]	; (8006514 <DMA_CalcBaseAndBitshift+0x130>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d02c      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a38      	ldr	r2, [pc, #224]	; (8006518 <DMA_CalcBaseAndBitshift+0x134>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d027      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a36      	ldr	r2, [pc, #216]	; (800651c <DMA_CalcBaseAndBitshift+0x138>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d022      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a35      	ldr	r2, [pc, #212]	; (8006520 <DMA_CalcBaseAndBitshift+0x13c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d01d      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a33      	ldr	r2, [pc, #204]	; (8006524 <DMA_CalcBaseAndBitshift+0x140>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d018      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a32      	ldr	r2, [pc, #200]	; (8006528 <DMA_CalcBaseAndBitshift+0x144>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a30      	ldr	r2, [pc, #192]	; (800652c <DMA_CalcBaseAndBitshift+0x148>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d00e      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a2f      	ldr	r2, [pc, #188]	; (8006530 <DMA_CalcBaseAndBitshift+0x14c>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d009      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2d      	ldr	r2, [pc, #180]	; (8006534 <DMA_CalcBaseAndBitshift+0x150>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d004      	beq.n	800648c <DMA_CalcBaseAndBitshift+0xa8>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2c      	ldr	r2, [pc, #176]	; (8006538 <DMA_CalcBaseAndBitshift+0x154>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d101      	bne.n	8006490 <DMA_CalcBaseAndBitshift+0xac>
 800648c:	2301      	movs	r3, #1
 800648e:	e000      	b.n	8006492 <DMA_CalcBaseAndBitshift+0xae>
 8006490:	2300      	movs	r3, #0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d024      	beq.n	80064e0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	b2db      	uxtb	r3, r3
 800649c:	3b10      	subs	r3, #16
 800649e:	4a27      	ldr	r2, [pc, #156]	; (800653c <DMA_CalcBaseAndBitshift+0x158>)
 80064a0:	fba2 2303 	umull	r2, r3, r2, r3
 80064a4:	091b      	lsrs	r3, r3, #4
 80064a6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	4a24      	ldr	r2, [pc, #144]	; (8006540 <DMA_CalcBaseAndBitshift+0x15c>)
 80064b0:	5cd3      	ldrb	r3, [r2, r3]
 80064b2:	461a      	mov	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d908      	bls.n	80064d0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	461a      	mov	r2, r3
 80064c4:	4b1f      	ldr	r3, [pc, #124]	; (8006544 <DMA_CalcBaseAndBitshift+0x160>)
 80064c6:	4013      	ands	r3, r2
 80064c8:	1d1a      	adds	r2, r3, #4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	659a      	str	r2, [r3, #88]	; 0x58
 80064ce:	e00d      	b.n	80064ec <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	461a      	mov	r2, r3
 80064d6:	4b1b      	ldr	r3, [pc, #108]	; (8006544 <DMA_CalcBaseAndBitshift+0x160>)
 80064d8:	4013      	ands	r3, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6593      	str	r3, [r2, #88]	; 0x58
 80064de:	e005      	b.n	80064ec <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	40020010 	.word	0x40020010
 8006500:	40020028 	.word	0x40020028
 8006504:	40020040 	.word	0x40020040
 8006508:	40020058 	.word	0x40020058
 800650c:	40020070 	.word	0x40020070
 8006510:	40020088 	.word	0x40020088
 8006514:	400200a0 	.word	0x400200a0
 8006518:	400200b8 	.word	0x400200b8
 800651c:	40020410 	.word	0x40020410
 8006520:	40020428 	.word	0x40020428
 8006524:	40020440 	.word	0x40020440
 8006528:	40020458 	.word	0x40020458
 800652c:	40020470 	.word	0x40020470
 8006530:	40020488 	.word	0x40020488
 8006534:	400204a0 	.word	0x400204a0
 8006538:	400204b8 	.word	0x400204b8
 800653c:	aaaaaaab 	.word	0xaaaaaaab
 8006540:	0800d21c 	.word	0x0800d21c
 8006544:	fffffc00 	.word	0xfffffc00

08006548 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d120      	bne.n	800659e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006560:	2b03      	cmp	r3, #3
 8006562:	d858      	bhi.n	8006616 <DMA_CheckFifoParam+0xce>
 8006564:	a201      	add	r2, pc, #4	; (adr r2, 800656c <DMA_CheckFifoParam+0x24>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	0800657d 	.word	0x0800657d
 8006570:	0800658f 	.word	0x0800658f
 8006574:	0800657d 	.word	0x0800657d
 8006578:	08006617 	.word	0x08006617
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006580:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d048      	beq.n	800661a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800658c:	e045      	b.n	800661a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006592:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006596:	d142      	bne.n	800661e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800659c:	e03f      	b.n	800661e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065a6:	d123      	bne.n	80065f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	2b03      	cmp	r3, #3
 80065ae:	d838      	bhi.n	8006622 <DMA_CheckFifoParam+0xda>
 80065b0:	a201      	add	r2, pc, #4	; (adr r2, 80065b8 <DMA_CheckFifoParam+0x70>)
 80065b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b6:	bf00      	nop
 80065b8:	080065c9 	.word	0x080065c9
 80065bc:	080065cf 	.word	0x080065cf
 80065c0:	080065c9 	.word	0x080065c9
 80065c4:	080065e1 	.word	0x080065e1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	73fb      	strb	r3, [r7, #15]
        break;
 80065cc:	e030      	b.n	8006630 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d025      	beq.n	8006626 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065de:	e022      	b.n	8006626 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065e8:	d11f      	bne.n	800662a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80065ee:	e01c      	b.n	800662a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d902      	bls.n	80065fe <DMA_CheckFifoParam+0xb6>
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d003      	beq.n	8006604 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80065fc:	e018      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	73fb      	strb	r3, [r7, #15]
        break;
 8006602:	e015      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00e      	beq.n	800662e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	73fb      	strb	r3, [r7, #15]
    break;
 8006614:	e00b      	b.n	800662e <DMA_CheckFifoParam+0xe6>
        break;
 8006616:	bf00      	nop
 8006618:	e00a      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        break;
 800661a:	bf00      	nop
 800661c:	e008      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        break;
 800661e:	bf00      	nop
 8006620:	e006      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        break;
 8006622:	bf00      	nop
 8006624:	e004      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        break;
 8006626:	bf00      	nop
 8006628:	e002      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
        break;
 800662a:	bf00      	nop
 800662c:	e000      	b.n	8006630 <DMA_CheckFifoParam+0xe8>
    break;
 800662e:	bf00      	nop
    }
  }

  return status;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop

08006640 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006640:	b480      	push	{r7}
 8006642:	b085      	sub	sp, #20
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a38      	ldr	r2, [pc, #224]	; (8006734 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d022      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a36      	ldr	r2, [pc, #216]	; (8006738 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d01d      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a35      	ldr	r2, [pc, #212]	; (800673c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d018      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a33      	ldr	r2, [pc, #204]	; (8006740 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d013      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a32      	ldr	r2, [pc, #200]	; (8006744 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00e      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a30      	ldr	r2, [pc, #192]	; (8006748 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d009      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a2f      	ldr	r2, [pc, #188]	; (800674c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d004      	beq.n	800669e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a2d      	ldr	r2, [pc, #180]	; (8006750 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d101      	bne.n	80066a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800669e:	2301      	movs	r3, #1
 80066a0:	e000      	b.n	80066a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80066a2:	2300      	movs	r3, #0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01a      	beq.n	80066de <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	3b08      	subs	r3, #8
 80066b0:	4a28      	ldr	r2, [pc, #160]	; (8006754 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	091b      	lsrs	r3, r3, #4
 80066b8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4b26      	ldr	r3, [pc, #152]	; (8006758 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80066be:	4413      	add	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	461a      	mov	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a24      	ldr	r2, [pc, #144]	; (800675c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80066cc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f003 031f 	and.w	r3, r3, #31
 80066d4:	2201      	movs	r2, #1
 80066d6:	409a      	lsls	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80066dc:	e024      	b.n	8006728 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	3b10      	subs	r3, #16
 80066e6:	4a1e      	ldr	r2, [pc, #120]	; (8006760 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80066e8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ec:	091b      	lsrs	r3, r3, #4
 80066ee:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	4a1c      	ldr	r2, [pc, #112]	; (8006764 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d806      	bhi.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	4a1b      	ldr	r2, [pc, #108]	; (8006768 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d902      	bls.n	8006706 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3308      	adds	r3, #8
 8006704:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4b18      	ldr	r3, [pc, #96]	; (800676c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	461a      	mov	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a16      	ldr	r2, [pc, #88]	; (8006770 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006718:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f003 031f 	and.w	r3, r3, #31
 8006720:	2201      	movs	r2, #1
 8006722:	409a      	lsls	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006728:	bf00      	nop
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr
 8006734:	58025408 	.word	0x58025408
 8006738:	5802541c 	.word	0x5802541c
 800673c:	58025430 	.word	0x58025430
 8006740:	58025444 	.word	0x58025444
 8006744:	58025458 	.word	0x58025458
 8006748:	5802546c 	.word	0x5802546c
 800674c:	58025480 	.word	0x58025480
 8006750:	58025494 	.word	0x58025494
 8006754:	cccccccd 	.word	0xcccccccd
 8006758:	16009600 	.word	0x16009600
 800675c:	58025880 	.word	0x58025880
 8006760:	aaaaaaab 	.word	0xaaaaaaab
 8006764:	400204b8 	.word	0x400204b8
 8006768:	4002040f 	.word	0x4002040f
 800676c:	10008200 	.word	0x10008200
 8006770:	40020880 	.word	0x40020880

08006774 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d04a      	beq.n	8006820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d847      	bhi.n	8006820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a25      	ldr	r2, [pc, #148]	; (800682c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d022      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a24      	ldr	r2, [pc, #144]	; (8006830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d01d      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a22      	ldr	r2, [pc, #136]	; (8006834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d018      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a21      	ldr	r2, [pc, #132]	; (8006838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d013      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a1f      	ldr	r2, [pc, #124]	; (800683c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d00e      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a1e      	ldr	r2, [pc, #120]	; (8006840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d009      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a1c      	ldr	r2, [pc, #112]	; (8006844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d004      	beq.n	80067e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a1b      	ldr	r2, [pc, #108]	; (8006848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d101      	bne.n	80067e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80067e4:	2300      	movs	r3, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00a      	beq.n	8006800 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4b17      	ldr	r3, [pc, #92]	; (800684c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	461a      	mov	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a15      	ldr	r2, [pc, #84]	; (8006850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80067fc:	671a      	str	r2, [r3, #112]	; 0x70
 80067fe:	e009      	b.n	8006814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	461a      	mov	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a11      	ldr	r2, [pc, #68]	; (8006858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006812:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3b01      	subs	r3, #1
 8006818:	2201      	movs	r2, #1
 800681a:	409a      	lsls	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006820:	bf00      	nop
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	58025408 	.word	0x58025408
 8006830:	5802541c 	.word	0x5802541c
 8006834:	58025430 	.word	0x58025430
 8006838:	58025444 	.word	0x58025444
 800683c:	58025458 	.word	0x58025458
 8006840:	5802546c 	.word	0x5802546c
 8006844:	58025480 	.word	0x58025480
 8006848:	58025494 	.word	0x58025494
 800684c:	1600963f 	.word	0x1600963f
 8006850:	58025940 	.word	0x58025940
 8006854:	1000823f 	.word	0x1000823f
 8006858:	40020940 	.word	0x40020940

0800685c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e0e3      	b.n	8006a36 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006874:	2b00      	cmp	r3, #0
 8006876:	d106      	bne.n	8006886 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2223      	movs	r2, #35	; 0x23
 800687c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7fa fc37 	bl	80010f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006886:	4b6e      	ldr	r3, [pc, #440]	; (8006a40 <HAL_ETH_Init+0x1e4>)
 8006888:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800688c:	4a6c      	ldr	r2, [pc, #432]	; (8006a40 <HAL_ETH_Init+0x1e4>)
 800688e:	f043 0302 	orr.w	r3, r3, #2
 8006892:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006896:	4b6a      	ldr	r3, [pc, #424]	; (8006a40 <HAL_ETH_Init+0x1e4>)
 8006898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	7a1b      	ldrb	r3, [r3, #8]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d103      	bne.n	80068b4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80068ac:	2000      	movs	r0, #0
 80068ae:	f7fc fae3 	bl	8002e78 <HAL_SYSCFG_ETHInterfaceSelect>
 80068b2:	e003      	b.n	80068bc <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80068b4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80068b8:	f7fc fade 	bl	8002e78 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80068bc:	4b61      	ldr	r3, [pc, #388]	; (8006a44 <HAL_ETH_Init+0x1e8>)
 80068be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	f043 0301 	orr.w	r3, r3, #1
 80068d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068d8:	f7fc fab6 	bl	8002e48 <HAL_GetTick>
 80068dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80068de:	e011      	b.n	8006904 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80068e0:	f7fc fab2 	bl	8002e48 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80068ee:	d909      	bls.n	8006904 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2204      	movs	r2, #4
 80068f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	22e0      	movs	r2, #224	; 0xe0
 80068fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e098      	b.n	8006a36 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e4      	bne.n	80068e0 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f89e 	bl	8006a58 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800691c:	f002 f9f8 	bl	8008d10 <HAL_RCC_GetHCLKFreq>
 8006920:	4603      	mov	r3, r0
 8006922:	4a49      	ldr	r2, [pc, #292]	; (8006a48 <HAL_ETH_Init+0x1ec>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	0c9a      	lsrs	r2, r3, #18
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	3a01      	subs	r2, #1
 8006930:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fa81 	bl	8006e3c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006942:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006946:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006952:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006956:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d009      	beq.n	800697a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	22e0      	movs	r2, #224	; 0xe0
 8006972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e05d      	b.n	8006a36 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006982:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006986:	4b31      	ldr	r3, [pc, #196]	; (8006a4c <HAL_ETH_Init+0x1f0>)
 8006988:	4013      	ands	r3, r2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6952      	ldr	r2, [r2, #20]
 800698e:	0051      	lsls	r1, r2, #1
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	6812      	ldr	r2, [r2, #0]
 8006994:	430b      	orrs	r3, r1
 8006996:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800699a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fae9 	bl	8006f76 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fb2f 	bl	8007008 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	3305      	adds	r3, #5
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	021a      	lsls	r2, r3, #8
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	3304      	adds	r3, #4
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	4619      	mov	r1, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	3303      	adds	r3, #3
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	061a      	lsls	r2, r3, #24
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	3302      	adds	r3, #2
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	041b      	lsls	r3, r3, #16
 80069dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	3301      	adds	r3, #1
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80069e8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80069f6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80069f8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681a      	ldr	r2, [r3, #0]
 8006a08:	4b11      	ldr	r3, [pc, #68]	; (8006a50 <HAL_ETH_Init+0x1f4>)
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <HAL_ETH_Init+0x1f8>)
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2210      	movs	r2, #16
 8006a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	58024400 	.word	0x58024400
 8006a44:	58000400 	.word	0x58000400
 8006a48:	431bde83 	.word	0x431bde83
 8006a4c:	ffff8001 	.word	0xffff8001
 8006a50:	0c020060 	.word	0x0c020060
 8006a54:	0c20c000 	.word	0x0c20c000

08006a58 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a70:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006a72:	f002 f94d 	bl	8008d10 <HAL_RCC_GetHCLKFreq>
 8006a76:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4a1a      	ldr	r2, [pc, #104]	; (8006ae4 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d804      	bhi.n	8006a8a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	e022      	b.n	8006ad0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	4a16      	ldr	r2, [pc, #88]	; (8006ae8 <HAL_ETH_SetMDIOClockRange+0x90>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d204      	bcs.n	8006a9c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e019      	b.n	8006ad0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	4a13      	ldr	r2, [pc, #76]	; (8006aec <HAL_ETH_SetMDIOClockRange+0x94>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d915      	bls.n	8006ad0 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4a12      	ldr	r2, [pc, #72]	; (8006af0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d804      	bhi.n	8006ab6 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab2:	60fb      	str	r3, [r7, #12]
 8006ab4:	e00c      	b.n	8006ad0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	4a0e      	ldr	r2, [pc, #56]	; (8006af4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d804      	bhi.n	8006ac8 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ac4:	60fb      	str	r3, [r7, #12]
 8006ac6:	e003      	b.n	8006ad0 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8006ace:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	02160ebf 	.word	0x02160ebf
 8006ae8:	03938700 	.word	0x03938700
 8006aec:	05f5e0ff 	.word	0x05f5e0ff
 8006af0:	08f0d17f 	.word	0x08f0d17f
 8006af4:	0ee6b27f 	.word	0x0ee6b27f

08006af8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006b0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	791b      	ldrb	r3, [r3, #4]
 8006b10:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006b12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	7b1b      	ldrb	r3, [r3, #12]
 8006b18:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006b1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	7b5b      	ldrb	r3, [r3, #13]
 8006b20:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006b22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	7b9b      	ldrb	r3, [r3, #14]
 8006b28:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006b2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	7bdb      	ldrb	r3, [r3, #15]
 8006b30:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006b32:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	7c12      	ldrb	r2, [r2, #16]
 8006b38:	2a00      	cmp	r2, #0
 8006b3a:	d102      	bne.n	8006b42 <ETH_SetMACConfig+0x4a>
 8006b3c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006b40:	e000      	b.n	8006b44 <ETH_SetMACConfig+0x4c>
 8006b42:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006b44:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	7c52      	ldrb	r2, [r2, #17]
 8006b4a:	2a00      	cmp	r2, #0
 8006b4c:	d102      	bne.n	8006b54 <ETH_SetMACConfig+0x5c>
 8006b4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006b52:	e000      	b.n	8006b56 <ETH_SetMACConfig+0x5e>
 8006b54:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006b56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	7c9b      	ldrb	r3, [r3, #18]
 8006b5c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006b5e:	431a      	orrs	r2, r3
               macconf->Speed |
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006b64:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006b6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	7f1b      	ldrb	r3, [r3, #28]
 8006b70:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006b72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	7f5b      	ldrb	r3, [r3, #29]
 8006b78:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006b7a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	7f92      	ldrb	r2, [r2, #30]
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	d102      	bne.n	8006b8a <ETH_SetMACConfig+0x92>
 8006b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b88:	e000      	b.n	8006b8c <ETH_SetMACConfig+0x94>
 8006b8a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006b8c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	7fdb      	ldrb	r3, [r3, #31]
 8006b92:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006b94:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006b9c:	2a00      	cmp	r2, #0
 8006b9e:	d102      	bne.n	8006ba6 <ETH_SetMACConfig+0xae>
 8006ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ba4:	e000      	b.n	8006ba8 <ETH_SetMACConfig+0xb0>
 8006ba6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006ba8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006bae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bb6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006bb8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	4b56      	ldr	r3, [pc, #344]	; (8006d24 <ETH_SetMACConfig+0x22c>)
 8006bca:	4013      	ands	r3, r2
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6812      	ldr	r2, [r2, #0]
 8006bd0:	68f9      	ldr	r1, [r7, #12]
 8006bd2:	430b      	orrs	r3, r1
 8006bd4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006be2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006be4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006bec:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006bee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006bf6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006bf8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006c00:	2a00      	cmp	r2, #0
 8006c02:	d102      	bne.n	8006c0a <ETH_SetMACConfig+0x112>
 8006c04:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c08:	e000      	b.n	8006c0c <ETH_SetMACConfig+0x114>
 8006c0a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006c0c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	4b42      	ldr	r3, [pc, #264]	; (8006d28 <ETH_SetMACConfig+0x230>)
 8006c1e:	4013      	ands	r3, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6812      	ldr	r2, [r2, #0]
 8006c24:	68f9      	ldr	r1, [r7, #12]
 8006c26:	430b      	orrs	r3, r1
 8006c28:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c30:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	4b3a      	ldr	r3, [pc, #232]	; (8006d2c <ETH_SetMACConfig+0x234>)
 8006c42:	4013      	ands	r3, r2
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	6812      	ldr	r2, [r2, #0]
 8006c48:	68f9      	ldr	r1, [r7, #12]
 8006c4a:	430b      	orrs	r3, r1
 8006c4c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006c54:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006c5a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006c62:	2a00      	cmp	r2, #0
 8006c64:	d101      	bne.n	8006c6a <ETH_SetMACConfig+0x172>
 8006c66:	2280      	movs	r2, #128	; 0x80
 8006c68:	e000      	b.n	8006c6c <ETH_SetMACConfig+0x174>
 8006c6a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006c6c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c72:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c7e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006c82:	4013      	ands	r3, r2
 8006c84:	687a      	ldr	r2, [r7, #4]
 8006c86:	6812      	ldr	r2, [r2, #0]
 8006c88:	68f9      	ldr	r1, [r7, #12]
 8006c8a:	430b      	orrs	r3, r1
 8006c8c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006c94:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006c9c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006caa:	f023 0103 	bic.w	r1, r3, #3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	68fa      	ldr	r2, [r7, #12]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006cc2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006cde:	2a00      	cmp	r2, #0
 8006ce0:	d101      	bne.n	8006ce6 <ETH_SetMACConfig+0x1ee>
 8006ce2:	2240      	movs	r2, #64	; 0x40
 8006ce4:	e000      	b.n	8006ce8 <ETH_SetMACConfig+0x1f0>
 8006ce6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006ce8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006cf0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006cf2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006cfa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006d08:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006d18:	bf00      	nop
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr
 8006d24:	00048083 	.word	0x00048083
 8006d28:	c0f88000 	.word	0xc0f88000
 8006d2c:	fffffef0 	.word	0xfffffef0

08006d30 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b085      	sub	sp, #20
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	4b38      	ldr	r3, [pc, #224]	; (8006e28 <ETH_SetDMAConfig+0xf8>)
 8006d46:	4013      	ands	r3, r2
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	6811      	ldr	r1, [r2, #0]
 8006d4c:	687a      	ldr	r2, [r7, #4]
 8006d4e:	6812      	ldr	r2, [r2, #0]
 8006d50:	430b      	orrs	r3, r1
 8006d52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d56:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	791b      	ldrb	r3, [r3, #4]
 8006d5c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006d62:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	7b1b      	ldrb	r3, [r3, #12]
 8006d68:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	4b2c      	ldr	r3, [pc, #176]	; (8006e2c <ETH_SetDMAConfig+0xfc>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6812      	ldr	r2, [r2, #0]
 8006d80:	68f9      	ldr	r1, [r7, #12]
 8006d82:	430b      	orrs	r3, r1
 8006d84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d88:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	7b5b      	ldrb	r3, [r3, #13]
 8006d8e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006d94:	4313      	orrs	r3, r2
 8006d96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006da0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006da4:	4b22      	ldr	r3, [pc, #136]	; (8006e30 <ETH_SetDMAConfig+0x100>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	68f9      	ldr	r1, [r7, #12]
 8006dae:	430b      	orrs	r3, r1
 8006db0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006db4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	7d1b      	ldrb	r3, [r3, #20]
 8006dc0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006dc2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	7f5b      	ldrb	r3, [r3, #29]
 8006dc8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dd6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006dda:	4b16      	ldr	r3, [pc, #88]	; (8006e34 <ETH_SetDMAConfig+0x104>)
 8006ddc:	4013      	ands	r3, r2
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	6812      	ldr	r2, [r2, #0]
 8006de2:	68f9      	ldr	r1, [r7, #12]
 8006de4:	430b      	orrs	r3, r1
 8006de6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006dea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	7f1b      	ldrb	r3, [r3, #28]
 8006df2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e04:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <ETH_SetDMAConfig+0x108>)
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	6812      	ldr	r2, [r2, #0]
 8006e10:	68f9      	ldr	r1, [r7, #12]
 8006e12:	430b      	orrs	r3, r1
 8006e14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006e18:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006e1c:	bf00      	nop
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr
 8006e28:	ffff87fd 	.word	0xffff87fd
 8006e2c:	ffff2ffe 	.word	0xffff2ffe
 8006e30:	fffec000 	.word	0xfffec000
 8006e34:	ffc0efef 	.word	0xffc0efef
 8006e38:	7fc0ffff 	.word	0x7fc0ffff

08006e3c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b0a4      	sub	sp, #144	; 0x90
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006e66:	2301      	movs	r3, #1
 8006e68:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006e72:	2301      	movs	r3, #1
 8006e74:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006e78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006e7c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8006e94:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006e98:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006ed4:	2320      	movs	r3, #32
 8006ed6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006ee6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006eec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ef0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006efe:	2300      	movs	r3, #0
 8006f00:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006f16:	2300      	movs	r3, #0
 8006f18:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f24:	4619      	mov	r1, r3
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7ff fde6 	bl	8006af8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006f30:	2301      	movs	r3, #1
 8006f32:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006f46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f4a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006f50:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f54:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006f56:	2300      	movs	r3, #0
 8006f58:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006f5c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006f62:	f107 0308 	add.w	r3, r7, #8
 8006f66:	4619      	mov	r1, r3
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f7ff fee1 	bl	8006d30 <ETH_SetDMAConfig>
}
 8006f6e:	bf00      	nop
 8006f70:	3790      	adds	r7, #144	; 0x90
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	e01d      	b.n	8006fc0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	68d9      	ldr	r1, [r3, #12]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	4413      	add	r3, r2
 8006f90:	00db      	lsls	r3, r3, #3
 8006f92:	440b      	add	r3, r1
 8006f94:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2200      	movs	r2, #0
 8006fac:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006fae:	68b9      	ldr	r1, [r7, #8]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	3206      	adds	r2, #6
 8006fb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d9de      	bls.n	8006f84 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	68da      	ldr	r2, [r3, #12]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68da      	ldr	r2, [r3, #12]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ff8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006ffc:	bf00      	nop
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007010:	2300      	movs	r3, #0
 8007012:	60fb      	str	r3, [r7, #12]
 8007014:	e023      	b.n	800705e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6919      	ldr	r1, [r3, #16]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4613      	mov	r3, r2
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	4413      	add	r3, r2
 8007022:	00db      	lsls	r3, r3, #3
 8007024:	440b      	add	r3, r1
 8007026:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2200      	movs	r2, #0
 8007032:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	2200      	movs	r2, #0
 8007038:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2200      	movs	r2, #0
 800703e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2200      	movs	r2, #0
 8007044:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	2200      	movs	r2, #0
 800704a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	3212      	adds	r2, #18
 8007054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2b03      	cmp	r3, #3
 8007062:	d9d8      	bls.n	8007016 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800708a:	461a      	mov	r2, r3
 800708c:	2303      	movs	r3, #3
 800708e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800709e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80070b2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b098      	sub	sp, #96	; 0x60
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80070cc:	4a84      	ldr	r2, [pc, #528]	; (80072e0 <HAL_FDCAN_Init+0x21c>)
 80070ce:	f107 030c 	add.w	r3, r7, #12
 80070d2:	4611      	mov	r1, r2
 80070d4:	224c      	movs	r2, #76	; 0x4c
 80070d6:	4618      	mov	r0, r3
 80070d8:	f006 f858 	bl	800d18c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e1c6      	b.n	8007474 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a7e      	ldr	r2, [pc, #504]	; (80072e4 <HAL_FDCAN_Init+0x220>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d106      	bne.n	80070fe <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80070f8:	461a      	mov	r2, r3
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fa f8fe 	bl	8001314 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699a      	ldr	r2, [r3, #24]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0210 	bic.w	r2, r2, #16
 8007126:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007128:	f7fb fe8e 	bl	8002e48 <HAL_GetTick>
 800712c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800712e:	e014      	b.n	800715a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007130:	f7fb fe8a 	bl	8002e48 <HAL_GetTick>
 8007134:	4602      	mov	r2, r0
 8007136:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	2b0a      	cmp	r3, #10
 800713c:	d90d      	bls.n	800715a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007144:	f043 0201 	orr.w	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2203      	movs	r2, #3
 8007152:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e18c      	b.n	8007474 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b08      	cmp	r3, #8
 8007166:	d0e3      	beq.n	8007130 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	699a      	ldr	r2, [r3, #24]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f042 0201 	orr.w	r2, r2, #1
 8007176:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007178:	f7fb fe66 	bl	8002e48 <HAL_GetTick>
 800717c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800717e:	e014      	b.n	80071aa <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007180:	f7fb fe62 	bl	8002e48 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	2b0a      	cmp	r3, #10
 800718c:	d90d      	bls.n	80071aa <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007194:	f043 0201 	orr.w	r2, r3, #1
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2203      	movs	r2, #3
 80071a2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e164      	b.n	8007474 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	699b      	ldr	r3, [r3, #24]
 80071b0:	f003 0301 	and.w	r3, r3, #1
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0e3      	beq.n	8007180 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	699a      	ldr	r2, [r3, #24]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f042 0202 	orr.w	r2, r2, #2
 80071c6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	7c1b      	ldrb	r3, [r3, #16]
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d108      	bne.n	80071e2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071de:	619a      	str	r2, [r3, #24]
 80071e0:	e007      	b.n	80071f2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	699a      	ldr	r2, [r3, #24]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071f0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	7c5b      	ldrb	r3, [r3, #17]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d108      	bne.n	800720c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	699a      	ldr	r2, [r3, #24]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007208:	619a      	str	r2, [r3, #24]
 800720a:	e007      	b.n	800721c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699a      	ldr	r2, [r3, #24]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800721a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	7c9b      	ldrb	r3, [r3, #18]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d108      	bne.n	8007236 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	699a      	ldr	r2, [r3, #24]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007232:	619a      	str	r2, [r3, #24]
 8007234:	e007      	b.n	8007246 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007244:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	430a      	orrs	r2, r1
 800725a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800726a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	691a      	ldr	r2, [r3, #16]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f022 0210 	bic.w	r2, r2, #16
 800727a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d108      	bne.n	8007296 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f042 0204 	orr.w	r2, r2, #4
 8007292:	619a      	str	r2, [r3, #24]
 8007294:	e030      	b.n	80072f8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d02c      	beq.n	80072f8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d020      	beq.n	80072e8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	699a      	ldr	r2, [r3, #24]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072b4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0210 	orr.w	r2, r2, #16
 80072c4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d114      	bne.n	80072f8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699a      	ldr	r2, [r3, #24]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0220 	orr.w	r2, r2, #32
 80072dc:	619a      	str	r2, [r3, #24]
 80072de:	e00b      	b.n	80072f8 <HAL_FDCAN_Init+0x234>
 80072e0:	0800d1c0 	.word	0x0800d1c0
 80072e4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	699a      	ldr	r2, [r3, #24]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f042 0220 	orr.w	r2, r2, #32
 80072f6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	699b      	ldr	r3, [r3, #24]
 80072fc:	3b01      	subs	r3, #1
 80072fe:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	69db      	ldr	r3, [r3, #28]
 8007304:	3b01      	subs	r3, #1
 8007306:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007308:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6a1b      	ldr	r3, [r3, #32]
 800730e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007310:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	3b01      	subs	r3, #1
 800731a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007320:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007322:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732c:	d115      	bne.n	800735a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007332:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	3b01      	subs	r3, #1
 800733a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800733c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	3b01      	subs	r3, #1
 8007344:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007346:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	3b01      	subs	r3, #1
 8007350:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007356:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007358:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00a      	beq.n	8007378 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	430a      	orrs	r2, r1
 8007374:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007380:	4413      	add	r3, r2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d011      	beq.n	80073aa <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800738e:	f023 0107 	bic.w	r1, r3, #7
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	3360      	adds	r3, #96	; 0x60
 800739a:	443b      	add	r3, r7
 800739c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d011      	beq.n	80073d6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80073ba:	f023 0107 	bic.w	r1, r3, #7
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	3360      	adds	r3, #96	; 0x60
 80073c6:	443b      	add	r3, r7
 80073c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d012      	beq.n	8007404 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80073e6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	3360      	adds	r3, #96	; 0x60
 80073f2:	443b      	add	r3, r7
 80073f4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80073f8:	011a      	lsls	r2, r3, #4
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007408:	2b00      	cmp	r3, #0
 800740a:	d012      	beq.n	8007432 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007414:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	3360      	adds	r3, #96	; 0x60
 8007420:	443b      	add	r3, r7
 8007422:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007426:	021a      	lsls	r2, r3, #8
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a11      	ldr	r2, [pc, #68]	; (800747c <HAL_FDCAN_Init+0x3b8>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d107      	bne.n	800744c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f022 0203 	bic.w	r2, r2, #3
 800744a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f80b 	bl	8007480 <FDCAN_CalcultateRamBlockAddresses>
 800746a:	4603      	mov	r3, r0
 800746c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007470:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007474:	4618      	mov	r0, r3
 8007476:	3760      	adds	r7, #96	; 0x60
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	4000a000 	.word	0x4000a000

08007480 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007496:	4ba7      	ldr	r3, [pc, #668]	; (8007734 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007498:	4013      	ands	r3, r2
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	0091      	lsls	r1, r2, #2
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	6812      	ldr	r2, [r2, #0]
 80074a2:	430b      	orrs	r3, r1
 80074a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b8:	041a      	lsls	r2, r3, #16
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	4413      	add	r3, r2
 80074cc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80074d6:	4b97      	ldr	r3, [pc, #604]	; (8007734 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80074d8:	4013      	ands	r3, r2
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	0091      	lsls	r1, r2, #2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	430b      	orrs	r3, r1
 80074e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074f8:	041a      	lsls	r2, r3, #16
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007508:	005b      	lsls	r3, r3, #1
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	4413      	add	r3, r2
 800750e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007518:	4b86      	ldr	r3, [pc, #536]	; (8007734 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800751a:	4013      	ands	r3, r2
 800751c:	68ba      	ldr	r2, [r7, #8]
 800751e:	0091      	lsls	r1, r2, #2
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6812      	ldr	r2, [r2, #0]
 8007524:	430b      	orrs	r3, r1
 8007526:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007532:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	041a      	lsls	r2, r3, #16
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	430a      	orrs	r2, r1
 8007542:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800754e:	fb02 f303 	mul.w	r3, r2, r3
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	4413      	add	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007560:	4b74      	ldr	r3, [pc, #464]	; (8007734 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007562:	4013      	ands	r3, r2
 8007564:	68ba      	ldr	r2, [r7, #8]
 8007566:	0091      	lsls	r1, r2, #2
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6812      	ldr	r2, [r2, #0]
 800756c:	430b      	orrs	r3, r1
 800756e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800757a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007582:	041a      	lsls	r2, r3, #16
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007596:	fb02 f303 	mul.w	r3, r2, r3
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	4413      	add	r3, r2
 800759e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80075a8:	4b62      	ldr	r3, [pc, #392]	; (8007734 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80075aa:	4013      	ands	r3, r2
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	0091      	lsls	r1, r2, #2
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	430b      	orrs	r3, r1
 80075b6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80075c2:	fb02 f303 	mul.w	r3, r2, r3
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	4413      	add	r3, r2
 80075ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80075d4:	4b57      	ldr	r3, [pc, #348]	; (8007734 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80075d6:	4013      	ands	r3, r2
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	0091      	lsls	r1, r2, #2
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	6812      	ldr	r2, [r2, #0]
 80075e0:	430b      	orrs	r3, r1
 80075e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075ee:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f6:	041a      	lsls	r2, r3, #16
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	430a      	orrs	r2, r1
 80075fe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	4413      	add	r3, r2
 800760c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007616:	4b47      	ldr	r3, [pc, #284]	; (8007734 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007618:	4013      	ands	r3, r2
 800761a:	68ba      	ldr	r2, [r7, #8]
 800761c:	0091      	lsls	r1, r2, #2
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6812      	ldr	r2, [r2, #0]
 8007622:	430b      	orrs	r3, r1
 8007624:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007630:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007638:	041a      	lsls	r2, r3, #16
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800764c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007654:	061a      	lsls	r2, r3, #24
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007664:	4b34      	ldr	r3, [pc, #208]	; (8007738 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007666:	4413      	add	r3, r2
 8007668:	009a      	lsls	r2, r3, #2
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	441a      	add	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	441a      	add	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007696:	6879      	ldr	r1, [r7, #4]
 8007698:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800769a:	fb01 f303 	mul.w	r3, r1, r3
 800769e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 80076a0:	441a      	add	r2, r3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ae:	6879      	ldr	r1, [r7, #4]
 80076b0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80076b2:	fb01 f303 	mul.w	r3, r1, r3
 80076b6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 80076b8:	441a      	add	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80076ca:	fb01 f303 	mul.w	r3, r1, r3
 80076ce:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80076d0:	441a      	add	r2, r3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e2:	00db      	lsls	r3, r3, #3
 80076e4:	441a      	add	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80076fa:	fb01 f303 	mul.w	r3, r1, r3
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	441a      	add	r2, r3
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007716:	fb01 f303 	mul.w	r3, r1, r3
 800771a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800771c:	441a      	add	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772a:	4a04      	ldr	r2, [pc, #16]	; (800773c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d915      	bls.n	800775c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007730:	e006      	b.n	8007740 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007732:	bf00      	nop
 8007734:	ffff0003 	.word	0xffff0003
 8007738:	10002b00 	.word	0x10002b00
 800773c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007746:	f043 0220 	orr.w	r2, r3, #32
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2203      	movs	r2, #3
 8007754:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007758:	2301      	movs	r3, #1
 800775a:	e010      	b.n	800777e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	e005      	b.n	8007770 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3304      	adds	r3, #4
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	429a      	cmp	r2, r3
 800777a:	d3f3      	bcc.n	8007764 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop

0800778c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800778c:	b480      	push	{r7}
 800778e:	b089      	sub	sp, #36	; 0x24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007796:	2300      	movs	r3, #0
 8007798:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800779a:	4b89      	ldr	r3, [pc, #548]	; (80079c0 <HAL_GPIO_Init+0x234>)
 800779c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800779e:	e194      	b.n	8007aca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	2101      	movs	r1, #1
 80077a6:	69fb      	ldr	r3, [r7, #28]
 80077a8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ac:	4013      	ands	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 8186 	beq.w	8007ac4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	f003 0303 	and.w	r3, r3, #3
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d005      	beq.n	80077d0 <HAL_GPIO_Init+0x44>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f003 0303 	and.w	r3, r3, #3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d130      	bne.n	8007832 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	005b      	lsls	r3, r3, #1
 80077da:	2203      	movs	r2, #3
 80077dc:	fa02 f303 	lsl.w	r3, r2, r3
 80077e0:	43db      	mvns	r3, r3
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	4013      	ands	r3, r2
 80077e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	68da      	ldr	r2, [r3, #12]
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	fa02 f303 	lsl.w	r3, r2, r3
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007806:	2201      	movs	r2, #1
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	fa02 f303 	lsl.w	r3, r2, r3
 800780e:	43db      	mvns	r3, r3
 8007810:	69ba      	ldr	r2, [r7, #24]
 8007812:	4013      	ands	r3, r2
 8007814:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	091b      	lsrs	r3, r3, #4
 800781c:	f003 0201 	and.w	r2, r3, #1
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	fa02 f303 	lsl.w	r3, r2, r3
 8007826:	69ba      	ldr	r2, [r7, #24]
 8007828:	4313      	orrs	r3, r2
 800782a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	69ba      	ldr	r2, [r7, #24]
 8007830:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	f003 0303 	and.w	r3, r3, #3
 800783a:	2b03      	cmp	r3, #3
 800783c:	d017      	beq.n	800786e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007844:	69fb      	ldr	r3, [r7, #28]
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	2203      	movs	r2, #3
 800784a:	fa02 f303 	lsl.w	r3, r2, r3
 800784e:	43db      	mvns	r3, r3
 8007850:	69ba      	ldr	r2, [r7, #24]
 8007852:	4013      	ands	r3, r2
 8007854:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	689a      	ldr	r2, [r3, #8]
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	005b      	lsls	r3, r3, #1
 800785e:	fa02 f303 	lsl.w	r3, r2, r3
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	4313      	orrs	r3, r2
 8007866:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	69ba      	ldr	r2, [r7, #24]
 800786c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f003 0303 	and.w	r3, r3, #3
 8007876:	2b02      	cmp	r3, #2
 8007878:	d123      	bne.n	80078c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	08da      	lsrs	r2, r3, #3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	3208      	adds	r2, #8
 8007882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	f003 0307 	and.w	r3, r3, #7
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	220f      	movs	r2, #15
 8007892:	fa02 f303 	lsl.w	r3, r2, r3
 8007896:	43db      	mvns	r3, r3
 8007898:	69ba      	ldr	r2, [r7, #24]
 800789a:	4013      	ands	r3, r2
 800789c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	691a      	ldr	r2, [r3, #16]
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	fa02 f303 	lsl.w	r3, r2, r3
 80078ae:	69ba      	ldr	r2, [r7, #24]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	08da      	lsrs	r2, r3, #3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	3208      	adds	r2, #8
 80078bc:	69b9      	ldr	r1, [r7, #24]
 80078be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	2203      	movs	r2, #3
 80078ce:	fa02 f303 	lsl.w	r3, r2, r3
 80078d2:	43db      	mvns	r3, r3
 80078d4:	69ba      	ldr	r2, [r7, #24]
 80078d6:	4013      	ands	r3, r2
 80078d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f003 0203 	and.w	r2, r3, #3
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	005b      	lsls	r3, r3, #1
 80078e6:	fa02 f303 	lsl.w	r3, r2, r3
 80078ea:	69ba      	ldr	r2, [r7, #24]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	69ba      	ldr	r2, [r7, #24]
 80078f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f000 80e0 	beq.w	8007ac4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007904:	4b2f      	ldr	r3, [pc, #188]	; (80079c4 <HAL_GPIO_Init+0x238>)
 8007906:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800790a:	4a2e      	ldr	r2, [pc, #184]	; (80079c4 <HAL_GPIO_Init+0x238>)
 800790c:	f043 0302 	orr.w	r3, r3, #2
 8007910:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007914:	4b2b      	ldr	r3, [pc, #172]	; (80079c4 <HAL_GPIO_Init+0x238>)
 8007916:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800791a:	f003 0302 	and.w	r3, r3, #2
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007922:	4a29      	ldr	r2, [pc, #164]	; (80079c8 <HAL_GPIO_Init+0x23c>)
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	089b      	lsrs	r3, r3, #2
 8007928:	3302      	adds	r3, #2
 800792a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	f003 0303 	and.w	r3, r3, #3
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	220f      	movs	r2, #15
 800793a:	fa02 f303 	lsl.w	r3, r2, r3
 800793e:	43db      	mvns	r3, r3
 8007940:	69ba      	ldr	r2, [r7, #24]
 8007942:	4013      	ands	r3, r2
 8007944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a20      	ldr	r2, [pc, #128]	; (80079cc <HAL_GPIO_Init+0x240>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d052      	beq.n	80079f4 <HAL_GPIO_Init+0x268>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a1f      	ldr	r2, [pc, #124]	; (80079d0 <HAL_GPIO_Init+0x244>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d031      	beq.n	80079ba <HAL_GPIO_Init+0x22e>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a1e      	ldr	r2, [pc, #120]	; (80079d4 <HAL_GPIO_Init+0x248>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d02b      	beq.n	80079b6 <HAL_GPIO_Init+0x22a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a1d      	ldr	r2, [pc, #116]	; (80079d8 <HAL_GPIO_Init+0x24c>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d025      	beq.n	80079b2 <HAL_GPIO_Init+0x226>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a1c      	ldr	r2, [pc, #112]	; (80079dc <HAL_GPIO_Init+0x250>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d01f      	beq.n	80079ae <HAL_GPIO_Init+0x222>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	4a1b      	ldr	r2, [pc, #108]	; (80079e0 <HAL_GPIO_Init+0x254>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d019      	beq.n	80079aa <HAL_GPIO_Init+0x21e>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a1a      	ldr	r2, [pc, #104]	; (80079e4 <HAL_GPIO_Init+0x258>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d013      	beq.n	80079a6 <HAL_GPIO_Init+0x21a>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4a19      	ldr	r2, [pc, #100]	; (80079e8 <HAL_GPIO_Init+0x25c>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d00d      	beq.n	80079a2 <HAL_GPIO_Init+0x216>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a18      	ldr	r2, [pc, #96]	; (80079ec <HAL_GPIO_Init+0x260>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d007      	beq.n	800799e <HAL_GPIO_Init+0x212>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a17      	ldr	r2, [pc, #92]	; (80079f0 <HAL_GPIO_Init+0x264>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d101      	bne.n	800799a <HAL_GPIO_Init+0x20e>
 8007996:	2309      	movs	r3, #9
 8007998:	e02d      	b.n	80079f6 <HAL_GPIO_Init+0x26a>
 800799a:	230a      	movs	r3, #10
 800799c:	e02b      	b.n	80079f6 <HAL_GPIO_Init+0x26a>
 800799e:	2308      	movs	r3, #8
 80079a0:	e029      	b.n	80079f6 <HAL_GPIO_Init+0x26a>
 80079a2:	2307      	movs	r3, #7
 80079a4:	e027      	b.n	80079f6 <HAL_GPIO_Init+0x26a>
 80079a6:	2306      	movs	r3, #6
 80079a8:	e025      	b.n	80079f6 <HAL_GPIO_Init+0x26a>
 80079aa:	2305      	movs	r3, #5
 80079ac:	e023      	b.n	80079f6 <HAL_GPIO_Init+0x26a>
 80079ae:	2304      	movs	r3, #4
 80079b0:	e021      	b.n	80079f6 <HAL_GPIO_Init+0x26a>
 80079b2:	2303      	movs	r3, #3
 80079b4:	e01f      	b.n	80079f6 <HAL_GPIO_Init+0x26a>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e01d      	b.n	80079f6 <HAL_GPIO_Init+0x26a>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e01b      	b.n	80079f6 <HAL_GPIO_Init+0x26a>
 80079be:	bf00      	nop
 80079c0:	58000080 	.word	0x58000080
 80079c4:	58024400 	.word	0x58024400
 80079c8:	58000400 	.word	0x58000400
 80079cc:	58020000 	.word	0x58020000
 80079d0:	58020400 	.word	0x58020400
 80079d4:	58020800 	.word	0x58020800
 80079d8:	58020c00 	.word	0x58020c00
 80079dc:	58021000 	.word	0x58021000
 80079e0:	58021400 	.word	0x58021400
 80079e4:	58021800 	.word	0x58021800
 80079e8:	58021c00 	.word	0x58021c00
 80079ec:	58022000 	.word	0x58022000
 80079f0:	58022400 	.word	0x58022400
 80079f4:	2300      	movs	r3, #0
 80079f6:	69fa      	ldr	r2, [r7, #28]
 80079f8:	f002 0203 	and.w	r2, r2, #3
 80079fc:	0092      	lsls	r2, r2, #2
 80079fe:	4093      	lsls	r3, r2
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007a06:	4938      	ldr	r1, [pc, #224]	; (8007ae8 <HAL_GPIO_Init+0x35c>)
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	089b      	lsrs	r3, r3, #2
 8007a0c:	3302      	adds	r3, #2
 8007a0e:	69ba      	ldr	r2, [r7, #24]
 8007a10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	43db      	mvns	r3, r3
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	4013      	ands	r3, r2
 8007a24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007a32:	69ba      	ldr	r2, [r7, #24]
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	4013      	ands	r3, r2
 8007a52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007a60:	69ba      	ldr	r2, [r7, #24]
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007a68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	43db      	mvns	r3, r3
 8007a7a:	69ba      	ldr	r2, [r7, #24]
 8007a7c:	4013      	ands	r3, r2
 8007a7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d003      	beq.n	8007a94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	4313      	orrs	r3, r2
 8007a92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	69ba      	ldr	r2, [r7, #24]
 8007a98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	43db      	mvns	r3, r3
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	4013      	ands	r3, r2
 8007aa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d003      	beq.n	8007abe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007ab6:	69ba      	ldr	r2, [r7, #24]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	4313      	orrs	r3, r2
 8007abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	69ba      	ldr	r2, [r7, #24]
 8007ac2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f47f ae63 	bne.w	80077a0 <HAL_GPIO_Init+0x14>
  }
}
 8007ada:	bf00      	nop
 8007adc:	bf00      	nop
 8007ade:	3724      	adds	r7, #36	; 0x24
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	58000400 	.word	0x58000400

08007aec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	460b      	mov	r3, r1
 8007af6:	807b      	strh	r3, [r7, #2]
 8007af8:	4613      	mov	r3, r2
 8007afa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007afc:	787b      	ldrb	r3, [r7, #1]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007b02:	887a      	ldrh	r2, [r7, #2]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007b08:	e003      	b.n	8007b12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b0a:	887b      	ldrh	r3, [r7, #2]
 8007b0c:	041a      	lsls	r2, r3, #16
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	619a      	str	r2, [r3, #24]
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
	...

08007b20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e08b      	b.n	8007c4a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d106      	bne.n	8007b4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7f9 ff70 	bl	8001a2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2224      	movs	r2, #36	; 0x24
 8007b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0201 	bic.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b70:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689a      	ldr	r2, [r3, #8]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007b80:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d107      	bne.n	8007b9a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	689a      	ldr	r2, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b96:	609a      	str	r2, [r3, #8]
 8007b98:	e006      	b.n	8007ba8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ba6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d108      	bne.n	8007bc2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	685a      	ldr	r2, [r3, #4]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bbe:	605a      	str	r2, [r3, #4]
 8007bc0:	e007      	b.n	8007bd2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685a      	ldr	r2, [r3, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bd0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6859      	ldr	r1, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	4b1d      	ldr	r3, [pc, #116]	; (8007c54 <HAL_I2C_Init+0x134>)
 8007bde:	430b      	orrs	r3, r1
 8007be0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007bf0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691a      	ldr	r2, [r3, #16]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69d9      	ldr	r1, [r3, #28]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1a      	ldr	r2, [r3, #32]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 0201 	orr.w	r2, r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	02008000 	.word	0x02008000

08007c58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c68:	b2db      	uxtb	r3, r3
 8007c6a:	2b20      	cmp	r3, #32
 8007c6c:	d138      	bne.n	8007ce0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d101      	bne.n	8007c7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007c78:	2302      	movs	r3, #2
 8007c7a:	e032      	b.n	8007ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2224      	movs	r2, #36	; 0x24
 8007c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0201 	bic.w	r2, r2, #1
 8007c9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007caa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6819      	ldr	r1, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e000      	b.n	8007ce2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ce0:	2302      	movs	r3, #2
  }
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b085      	sub	sp, #20
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
 8007cf6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b20      	cmp	r3, #32
 8007d02:	d139      	bne.n	8007d78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d101      	bne.n	8007d12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007d0e:	2302      	movs	r3, #2
 8007d10:	e033      	b.n	8007d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2224      	movs	r2, #36	; 0x24
 8007d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 0201 	bic.w	r2, r2, #1
 8007d30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	021b      	lsls	r3, r3, #8
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f042 0201 	orr.w	r2, r2, #1
 8007d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2220      	movs	r2, #32
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e000      	b.n	8007d7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007d78:	2302      	movs	r3, #2
  }
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
	...

08007d88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d90:	4b19      	ldr	r3, [pc, #100]	; (8007df8 <HAL_PWREx_ConfigSupply+0x70>)
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	f003 0304 	and.w	r3, r3, #4
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d00a      	beq.n	8007db2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d9c:	4b16      	ldr	r3, [pc, #88]	; (8007df8 <HAL_PWREx_ConfigSupply+0x70>)
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f003 0307 	and.w	r3, r3, #7
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d001      	beq.n	8007dae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e01f      	b.n	8007dee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	e01d      	b.n	8007dee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007db2:	4b11      	ldr	r3, [pc, #68]	; (8007df8 <HAL_PWREx_ConfigSupply+0x70>)
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f023 0207 	bic.w	r2, r3, #7
 8007dba:	490f      	ldr	r1, [pc, #60]	; (8007df8 <HAL_PWREx_ConfigSupply+0x70>)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007dc2:	f7fb f841 	bl	8002e48 <HAL_GetTick>
 8007dc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dc8:	e009      	b.n	8007dde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007dca:	f7fb f83d 	bl	8002e48 <HAL_GetTick>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007dd8:	d901      	bls.n	8007dde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e007      	b.n	8007dee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007dde:	4b06      	ldr	r3, [pc, #24]	; (8007df8 <HAL_PWREx_ConfigSupply+0x70>)
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dea:	d1ee      	bne.n	8007dca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	58024800 	.word	0x58024800

08007dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08c      	sub	sp, #48	; 0x30
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d102      	bne.n	8007e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	f000 bc48 	b.w	80086a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	f000 8088 	beq.w	8007f2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e1e:	4b99      	ldr	r3, [pc, #612]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007e28:	4b96      	ldr	r3, [pc, #600]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d007      	beq.n	8007e44 <HAL_RCC_OscConfig+0x48>
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	2b18      	cmp	r3, #24
 8007e38:	d111      	bne.n	8007e5e <HAL_RCC_OscConfig+0x62>
 8007e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3c:	f003 0303 	and.w	r3, r3, #3
 8007e40:	2b02      	cmp	r3, #2
 8007e42:	d10c      	bne.n	8007e5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e44:	4b8f      	ldr	r3, [pc, #572]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d06d      	beq.n	8007f2c <HAL_RCC_OscConfig+0x130>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d169      	bne.n	8007f2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	f000 bc21 	b.w	80086a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e66:	d106      	bne.n	8007e76 <HAL_RCC_OscConfig+0x7a>
 8007e68:	4b86      	ldr	r3, [pc, #536]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a85      	ldr	r2, [pc, #532]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	e02e      	b.n	8007ed4 <HAL_RCC_OscConfig+0xd8>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d10c      	bne.n	8007e98 <HAL_RCC_OscConfig+0x9c>
 8007e7e:	4b81      	ldr	r3, [pc, #516]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a80      	ldr	r2, [pc, #512]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e88:	6013      	str	r3, [r2, #0]
 8007e8a:	4b7e      	ldr	r3, [pc, #504]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a7d      	ldr	r2, [pc, #500]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	e01d      	b.n	8007ed4 <HAL_RCC_OscConfig+0xd8>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ea0:	d10c      	bne.n	8007ebc <HAL_RCC_OscConfig+0xc0>
 8007ea2:	4b78      	ldr	r3, [pc, #480]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a77      	ldr	r2, [pc, #476]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4b75      	ldr	r3, [pc, #468]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a74      	ldr	r2, [pc, #464]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	e00b      	b.n	8007ed4 <HAL_RCC_OscConfig+0xd8>
 8007ebc:	4b71      	ldr	r3, [pc, #452]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a70      	ldr	r2, [pc, #448]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	4b6e      	ldr	r3, [pc, #440]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a6d      	ldr	r2, [pc, #436]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d013      	beq.n	8007f04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007edc:	f7fa ffb4 	bl	8002e48 <HAL_GetTick>
 8007ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ee2:	e008      	b.n	8007ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ee4:	f7fa ffb0 	bl	8002e48 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b64      	cmp	r3, #100	; 0x64
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e3d4      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ef6:	4b63      	ldr	r3, [pc, #396]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0f0      	beq.n	8007ee4 <HAL_RCC_OscConfig+0xe8>
 8007f02:	e014      	b.n	8007f2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f04:	f7fa ffa0 	bl	8002e48 <HAL_GetTick>
 8007f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f0c:	f7fa ff9c 	bl	8002e48 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b64      	cmp	r3, #100	; 0x64
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e3c0      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007f1e:	4b59      	ldr	r3, [pc, #356]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1f0      	bne.n	8007f0c <HAL_RCC_OscConfig+0x110>
 8007f2a:	e000      	b.n	8007f2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f000 80ca 	beq.w	80080d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f3c:	4b51      	ldr	r3, [pc, #324]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f46:	4b4f      	ldr	r3, [pc, #316]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d007      	beq.n	8007f62 <HAL_RCC_OscConfig+0x166>
 8007f52:	6a3b      	ldr	r3, [r7, #32]
 8007f54:	2b18      	cmp	r3, #24
 8007f56:	d156      	bne.n	8008006 <HAL_RCC_OscConfig+0x20a>
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d151      	bne.n	8008006 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f62:	4b48      	ldr	r3, [pc, #288]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0304 	and.w	r3, r3, #4
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d005      	beq.n	8007f7a <HAL_RCC_OscConfig+0x17e>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e392      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f7a:	4b42      	ldr	r3, [pc, #264]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f023 0219 	bic.w	r2, r3, #25
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	493f      	ldr	r1, [pc, #252]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f8c:	f7fa ff5c 	bl	8002e48 <HAL_GetTick>
 8007f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f92:	e008      	b.n	8007fa6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f94:	f7fa ff58 	bl	8002e48 <HAL_GetTick>
 8007f98:	4602      	mov	r2, r0
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	1ad3      	subs	r3, r2, r3
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d901      	bls.n	8007fa6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	e37c      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fa6:	4b37      	ldr	r3, [pc, #220]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0304 	and.w	r3, r3, #4
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d0f0      	beq.n	8007f94 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fb2:	f7fa ff55 	bl	8002e60 <HAL_GetREVID>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d817      	bhi.n	8007ff0 <HAL_RCC_OscConfig+0x1f4>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	2b40      	cmp	r3, #64	; 0x40
 8007fc6:	d108      	bne.n	8007fda <HAL_RCC_OscConfig+0x1de>
 8007fc8:	4b2e      	ldr	r3, [pc, #184]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007fd0:	4a2c      	ldr	r2, [pc, #176]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fd6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fd8:	e07a      	b.n	80080d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fda:	4b2a      	ldr	r3, [pc, #168]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	031b      	lsls	r3, r3, #12
 8007fe8:	4926      	ldr	r1, [pc, #152]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fee:	e06f      	b.n	80080d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff0:	4b24      	ldr	r3, [pc, #144]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	061b      	lsls	r3, r3, #24
 8007ffe:	4921      	ldr	r1, [pc, #132]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8008000:	4313      	orrs	r3, r2
 8008002:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008004:	e064      	b.n	80080d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d047      	beq.n	800809e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800800e:	4b1d      	ldr	r3, [pc, #116]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f023 0219 	bic.w	r2, r3, #25
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	491a      	ldr	r1, [pc, #104]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 800801c:	4313      	orrs	r3, r2
 800801e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008020:	f7fa ff12 	bl	8002e48 <HAL_GetTick>
 8008024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008026:	e008      	b.n	800803a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008028:	f7fa ff0e 	bl	8002e48 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b02      	cmp	r3, #2
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e332      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800803a:	4b12      	ldr	r3, [pc, #72]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f0      	beq.n	8008028 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008046:	f7fa ff0b 	bl	8002e60 <HAL_GetREVID>
 800804a:	4603      	mov	r3, r0
 800804c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008050:	4293      	cmp	r3, r2
 8008052:	d819      	bhi.n	8008088 <HAL_RCC_OscConfig+0x28c>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691b      	ldr	r3, [r3, #16]
 8008058:	2b40      	cmp	r3, #64	; 0x40
 800805a:	d108      	bne.n	800806e <HAL_RCC_OscConfig+0x272>
 800805c:	4b09      	ldr	r3, [pc, #36]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008064:	4a07      	ldr	r2, [pc, #28]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8008066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800806a:	6053      	str	r3, [r2, #4]
 800806c:	e030      	b.n	80080d0 <HAL_RCC_OscConfig+0x2d4>
 800806e:	4b05      	ldr	r3, [pc, #20]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	691b      	ldr	r3, [r3, #16]
 800807a:	031b      	lsls	r3, r3, #12
 800807c:	4901      	ldr	r1, [pc, #4]	; (8008084 <HAL_RCC_OscConfig+0x288>)
 800807e:	4313      	orrs	r3, r2
 8008080:	604b      	str	r3, [r1, #4]
 8008082:	e025      	b.n	80080d0 <HAL_RCC_OscConfig+0x2d4>
 8008084:	58024400 	.word	0x58024400
 8008088:	4b9a      	ldr	r3, [pc, #616]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	061b      	lsls	r3, r3, #24
 8008096:	4997      	ldr	r1, [pc, #604]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 8008098:	4313      	orrs	r3, r2
 800809a:	604b      	str	r3, [r1, #4]
 800809c:	e018      	b.n	80080d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800809e:	4b95      	ldr	r3, [pc, #596]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a94      	ldr	r2, [pc, #592]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080aa:	f7fa fecd 	bl	8002e48 <HAL_GetTick>
 80080ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080b0:	e008      	b.n	80080c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080b2:	f7fa fec9 	bl	8002e48 <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e2ed      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80080c4:	4b8b      	ldr	r3, [pc, #556]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f0      	bne.n	80080b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 80a9 	beq.w	8008230 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080de:	4b85      	ldr	r3, [pc, #532]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080e8:	4b82      	ldr	r3, [pc, #520]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80080ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080ee:	69bb      	ldr	r3, [r7, #24]
 80080f0:	2b08      	cmp	r3, #8
 80080f2:	d007      	beq.n	8008104 <HAL_RCC_OscConfig+0x308>
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2b18      	cmp	r3, #24
 80080f8:	d13a      	bne.n	8008170 <HAL_RCC_OscConfig+0x374>
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	f003 0303 	and.w	r3, r3, #3
 8008100:	2b01      	cmp	r3, #1
 8008102:	d135      	bne.n	8008170 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008104:	4b7b      	ldr	r3, [pc, #492]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810c:	2b00      	cmp	r3, #0
 800810e:	d005      	beq.n	800811c <HAL_RCC_OscConfig+0x320>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	2b80      	cmp	r3, #128	; 0x80
 8008116:	d001      	beq.n	800811c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e2c1      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800811c:	f7fa fea0 	bl	8002e60 <HAL_GetREVID>
 8008120:	4603      	mov	r3, r0
 8008122:	f241 0203 	movw	r2, #4099	; 0x1003
 8008126:	4293      	cmp	r3, r2
 8008128:	d817      	bhi.n	800815a <HAL_RCC_OscConfig+0x35e>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a1b      	ldr	r3, [r3, #32]
 800812e:	2b20      	cmp	r3, #32
 8008130:	d108      	bne.n	8008144 <HAL_RCC_OscConfig+0x348>
 8008132:	4b70      	ldr	r3, [pc, #448]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800813a:	4a6e      	ldr	r2, [pc, #440]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 800813c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008140:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008142:	e075      	b.n	8008230 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008144:	4b6b      	ldr	r3, [pc, #428]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6a1b      	ldr	r3, [r3, #32]
 8008150:	069b      	lsls	r3, r3, #26
 8008152:	4968      	ldr	r1, [pc, #416]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 8008154:	4313      	orrs	r3, r2
 8008156:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008158:	e06a      	b.n	8008230 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800815a:	4b66      	ldr	r3, [pc, #408]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	061b      	lsls	r3, r3, #24
 8008168:	4962      	ldr	r1, [pc, #392]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 800816a:	4313      	orrs	r3, r2
 800816c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800816e:	e05f      	b.n	8008230 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d042      	beq.n	80081fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008178:	4b5e      	ldr	r3, [pc, #376]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a5d      	ldr	r2, [pc, #372]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 800817e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008184:	f7fa fe60 	bl	8002e48 <HAL_GetTick>
 8008188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800818a:	e008      	b.n	800819e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800818c:	f7fa fe5c 	bl	8002e48 <HAL_GetTick>
 8008190:	4602      	mov	r2, r0
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	2b02      	cmp	r3, #2
 8008198:	d901      	bls.n	800819e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e280      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800819e:	4b55      	ldr	r3, [pc, #340]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0f0      	beq.n	800818c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80081aa:	f7fa fe59 	bl	8002e60 <HAL_GetREVID>
 80081ae:	4603      	mov	r3, r0
 80081b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d817      	bhi.n	80081e8 <HAL_RCC_OscConfig+0x3ec>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6a1b      	ldr	r3, [r3, #32]
 80081bc:	2b20      	cmp	r3, #32
 80081be:	d108      	bne.n	80081d2 <HAL_RCC_OscConfig+0x3d6>
 80081c0:	4b4c      	ldr	r3, [pc, #304]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80081c8:	4a4a      	ldr	r2, [pc, #296]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80081ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081ce:	6053      	str	r3, [r2, #4]
 80081d0:	e02e      	b.n	8008230 <HAL_RCC_OscConfig+0x434>
 80081d2:	4b48      	ldr	r3, [pc, #288]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	069b      	lsls	r3, r3, #26
 80081e0:	4944      	ldr	r1, [pc, #272]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80081e2:	4313      	orrs	r3, r2
 80081e4:	604b      	str	r3, [r1, #4]
 80081e6:	e023      	b.n	8008230 <HAL_RCC_OscConfig+0x434>
 80081e8:	4b42      	ldr	r3, [pc, #264]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6a1b      	ldr	r3, [r3, #32]
 80081f4:	061b      	lsls	r3, r3, #24
 80081f6:	493f      	ldr	r1, [pc, #252]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	60cb      	str	r3, [r1, #12]
 80081fc:	e018      	b.n	8008230 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80081fe:	4b3d      	ldr	r3, [pc, #244]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a3c      	ldr	r2, [pc, #240]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 8008204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820a:	f7fa fe1d 	bl	8002e48 <HAL_GetTick>
 800820e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008210:	e008      	b.n	8008224 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008212:	f7fa fe19 	bl	8002e48 <HAL_GetTick>
 8008216:	4602      	mov	r2, r0
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	1ad3      	subs	r3, r2, r3
 800821c:	2b02      	cmp	r3, #2
 800821e:	d901      	bls.n	8008224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e23d      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008224:	4b33      	ldr	r3, [pc, #204]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f0      	bne.n	8008212 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0308 	and.w	r3, r3, #8
 8008238:	2b00      	cmp	r3, #0
 800823a:	d036      	beq.n	80082aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	695b      	ldr	r3, [r3, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d019      	beq.n	8008278 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008244:	4b2b      	ldr	r3, [pc, #172]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 8008246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008248:	4a2a      	ldr	r2, [pc, #168]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008250:	f7fa fdfa 	bl	8002e48 <HAL_GetTick>
 8008254:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008256:	e008      	b.n	800826a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008258:	f7fa fdf6 	bl	8002e48 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	2b02      	cmp	r3, #2
 8008264:	d901      	bls.n	800826a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008266:	2303      	movs	r3, #3
 8008268:	e21a      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800826a:	4b22      	ldr	r3, [pc, #136]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 800826c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d0f0      	beq.n	8008258 <HAL_RCC_OscConfig+0x45c>
 8008276:	e018      	b.n	80082aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008278:	4b1e      	ldr	r3, [pc, #120]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 800827a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800827c:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 800827e:	f023 0301 	bic.w	r3, r3, #1
 8008282:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008284:	f7fa fde0 	bl	8002e48 <HAL_GetTick>
 8008288:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800828a:	e008      	b.n	800829e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800828c:	f7fa fddc 	bl	8002e48 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	2b02      	cmp	r3, #2
 8008298:	d901      	bls.n	800829e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800829a:	2303      	movs	r3, #3
 800829c:	e200      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800829e:	4b15      	ldr	r3, [pc, #84]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80082a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80082a2:	f003 0302 	and.w	r3, r3, #2
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1f0      	bne.n	800828c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0320 	and.w	r3, r3, #32
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d039      	beq.n	800832a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d01c      	beq.n	80082f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80082be:	4b0d      	ldr	r3, [pc, #52]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a0c      	ldr	r2, [pc, #48]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80082c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80082c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082ca:	f7fa fdbd 	bl	8002e48 <HAL_GetTick>
 80082ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082d2:	f7fa fdb9 	bl	8002e48 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e1dd      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082e4:	4b03      	ldr	r3, [pc, #12]	; (80082f4 <HAL_RCC_OscConfig+0x4f8>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d0f0      	beq.n	80082d2 <HAL_RCC_OscConfig+0x4d6>
 80082f0:	e01b      	b.n	800832a <HAL_RCC_OscConfig+0x52e>
 80082f2:	bf00      	nop
 80082f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082f8:	4b9b      	ldr	r3, [pc, #620]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a9a      	ldr	r2, [pc, #616]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80082fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008302:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008304:	f7fa fda0 	bl	8002e48 <HAL_GetTick>
 8008308:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800830a:	e008      	b.n	800831e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800830c:	f7fa fd9c 	bl	8002e48 <HAL_GetTick>
 8008310:	4602      	mov	r2, r0
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	1ad3      	subs	r3, r2, r3
 8008316:	2b02      	cmp	r3, #2
 8008318:	d901      	bls.n	800831e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e1c0      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800831e:	4b92      	ldr	r3, [pc, #584]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1f0      	bne.n	800830c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f003 0304 	and.w	r3, r3, #4
 8008332:	2b00      	cmp	r3, #0
 8008334:	f000 8081 	beq.w	800843a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008338:	4b8c      	ldr	r3, [pc, #560]	; (800856c <HAL_RCC_OscConfig+0x770>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a8b      	ldr	r2, [pc, #556]	; (800856c <HAL_RCC_OscConfig+0x770>)
 800833e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008344:	f7fa fd80 	bl	8002e48 <HAL_GetTick>
 8008348:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800834a:	e008      	b.n	800835e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800834c:	f7fa fd7c 	bl	8002e48 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	2b64      	cmp	r3, #100	; 0x64
 8008358:	d901      	bls.n	800835e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800835a:	2303      	movs	r3, #3
 800835c:	e1a0      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800835e:	4b83      	ldr	r3, [pc, #524]	; (800856c <HAL_RCC_OscConfig+0x770>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008366:	2b00      	cmp	r3, #0
 8008368:	d0f0      	beq.n	800834c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	2b01      	cmp	r3, #1
 8008370:	d106      	bne.n	8008380 <HAL_RCC_OscConfig+0x584>
 8008372:	4b7d      	ldr	r3, [pc, #500]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008376:	4a7c      	ldr	r2, [pc, #496]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008378:	f043 0301 	orr.w	r3, r3, #1
 800837c:	6713      	str	r3, [r2, #112]	; 0x70
 800837e:	e02d      	b.n	80083dc <HAL_RCC_OscConfig+0x5e0>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10c      	bne.n	80083a2 <HAL_RCC_OscConfig+0x5a6>
 8008388:	4b77      	ldr	r3, [pc, #476]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 800838a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838c:	4a76      	ldr	r2, [pc, #472]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 800838e:	f023 0301 	bic.w	r3, r3, #1
 8008392:	6713      	str	r3, [r2, #112]	; 0x70
 8008394:	4b74      	ldr	r3, [pc, #464]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008398:	4a73      	ldr	r2, [pc, #460]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 800839a:	f023 0304 	bic.w	r3, r3, #4
 800839e:	6713      	str	r3, [r2, #112]	; 0x70
 80083a0:	e01c      	b.n	80083dc <HAL_RCC_OscConfig+0x5e0>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	2b05      	cmp	r3, #5
 80083a8:	d10c      	bne.n	80083c4 <HAL_RCC_OscConfig+0x5c8>
 80083aa:	4b6f      	ldr	r3, [pc, #444]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80083ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ae:	4a6e      	ldr	r2, [pc, #440]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80083b0:	f043 0304 	orr.w	r3, r3, #4
 80083b4:	6713      	str	r3, [r2, #112]	; 0x70
 80083b6:	4b6c      	ldr	r3, [pc, #432]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80083b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ba:	4a6b      	ldr	r2, [pc, #428]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80083bc:	f043 0301 	orr.w	r3, r3, #1
 80083c0:	6713      	str	r3, [r2, #112]	; 0x70
 80083c2:	e00b      	b.n	80083dc <HAL_RCC_OscConfig+0x5e0>
 80083c4:	4b68      	ldr	r3, [pc, #416]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80083c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c8:	4a67      	ldr	r2, [pc, #412]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80083ca:	f023 0301 	bic.w	r3, r3, #1
 80083ce:	6713      	str	r3, [r2, #112]	; 0x70
 80083d0:	4b65      	ldr	r3, [pc, #404]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80083d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083d4:	4a64      	ldr	r2, [pc, #400]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80083d6:	f023 0304 	bic.w	r3, r3, #4
 80083da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d015      	beq.n	8008410 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083e4:	f7fa fd30 	bl	8002e48 <HAL_GetTick>
 80083e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083ea:	e00a      	b.n	8008402 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083ec:	f7fa fd2c 	bl	8002e48 <HAL_GetTick>
 80083f0:	4602      	mov	r2, r0
 80083f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f4:	1ad3      	subs	r3, r2, r3
 80083f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d901      	bls.n	8008402 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80083fe:	2303      	movs	r3, #3
 8008400:	e14e      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008402:	4b59      	ldr	r3, [pc, #356]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0ee      	beq.n	80083ec <HAL_RCC_OscConfig+0x5f0>
 800840e:	e014      	b.n	800843a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008410:	f7fa fd1a 	bl	8002e48 <HAL_GetTick>
 8008414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008416:	e00a      	b.n	800842e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008418:	f7fa fd16 	bl	8002e48 <HAL_GetTick>
 800841c:	4602      	mov	r2, r0
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	1ad3      	subs	r3, r2, r3
 8008422:	f241 3288 	movw	r2, #5000	; 0x1388
 8008426:	4293      	cmp	r3, r2
 8008428:	d901      	bls.n	800842e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e138      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800842e:	4b4e      	ldr	r3, [pc, #312]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d1ee      	bne.n	8008418 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	2b00      	cmp	r3, #0
 8008440:	f000 812d 	beq.w	800869e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008444:	4b48      	ldr	r3, [pc, #288]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800844c:	2b18      	cmp	r3, #24
 800844e:	f000 80bd 	beq.w	80085cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	2b02      	cmp	r3, #2
 8008458:	f040 809e 	bne.w	8008598 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800845c:	4b42      	ldr	r3, [pc, #264]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a41      	ldr	r2, [pc, #260]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008468:	f7fa fcee 	bl	8002e48 <HAL_GetTick>
 800846c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800846e:	e008      	b.n	8008482 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008470:	f7fa fcea 	bl	8002e48 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b02      	cmp	r3, #2
 800847c:	d901      	bls.n	8008482 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e10e      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008482:	4b39      	ldr	r3, [pc, #228]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1f0      	bne.n	8008470 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800848e:	4b36      	ldr	r3, [pc, #216]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008492:	4b37      	ldr	r3, [pc, #220]	; (8008570 <HAL_RCC_OscConfig+0x774>)
 8008494:	4013      	ands	r3, r2
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800849e:	0112      	lsls	r2, r2, #4
 80084a0:	430a      	orrs	r2, r1
 80084a2:	4931      	ldr	r1, [pc, #196]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	628b      	str	r3, [r1, #40]	; 0x28
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ac:	3b01      	subs	r3, #1
 80084ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084b6:	3b01      	subs	r3, #1
 80084b8:	025b      	lsls	r3, r3, #9
 80084ba:	b29b      	uxth	r3, r3
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c2:	3b01      	subs	r3, #1
 80084c4:	041b      	lsls	r3, r3, #16
 80084c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80084ca:	431a      	orrs	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084d0:	3b01      	subs	r3, #1
 80084d2:	061b      	lsls	r3, r3, #24
 80084d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80084d8:	4923      	ldr	r1, [pc, #140]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80084da:	4313      	orrs	r3, r2
 80084dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80084de:	4b22      	ldr	r3, [pc, #136]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80084e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e2:	4a21      	ldr	r2, [pc, #132]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80084e4:	f023 0301 	bic.w	r3, r3, #1
 80084e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084ea:	4b1f      	ldr	r3, [pc, #124]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80084ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084ee:	4b21      	ldr	r3, [pc, #132]	; (8008574 <HAL_RCC_OscConfig+0x778>)
 80084f0:	4013      	ands	r3, r2
 80084f2:	687a      	ldr	r2, [r7, #4]
 80084f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80084f6:	00d2      	lsls	r2, r2, #3
 80084f8:	491b      	ldr	r1, [pc, #108]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 80084fa:	4313      	orrs	r3, r2
 80084fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80084fe:	4b1a      	ldr	r3, [pc, #104]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008502:	f023 020c 	bic.w	r2, r3, #12
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	4917      	ldr	r1, [pc, #92]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 800850c:	4313      	orrs	r3, r2
 800850e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008510:	4b15      	ldr	r3, [pc, #84]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008514:	f023 0202 	bic.w	r2, r3, #2
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800851c:	4912      	ldr	r1, [pc, #72]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 800851e:	4313      	orrs	r3, r2
 8008520:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008522:	4b11      	ldr	r3, [pc, #68]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008526:	4a10      	ldr	r2, [pc, #64]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800852c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800852e:	4b0e      	ldr	r3, [pc, #56]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008532:	4a0d      	ldr	r2, [pc, #52]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008538:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800853a:	4b0b      	ldr	r3, [pc, #44]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 800853c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853e:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008544:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008546:	4b08      	ldr	r3, [pc, #32]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854a:	4a07      	ldr	r2, [pc, #28]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 800854c:	f043 0301 	orr.w	r3, r3, #1
 8008550:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008552:	4b05      	ldr	r3, [pc, #20]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a04      	ldr	r2, [pc, #16]	; (8008568 <HAL_RCC_OscConfig+0x76c>)
 8008558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800855c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800855e:	f7fa fc73 	bl	8002e48 <HAL_GetTick>
 8008562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008564:	e011      	b.n	800858a <HAL_RCC_OscConfig+0x78e>
 8008566:	bf00      	nop
 8008568:	58024400 	.word	0x58024400
 800856c:	58024800 	.word	0x58024800
 8008570:	fffffc0c 	.word	0xfffffc0c
 8008574:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008578:	f7fa fc66 	bl	8002e48 <HAL_GetTick>
 800857c:	4602      	mov	r2, r0
 800857e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008580:	1ad3      	subs	r3, r2, r3
 8008582:	2b02      	cmp	r3, #2
 8008584:	d901      	bls.n	800858a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e08a      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800858a:	4b47      	ldr	r3, [pc, #284]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0f0      	beq.n	8008578 <HAL_RCC_OscConfig+0x77c>
 8008596:	e082      	b.n	800869e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008598:	4b43      	ldr	r3, [pc, #268]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a42      	ldr	r2, [pc, #264]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 800859e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a4:	f7fa fc50 	bl	8002e48 <HAL_GetTick>
 80085a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085ac:	f7fa fc4c 	bl	8002e48 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e070      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085be:	4b3a      	ldr	r3, [pc, #232]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1f0      	bne.n	80085ac <HAL_RCC_OscConfig+0x7b0>
 80085ca:	e068      	b.n	800869e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80085cc:	4b36      	ldr	r3, [pc, #216]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 80085ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80085d2:	4b35      	ldr	r3, [pc, #212]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 80085d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d031      	beq.n	8008644 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f003 0203 	and.w	r2, r3, #3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d12a      	bne.n	8008644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	091b      	lsrs	r3, r3, #4
 80085f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085fa:	429a      	cmp	r2, r3
 80085fc:	d122      	bne.n	8008644 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008608:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800860a:	429a      	cmp	r2, r3
 800860c:	d11a      	bne.n	8008644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	0a5b      	lsrs	r3, r3, #9
 8008612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800861c:	429a      	cmp	r2, r3
 800861e:	d111      	bne.n	8008644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	0c1b      	lsrs	r3, r3, #16
 8008624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800862e:	429a      	cmp	r2, r3
 8008630:	d108      	bne.n	8008644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	0e1b      	lsrs	r3, r3, #24
 8008636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800863e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008640:	429a      	cmp	r2, r3
 8008642:	d001      	beq.n	8008648 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e02b      	b.n	80086a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008648:	4b17      	ldr	r3, [pc, #92]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 800864a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800864c:	08db      	lsrs	r3, r3, #3
 800864e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008652:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	429a      	cmp	r2, r3
 800865c:	d01f      	beq.n	800869e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800865e:	4b12      	ldr	r3, [pc, #72]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 8008660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008662:	4a11      	ldr	r2, [pc, #68]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 8008664:	f023 0301 	bic.w	r3, r3, #1
 8008668:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800866a:	f7fa fbed 	bl	8002e48 <HAL_GetTick>
 800866e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008670:	bf00      	nop
 8008672:	f7fa fbe9 	bl	8002e48 <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800867a:	4293      	cmp	r3, r2
 800867c:	d0f9      	beq.n	8008672 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800867e:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 8008680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008682:	4b0a      	ldr	r3, [pc, #40]	; (80086ac <HAL_RCC_OscConfig+0x8b0>)
 8008684:	4013      	ands	r3, r2
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800868a:	00d2      	lsls	r2, r2, #3
 800868c:	4906      	ldr	r1, [pc, #24]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 800868e:	4313      	orrs	r3, r2
 8008690:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008692:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 8008694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008696:	4a04      	ldr	r2, [pc, #16]	; (80086a8 <HAL_RCC_OscConfig+0x8ac>)
 8008698:	f043 0301 	orr.w	r3, r3, #1
 800869c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3730      	adds	r7, #48	; 0x30
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	58024400 	.word	0x58024400
 80086ac:	ffff0007 	.word	0xffff0007

080086b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	e19c      	b.n	80089fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80086c4:	4b8a      	ldr	r3, [pc, #552]	; (80088f0 <HAL_RCC_ClockConfig+0x240>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f003 030f 	and.w	r3, r3, #15
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d910      	bls.n	80086f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086d2:	4b87      	ldr	r3, [pc, #540]	; (80088f0 <HAL_RCC_ClockConfig+0x240>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f023 020f 	bic.w	r2, r3, #15
 80086da:	4985      	ldr	r1, [pc, #532]	; (80088f0 <HAL_RCC_ClockConfig+0x240>)
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	4313      	orrs	r3, r2
 80086e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086e2:	4b83      	ldr	r3, [pc, #524]	; (80088f0 <HAL_RCC_ClockConfig+0x240>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 030f 	and.w	r3, r3, #15
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d001      	beq.n	80086f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e184      	b.n	80089fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d010      	beq.n	8008722 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691a      	ldr	r2, [r3, #16]
 8008704:	4b7b      	ldr	r3, [pc, #492]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008706:	699b      	ldr	r3, [r3, #24]
 8008708:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800870c:	429a      	cmp	r2, r3
 800870e:	d908      	bls.n	8008722 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008710:	4b78      	ldr	r3, [pc, #480]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008712:	699b      	ldr	r3, [r3, #24]
 8008714:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	691b      	ldr	r3, [r3, #16]
 800871c:	4975      	ldr	r1, [pc, #468]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 800871e:	4313      	orrs	r3, r2
 8008720:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0308 	and.w	r3, r3, #8
 800872a:	2b00      	cmp	r3, #0
 800872c:	d010      	beq.n	8008750 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	695a      	ldr	r2, [r3, #20]
 8008732:	4b70      	ldr	r3, [pc, #448]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800873a:	429a      	cmp	r2, r3
 800873c:	d908      	bls.n	8008750 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800873e:	4b6d      	ldr	r3, [pc, #436]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008740:	69db      	ldr	r3, [r3, #28]
 8008742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	496a      	ldr	r1, [pc, #424]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 800874c:	4313      	orrs	r3, r2
 800874e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0310 	and.w	r3, r3, #16
 8008758:	2b00      	cmp	r3, #0
 800875a:	d010      	beq.n	800877e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	699a      	ldr	r2, [r3, #24]
 8008760:	4b64      	ldr	r3, [pc, #400]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008762:	69db      	ldr	r3, [r3, #28]
 8008764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008768:	429a      	cmp	r2, r3
 800876a:	d908      	bls.n	800877e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800876c:	4b61      	ldr	r3, [pc, #388]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 800876e:	69db      	ldr	r3, [r3, #28]
 8008770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	495e      	ldr	r1, [pc, #376]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 800877a:	4313      	orrs	r3, r2
 800877c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0320 	and.w	r3, r3, #32
 8008786:	2b00      	cmp	r3, #0
 8008788:	d010      	beq.n	80087ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	69da      	ldr	r2, [r3, #28]
 800878e:	4b59      	ldr	r3, [pc, #356]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008790:	6a1b      	ldr	r3, [r3, #32]
 8008792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008796:	429a      	cmp	r2, r3
 8008798:	d908      	bls.n	80087ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800879a:	4b56      	ldr	r3, [pc, #344]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 800879c:	6a1b      	ldr	r3, [r3, #32]
 800879e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	69db      	ldr	r3, [r3, #28]
 80087a6:	4953      	ldr	r1, [pc, #332]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d010      	beq.n	80087da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	4b4d      	ldr	r3, [pc, #308]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	f003 030f 	and.w	r3, r3, #15
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d908      	bls.n	80087da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087c8:	4b4a      	ldr	r3, [pc, #296]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	f023 020f 	bic.w	r2, r3, #15
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	4947      	ldr	r1, [pc, #284]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d055      	beq.n	8008892 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80087e6:	4b43      	ldr	r3, [pc, #268]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	4940      	ldr	r1, [pc, #256]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 80087f4:	4313      	orrs	r3, r2
 80087f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	d107      	bne.n	8008810 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008800:	4b3c      	ldr	r3, [pc, #240]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d121      	bne.n	8008850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e0f6      	b.n	80089fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	2b03      	cmp	r3, #3
 8008816:	d107      	bne.n	8008828 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008818:	4b36      	ldr	r3, [pc, #216]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d115      	bne.n	8008850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e0ea      	b.n	80089fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	685b      	ldr	r3, [r3, #4]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d107      	bne.n	8008840 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008830:	4b30      	ldr	r3, [pc, #192]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008838:	2b00      	cmp	r3, #0
 800883a:	d109      	bne.n	8008850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800883c:	2301      	movs	r3, #1
 800883e:	e0de      	b.n	80089fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008840:	4b2c      	ldr	r3, [pc, #176]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f003 0304 	and.w	r3, r3, #4
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e0d6      	b.n	80089fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008850:	4b28      	ldr	r3, [pc, #160]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008852:	691b      	ldr	r3, [r3, #16]
 8008854:	f023 0207 	bic.w	r2, r3, #7
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	4925      	ldr	r1, [pc, #148]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 800885e:	4313      	orrs	r3, r2
 8008860:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008862:	f7fa faf1 	bl	8002e48 <HAL_GetTick>
 8008866:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008868:	e00a      	b.n	8008880 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800886a:	f7fa faed 	bl	8002e48 <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	f241 3288 	movw	r2, #5000	; 0x1388
 8008878:	4293      	cmp	r3, r2
 800887a:	d901      	bls.n	8008880 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e0be      	b.n	80089fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008880:	4b1c      	ldr	r3, [pc, #112]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	429a      	cmp	r2, r3
 8008890:	d1eb      	bne.n	800886a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0302 	and.w	r3, r3, #2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d010      	beq.n	80088c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	4b14      	ldr	r3, [pc, #80]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 80088a4:	699b      	ldr	r3, [r3, #24]
 80088a6:	f003 030f 	and.w	r3, r3, #15
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d208      	bcs.n	80088c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088ae:	4b11      	ldr	r3, [pc, #68]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	f023 020f 	bic.w	r2, r3, #15
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	490e      	ldr	r1, [pc, #56]	; (80088f4 <HAL_RCC_ClockConfig+0x244>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088c0:	4b0b      	ldr	r3, [pc, #44]	; (80088f0 <HAL_RCC_ClockConfig+0x240>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 030f 	and.w	r3, r3, #15
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d214      	bcs.n	80088f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ce:	4b08      	ldr	r3, [pc, #32]	; (80088f0 <HAL_RCC_ClockConfig+0x240>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f023 020f 	bic.w	r2, r3, #15
 80088d6:	4906      	ldr	r1, [pc, #24]	; (80088f0 <HAL_RCC_ClockConfig+0x240>)
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	4313      	orrs	r3, r2
 80088dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088de:	4b04      	ldr	r3, [pc, #16]	; (80088f0 <HAL_RCC_ClockConfig+0x240>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 030f 	and.w	r3, r3, #15
 80088e6:	683a      	ldr	r2, [r7, #0]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d005      	beq.n	80088f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e086      	b.n	80089fe <HAL_RCC_ClockConfig+0x34e>
 80088f0:	52002000 	.word	0x52002000
 80088f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f003 0304 	and.w	r3, r3, #4
 8008900:	2b00      	cmp	r3, #0
 8008902:	d010      	beq.n	8008926 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691a      	ldr	r2, [r3, #16]
 8008908:	4b3f      	ldr	r3, [pc, #252]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008910:	429a      	cmp	r2, r3
 8008912:	d208      	bcs.n	8008926 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008914:	4b3c      	ldr	r3, [pc, #240]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	691b      	ldr	r3, [r3, #16]
 8008920:	4939      	ldr	r1, [pc, #228]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 8008922:	4313      	orrs	r3, r2
 8008924:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0308 	and.w	r3, r3, #8
 800892e:	2b00      	cmp	r3, #0
 8008930:	d010      	beq.n	8008954 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695a      	ldr	r2, [r3, #20]
 8008936:	4b34      	ldr	r3, [pc, #208]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800893e:	429a      	cmp	r2, r3
 8008940:	d208      	bcs.n	8008954 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008942:	4b31      	ldr	r3, [pc, #196]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	492e      	ldr	r1, [pc, #184]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 8008950:	4313      	orrs	r3, r2
 8008952:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 0310 	and.w	r3, r3, #16
 800895c:	2b00      	cmp	r3, #0
 800895e:	d010      	beq.n	8008982 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	699a      	ldr	r2, [r3, #24]
 8008964:	4b28      	ldr	r3, [pc, #160]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800896c:	429a      	cmp	r2, r3
 800896e:	d208      	bcs.n	8008982 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008970:	4b25      	ldr	r3, [pc, #148]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	4922      	ldr	r1, [pc, #136]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 800897e:	4313      	orrs	r3, r2
 8008980:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	d010      	beq.n	80089b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	69da      	ldr	r2, [r3, #28]
 8008992:	4b1d      	ldr	r3, [pc, #116]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800899a:	429a      	cmp	r2, r3
 800899c:	d208      	bcs.n	80089b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800899e:	4b1a      	ldr	r3, [pc, #104]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 80089a0:	6a1b      	ldr	r3, [r3, #32]
 80089a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	4917      	ldr	r1, [pc, #92]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80089b0:	f000 f834 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 80089b4:	4602      	mov	r2, r0
 80089b6:	4b14      	ldr	r3, [pc, #80]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	0a1b      	lsrs	r3, r3, #8
 80089bc:	f003 030f 	and.w	r3, r3, #15
 80089c0:	4912      	ldr	r1, [pc, #72]	; (8008a0c <HAL_RCC_ClockConfig+0x35c>)
 80089c2:	5ccb      	ldrb	r3, [r1, r3]
 80089c4:	f003 031f 	and.w	r3, r3, #31
 80089c8:	fa22 f303 	lsr.w	r3, r2, r3
 80089cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089ce:	4b0e      	ldr	r3, [pc, #56]	; (8008a08 <HAL_RCC_ClockConfig+0x358>)
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	4a0d      	ldr	r2, [pc, #52]	; (8008a0c <HAL_RCC_ClockConfig+0x35c>)
 80089d8:	5cd3      	ldrb	r3, [r2, r3]
 80089da:	f003 031f 	and.w	r3, r3, #31
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	fa22 f303 	lsr.w	r3, r2, r3
 80089e4:	4a0a      	ldr	r2, [pc, #40]	; (8008a10 <HAL_RCC_ClockConfig+0x360>)
 80089e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089e8:	4a0a      	ldr	r2, [pc, #40]	; (8008a14 <HAL_RCC_ClockConfig+0x364>)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80089ee:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <HAL_RCC_ClockConfig+0x368>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f7fa f9de 	bl	8002db4 <HAL_InitTick>
 80089f8:	4603      	mov	r3, r0
 80089fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3718      	adds	r7, #24
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	0800d20c 	.word	0x0800d20c
 8008a10:	24000004 	.word	0x24000004
 8008a14:	24000000 	.word	0x24000000
 8008a18:	2400000c 	.word	0x2400000c

08008a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b089      	sub	sp, #36	; 0x24
 8008a20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a22:	4bb3      	ldr	r3, [pc, #716]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a2a:	2b18      	cmp	r3, #24
 8008a2c:	f200 8155 	bhi.w	8008cda <HAL_RCC_GetSysClockFreq+0x2be>
 8008a30:	a201      	add	r2, pc, #4	; (adr r2, 8008a38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a36:	bf00      	nop
 8008a38:	08008a9d 	.word	0x08008a9d
 8008a3c:	08008cdb 	.word	0x08008cdb
 8008a40:	08008cdb 	.word	0x08008cdb
 8008a44:	08008cdb 	.word	0x08008cdb
 8008a48:	08008cdb 	.word	0x08008cdb
 8008a4c:	08008cdb 	.word	0x08008cdb
 8008a50:	08008cdb 	.word	0x08008cdb
 8008a54:	08008cdb 	.word	0x08008cdb
 8008a58:	08008ac3 	.word	0x08008ac3
 8008a5c:	08008cdb 	.word	0x08008cdb
 8008a60:	08008cdb 	.word	0x08008cdb
 8008a64:	08008cdb 	.word	0x08008cdb
 8008a68:	08008cdb 	.word	0x08008cdb
 8008a6c:	08008cdb 	.word	0x08008cdb
 8008a70:	08008cdb 	.word	0x08008cdb
 8008a74:	08008cdb 	.word	0x08008cdb
 8008a78:	08008ac9 	.word	0x08008ac9
 8008a7c:	08008cdb 	.word	0x08008cdb
 8008a80:	08008cdb 	.word	0x08008cdb
 8008a84:	08008cdb 	.word	0x08008cdb
 8008a88:	08008cdb 	.word	0x08008cdb
 8008a8c:	08008cdb 	.word	0x08008cdb
 8008a90:	08008cdb 	.word	0x08008cdb
 8008a94:	08008cdb 	.word	0x08008cdb
 8008a98:	08008acf 	.word	0x08008acf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a9c:	4b94      	ldr	r3, [pc, #592]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aa8:	4b91      	ldr	r3, [pc, #580]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	08db      	lsrs	r3, r3, #3
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	4a90      	ldr	r2, [pc, #576]	; (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008aba:	e111      	b.n	8008ce0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008abc:	4b8d      	ldr	r3, [pc, #564]	; (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008abe:	61bb      	str	r3, [r7, #24]
      break;
 8008ac0:	e10e      	b.n	8008ce0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008ac2:	4b8d      	ldr	r3, [pc, #564]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ac4:	61bb      	str	r3, [r7, #24]
      break;
 8008ac6:	e10b      	b.n	8008ce0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ac8:	4b8c      	ldr	r3, [pc, #560]	; (8008cfc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008aca:	61bb      	str	r3, [r7, #24]
      break;
 8008acc:	e108      	b.n	8008ce0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ace:	4b88      	ldr	r3, [pc, #544]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008ad8:	4b85      	ldr	r3, [pc, #532]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008adc:	091b      	lsrs	r3, r3, #4
 8008ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ae2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008ae4:	4b82      	ldr	r3, [pc, #520]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	f003 0301 	and.w	r3, r3, #1
 8008aec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008aee:	4b80      	ldr	r3, [pc, #512]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af2:	08db      	lsrs	r3, r3, #3
 8008af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	fb02 f303 	mul.w	r3, r2, r3
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f000 80e1 	beq.w	8008cd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	f000 8083 	beq.w	8008c20 <HAL_RCC_GetSysClockFreq+0x204>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	f200 80a1 	bhi.w	8008c64 <HAL_RCC_GetSysClockFreq+0x248>
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d003      	beq.n	8008b30 <HAL_RCC_GetSysClockFreq+0x114>
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d056      	beq.n	8008bdc <HAL_RCC_GetSysClockFreq+0x1c0>
 8008b2e:	e099      	b.n	8008c64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008b30:	4b6f      	ldr	r3, [pc, #444]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0320 	and.w	r3, r3, #32
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d02d      	beq.n	8008b98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008b3c:	4b6c      	ldr	r3, [pc, #432]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	08db      	lsrs	r3, r3, #3
 8008b42:	f003 0303 	and.w	r3, r3, #3
 8008b46:	4a6b      	ldr	r2, [pc, #428]	; (8008cf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008b48:	fa22 f303 	lsr.w	r3, r2, r3
 8008b4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	ee07 3a90 	vmov	s15, r3
 8008b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b66:	4b62      	ldr	r3, [pc, #392]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b6e:	ee07 3a90 	vmov	s15, r3
 8008b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008b96:	e087      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	ee07 3a90 	vmov	s15, r3
 8008b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ba2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008d04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008baa:	4b51      	ldr	r3, [pc, #324]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bb2:	ee07 3a90 	vmov	s15, r3
 8008bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bbe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bda:	e065      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	ee07 3a90 	vmov	s15, r3
 8008be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008d08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bee:	4b40      	ldr	r3, [pc, #256]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bf6:	ee07 3a90 	vmov	s15, r3
 8008bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c1e:	e043      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	ee07 3a90 	vmov	s15, r3
 8008c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008d0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8008c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c32:	4b2f      	ldr	r3, [pc, #188]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c62:	e021      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	ee07 3a90 	vmov	s15, r3
 8008c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008d08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c76:	4b1e      	ldr	r3, [pc, #120]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c7e:	ee07 3a90 	vmov	s15, r3
 8008c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ca2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008ca6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008ca8:	4b11      	ldr	r3, [pc, #68]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cac:	0a5b      	lsrs	r3, r3, #9
 8008cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	ee07 3a90 	vmov	s15, r3
 8008cbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ccc:	ee17 3a90 	vmov	r3, s15
 8008cd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008cd2:	e005      	b.n	8008ce0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	61bb      	str	r3, [r7, #24]
      break;
 8008cd8:	e002      	b.n	8008ce0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008cda:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008cdc:	61bb      	str	r3, [r7, #24]
      break;
 8008cde:	bf00      	nop
  }

  return sysclockfreq;
 8008ce0:	69bb      	ldr	r3, [r7, #24]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3724      	adds	r7, #36	; 0x24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	58024400 	.word	0x58024400
 8008cf4:	03d09000 	.word	0x03d09000
 8008cf8:	003d0900 	.word	0x003d0900
 8008cfc:	016e3600 	.word	0x016e3600
 8008d00:	46000000 	.word	0x46000000
 8008d04:	4c742400 	.word	0x4c742400
 8008d08:	4a742400 	.word	0x4a742400
 8008d0c:	4bb71b00 	.word	0x4bb71b00

08008d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b082      	sub	sp, #8
 8008d14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008d16:	f7ff fe81 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	4b10      	ldr	r3, [pc, #64]	; (8008d60 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	0a1b      	lsrs	r3, r3, #8
 8008d22:	f003 030f 	and.w	r3, r3, #15
 8008d26:	490f      	ldr	r1, [pc, #60]	; (8008d64 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d28:	5ccb      	ldrb	r3, [r1, r3]
 8008d2a:	f003 031f 	and.w	r3, r3, #31
 8008d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008d32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008d34:	4b0a      	ldr	r3, [pc, #40]	; (8008d60 <HAL_RCC_GetHCLKFreq+0x50>)
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	f003 030f 	and.w	r3, r3, #15
 8008d3c:	4a09      	ldr	r2, [pc, #36]	; (8008d64 <HAL_RCC_GetHCLKFreq+0x54>)
 8008d3e:	5cd3      	ldrb	r3, [r2, r3]
 8008d40:	f003 031f 	and.w	r3, r3, #31
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	fa22 f303 	lsr.w	r3, r2, r3
 8008d4a:	4a07      	ldr	r2, [pc, #28]	; (8008d68 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008d4e:	4a07      	ldr	r2, [pc, #28]	; (8008d6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008d54:	4b04      	ldr	r3, [pc, #16]	; (8008d68 <HAL_RCC_GetHCLKFreq+0x58>)
 8008d56:	681b      	ldr	r3, [r3, #0]
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	58024400 	.word	0x58024400
 8008d64:	0800d20c 	.word	0x0800d20c
 8008d68:	24000004 	.word	0x24000004
 8008d6c:	24000000 	.word	0x24000000

08008d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008d74:	f7ff ffcc 	bl	8008d10 <HAL_RCC_GetHCLKFreq>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	4b06      	ldr	r3, [pc, #24]	; (8008d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	091b      	lsrs	r3, r3, #4
 8008d80:	f003 0307 	and.w	r3, r3, #7
 8008d84:	4904      	ldr	r1, [pc, #16]	; (8008d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008d86:	5ccb      	ldrb	r3, [r1, r3]
 8008d88:	f003 031f 	and.w	r3, r3, #31
 8008d8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	58024400 	.word	0x58024400
 8008d98:	0800d20c 	.word	0x0800d20c

08008d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008da0:	f7ff ffb6 	bl	8008d10 <HAL_RCC_GetHCLKFreq>
 8008da4:	4602      	mov	r2, r0
 8008da6:	4b06      	ldr	r3, [pc, #24]	; (8008dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	0a1b      	lsrs	r3, r3, #8
 8008dac:	f003 0307 	and.w	r3, r3, #7
 8008db0:	4904      	ldr	r1, [pc, #16]	; (8008dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008db2:	5ccb      	ldrb	r3, [r1, r3]
 8008db4:	f003 031f 	and.w	r3, r3, #31
 8008db8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	58024400 	.word	0x58024400
 8008dc4:	0800d20c 	.word	0x0800d20c

08008dc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dcc:	b0ca      	sub	sp, #296	; 0x128
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008dda:	2300      	movs	r3, #0
 8008ddc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008dec:	2500      	movs	r5, #0
 8008dee:	ea54 0305 	orrs.w	r3, r4, r5
 8008df2:	d049      	beq.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008dfe:	d02f      	beq.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008e00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008e04:	d828      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e0a:	d01a      	beq.n	8008e42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e10:	d822      	bhi.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d003      	beq.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1a:	d007      	beq.n	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008e1c:	e01c      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1e:	4bb8      	ldr	r3, [pc, #736]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e22:	4ab7      	ldr	r2, [pc, #732]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e2a:	e01a      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e30:	3308      	adds	r3, #8
 8008e32:	2102      	movs	r1, #2
 8008e34:	4618      	mov	r0, r3
 8008e36:	f002 fb61 	bl	800b4fc <RCCEx_PLL2_Config>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e40:	e00f      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e46:	3328      	adds	r3, #40	; 0x28
 8008e48:	2102      	movs	r1, #2
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f002 fc08 	bl	800b660 <RCCEx_PLL3_Config>
 8008e50:	4603      	mov	r3, r0
 8008e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008e56:	e004      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e5e:	e000      	b.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008e6a:	4ba5      	ldr	r3, [pc, #660]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e78:	4aa1      	ldr	r2, [pc, #644]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e7a:	430b      	orrs	r3, r1
 8008e7c:	6513      	str	r3, [r2, #80]	; 0x50
 8008e7e:	e003      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e90:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008e94:	f04f 0900 	mov.w	r9, #0
 8008e98:	ea58 0309 	orrs.w	r3, r8, r9
 8008e9c:	d047      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d82a      	bhi.n	8008efe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008ea8:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eae:	bf00      	nop
 8008eb0:	08008ec5 	.word	0x08008ec5
 8008eb4:	08008ed3 	.word	0x08008ed3
 8008eb8:	08008ee9 	.word	0x08008ee9
 8008ebc:	08008f07 	.word	0x08008f07
 8008ec0:	08008f07 	.word	0x08008f07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec4:	4b8e      	ldr	r3, [pc, #568]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	4a8d      	ldr	r2, [pc, #564]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ed0:	e01a      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed6:	3308      	adds	r3, #8
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f002 fb0e 	bl	800b4fc <RCCEx_PLL2_Config>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ee6:	e00f      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eec:	3328      	adds	r3, #40	; 0x28
 8008eee:	2100      	movs	r1, #0
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f002 fbb5 	bl	800b660 <RCCEx_PLL3_Config>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008efc:	e004      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f04:	e000      	b.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10a      	bne.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f10:	4b7b      	ldr	r3, [pc, #492]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f14:	f023 0107 	bic.w	r1, r3, #7
 8008f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f1e:	4a78      	ldr	r2, [pc, #480]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f20:	430b      	orrs	r3, r1
 8008f22:	6513      	str	r3, [r2, #80]	; 0x50
 8008f24:	e003      	b.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f36:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008f3a:	f04f 0b00 	mov.w	fp, #0
 8008f3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008f42:	d04c      	beq.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f4e:	d030      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f54:	d829      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f56:	2bc0      	cmp	r3, #192	; 0xc0
 8008f58:	d02d      	beq.n	8008fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8008f5c:	d825      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f5e:	2b80      	cmp	r3, #128	; 0x80
 8008f60:	d018      	beq.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008f62:	2b80      	cmp	r3, #128	; 0x80
 8008f64:	d821      	bhi.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d002      	beq.n	8008f70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008f6a:	2b40      	cmp	r3, #64	; 0x40
 8008f6c:	d007      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008f6e:	e01c      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f70:	4b63      	ldr	r3, [pc, #396]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f74:	4a62      	ldr	r2, [pc, #392]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008f7c:	e01c      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f82:	3308      	adds	r3, #8
 8008f84:	2100      	movs	r1, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f002 fab8 	bl	800b4fc <RCCEx_PLL2_Config>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008f92:	e011      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f98:	3328      	adds	r3, #40	; 0x28
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f002 fb5f 	bl	800b660 <RCCEx_PLL3_Config>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008fa8:	e006      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008fb0:	e002      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008fb2:	bf00      	nop
 8008fb4:	e000      	b.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d10a      	bne.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008fc0:	4b4f      	ldr	r3, [pc, #316]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fce:	4a4c      	ldr	r2, [pc, #304]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fd0:	430b      	orrs	r3, r1
 8008fd2:	6513      	str	r3, [r2, #80]	; 0x50
 8008fd4:	e003      	b.n	8008fde <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008fda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008fea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008fee:	2300      	movs	r3, #0
 8008ff0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008ff4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	d053      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009006:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800900a:	d035      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800900c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009010:	d82e      	bhi.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009012:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009016:	d031      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009018:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800901c:	d828      	bhi.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800901e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009022:	d01a      	beq.n	800905a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009028:	d822      	bhi.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800902a:	2b00      	cmp	r3, #0
 800902c:	d003      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800902e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009032:	d007      	beq.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009034:	e01c      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009036:	4b32      	ldr	r3, [pc, #200]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903a:	4a31      	ldr	r2, [pc, #196]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800903c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009040:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009042:	e01c      	b.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009048:	3308      	adds	r3, #8
 800904a:	2100      	movs	r1, #0
 800904c:	4618      	mov	r0, r3
 800904e:	f002 fa55 	bl	800b4fc <RCCEx_PLL2_Config>
 8009052:	4603      	mov	r3, r0
 8009054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009058:	e011      	b.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800905a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800905e:	3328      	adds	r3, #40	; 0x28
 8009060:	2100      	movs	r1, #0
 8009062:	4618      	mov	r0, r3
 8009064:	f002 fafc 	bl	800b660 <RCCEx_PLL3_Config>
 8009068:	4603      	mov	r3, r0
 800906a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800906e:	e006      	b.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009070:	2301      	movs	r3, #1
 8009072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009076:	e002      	b.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009078:	bf00      	nop
 800907a:	e000      	b.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800907c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800907e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10b      	bne.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009086:	4b1e      	ldr	r3, [pc, #120]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800908a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800908e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009092:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009096:	4a1a      	ldr	r2, [pc, #104]	; (8009100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009098:	430b      	orrs	r3, r1
 800909a:	6593      	str	r3, [r2, #88]	; 0x58
 800909c:	e003      	b.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80090a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ae:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80090b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80090b6:	2300      	movs	r3, #0
 80090b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80090bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80090c0:	460b      	mov	r3, r1
 80090c2:	4313      	orrs	r3, r2
 80090c4:	d056      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80090c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090d2:	d038      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80090d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090d8:	d831      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090de:	d034      	beq.n	800914a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80090e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090e4:	d82b      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090ea:	d01d      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80090ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090f0:	d825      	bhi.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d006      	beq.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80090f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090fa:	d00a      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80090fc:	e01f      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80090fe:	bf00      	nop
 8009100:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009104:	4ba2      	ldr	r3, [pc, #648]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009108:	4aa1      	ldr	r2, [pc, #644]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800910a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800910e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009110:	e01c      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009116:	3308      	adds	r3, #8
 8009118:	2100      	movs	r1, #0
 800911a:	4618      	mov	r0, r3
 800911c:	f002 f9ee 	bl	800b4fc <RCCEx_PLL2_Config>
 8009120:	4603      	mov	r3, r0
 8009122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009126:	e011      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800912c:	3328      	adds	r3, #40	; 0x28
 800912e:	2100      	movs	r1, #0
 8009130:	4618      	mov	r0, r3
 8009132:	f002 fa95 	bl	800b660 <RCCEx_PLL3_Config>
 8009136:	4603      	mov	r3, r0
 8009138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800913c:	e006      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800913e:	2301      	movs	r3, #1
 8009140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009144:	e002      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009146:	bf00      	nop
 8009148:	e000      	b.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800914a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800914c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10b      	bne.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009154:	4b8e      	ldr	r3, [pc, #568]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009158:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800915c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009160:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009164:	4a8a      	ldr	r2, [pc, #552]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009166:	430b      	orrs	r3, r1
 8009168:	6593      	str	r3, [r2, #88]	; 0x58
 800916a:	e003      	b.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800916c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009170:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009184:	2300      	movs	r3, #0
 8009186:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800918a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800918e:	460b      	mov	r3, r1
 8009190:	4313      	orrs	r3, r2
 8009192:	d03a      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800919a:	2b30      	cmp	r3, #48	; 0x30
 800919c:	d01f      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800919e:	2b30      	cmp	r3, #48	; 0x30
 80091a0:	d819      	bhi.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80091a2:	2b20      	cmp	r3, #32
 80091a4:	d00c      	beq.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80091a6:	2b20      	cmp	r3, #32
 80091a8:	d815      	bhi.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d019      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80091ae:	2b10      	cmp	r3, #16
 80091b0:	d111      	bne.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091b2:	4b77      	ldr	r3, [pc, #476]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b6:	4a76      	ldr	r2, [pc, #472]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80091be:	e011      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c4:	3308      	adds	r3, #8
 80091c6:	2102      	movs	r1, #2
 80091c8:	4618      	mov	r0, r3
 80091ca:	f002 f997 	bl	800b4fc <RCCEx_PLL2_Config>
 80091ce:	4603      	mov	r3, r0
 80091d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80091d4:	e006      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80091dc:	e002      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80091de:	bf00      	nop
 80091e0:	e000      	b.n	80091e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80091e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d10a      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80091ec:	4b68      	ldr	r3, [pc, #416]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80091f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fa:	4a65      	ldr	r2, [pc, #404]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091fc:	430b      	orrs	r3, r1
 80091fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009200:	e003      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800920a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009216:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800921a:	2300      	movs	r3, #0
 800921c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009220:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009224:	460b      	mov	r3, r1
 8009226:	4313      	orrs	r3, r2
 8009228:	d051      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800922a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800922e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009234:	d035      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800923a:	d82e      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800923c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009240:	d031      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009242:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009246:	d828      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800924c:	d01a      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800924e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009252:	d822      	bhi.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009254:	2b00      	cmp	r3, #0
 8009256:	d003      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800925c:	d007      	beq.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800925e:	e01c      	b.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009260:	4b4b      	ldr	r3, [pc, #300]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009264:	4a4a      	ldr	r2, [pc, #296]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800926a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800926c:	e01c      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800926e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009272:	3308      	adds	r3, #8
 8009274:	2100      	movs	r1, #0
 8009276:	4618      	mov	r0, r3
 8009278:	f002 f940 	bl	800b4fc <RCCEx_PLL2_Config>
 800927c:	4603      	mov	r3, r0
 800927e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009282:	e011      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009288:	3328      	adds	r3, #40	; 0x28
 800928a:	2100      	movs	r1, #0
 800928c:	4618      	mov	r0, r3
 800928e:	f002 f9e7 	bl	800b660 <RCCEx_PLL3_Config>
 8009292:	4603      	mov	r3, r0
 8009294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009298:	e006      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80092a0:	e002      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80092a2:	bf00      	nop
 80092a4:	e000      	b.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80092a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80092b0:	4b37      	ldr	r3, [pc, #220]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80092b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092be:	4a34      	ldr	r2, [pc, #208]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092c0:	430b      	orrs	r3, r1
 80092c2:	6513      	str	r3, [r2, #80]	; 0x50
 80092c4:	e003      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80092ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80092da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092de:	2300      	movs	r3, #0
 80092e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80092e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80092e8:	460b      	mov	r3, r1
 80092ea:	4313      	orrs	r3, r2
 80092ec:	d056      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80092ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092f8:	d033      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80092fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80092fe:	d82c      	bhi.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009304:	d02f      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800930a:	d826      	bhi.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800930c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009310:	d02b      	beq.n	800936a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009316:	d820      	bhi.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800931c:	d012      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800931e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009322:	d81a      	bhi.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009324:	2b00      	cmp	r3, #0
 8009326:	d022      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800932c:	d115      	bne.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800932e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009332:	3308      	adds	r3, #8
 8009334:	2101      	movs	r1, #1
 8009336:	4618      	mov	r0, r3
 8009338:	f002 f8e0 	bl	800b4fc <RCCEx_PLL2_Config>
 800933c:	4603      	mov	r3, r0
 800933e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009342:	e015      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009348:	3328      	adds	r3, #40	; 0x28
 800934a:	2101      	movs	r1, #1
 800934c:	4618      	mov	r0, r3
 800934e:	f002 f987 	bl	800b660 <RCCEx_PLL3_Config>
 8009352:	4603      	mov	r3, r0
 8009354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009358:	e00a      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009360:	e006      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009362:	bf00      	nop
 8009364:	e004      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009366:	bf00      	nop
 8009368:	e002      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800936a:	bf00      	nop
 800936c:	e000      	b.n	8009370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800936e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10d      	bne.n	8009394 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009378:	4b05      	ldr	r3, [pc, #20]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800937a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800937c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009386:	4a02      	ldr	r2, [pc, #8]	; (8009390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009388:	430b      	orrs	r3, r1
 800938a:	6513      	str	r3, [r2, #80]	; 0x50
 800938c:	e006      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800938e:	bf00      	nop
 8009390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800939c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093a4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80093a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093ac:	2300      	movs	r3, #0
 80093ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80093b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80093b6:	460b      	mov	r3, r1
 80093b8:	4313      	orrs	r3, r2
 80093ba:	d055      	beq.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80093bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093c8:	d033      	beq.n	8009432 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80093ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ce:	d82c      	bhi.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093d4:	d02f      	beq.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80093d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093da:	d826      	bhi.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093e0:	d02b      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80093e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80093e6:	d820      	bhi.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093ec:	d012      	beq.n	8009414 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80093ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093f2:	d81a      	bhi.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d022      	beq.n	800943e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80093f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093fc:	d115      	bne.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80093fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009402:	3308      	adds	r3, #8
 8009404:	2101      	movs	r1, #1
 8009406:	4618      	mov	r0, r3
 8009408:	f002 f878 	bl	800b4fc <RCCEx_PLL2_Config>
 800940c:	4603      	mov	r3, r0
 800940e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009412:	e015      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009418:	3328      	adds	r3, #40	; 0x28
 800941a:	2101      	movs	r1, #1
 800941c:	4618      	mov	r0, r3
 800941e:	f002 f91f 	bl	800b660 <RCCEx_PLL3_Config>
 8009422:	4603      	mov	r3, r0
 8009424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009428:	e00a      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009430:	e006      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009432:	bf00      	nop
 8009434:	e004      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009436:	bf00      	nop
 8009438:	e002      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800943a:	bf00      	nop
 800943c:	e000      	b.n	8009440 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800943e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10b      	bne.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009448:	4ba3      	ldr	r3, [pc, #652]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800944a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800944c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009458:	4a9f      	ldr	r2, [pc, #636]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800945a:	430b      	orrs	r3, r1
 800945c:	6593      	str	r3, [r2, #88]	; 0x58
 800945e:	e003      	b.n	8009468 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009478:	2300      	movs	r3, #0
 800947a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800947e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009482:	460b      	mov	r3, r1
 8009484:	4313      	orrs	r3, r2
 8009486:	d037      	beq.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800948c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009492:	d00e      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009498:	d816      	bhi.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d018      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800949e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094a2:	d111      	bne.n	80094c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094a4:	4b8c      	ldr	r3, [pc, #560]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	4a8b      	ldr	r2, [pc, #556]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80094ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80094b0:	e00f      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b6:	3308      	adds	r3, #8
 80094b8:	2101      	movs	r1, #1
 80094ba:	4618      	mov	r0, r3
 80094bc:	f002 f81e 	bl	800b4fc <RCCEx_PLL2_Config>
 80094c0:	4603      	mov	r3, r0
 80094c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80094c6:	e004      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80094ce:	e000      	b.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80094d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10a      	bne.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80094da:	4b7f      	ldr	r3, [pc, #508]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80094e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e8:	4a7b      	ldr	r2, [pc, #492]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094ea:	430b      	orrs	r3, r1
 80094ec:	6513      	str	r3, [r2, #80]	; 0x50
 80094ee:	e003      	b.n	80094f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80094f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009500:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009508:	2300      	movs	r3, #0
 800950a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800950e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009512:	460b      	mov	r3, r1
 8009514:	4313      	orrs	r3, r2
 8009516:	d039      	beq.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800951e:	2b03      	cmp	r3, #3
 8009520:	d81c      	bhi.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009522:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009528:	08009565 	.word	0x08009565
 800952c:	08009539 	.word	0x08009539
 8009530:	08009547 	.word	0x08009547
 8009534:	08009565 	.word	0x08009565
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009538:	4b67      	ldr	r3, [pc, #412]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800953a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800953c:	4a66      	ldr	r2, [pc, #408]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800953e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009544:	e00f      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800954a:	3308      	adds	r3, #8
 800954c:	2102      	movs	r1, #2
 800954e:	4618      	mov	r0, r3
 8009550:	f001 ffd4 	bl	800b4fc <RCCEx_PLL2_Config>
 8009554:	4603      	mov	r3, r0
 8009556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800955a:	e004      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009562:	e000      	b.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10a      	bne.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800956e:	4b5a      	ldr	r3, [pc, #360]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009572:	f023 0103 	bic.w	r1, r3, #3
 8009576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800957a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800957c:	4a56      	ldr	r2, [pc, #344]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800957e:	430b      	orrs	r3, r1
 8009580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009582:	e003      	b.n	800958c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009588:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800958c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009594:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009598:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800959c:	2300      	movs	r3, #0
 800959e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80095a6:	460b      	mov	r3, r1
 80095a8:	4313      	orrs	r3, r2
 80095aa:	f000 809f 	beq.w	80096ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095ae:	4b4b      	ldr	r3, [pc, #300]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a4a      	ldr	r2, [pc, #296]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095ba:	f7f9 fc45 	bl	8002e48 <HAL_GetTick>
 80095be:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095c2:	e00b      	b.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095c4:	f7f9 fc40 	bl	8002e48 <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	2b64      	cmp	r3, #100	; 0x64
 80095d2:	d903      	bls.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095da:	e005      	b.n	80095e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095dc:	4b3f      	ldr	r3, [pc, #252]	; (80096dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d0ed      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80095e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d179      	bne.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80095f0:	4b39      	ldr	r3, [pc, #228]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80095f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80095fc:	4053      	eors	r3, r2
 80095fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009602:	2b00      	cmp	r3, #0
 8009604:	d015      	beq.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009606:	4b34      	ldr	r3, [pc, #208]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800960e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009612:	4b31      	ldr	r3, [pc, #196]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009616:	4a30      	ldr	r2, [pc, #192]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800961c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800961e:	4b2e      	ldr	r3, [pc, #184]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009622:	4a2d      	ldr	r2, [pc, #180]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009628:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800962a:	4a2b      	ldr	r2, [pc, #172]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800962c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8009630:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009636:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800963a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800963e:	d118      	bne.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009640:	f7f9 fc02 	bl	8002e48 <HAL_GetTick>
 8009644:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009648:	e00d      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800964a:	f7f9 fbfd 	bl	8002e48 <HAL_GetTick>
 800964e:	4602      	mov	r2, r0
 8009650:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009654:	1ad2      	subs	r2, r2, r3
 8009656:	f241 3388 	movw	r3, #5000	; 0x1388
 800965a:	429a      	cmp	r2, r3
 800965c:	d903      	bls.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009664:	e005      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009666:	4b1c      	ldr	r3, [pc, #112]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966a:	f003 0302 	and.w	r3, r3, #2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0eb      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009676:	2b00      	cmp	r3, #0
 8009678:	d129      	bne.n	80096ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800967a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800968a:	d10e      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800968c:	4b12      	ldr	r3, [pc, #72]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009698:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800969c:	091a      	lsrs	r2, r3, #4
 800969e:	4b10      	ldr	r3, [pc, #64]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80096a0:	4013      	ands	r3, r2
 80096a2:	4a0d      	ldr	r2, [pc, #52]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096a4:	430b      	orrs	r3, r1
 80096a6:	6113      	str	r3, [r2, #16]
 80096a8:	e005      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80096aa:	4b0b      	ldr	r3, [pc, #44]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	4a0a      	ldr	r2, [pc, #40]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80096b4:	6113      	str	r3, [r2, #16]
 80096b6:	4b08      	ldr	r3, [pc, #32]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80096ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80096c6:	4a04      	ldr	r2, [pc, #16]	; (80096d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c8:	430b      	orrs	r3, r1
 80096ca:	6713      	str	r3, [r2, #112]	; 0x70
 80096cc:	e00e      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80096ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80096d6:	e009      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80096d8:	58024400 	.word	0x58024400
 80096dc:	58024800 	.word	0x58024800
 80096e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80096ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f002 0301 	and.w	r3, r2, #1
 80096f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80096fc:	2300      	movs	r3, #0
 80096fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009702:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009706:	460b      	mov	r3, r1
 8009708:	4313      	orrs	r3, r2
 800970a:	f000 8089 	beq.w	8009820 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800970e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009714:	2b28      	cmp	r3, #40	; 0x28
 8009716:	d86b      	bhi.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009718:	a201      	add	r2, pc, #4	; (adr r2, 8009720 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800971a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800971e:	bf00      	nop
 8009720:	080097f9 	.word	0x080097f9
 8009724:	080097f1 	.word	0x080097f1
 8009728:	080097f1 	.word	0x080097f1
 800972c:	080097f1 	.word	0x080097f1
 8009730:	080097f1 	.word	0x080097f1
 8009734:	080097f1 	.word	0x080097f1
 8009738:	080097f1 	.word	0x080097f1
 800973c:	080097f1 	.word	0x080097f1
 8009740:	080097c5 	.word	0x080097c5
 8009744:	080097f1 	.word	0x080097f1
 8009748:	080097f1 	.word	0x080097f1
 800974c:	080097f1 	.word	0x080097f1
 8009750:	080097f1 	.word	0x080097f1
 8009754:	080097f1 	.word	0x080097f1
 8009758:	080097f1 	.word	0x080097f1
 800975c:	080097f1 	.word	0x080097f1
 8009760:	080097db 	.word	0x080097db
 8009764:	080097f1 	.word	0x080097f1
 8009768:	080097f1 	.word	0x080097f1
 800976c:	080097f1 	.word	0x080097f1
 8009770:	080097f1 	.word	0x080097f1
 8009774:	080097f1 	.word	0x080097f1
 8009778:	080097f1 	.word	0x080097f1
 800977c:	080097f1 	.word	0x080097f1
 8009780:	080097f9 	.word	0x080097f9
 8009784:	080097f1 	.word	0x080097f1
 8009788:	080097f1 	.word	0x080097f1
 800978c:	080097f1 	.word	0x080097f1
 8009790:	080097f1 	.word	0x080097f1
 8009794:	080097f1 	.word	0x080097f1
 8009798:	080097f1 	.word	0x080097f1
 800979c:	080097f1 	.word	0x080097f1
 80097a0:	080097f9 	.word	0x080097f9
 80097a4:	080097f1 	.word	0x080097f1
 80097a8:	080097f1 	.word	0x080097f1
 80097ac:	080097f1 	.word	0x080097f1
 80097b0:	080097f1 	.word	0x080097f1
 80097b4:	080097f1 	.word	0x080097f1
 80097b8:	080097f1 	.word	0x080097f1
 80097bc:	080097f1 	.word	0x080097f1
 80097c0:	080097f9 	.word	0x080097f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c8:	3308      	adds	r3, #8
 80097ca:	2101      	movs	r1, #1
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 fe95 	bl	800b4fc <RCCEx_PLL2_Config>
 80097d2:	4603      	mov	r3, r0
 80097d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80097d8:	e00f      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097de:	3328      	adds	r3, #40	; 0x28
 80097e0:	2101      	movs	r1, #1
 80097e2:	4618      	mov	r0, r3
 80097e4:	f001 ff3c 	bl	800b660 <RCCEx_PLL3_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80097ee:	e004      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097f0:	2301      	movs	r3, #1
 80097f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097f6:	e000      	b.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80097f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d10a      	bne.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009802:	4bbf      	ldr	r3, [pc, #764]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009806:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800980a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800980e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009810:	4abb      	ldr	r2, [pc, #748]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009812:	430b      	orrs	r3, r1
 8009814:	6553      	str	r3, [r2, #84]	; 0x54
 8009816:	e003      	b.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800981c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f002 0302 	and.w	r3, r2, #2
 800982c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009830:	2300      	movs	r3, #0
 8009832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009836:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800983a:	460b      	mov	r3, r1
 800983c:	4313      	orrs	r3, r2
 800983e:	d041      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009846:	2b05      	cmp	r3, #5
 8009848:	d824      	bhi.n	8009894 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800984a:	a201      	add	r2, pc, #4	; (adr r2, 8009850 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800984c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009850:	0800989d 	.word	0x0800989d
 8009854:	08009869 	.word	0x08009869
 8009858:	0800987f 	.word	0x0800987f
 800985c:	0800989d 	.word	0x0800989d
 8009860:	0800989d 	.word	0x0800989d
 8009864:	0800989d 	.word	0x0800989d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800986c:	3308      	adds	r3, #8
 800986e:	2101      	movs	r1, #1
 8009870:	4618      	mov	r0, r3
 8009872:	f001 fe43 	bl	800b4fc <RCCEx_PLL2_Config>
 8009876:	4603      	mov	r3, r0
 8009878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800987c:	e00f      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800987e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009882:	3328      	adds	r3, #40	; 0x28
 8009884:	2101      	movs	r1, #1
 8009886:	4618      	mov	r0, r3
 8009888:	f001 feea 	bl	800b660 <RCCEx_PLL3_Config>
 800988c:	4603      	mov	r3, r0
 800988e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009892:	e004      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800989a:	e000      	b.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800989c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800989e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d10a      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80098a6:	4b96      	ldr	r3, [pc, #600]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098aa:	f023 0107 	bic.w	r1, r3, #7
 80098ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80098b4:	4a92      	ldr	r2, [pc, #584]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098b6:	430b      	orrs	r3, r1
 80098b8:	6553      	str	r3, [r2, #84]	; 0x54
 80098ba:	e003      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098cc:	f002 0304 	and.w	r3, r2, #4
 80098d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80098d4:	2300      	movs	r3, #0
 80098d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80098de:	460b      	mov	r3, r1
 80098e0:	4313      	orrs	r3, r2
 80098e2:	d044      	beq.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80098e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098ec:	2b05      	cmp	r3, #5
 80098ee:	d825      	bhi.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80098f0:	a201      	add	r2, pc, #4	; (adr r2, 80098f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80098f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f6:	bf00      	nop
 80098f8:	08009945 	.word	0x08009945
 80098fc:	08009911 	.word	0x08009911
 8009900:	08009927 	.word	0x08009927
 8009904:	08009945 	.word	0x08009945
 8009908:	08009945 	.word	0x08009945
 800990c:	08009945 	.word	0x08009945
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009914:	3308      	adds	r3, #8
 8009916:	2101      	movs	r1, #1
 8009918:	4618      	mov	r0, r3
 800991a:	f001 fdef 	bl	800b4fc <RCCEx_PLL2_Config>
 800991e:	4603      	mov	r3, r0
 8009920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009924:	e00f      	b.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800992a:	3328      	adds	r3, #40	; 0x28
 800992c:	2101      	movs	r1, #1
 800992e:	4618      	mov	r0, r3
 8009930:	f001 fe96 	bl	800b660 <RCCEx_PLL3_Config>
 8009934:	4603      	mov	r3, r0
 8009936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800993a:	e004      	b.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009942:	e000      	b.n	8009946 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800994a:	2b00      	cmp	r3, #0
 800994c:	d10b      	bne.n	8009966 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800994e:	4b6c      	ldr	r3, [pc, #432]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009952:	f023 0107 	bic.w	r1, r3, #7
 8009956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800995e:	4a68      	ldr	r2, [pc, #416]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009960:	430b      	orrs	r3, r1
 8009962:	6593      	str	r3, [r2, #88]	; 0x58
 8009964:	e003      	b.n	800996e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800996a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800996e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009976:	f002 0320 	and.w	r3, r2, #32
 800997a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800997e:	2300      	movs	r3, #0
 8009980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009984:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009988:	460b      	mov	r3, r1
 800998a:	4313      	orrs	r3, r2
 800998c:	d055      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800998e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800999a:	d033      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800999c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80099a0:	d82c      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099a6:	d02f      	beq.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80099a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ac:	d826      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099b2:	d02b      	beq.n	8009a0c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80099b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80099b8:	d820      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099be:	d012      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80099c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099c4:	d81a      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d022      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80099ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80099ce:	d115      	bne.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099d4:	3308      	adds	r3, #8
 80099d6:	2100      	movs	r1, #0
 80099d8:	4618      	mov	r0, r3
 80099da:	f001 fd8f 	bl	800b4fc <RCCEx_PLL2_Config>
 80099de:	4603      	mov	r3, r0
 80099e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80099e4:	e015      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ea:	3328      	adds	r3, #40	; 0x28
 80099ec:	2102      	movs	r1, #2
 80099ee:	4618      	mov	r0, r3
 80099f0:	f001 fe36 	bl	800b660 <RCCEx_PLL3_Config>
 80099f4:	4603      	mov	r3, r0
 80099f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80099fa:	e00a      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a02:	e006      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a04:	bf00      	nop
 8009a06:	e004      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a08:	bf00      	nop
 8009a0a:	e002      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a0c:	bf00      	nop
 8009a0e:	e000      	b.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10b      	bne.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009a1a:	4b39      	ldr	r3, [pc, #228]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a2a:	4a35      	ldr	r2, [pc, #212]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a2c:	430b      	orrs	r3, r1
 8009a2e:	6553      	str	r3, [r2, #84]	; 0x54
 8009a30:	e003      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009a50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009a54:	460b      	mov	r3, r1
 8009a56:	4313      	orrs	r3, r2
 8009a58:	d058      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a66:	d033      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009a68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009a6c:	d82c      	bhi.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a72:	d02f      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a78:	d826      	bhi.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a7e:	d02b      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a84:	d820      	bhi.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a8a:	d012      	beq.n	8009ab2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a90:	d81a      	bhi.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d022      	beq.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a9a:	d115      	bne.n	8009ac8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 fd29 	bl	800b4fc <RCCEx_PLL2_Config>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ab0:	e015      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ab6:	3328      	adds	r3, #40	; 0x28
 8009ab8:	2102      	movs	r1, #2
 8009aba:	4618      	mov	r0, r3
 8009abc:	f001 fdd0 	bl	800b660 <RCCEx_PLL3_Config>
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ac6:	e00a      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ace:	e006      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ad0:	bf00      	nop
 8009ad2:	e004      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ad4:	bf00      	nop
 8009ad6:	e002      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009ad8:	bf00      	nop
 8009ada:	e000      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10e      	bne.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009ae6:	4b06      	ldr	r3, [pc, #24]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009af6:	4a02      	ldr	r2, [pc, #8]	; (8009b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009af8:	430b      	orrs	r3, r1
 8009afa:	6593      	str	r3, [r2, #88]	; 0x58
 8009afc:	e006      	b.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009afe:	bf00      	nop
 8009b00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b14:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009b26:	460b      	mov	r3, r1
 8009b28:	4313      	orrs	r3, r2
 8009b2a:	d055      	beq.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009b34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009b38:	d033      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009b3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009b3e:	d82c      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b44:	d02f      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b4a:	d826      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009b50:	d02b      	beq.n	8009baa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009b52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009b56:	d820      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b5c:	d012      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b62:	d81a      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d022      	beq.n	8009bae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b6c:	d115      	bne.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b72:	3308      	adds	r3, #8
 8009b74:	2100      	movs	r1, #0
 8009b76:	4618      	mov	r0, r3
 8009b78:	f001 fcc0 	bl	800b4fc <RCCEx_PLL2_Config>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009b82:	e015      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b88:	3328      	adds	r3, #40	; 0x28
 8009b8a:	2102      	movs	r1, #2
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f001 fd67 	bl	800b660 <RCCEx_PLL3_Config>
 8009b92:	4603      	mov	r3, r0
 8009b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009b98:	e00a      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ba0:	e006      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ba2:	bf00      	nop
 8009ba4:	e004      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ba6:	bf00      	nop
 8009ba8:	e002      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009baa:	bf00      	nop
 8009bac:	e000      	b.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10b      	bne.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009bb8:	4ba1      	ldr	r3, [pc, #644]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bbc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009bc8:	4a9d      	ldr	r2, [pc, #628]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bca:	430b      	orrs	r3, r1
 8009bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8009bce:	e003      	b.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	f002 0308 	and.w	r3, r2, #8
 8009be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009be8:	2300      	movs	r3, #0
 8009bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009bee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	d01e      	beq.n	8009c36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c04:	d10c      	bne.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c0a:	3328      	adds	r3, #40	; 0x28
 8009c0c:	2102      	movs	r1, #2
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f001 fd26 	bl	800b660 <RCCEx_PLL3_Config>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009c20:	4b87      	ldr	r3, [pc, #540]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c30:	4a83      	ldr	r2, [pc, #524]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c32:	430b      	orrs	r3, r1
 8009c34:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f002 0310 	and.w	r3, r2, #16
 8009c42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009c46:	2300      	movs	r3, #0
 8009c48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009c4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009c50:	460b      	mov	r3, r1
 8009c52:	4313      	orrs	r3, r2
 8009c54:	d01e      	beq.n	8009c94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c62:	d10c      	bne.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c68:	3328      	adds	r3, #40	; 0x28
 8009c6a:	2102      	movs	r1, #2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 fcf7 	bl	800b660 <RCCEx_PLL3_Config>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d002      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009c7e:	4b70      	ldr	r3, [pc, #448]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c8e:	4a6c      	ldr	r2, [pc, #432]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c90:	430b      	orrs	r3, r1
 8009c92:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009caa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	d03e      	beq.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cc0:	d022      	beq.n	8009d08 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009cc6:	d81b      	bhi.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d003      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cd0:	d00b      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009cd2:	e015      	b.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd8:	3308      	adds	r3, #8
 8009cda:	2100      	movs	r1, #0
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f001 fc0d 	bl	800b4fc <RCCEx_PLL2_Config>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009ce8:	e00f      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cee:	3328      	adds	r3, #40	; 0x28
 8009cf0:	2102      	movs	r1, #2
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	f001 fcb4 	bl	800b660 <RCCEx_PLL3_Config>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009cfe:	e004      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d06:	e000      	b.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10b      	bne.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d12:	4b4b      	ldr	r3, [pc, #300]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009d22:	4a47      	ldr	r2, [pc, #284]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d24:	430b      	orrs	r3, r1
 8009d26:	6593      	str	r3, [r2, #88]	; 0x58
 8009d28:	e003      	b.n	8009d32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009d3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d40:	2300      	movs	r3, #0
 8009d42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009d44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	d03b      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d5a:	d01f      	beq.n	8009d9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009d60:	d818      	bhi.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d66:	d003      	beq.n	8009d70 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d6c:	d007      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009d6e:	e011      	b.n	8009d94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d70:	4b33      	ldr	r3, [pc, #204]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	4a32      	ldr	r2, [pc, #200]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009d7c:	e00f      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d82:	3328      	adds	r3, #40	; 0x28
 8009d84:	2101      	movs	r1, #1
 8009d86:	4618      	mov	r0, r3
 8009d88:	f001 fc6a 	bl	800b660 <RCCEx_PLL3_Config>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009d92:	e004      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d9a:	e000      	b.n	8009d9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d10b      	bne.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009da6:	4b26      	ldr	r3, [pc, #152]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009daa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009db6:	4a22      	ldr	r2, [pc, #136]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009db8:	430b      	orrs	r3, r1
 8009dba:	6553      	str	r3, [r2, #84]	; 0x54
 8009dbc:	e003      	b.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009dd2:	673b      	str	r3, [r7, #112]	; 0x70
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	677b      	str	r3, [r7, #116]	; 0x74
 8009dd8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009ddc:	460b      	mov	r3, r1
 8009dde:	4313      	orrs	r3, r2
 8009de0:	d034      	beq.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df0:	d007      	beq.n	8009e02 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009df2:	e011      	b.n	8009e18 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009df4:	4b12      	ldr	r3, [pc, #72]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	4a11      	ldr	r2, [pc, #68]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e00:	e00e      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e06:	3308      	adds	r3, #8
 8009e08:	2102      	movs	r1, #2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 fb76 	bl	800b4fc <RCCEx_PLL2_Config>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009e16:	e003      	b.n	8009e20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d10d      	bne.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009e28:	4b05      	ldr	r3, [pc, #20]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e36:	4a02      	ldr	r2, [pc, #8]	; (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e38:	430b      	orrs	r3, r1
 8009e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e3c:	e006      	b.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009e3e:	bf00      	nop
 8009e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e54:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009e62:	460b      	mov	r3, r1
 8009e64:	4313      	orrs	r3, r2
 8009e66:	d00c      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e6c:	3328      	adds	r3, #40	; 0x28
 8009e6e:	2102      	movs	r1, #2
 8009e70:	4618      	mov	r0, r3
 8009e72:	f001 fbf5 	bl	800b660 <RCCEx_PLL3_Config>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8009e90:	2300      	movs	r3, #0
 8009e92:	667b      	str	r3, [r7, #100]	; 0x64
 8009e94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	d038      	beq.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eaa:	d018      	beq.n	8009ede <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eb0:	d811      	bhi.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eb6:	d014      	beq.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ebc:	d80b      	bhi.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d011      	beq.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ec6:	d106      	bne.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec8:	4bc3      	ldr	r3, [pc, #780]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	4ac2      	ldr	r2, [pc, #776]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009ed4:	e008      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009edc:	e004      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009ede:	bf00      	nop
 8009ee0:	e002      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009ee2:	bf00      	nop
 8009ee4:	e000      	b.n	8009ee8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10b      	bne.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ef0:	4bb9      	ldr	r3, [pc, #740]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ef4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f00:	4ab5      	ldr	r2, [pc, #724]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f02:	430b      	orrs	r3, r1
 8009f04:	6553      	str	r3, [r2, #84]	; 0x54
 8009f06:	e003      	b.n	8009f10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f18:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009f1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f1e:	2300      	movs	r3, #0
 8009f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009f22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009f26:	460b      	mov	r3, r1
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	d009      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009f2c:	4baa      	ldr	r3, [pc, #680]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f3a:	4aa7      	ldr	r2, [pc, #668]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f3c:	430b      	orrs	r3, r1
 8009f3e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009f4c:	653b      	str	r3, [r7, #80]	; 0x50
 8009f4e:	2300      	movs	r3, #0
 8009f50:	657b      	str	r3, [r7, #84]	; 0x54
 8009f52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009f56:	460b      	mov	r3, r1
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	d00a      	beq.n	8009f72 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009f5c:	4b9e      	ldr	r3, [pc, #632]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009f6c:	4a9a      	ldr	r2, [pc, #616]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f7a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f80:	2300      	movs	r3, #0
 8009f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f84:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009f88:	460b      	mov	r3, r1
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	d009      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009f8e:	4b92      	ldr	r3, [pc, #584]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f92:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f9c:	4a8e      	ldr	r2, [pc, #568]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f9e:	430b      	orrs	r3, r1
 8009fa0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009fae:	643b      	str	r3, [r7, #64]	; 0x40
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8009fb4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	d00e      	beq.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009fbe:	4b86      	ldr	r3, [pc, #536]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fc0:	691b      	ldr	r3, [r3, #16]
 8009fc2:	4a85      	ldr	r2, [pc, #532]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009fc8:	6113      	str	r3, [r2, #16]
 8009fca:	4b83      	ldr	r3, [pc, #524]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fcc:	6919      	ldr	r1, [r3, #16]
 8009fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009fd6:	4a80      	ldr	r2, [pc, #512]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009fd8:	430b      	orrs	r3, r1
 8009fda:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009fe8:	63bb      	str	r3, [r7, #56]	; 0x38
 8009fea:	2300      	movs	r3, #0
 8009fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	d009      	beq.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009ff8:	4b77      	ldr	r3, [pc, #476]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ffc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a006:	4a74      	ldr	r2, [pc, #464]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a008:	430b      	orrs	r3, r1
 800a00a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a014:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a018:	633b      	str	r3, [r7, #48]	; 0x30
 800a01a:	2300      	movs	r3, #0
 800a01c:	637b      	str	r3, [r7, #52]	; 0x34
 800a01e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a022:	460b      	mov	r3, r1
 800a024:	4313      	orrs	r3, r2
 800a026:	d00a      	beq.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a028:	4b6b      	ldr	r3, [pc, #428]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a02a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a02c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a038:	4a67      	ldr	r2, [pc, #412]	; (800a1d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a03a:	430b      	orrs	r3, r1
 800a03c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	2100      	movs	r1, #0
 800a048:	62b9      	str	r1, [r7, #40]	; 0x28
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a050:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a054:	460b      	mov	r3, r1
 800a056:	4313      	orrs	r3, r2
 800a058:	d011      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a05e:	3308      	adds	r3, #8
 800a060:	2100      	movs	r1, #0
 800a062:	4618      	mov	r0, r3
 800a064:	f001 fa4a 	bl	800b4fc <RCCEx_PLL2_Config>
 800a068:	4603      	mov	r3, r0
 800a06a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a06e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a072:	2b00      	cmp	r3, #0
 800a074:	d003      	beq.n	800a07e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a07a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a086:	2100      	movs	r1, #0
 800a088:	6239      	str	r1, [r7, #32]
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	627b      	str	r3, [r7, #36]	; 0x24
 800a090:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a094:	460b      	mov	r3, r1
 800a096:	4313      	orrs	r3, r2
 800a098:	d011      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a09e:	3308      	adds	r3, #8
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f001 fa2a 	bl	800b4fc <RCCEx_PLL2_Config>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a0ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	61b9      	str	r1, [r7, #24]
 800a0ca:	f003 0304 	and.w	r3, r3, #4
 800a0ce:	61fb      	str	r3, [r7, #28]
 800a0d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	d011      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0de:	3308      	adds	r3, #8
 800a0e0:	2102      	movs	r1, #2
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f001 fa0a 	bl	800b4fc <RCCEx_PLL2_Config>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a0ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d003      	beq.n	800a0fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a106:	2100      	movs	r1, #0
 800a108:	6139      	str	r1, [r7, #16]
 800a10a:	f003 0308 	and.w	r3, r3, #8
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a114:	460b      	mov	r3, r1
 800a116:	4313      	orrs	r3, r2
 800a118:	d011      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a11e:	3328      	adds	r3, #40	; 0x28
 800a120:	2100      	movs	r1, #0
 800a122:	4618      	mov	r0, r3
 800a124:	f001 fa9c 	bl	800b660 <RCCEx_PLL3_Config>
 800a128:	4603      	mov	r3, r0
 800a12a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a12e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a132:	2b00      	cmp	r3, #0
 800a134:	d003      	beq.n	800a13e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a13a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a146:	2100      	movs	r1, #0
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	f003 0310 	and.w	r3, r3, #16
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a154:	460b      	mov	r3, r1
 800a156:	4313      	orrs	r3, r2
 800a158:	d011      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a15a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a15e:	3328      	adds	r3, #40	; 0x28
 800a160:	2101      	movs	r1, #1
 800a162:	4618      	mov	r0, r3
 800a164:	f001 fa7c 	bl	800b660 <RCCEx_PLL3_Config>
 800a168:	4603      	mov	r3, r0
 800a16a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a16e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a172:	2b00      	cmp	r3, #0
 800a174:	d003      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a17a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	2100      	movs	r1, #0
 800a188:	6039      	str	r1, [r7, #0]
 800a18a:	f003 0320 	and.w	r3, r3, #32
 800a18e:	607b      	str	r3, [r7, #4]
 800a190:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a194:	460b      	mov	r3, r1
 800a196:	4313      	orrs	r3, r2
 800a198:	d011      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a19e:	3328      	adds	r3, #40	; 0x28
 800a1a0:	2102      	movs	r1, #2
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f001 fa5c 	bl	800b660 <RCCEx_PLL3_Config>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a1ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a1ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a1be:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	e000      	b.n	800a1cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a1d8:	58024400 	.word	0x58024400

0800a1dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b090      	sub	sp, #64	; 0x40
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a1e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1ea:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a1ee:	430b      	orrs	r3, r1
 800a1f0:	f040 8094 	bne.w	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a1f4:	4b9e      	ldr	r3, [pc, #632]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1f8:	f003 0307 	and.w	r3, r3, #7
 800a1fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a200:	2b04      	cmp	r3, #4
 800a202:	f200 8087 	bhi.w	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a206:	a201      	add	r2, pc, #4	; (adr r2, 800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a221 	.word	0x0800a221
 800a210:	0800a249 	.word	0x0800a249
 800a214:	0800a271 	.word	0x0800a271
 800a218:	0800a30d 	.word	0x0800a30d
 800a21c:	0800a299 	.word	0x0800a299
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a220:	4b93      	ldr	r3, [pc, #588]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a22c:	d108      	bne.n	800a240 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a22e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a232:	4618      	mov	r0, r3
 800a234:	f001 f810 	bl	800b258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a23c:	f000 bd45 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a240:	2300      	movs	r3, #0
 800a242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a244:	f000 bd41 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a248:	4b89      	ldr	r3, [pc, #548]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a254:	d108      	bne.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a256:	f107 0318 	add.w	r3, r7, #24
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 fd54 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a264:	f000 bd31 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a26c:	f000 bd2d 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a270:	4b7f      	ldr	r3, [pc, #508]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a27c:	d108      	bne.n	800a290 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a27e:	f107 030c 	add.w	r3, r7, #12
 800a282:	4618      	mov	r0, r3
 800a284:	f000 fe94 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a28c:	f000 bd1d 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a290:	2300      	movs	r3, #0
 800a292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a294:	f000 bd19 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a298:	4b75      	ldr	r3, [pc, #468]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a29a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a29c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a2a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a2a2:	4b73      	ldr	r3, [pc, #460]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f003 0304 	and.w	r3, r3, #4
 800a2aa:	2b04      	cmp	r3, #4
 800a2ac:	d10c      	bne.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a2ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d109      	bne.n	800a2c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a2b4:	4b6e      	ldr	r3, [pc, #440]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	08db      	lsrs	r3, r3, #3
 800a2ba:	f003 0303 	and.w	r3, r3, #3
 800a2be:	4a6d      	ldr	r2, [pc, #436]	; (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a2c0:	fa22 f303 	lsr.w	r3, r2, r3
 800a2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2c6:	e01f      	b.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a2c8:	4b69      	ldr	r3, [pc, #420]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2d4:	d106      	bne.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2dc:	d102      	bne.n	800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a2de:	4b66      	ldr	r3, [pc, #408]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a2e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2e2:	e011      	b.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a2e4:	4b62      	ldr	r3, [pc, #392]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a2f0:	d106      	bne.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2f8:	d102      	bne.n	800a300 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a2fa:	4b60      	ldr	r3, [pc, #384]	; (800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2fe:	e003      	b.n	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a300:	2300      	movs	r3, #0
 800a302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a304:	f000 bce1 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a308:	f000 bcdf 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a30c:	4b5c      	ldr	r3, [pc, #368]	; (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a30e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a310:	f000 bcdb 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a314:	2300      	movs	r3, #0
 800a316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a318:	f000 bcd7 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a31c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a320:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a324:	430b      	orrs	r3, r1
 800a326:	f040 80ad 	bne.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a32a:	4b51      	ldr	r3, [pc, #324]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a32c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a32e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a332:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a33a:	d056      	beq.n	800a3ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a33e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a342:	f200 8090 	bhi.w	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	2bc0      	cmp	r3, #192	; 0xc0
 800a34a:	f000 8088 	beq.w	800a45e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a350:	2bc0      	cmp	r3, #192	; 0xc0
 800a352:	f200 8088 	bhi.w	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a358:	2b80      	cmp	r3, #128	; 0x80
 800a35a:	d032      	beq.n	800a3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a35e:	2b80      	cmp	r3, #128	; 0x80
 800a360:	f200 8081 	bhi.w	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36c:	2b40      	cmp	r3, #64	; 0x40
 800a36e:	d014      	beq.n	800a39a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a370:	e079      	b.n	800a466 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a372:	4b3f      	ldr	r3, [pc, #252]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a37a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a37e:	d108      	bne.n	800a392 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a384:	4618      	mov	r0, r3
 800a386:	f000 ff67 	bl	800b258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a38a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a38e:	f000 bc9c 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a392:	2300      	movs	r3, #0
 800a394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a396:	f000 bc98 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a39a:	4b35      	ldr	r3, [pc, #212]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a3a6:	d108      	bne.n	800a3ba <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3a8:	f107 0318 	add.w	r3, r7, #24
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f000 fcab 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3b6:	f000 bc88 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3be:	f000 bc84 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3c2:	4b2b      	ldr	r3, [pc, #172]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a3ce:	d108      	bne.n	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3d0:	f107 030c 	add.w	r3, r7, #12
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fdeb 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3de:	f000 bc74 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3e6:	f000 bc70 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3ea:	4b21      	ldr	r3, [pc, #132]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a3f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3f4:	4b1e      	ldr	r3, [pc, #120]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0304 	and.w	r3, r3, #4
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d10c      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a402:	2b00      	cmp	r3, #0
 800a404:	d109      	bne.n	800a41a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a406:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	08db      	lsrs	r3, r3, #3
 800a40c:	f003 0303 	and.w	r3, r3, #3
 800a410:	4a18      	ldr	r2, [pc, #96]	; (800a474 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a412:	fa22 f303 	lsr.w	r3, r2, r3
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a418:	e01f      	b.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a41a:	4b15      	ldr	r3, [pc, #84]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a426:	d106      	bne.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a42e:	d102      	bne.n	800a436 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a430:	4b11      	ldr	r3, [pc, #68]	; (800a478 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a432:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a434:	e011      	b.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a436:	4b0e      	ldr	r3, [pc, #56]	; (800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a43e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a442:	d106      	bne.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a44a:	d102      	bne.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a44c:	4b0b      	ldr	r3, [pc, #44]	; (800a47c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a44e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a450:	e003      	b.n	800a45a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a456:	f000 bc38 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a45a:	f000 bc36 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a45e:	4b08      	ldr	r3, [pc, #32]	; (800a480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a462:	f000 bc32 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a466:	2300      	movs	r3, #0
 800a468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a46a:	f000 bc2e 	b.w	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a46e:	bf00      	nop
 800a470:	58024400 	.word	0x58024400
 800a474:	03d09000 	.word	0x03d09000
 800a478:	003d0900 	.word	0x003d0900
 800a47c:	016e3600 	.word	0x016e3600
 800a480:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a484:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a488:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a48c:	430b      	orrs	r3, r1
 800a48e:	f040 809c 	bne.w	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a492:	4b9e      	ldr	r3, [pc, #632]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a496:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a49a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a49e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4a2:	d054      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a4aa:	f200 808b 	bhi.w	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a4b4:	f000 8083 	beq.w	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a4be:	f200 8081 	bhi.w	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4c8:	d02f      	beq.n	800a52a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4d0:	d878      	bhi.n	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d004      	beq.n	800a4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a4d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4de:	d012      	beq.n	800a506 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a4e0:	e070      	b.n	800a5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4e2:	4b8a      	ldr	r3, [pc, #552]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4ee:	d107      	bne.n	800a500 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f000 feaf 	bl	800b258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4fe:	e3e4      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a500:	2300      	movs	r3, #0
 800a502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a504:	e3e1      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a506:	4b81      	ldr	r3, [pc, #516]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a50e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a512:	d107      	bne.n	800a524 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a514:	f107 0318 	add.w	r3, r7, #24
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fbf5 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a522:	e3d2      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a524:	2300      	movs	r3, #0
 800a526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a528:	e3cf      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a52a:	4b78      	ldr	r3, [pc, #480]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a536:	d107      	bne.n	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a538:	f107 030c 	add.w	r3, r7, #12
 800a53c:	4618      	mov	r0, r3
 800a53e:	f000 fd37 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a546:	e3c0      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a548:	2300      	movs	r3, #0
 800a54a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a54c:	e3bd      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a54e:	4b6f      	ldr	r3, [pc, #444]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a556:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a558:	4b6c      	ldr	r3, [pc, #432]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 0304 	and.w	r3, r3, #4
 800a560:	2b04      	cmp	r3, #4
 800a562:	d10c      	bne.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a566:	2b00      	cmp	r3, #0
 800a568:	d109      	bne.n	800a57e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a56a:	4b68      	ldr	r3, [pc, #416]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	08db      	lsrs	r3, r3, #3
 800a570:	f003 0303 	and.w	r3, r3, #3
 800a574:	4a66      	ldr	r2, [pc, #408]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a576:	fa22 f303 	lsr.w	r3, r2, r3
 800a57a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a57c:	e01e      	b.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a57e:	4b63      	ldr	r3, [pc, #396]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a58a:	d106      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a58e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a592:	d102      	bne.n	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a594:	4b5f      	ldr	r3, [pc, #380]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a596:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a598:	e010      	b.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a59a:	4b5c      	ldr	r3, [pc, #368]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a5a6:	d106      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5ae:	d102      	bne.n	800a5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a5b0:	4b59      	ldr	r3, [pc, #356]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5b4:	e002      	b.n	800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a5ba:	e386      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5bc:	e385      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a5be:	4b57      	ldr	r3, [pc, #348]	; (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5c2:	e382      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5c8:	e37f      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a5ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ce:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a5d2:	430b      	orrs	r3, r1
 800a5d4:	f040 80a7 	bne.w	800a726 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a5d8:	4b4c      	ldr	r3, [pc, #304]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5dc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a5e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5e8:	d055      	beq.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a5f0:	f200 8096 	bhi.w	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a5fa:	f000 8084 	beq.w	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a600:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a604:	f200 808c 	bhi.w	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a60e:	d030      	beq.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a616:	f200 8083 	bhi.w	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d004      	beq.n	800a62a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a626:	d012      	beq.n	800a64e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a628:	e07a      	b.n	800a720 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a62a:	4b38      	ldr	r3, [pc, #224]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a636:	d107      	bne.n	800a648 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a63c:	4618      	mov	r0, r3
 800a63e:	f000 fe0b 	bl	800b258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a644:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a646:	e340      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a648:	2300      	movs	r3, #0
 800a64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a64c:	e33d      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a64e:	4b2f      	ldr	r3, [pc, #188]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a65a:	d107      	bne.n	800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a65c:	f107 0318 	add.w	r3, r7, #24
 800a660:	4618      	mov	r0, r3
 800a662:	f000 fb51 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a66a:	e32e      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a66c:	2300      	movs	r3, #0
 800a66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a670:	e32b      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a672:	4b26      	ldr	r3, [pc, #152]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a67a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a67e:	d107      	bne.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a680:	f107 030c 	add.w	r3, r7, #12
 800a684:	4618      	mov	r0, r3
 800a686:	f000 fc93 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a68e:	e31c      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a694:	e319      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a696:	4b1d      	ldr	r3, [pc, #116]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a69a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a69e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6a0:	4b1a      	ldr	r3, [pc, #104]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f003 0304 	and.w	r3, r3, #4
 800a6a8:	2b04      	cmp	r3, #4
 800a6aa:	d10c      	bne.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a6ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d109      	bne.n	800a6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6b2:	4b16      	ldr	r3, [pc, #88]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	08db      	lsrs	r3, r3, #3
 800a6b8:	f003 0303 	and.w	r3, r3, #3
 800a6bc:	4a14      	ldr	r2, [pc, #80]	; (800a710 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a6be:	fa22 f303 	lsr.w	r3, r2, r3
 800a6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6c4:	e01e      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6c6:	4b11      	ldr	r3, [pc, #68]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6d2:	d106      	bne.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6da:	d102      	bne.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6dc:	4b0d      	ldr	r3, [pc, #52]	; (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a6de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6e0:	e010      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6e2:	4b0a      	ldr	r3, [pc, #40]	; (800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a6ee:	d106      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a6f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6f6:	d102      	bne.n	800a6fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6f8:	4b07      	ldr	r3, [pc, #28]	; (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6fc:	e002      	b.n	800a704 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a702:	e2e2      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a704:	e2e1      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a706:	4b05      	ldr	r3, [pc, #20]	; (800a71c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a70a:	e2de      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a70c:	58024400 	.word	0x58024400
 800a710:	03d09000 	.word	0x03d09000
 800a714:	003d0900 	.word	0x003d0900
 800a718:	016e3600 	.word	0x016e3600
 800a71c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a720:	2300      	movs	r3, #0
 800a722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a724:	e2d1      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a72a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a72e:	430b      	orrs	r3, r1
 800a730:	f040 809c 	bne.w	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a734:	4b93      	ldr	r3, [pc, #588]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a738:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a73c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a744:	d054      	beq.n	800a7f0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a74c:	f200 808b 	bhi.w	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a756:	f000 8083 	beq.w	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a75a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a75c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a760:	f200 8081 	bhi.w	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a76a:	d02f      	beq.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a76c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a772:	d878      	bhi.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a776:	2b00      	cmp	r3, #0
 800a778:	d004      	beq.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a77a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a77c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a780:	d012      	beq.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a782:	e070      	b.n	800a866 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a784:	4b7f      	ldr	r3, [pc, #508]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a78c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a790:	d107      	bne.n	800a7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a796:	4618      	mov	r0, r3
 800a798:	f000 fd5e 	bl	800b258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a0:	e293      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a6:	e290      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7a8:	4b76      	ldr	r3, [pc, #472]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7b4:	d107      	bne.n	800a7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7b6:	f107 0318 	add.w	r3, r7, #24
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f000 faa4 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7c0:	69bb      	ldr	r3, [r7, #24]
 800a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7c4:	e281      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7ca:	e27e      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7cc:	4b6d      	ldr	r3, [pc, #436]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7d8:	d107      	bne.n	800a7ea <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7da:	f107 030c 	add.w	r3, r7, #12
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f000 fbe6 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7e8:	e26f      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7ee:	e26c      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7f0:	4b64      	ldr	r3, [pc, #400]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a7f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a7f8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7fa:	4b62      	ldr	r3, [pc, #392]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f003 0304 	and.w	r3, r3, #4
 800a802:	2b04      	cmp	r3, #4
 800a804:	d10c      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d109      	bne.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a80c:	4b5d      	ldr	r3, [pc, #372]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	08db      	lsrs	r3, r3, #3
 800a812:	f003 0303 	and.w	r3, r3, #3
 800a816:	4a5c      	ldr	r2, [pc, #368]	; (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a818:	fa22 f303 	lsr.w	r3, r2, r3
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a81e:	e01e      	b.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a820:	4b58      	ldr	r3, [pc, #352]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a82c:	d106      	bne.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a834:	d102      	bne.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a836:	4b55      	ldr	r3, [pc, #340]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a83a:	e010      	b.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a83c:	4b51      	ldr	r3, [pc, #324]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a848:	d106      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a84c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a850:	d102      	bne.n	800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a852:	4b4f      	ldr	r3, [pc, #316]	; (800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a854:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a856:	e002      	b.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a858:	2300      	movs	r3, #0
 800a85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a85c:	e235      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a85e:	e234      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a860:	4b4c      	ldr	r3, [pc, #304]	; (800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a864:	e231      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a86a:	e22e      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a86c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a870:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a874:	430b      	orrs	r3, r1
 800a876:	f040 808f 	bne.w	800a998 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a87a:	4b42      	ldr	r3, [pc, #264]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a87c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a87e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a882:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a88a:	d06b      	beq.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a88e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a892:	d874      	bhi.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a896:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a89a:	d056      	beq.n	800a94a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a8a2:	d86c      	bhi.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a8aa:	d03b      	beq.n	800a924 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a8b2:	d864      	bhi.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8ba:	d021      	beq.n	800a900 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8c2:	d85c      	bhi.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d004      	beq.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d0:	d004      	beq.n	800a8dc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a8d2:	e054      	b.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a8d4:	f7fe fa4c 	bl	8008d70 <HAL_RCC_GetPCLK1Freq>
 800a8d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8da:	e1f6      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8dc:	4b29      	ldr	r3, [pc, #164]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8e8:	d107      	bne.n	800a8fa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8ea:	f107 0318 	add.w	r3, r7, #24
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 fa0a 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8f8:	e1e7      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8fe:	e1e4      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a900:	4b20      	ldr	r3, [pc, #128]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a90c:	d107      	bne.n	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a90e:	f107 030c 	add.w	r3, r7, #12
 800a912:	4618      	mov	r0, r3
 800a914:	f000 fb4c 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a91c:	e1d5      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a91e:	2300      	movs	r3, #0
 800a920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a922:	e1d2      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a924:	4b17      	ldr	r3, [pc, #92]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0304 	and.w	r3, r3, #4
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	d109      	bne.n	800a944 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a930:	4b14      	ldr	r3, [pc, #80]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	08db      	lsrs	r3, r3, #3
 800a936:	f003 0303 	and.w	r3, r3, #3
 800a93a:	4a13      	ldr	r2, [pc, #76]	; (800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a93c:	fa22 f303 	lsr.w	r3, r2, r3
 800a940:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a942:	e1c2      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a944:	2300      	movs	r3, #0
 800a946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a948:	e1bf      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a94a:	4b0e      	ldr	r3, [pc, #56]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a956:	d102      	bne.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a958:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a95c:	e1b5      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a962:	e1b2      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a964:	4b07      	ldr	r3, [pc, #28]	; (800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a96c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a970:	d102      	bne.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a972:	4b07      	ldr	r3, [pc, #28]	; (800a990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a974:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a976:	e1a8      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a97c:	e1a5      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a982:	e1a2      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a984:	58024400 	.word	0x58024400
 800a988:	03d09000 	.word	0x03d09000
 800a98c:	003d0900 	.word	0x003d0900
 800a990:	016e3600 	.word	0x016e3600
 800a994:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a99c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a9a0:	430b      	orrs	r3, r1
 800a9a2:	d173      	bne.n	800aa8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a9a4:	4b9c      	ldr	r3, [pc, #624]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a9ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9b4:	d02f      	beq.n	800aa16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a9bc:	d863      	bhi.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a9be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d004      	beq.n	800a9ce <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ca:	d012      	beq.n	800a9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a9cc:	e05b      	b.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a9ce:	4b92      	ldr	r3, [pc, #584]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9da:	d107      	bne.n	800a9ec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9dc:	f107 0318 	add.w	r3, r7, #24
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 f991 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9ea:	e16e      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9f0:	e16b      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9f2:	4b89      	ldr	r3, [pc, #548]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9fe:	d107      	bne.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa00:	f107 030c 	add.w	r3, r7, #12
 800aa04:	4618      	mov	r0, r3
 800aa06:	f000 fad3 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa0e:	e15c      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa10:	2300      	movs	r3, #0
 800aa12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa14:	e159      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800aa16:	4b80      	ldr	r3, [pc, #512]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aa1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aa20:	4b7d      	ldr	r3, [pc, #500]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b04      	cmp	r3, #4
 800aa2a:	d10c      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800aa2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d109      	bne.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa32:	4b79      	ldr	r3, [pc, #484]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	08db      	lsrs	r3, r3, #3
 800aa38:	f003 0303 	and.w	r3, r3, #3
 800aa3c:	4a77      	ldr	r2, [pc, #476]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800aa3e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa44:	e01e      	b.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa46:	4b74      	ldr	r3, [pc, #464]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa52:	d106      	bne.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800aa54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa5a:	d102      	bne.n	800aa62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa5c:	4b70      	ldr	r3, [pc, #448]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800aa5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa60:	e010      	b.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa62:	4b6d      	ldr	r3, [pc, #436]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa6e:	d106      	bne.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800aa70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa76:	d102      	bne.n	800aa7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa78:	4b6a      	ldr	r3, [pc, #424]	; (800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800aa7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa7c:	e002      	b.n	800aa84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aa82:	e122      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa84:	e121      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aa86:	2300      	movs	r3, #0
 800aa88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa8a:	e11e      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800aa8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa90:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800aa94:	430b      	orrs	r3, r1
 800aa96:	d133      	bne.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800aa98:	4b5f      	ldr	r3, [pc, #380]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aa9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaa0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaae:	d012      	beq.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800aab0:	e023      	b.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aab2:	4b59      	ldr	r3, [pc, #356]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aaba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aabe:	d107      	bne.n	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aac4:	4618      	mov	r0, r3
 800aac6:	f000 fbc7 	bl	800b258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aaca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aacc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aace:	e0fc      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aad0:	2300      	movs	r3, #0
 800aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aad4:	e0f9      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aad6:	4b50      	ldr	r3, [pc, #320]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aae2:	d107      	bne.n	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aae4:	f107 0318 	add.w	r3, r7, #24
 800aae8:	4618      	mov	r0, r3
 800aaea:	f000 f90d 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800aaee:	6a3b      	ldr	r3, [r7, #32]
 800aaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaf2:	e0ea      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aaf8:	e0e7      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aafe:	e0e4      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ab00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab04:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ab08:	430b      	orrs	r3, r1
 800ab0a:	f040 808d 	bne.w	800ac28 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ab0e:	4b42      	ldr	r3, [pc, #264]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab12:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ab16:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ab18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab1e:	d06b      	beq.n	800abf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ab20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab26:	d874      	bhi.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab2e:	d056      	beq.n	800abde <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab36:	d86c      	bhi.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab3e:	d03b      	beq.n	800abb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ab40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab46:	d864      	bhi.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab4e:	d021      	beq.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ab50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab56:	d85c      	bhi.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d004      	beq.n	800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ab5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab64:	d004      	beq.n	800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ab66:	e054      	b.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ab68:	f000 f8b8 	bl	800acdc <HAL_RCCEx_GetD3PCLK1Freq>
 800ab6c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ab6e:	e0ac      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab70:	4b29      	ldr	r3, [pc, #164]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab7c:	d107      	bne.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab7e:	f107 0318 	add.w	r3, r7, #24
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 f8c0 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ab88:	69fb      	ldr	r3, [r7, #28]
 800ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab8c:	e09d      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab92:	e09a      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab94:	4b20      	ldr	r3, [pc, #128]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aba0:	d107      	bne.n	800abb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aba2:	f107 030c 	add.w	r3, r7, #12
 800aba6:	4618      	mov	r0, r3
 800aba8:	f000 fa02 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abb0:	e08b      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abb2:	2300      	movs	r3, #0
 800abb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abb6:	e088      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800abb8:	4b17      	ldr	r3, [pc, #92]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0304 	and.w	r3, r3, #4
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d109      	bne.n	800abd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800abc4:	4b14      	ldr	r3, [pc, #80]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	08db      	lsrs	r3, r3, #3
 800abca:	f003 0303 	and.w	r3, r3, #3
 800abce:	4a13      	ldr	r2, [pc, #76]	; (800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800abd0:	fa22 f303 	lsr.w	r3, r2, r3
 800abd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abd6:	e078      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abd8:	2300      	movs	r3, #0
 800abda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abdc:	e075      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800abde:	4b0e      	ldr	r3, [pc, #56]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800abea:	d102      	bne.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800abec:	4b0c      	ldr	r3, [pc, #48]	; (800ac20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800abee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abf0:	e06b      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abf6:	e068      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800abf8:	4b07      	ldr	r3, [pc, #28]	; (800ac18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac04:	d102      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ac06:	4b07      	ldr	r3, [pc, #28]	; (800ac24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ac08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac0a:	e05e      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac10:	e05b      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ac12:	2300      	movs	r3, #0
 800ac14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac16:	e058      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac18:	58024400 	.word	0x58024400
 800ac1c:	03d09000 	.word	0x03d09000
 800ac20:	003d0900 	.word	0x003d0900
 800ac24:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ac28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac2c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ac30:	430b      	orrs	r3, r1
 800ac32:	d148      	bne.n	800acc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ac34:	4b27      	ldr	r3, [pc, #156]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac3c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ac3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac44:	d02a      	beq.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ac46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac4c:	d838      	bhi.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d004      	beq.n	800ac5e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ac54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac5a:	d00d      	beq.n	800ac78 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ac5c:	e030      	b.n	800acc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ac5e:	4b1d      	ldr	r3, [pc, #116]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac6a:	d102      	bne.n	800ac72 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ac6c:	4b1a      	ldr	r3, [pc, #104]	; (800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ac6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac70:	e02b      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac76:	e028      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac78:	4b16      	ldr	r3, [pc, #88]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac84:	d107      	bne.n	800ac96 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f000 fae4 	bl	800b258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac94:	e019      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac96:	2300      	movs	r3, #0
 800ac98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac9a:	e016      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac9c:	4b0d      	ldr	r3, [pc, #52]	; (800acd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aca8:	d107      	bne.n	800acba <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acaa:	f107 0318 	add.w	r3, r7, #24
 800acae:	4618      	mov	r0, r3
 800acb0:	f000 f82a 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acb4:	69fb      	ldr	r3, [r7, #28]
 800acb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acb8:	e007      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acba:	2300      	movs	r3, #0
 800acbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acbe:	e004      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800acc0:	2300      	movs	r3, #0
 800acc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc4:	e001      	b.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800acca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800accc:	4618      	mov	r0, r3
 800acce:	3740      	adds	r7, #64	; 0x40
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	58024400 	.word	0x58024400
 800acd8:	016e3600 	.word	0x016e3600

0800acdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ace0:	f7fe f816 	bl	8008d10 <HAL_RCC_GetHCLKFreq>
 800ace4:	4602      	mov	r2, r0
 800ace6:	4b06      	ldr	r3, [pc, #24]	; (800ad00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	091b      	lsrs	r3, r3, #4
 800acec:	f003 0307 	and.w	r3, r3, #7
 800acf0:	4904      	ldr	r1, [pc, #16]	; (800ad04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800acf2:	5ccb      	ldrb	r3, [r1, r3]
 800acf4:	f003 031f 	and.w	r3, r3, #31
 800acf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	bd80      	pop	{r7, pc}
 800ad00:	58024400 	.word	0x58024400
 800ad04:	0800d20c 	.word	0x0800d20c

0800ad08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b089      	sub	sp, #36	; 0x24
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ad10:	4ba1      	ldr	r3, [pc, #644]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad14:	f003 0303 	and.w	r3, r3, #3
 800ad18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ad1a:	4b9f      	ldr	r3, [pc, #636]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1e:	0b1b      	lsrs	r3, r3, #12
 800ad20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ad26:	4b9c      	ldr	r3, [pc, #624]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2a:	091b      	lsrs	r3, r3, #4
 800ad2c:	f003 0301 	and.w	r3, r3, #1
 800ad30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ad32:	4b99      	ldr	r3, [pc, #612]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad36:	08db      	lsrs	r3, r3, #3
 800ad38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	fb02 f303 	mul.w	r3, r2, r3
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	f000 8111 	beq.w	800af78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ad56:	69bb      	ldr	r3, [r7, #24]
 800ad58:	2b02      	cmp	r3, #2
 800ad5a:	f000 8083 	beq.w	800ae64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	2b02      	cmp	r3, #2
 800ad62:	f200 80a1 	bhi.w	800aea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d003      	beq.n	800ad74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d056      	beq.n	800ae20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ad72:	e099      	b.n	800aea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad74:	4b88      	ldr	r3, [pc, #544]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 0320 	and.w	r3, r3, #32
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d02d      	beq.n	800addc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad80:	4b85      	ldr	r3, [pc, #532]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	08db      	lsrs	r3, r3, #3
 800ad86:	f003 0303 	and.w	r3, r3, #3
 800ad8a:	4a84      	ldr	r2, [pc, #528]	; (800af9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800ad8c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	ee07 3a90 	vmov	s15, r3
 800ad98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	ee07 3a90 	vmov	s15, r3
 800ada2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ada6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adaa:	4b7b      	ldr	r3, [pc, #492]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adba:	ed97 6a03 	vldr	s12, [r7, #12]
 800adbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800adc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800add2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800add6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800adda:	e087      	b.n	800aeec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	ee07 3a90 	vmov	s15, r3
 800ade2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ade6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800afa4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800adea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adee:	4b6a      	ldr	r3, [pc, #424]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800adf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adfe:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae02:	eddf 5a67 	vldr	s11, [pc, #412]	; 800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae1e:	e065      	b.n	800aeec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae20:	697b      	ldr	r3, [r7, #20]
 800ae22:	ee07 3a90 	vmov	s15, r3
 800ae26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ae2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae32:	4b59      	ldr	r3, [pc, #356]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae3a:	ee07 3a90 	vmov	s15, r3
 800ae3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae42:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae46:	eddf 5a56 	vldr	s11, [pc, #344]	; 800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae62:	e043      	b.n	800aeec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	ee07 3a90 	vmov	s15, r3
 800ae6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800afac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ae72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae76:	4b48      	ldr	r3, [pc, #288]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae86:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ae8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aea6:	e021      	b.n	800aeec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	ee07 3a90 	vmov	s15, r3
 800aeae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800afa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aeb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aeba:	4b37      	ldr	r3, [pc, #220]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aec2:	ee07 3a90 	vmov	s15, r3
 800aec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aeca:	ed97 6a03 	vldr	s12, [r7, #12]
 800aece:	eddf 5a34 	vldr	s11, [pc, #208]	; 800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aeda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aeea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800aeec:	4b2a      	ldr	r3, [pc, #168]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef0:	0a5b      	lsrs	r3, r3, #9
 800aef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef6:	ee07 3a90 	vmov	s15, r3
 800aefa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aefe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af06:	edd7 6a07 	vldr	s13, [r7, #28]
 800af0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af12:	ee17 2a90 	vmov	r2, s15
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800af1a:	4b1f      	ldr	r3, [pc, #124]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1e:	0c1b      	lsrs	r3, r3, #16
 800af20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af24:	ee07 3a90 	vmov	s15, r3
 800af28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af30:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af34:	edd7 6a07 	vldr	s13, [r7, #28]
 800af38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af40:	ee17 2a90 	vmov	r2, s15
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800af48:	4b13      	ldr	r3, [pc, #76]	; (800af98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4c:	0e1b      	lsrs	r3, r3, #24
 800af4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af52:	ee07 3a90 	vmov	s15, r3
 800af56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800af5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800af62:	edd7 6a07 	vldr	s13, [r7, #28]
 800af66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800af6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800af6e:	ee17 2a90 	vmov	r2, s15
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800af76:	e008      	b.n	800af8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2200      	movs	r2, #0
 800af82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	2200      	movs	r2, #0
 800af88:	609a      	str	r2, [r3, #8]
}
 800af8a:	bf00      	nop
 800af8c:	3724      	adds	r7, #36	; 0x24
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	58024400 	.word	0x58024400
 800af9c:	03d09000 	.word	0x03d09000
 800afa0:	46000000 	.word	0x46000000
 800afa4:	4c742400 	.word	0x4c742400
 800afa8:	4a742400 	.word	0x4a742400
 800afac:	4bb71b00 	.word	0x4bb71b00

0800afb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b089      	sub	sp, #36	; 0x24
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800afb8:	4ba1      	ldr	r3, [pc, #644]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbc:	f003 0303 	and.w	r3, r3, #3
 800afc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800afc2:	4b9f      	ldr	r3, [pc, #636]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc6:	0d1b      	lsrs	r3, r3, #20
 800afc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800afcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800afce:	4b9c      	ldr	r3, [pc, #624]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd2:	0a1b      	lsrs	r3, r3, #8
 800afd4:	f003 0301 	and.w	r3, r3, #1
 800afd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800afda:	4b99      	ldr	r3, [pc, #612]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800afdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afde:	08db      	lsrs	r3, r3, #3
 800afe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800afe4:	693a      	ldr	r2, [r7, #16]
 800afe6:	fb02 f303 	mul.w	r3, r2, r3
 800afea:	ee07 3a90 	vmov	s15, r3
 800afee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aff2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 8111 	beq.w	800b220 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800affe:	69bb      	ldr	r3, [r7, #24]
 800b000:	2b02      	cmp	r3, #2
 800b002:	f000 8083 	beq.w	800b10c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	f200 80a1 	bhi.w	800b150 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b00e:	69bb      	ldr	r3, [r7, #24]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d003      	beq.n	800b01c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d056      	beq.n	800b0c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b01a:	e099      	b.n	800b150 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b01c:	4b88      	ldr	r3, [pc, #544]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0320 	and.w	r3, r3, #32
 800b024:	2b00      	cmp	r3, #0
 800b026:	d02d      	beq.n	800b084 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b028:	4b85      	ldr	r3, [pc, #532]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	08db      	lsrs	r3, r3, #3
 800b02e:	f003 0303 	and.w	r3, r3, #3
 800b032:	4a84      	ldr	r2, [pc, #528]	; (800b244 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b034:	fa22 f303 	lsr.w	r3, r2, r3
 800b038:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	ee07 3a90 	vmov	s15, r3
 800b040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	ee07 3a90 	vmov	s15, r3
 800b04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b052:	4b7b      	ldr	r3, [pc, #492]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05a:	ee07 3a90 	vmov	s15, r3
 800b05e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b062:	ed97 6a03 	vldr	s12, [r7, #12]
 800b066:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b06a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b06e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b07a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b07e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b082:	e087      	b.n	800b194 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	ee07 3a90 	vmov	s15, r3
 800b08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b08e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b24c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b096:	4b6a      	ldr	r3, [pc, #424]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b09e:	ee07 3a90 	vmov	s15, r3
 800b0a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0c6:	e065      	b.n	800b194 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	ee07 3a90 	vmov	s15, r3
 800b0ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b0d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0da:	4b59      	ldr	r3, [pc, #356]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0e2:	ee07 3a90 	vmov	s15, r3
 800b0e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b0f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b102:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b10a:	e043      	b.n	800b194 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b10c:	697b      	ldr	r3, [r7, #20]
 800b10e:	ee07 3a90 	vmov	s15, r3
 800b112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b116:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b11a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b11e:	4b48      	ldr	r3, [pc, #288]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b12e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b132:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b13a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b13e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b14a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b14e:	e021      	b.n	800b194 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	ee07 3a90 	vmov	s15, r3
 800b156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b15a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b250 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b162:	4b37      	ldr	r3, [pc, #220]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b16a:	ee07 3a90 	vmov	s15, r3
 800b16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b172:	ed97 6a03 	vldr	s12, [r7, #12]
 800b176:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b18e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b192:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b194:	4b2a      	ldr	r3, [pc, #168]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b198:	0a5b      	lsrs	r3, r3, #9
 800b19a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1ba:	ee17 2a90 	vmov	r2, s15
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b1c2:	4b1f      	ldr	r3, [pc, #124]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c6:	0c1b      	lsrs	r3, r3, #16
 800b1c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1cc:	ee07 3a90 	vmov	s15, r3
 800b1d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b1d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b1dc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b1e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b1e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1e8:	ee17 2a90 	vmov	r2, s15
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b1f0:	4b13      	ldr	r3, [pc, #76]	; (800b240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f4:	0e1b      	lsrs	r3, r3, #24
 800b1f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1fa:	ee07 3a90 	vmov	s15, r3
 800b1fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b20a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b20e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b216:	ee17 2a90 	vmov	r2, s15
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b21e:	e008      	b.n	800b232 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	609a      	str	r2, [r3, #8]
}
 800b232:	bf00      	nop
 800b234:	3724      	adds	r7, #36	; 0x24
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	58024400 	.word	0x58024400
 800b244:	03d09000 	.word	0x03d09000
 800b248:	46000000 	.word	0x46000000
 800b24c:	4c742400 	.word	0x4c742400
 800b250:	4a742400 	.word	0x4a742400
 800b254:	4bb71b00 	.word	0x4bb71b00

0800b258 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b258:	b480      	push	{r7}
 800b25a:	b089      	sub	sp, #36	; 0x24
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b260:	4ba0      	ldr	r3, [pc, #640]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b264:	f003 0303 	and.w	r3, r3, #3
 800b268:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b26a:	4b9e      	ldr	r3, [pc, #632]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b26e:	091b      	lsrs	r3, r3, #4
 800b270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b274:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b276:	4b9b      	ldr	r3, [pc, #620]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27a:	f003 0301 	and.w	r3, r3, #1
 800b27e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b280:	4b98      	ldr	r3, [pc, #608]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b284:	08db      	lsrs	r3, r3, #3
 800b286:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	fb02 f303 	mul.w	r3, r2, r3
 800b290:	ee07 3a90 	vmov	s15, r3
 800b294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b298:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f000 8111 	beq.w	800b4c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	2b02      	cmp	r3, #2
 800b2a8:	f000 8083 	beq.w	800b3b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b2ac:	69bb      	ldr	r3, [r7, #24]
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	f200 80a1 	bhi.w	800b3f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b2b4:	69bb      	ldr	r3, [r7, #24]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d003      	beq.n	800b2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b2ba:	69bb      	ldr	r3, [r7, #24]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d056      	beq.n	800b36e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b2c0:	e099      	b.n	800b3f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b2c2:	4b88      	ldr	r3, [pc, #544]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 0320 	and.w	r3, r3, #32
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d02d      	beq.n	800b32a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2ce:	4b85      	ldr	r3, [pc, #532]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	08db      	lsrs	r3, r3, #3
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	4a83      	ldr	r2, [pc, #524]	; (800b4e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b2da:	fa22 f303 	lsr.w	r3, r2, r3
 800b2de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	ee07 3a90 	vmov	s15, r3
 800b2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	ee07 3a90 	vmov	s15, r3
 800b2f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2f8:	4b7a      	ldr	r3, [pc, #488]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b300:	ee07 3a90 	vmov	s15, r3
 800b304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b308:	ed97 6a03 	vldr	s12, [r7, #12]
 800b30c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b4ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b31c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b320:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b324:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b328:	e087      	b.n	800b43a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	ee07 3a90 	vmov	s15, r3
 800b330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b334:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b33c:	4b69      	ldr	r3, [pc, #420]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b33e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b344:	ee07 3a90 	vmov	s15, r3
 800b348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b34c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b350:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b4ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b354:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b358:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b35c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b364:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b368:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b36c:	e065      	b.n	800b43a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	ee07 3a90 	vmov	s15, r3
 800b374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b378:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b4f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b37c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b380:	4b58      	ldr	r3, [pc, #352]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b388:	ee07 3a90 	vmov	s15, r3
 800b38c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b390:	ed97 6a03 	vldr	s12, [r7, #12]
 800b394:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b4ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b398:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b39c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3b0:	e043      	b.n	800b43a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	ee07 3a90 	vmov	s15, r3
 800b3b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b4f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b3c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b3c4:	4b47      	ldr	r3, [pc, #284]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3cc:	ee07 3a90 	vmov	s15, r3
 800b3d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b3d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b3d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b4ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b3dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b3e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b3e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b3e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b3f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b3f4:	e021      	b.n	800b43a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	ee07 3a90 	vmov	s15, r3
 800b3fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b400:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b4f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b408:	4b36      	ldr	r3, [pc, #216]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b40a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b40c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b410:	ee07 3a90 	vmov	s15, r3
 800b414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b418:	ed97 6a03 	vldr	s12, [r7, #12]
 800b41c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b4ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b42c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b430:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b434:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b438:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b43a:	4b2a      	ldr	r3, [pc, #168]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43e:	0a5b      	lsrs	r3, r3, #9
 800b440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b444:	ee07 3a90 	vmov	s15, r3
 800b448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b450:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b454:	edd7 6a07 	vldr	s13, [r7, #28]
 800b458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b45c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b460:	ee17 2a90 	vmov	r2, s15
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b468:	4b1e      	ldr	r3, [pc, #120]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46c:	0c1b      	lsrs	r3, r3, #16
 800b46e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b472:	ee07 3a90 	vmov	s15, r3
 800b476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b47a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b47e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b482:	edd7 6a07 	vldr	s13, [r7, #28]
 800b486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b48a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b48e:	ee17 2a90 	vmov	r2, s15
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b496:	4b13      	ldr	r3, [pc, #76]	; (800b4e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b49a:	0e1b      	lsrs	r3, r3, #24
 800b49c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b4a0:	ee07 3a90 	vmov	s15, r3
 800b4a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b4b0:	edd7 6a07 	vldr	s13, [r7, #28]
 800b4b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b4b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4bc:	ee17 2a90 	vmov	r2, s15
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b4c4:	e008      	b.n	800b4d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	609a      	str	r2, [r3, #8]
}
 800b4d8:	bf00      	nop
 800b4da:	3724      	adds	r7, #36	; 0x24
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	58024400 	.word	0x58024400
 800b4e8:	03d09000 	.word	0x03d09000
 800b4ec:	46000000 	.word	0x46000000
 800b4f0:	4c742400 	.word	0x4c742400
 800b4f4:	4a742400 	.word	0x4a742400
 800b4f8:	4bb71b00 	.word	0x4bb71b00

0800b4fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b50a:	4b53      	ldr	r3, [pc, #332]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b50e:	f003 0303 	and.w	r3, r3, #3
 800b512:	2b03      	cmp	r3, #3
 800b514:	d101      	bne.n	800b51a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e099      	b.n	800b64e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b51a:	4b4f      	ldr	r3, [pc, #316]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a4e      	ldr	r2, [pc, #312]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b520:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b526:	f7f7 fc8f 	bl	8002e48 <HAL_GetTick>
 800b52a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b52c:	e008      	b.n	800b540 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b52e:	f7f7 fc8b 	bl	8002e48 <HAL_GetTick>
 800b532:	4602      	mov	r2, r0
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d901      	bls.n	800b540 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e086      	b.n	800b64e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b540:	4b45      	ldr	r3, [pc, #276]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1f0      	bne.n	800b52e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b54c:	4b42      	ldr	r3, [pc, #264]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b550:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	031b      	lsls	r3, r3, #12
 800b55a:	493f      	ldr	r1, [pc, #252]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b55c:	4313      	orrs	r3, r2
 800b55e:	628b      	str	r3, [r1, #40]	; 0x28
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	3b01      	subs	r3, #1
 800b566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	689b      	ldr	r3, [r3, #8]
 800b56e:	3b01      	subs	r3, #1
 800b570:	025b      	lsls	r3, r3, #9
 800b572:	b29b      	uxth	r3, r3
 800b574:	431a      	orrs	r2, r3
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	3b01      	subs	r3, #1
 800b57c:	041b      	lsls	r3, r3, #16
 800b57e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b582:	431a      	orrs	r2, r3
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	691b      	ldr	r3, [r3, #16]
 800b588:	3b01      	subs	r3, #1
 800b58a:	061b      	lsls	r3, r3, #24
 800b58c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b590:	4931      	ldr	r1, [pc, #196]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b592:	4313      	orrs	r3, r2
 800b594:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b596:	4b30      	ldr	r3, [pc, #192]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	492d      	ldr	r1, [pc, #180]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5a4:	4313      	orrs	r3, r2
 800b5a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b5a8:	4b2b      	ldr	r3, [pc, #172]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ac:	f023 0220 	bic.w	r2, r3, #32
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	699b      	ldr	r3, [r3, #24]
 800b5b4:	4928      	ldr	r1, [pc, #160]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b5ba:	4b27      	ldr	r3, [pc, #156]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5be:	4a26      	ldr	r2, [pc, #152]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5c0:	f023 0310 	bic.w	r3, r3, #16
 800b5c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b5c6:	4b24      	ldr	r3, [pc, #144]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5ca:	4b24      	ldr	r3, [pc, #144]	; (800b65c <RCCEx_PLL2_Config+0x160>)
 800b5cc:	4013      	ands	r3, r2
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	69d2      	ldr	r2, [r2, #28]
 800b5d2:	00d2      	lsls	r2, r2, #3
 800b5d4:	4920      	ldr	r1, [pc, #128]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b5da:	4b1f      	ldr	r3, [pc, #124]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5de:	4a1e      	ldr	r2, [pc, #120]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5e0:	f043 0310 	orr.w	r3, r3, #16
 800b5e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d106      	bne.n	800b5fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b5ec:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5f0:	4a19      	ldr	r2, [pc, #100]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b5f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b5f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b5f8:	e00f      	b.n	800b61a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d106      	bne.n	800b60e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b600:	4b15      	ldr	r3, [pc, #84]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b604:	4a14      	ldr	r2, [pc, #80]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b60a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b60c:	e005      	b.n	800b61a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b60e:	4b12      	ldr	r3, [pc, #72]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b612:	4a11      	ldr	r2, [pc, #68]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b618:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b61a:	4b0f      	ldr	r3, [pc, #60]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a0e      	ldr	r2, [pc, #56]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b620:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b626:	f7f7 fc0f 	bl	8002e48 <HAL_GetTick>
 800b62a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b62c:	e008      	b.n	800b640 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b62e:	f7f7 fc0b 	bl	8002e48 <HAL_GetTick>
 800b632:	4602      	mov	r2, r0
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	1ad3      	subs	r3, r2, r3
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d901      	bls.n	800b640 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b63c:	2303      	movs	r3, #3
 800b63e:	e006      	b.n	800b64e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b640:	4b05      	ldr	r3, [pc, #20]	; (800b658 <RCCEx_PLL2_Config+0x15c>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d0f0      	beq.n	800b62e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	58024400 	.word	0x58024400
 800b65c:	ffff0007 	.word	0xffff0007

0800b660 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b66a:	2300      	movs	r3, #0
 800b66c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b66e:	4b53      	ldr	r3, [pc, #332]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b672:	f003 0303 	and.w	r3, r3, #3
 800b676:	2b03      	cmp	r3, #3
 800b678:	d101      	bne.n	800b67e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b67a:	2301      	movs	r3, #1
 800b67c:	e099      	b.n	800b7b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b67e:	4b4f      	ldr	r3, [pc, #316]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a4e      	ldr	r2, [pc, #312]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b68a:	f7f7 fbdd 	bl	8002e48 <HAL_GetTick>
 800b68e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b690:	e008      	b.n	800b6a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b692:	f7f7 fbd9 	bl	8002e48 <HAL_GetTick>
 800b696:	4602      	mov	r2, r0
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	1ad3      	subs	r3, r2, r3
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d901      	bls.n	800b6a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	e086      	b.n	800b7b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b6a4:	4b45      	ldr	r3, [pc, #276]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d1f0      	bne.n	800b692 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b6b0:	4b42      	ldr	r3, [pc, #264]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	051b      	lsls	r3, r3, #20
 800b6be:	493f      	ldr	r1, [pc, #252]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	628b      	str	r3, [r1, #40]	; 0x28
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	689b      	ldr	r3, [r3, #8]
 800b6d2:	3b01      	subs	r3, #1
 800b6d4:	025b      	lsls	r3, r3, #9
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	431a      	orrs	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	041b      	lsls	r3, r3, #16
 800b6e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b6e6:	431a      	orrs	r2, r3
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	061b      	lsls	r3, r3, #24
 800b6f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b6f4:	4931      	ldr	r1, [pc, #196]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b6fa:	4b30      	ldr	r3, [pc, #192]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b6fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	695b      	ldr	r3, [r3, #20]
 800b706:	492d      	ldr	r1, [pc, #180]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b708:	4313      	orrs	r3, r2
 800b70a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b70c:	4b2b      	ldr	r3, [pc, #172]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b70e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b710:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	699b      	ldr	r3, [r3, #24]
 800b718:	4928      	ldr	r1, [pc, #160]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b71a:	4313      	orrs	r3, r2
 800b71c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b71e:	4b27      	ldr	r3, [pc, #156]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b722:	4a26      	ldr	r2, [pc, #152]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b72a:	4b24      	ldr	r3, [pc, #144]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b72c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b72e:	4b24      	ldr	r3, [pc, #144]	; (800b7c0 <RCCEx_PLL3_Config+0x160>)
 800b730:	4013      	ands	r3, r2
 800b732:	687a      	ldr	r2, [r7, #4]
 800b734:	69d2      	ldr	r2, [r2, #28]
 800b736:	00d2      	lsls	r2, r2, #3
 800b738:	4920      	ldr	r1, [pc, #128]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b73a:	4313      	orrs	r3, r2
 800b73c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b73e:	4b1f      	ldr	r3, [pc, #124]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b742:	4a1e      	ldr	r2, [pc, #120]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b748:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d106      	bne.n	800b75e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b750:	4b1a      	ldr	r3, [pc, #104]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b754:	4a19      	ldr	r2, [pc, #100]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b75a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b75c:	e00f      	b.n	800b77e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d106      	bne.n	800b772 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b764:	4b15      	ldr	r3, [pc, #84]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b768:	4a14      	ldr	r2, [pc, #80]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b76a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b76e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b770:	e005      	b.n	800b77e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b772:	4b12      	ldr	r3, [pc, #72]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	4a11      	ldr	r2, [pc, #68]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b778:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b77c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b77e:	4b0f      	ldr	r3, [pc, #60]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	4a0e      	ldr	r2, [pc, #56]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b78a:	f7f7 fb5d 	bl	8002e48 <HAL_GetTick>
 800b78e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b790:	e008      	b.n	800b7a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b792:	f7f7 fb59 	bl	8002e48 <HAL_GetTick>
 800b796:	4602      	mov	r2, r0
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	2b02      	cmp	r3, #2
 800b79e:	d901      	bls.n	800b7a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	e006      	b.n	800b7b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b7a4:	4b05      	ldr	r3, [pc, #20]	; (800b7bc <RCCEx_PLL3_Config+0x15c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d0f0      	beq.n	800b792 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b7b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
 800b7ba:	bf00      	nop
 800b7bc:	58024400 	.word	0x58024400
 800b7c0:	ffff0007 	.word	0xffff0007

0800b7c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b086      	sub	sp, #24
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d101      	bne.n	800b7d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e08f      	b.n	800b8f8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d106      	bne.n	800b7f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7f6 fe51 	bl	8002494 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2202      	movs	r2, #2
 800b7f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	6899      	ldr	r1, [r3, #8]
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	4b3e      	ldr	r3, [pc, #248]	; (800b900 <HAL_TIM_Encoder_Init+0x13c>)
 800b806:	400b      	ands	r3, r1
 800b808:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	3304      	adds	r3, #4
 800b812:	4619      	mov	r1, r3
 800b814:	4610      	mov	r0, r2
 800b816:	f000 fa39 	bl	800bc8c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	699b      	ldr	r3, [r3, #24]
 800b828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	697a      	ldr	r2, [r7, #20]
 800b838:	4313      	orrs	r3, r2
 800b83a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	4b31      	ldr	r3, [pc, #196]	; (800b904 <HAL_TIM_Encoder_Init+0x140>)
 800b840:	4013      	ands	r3, r2
 800b842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	689a      	ldr	r2, [r3, #8]
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	021b      	lsls	r3, r3, #8
 800b84e:	4313      	orrs	r3, r2
 800b850:	693a      	ldr	r2, [r7, #16]
 800b852:	4313      	orrs	r3, r2
 800b854:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	4b2b      	ldr	r3, [pc, #172]	; (800b908 <HAL_TIM_Encoder_Init+0x144>)
 800b85a:	4013      	ands	r3, r2
 800b85c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b85e:	693a      	ldr	r2, [r7, #16]
 800b860:	4b2a      	ldr	r3, [pc, #168]	; (800b90c <HAL_TIM_Encoder_Init+0x148>)
 800b862:	4013      	ands	r3, r2
 800b864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b866:	683b      	ldr	r3, [r7, #0]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	69db      	ldr	r3, [r3, #28]
 800b86e:	021b      	lsls	r3, r3, #8
 800b870:	4313      	orrs	r3, r2
 800b872:	693a      	ldr	r2, [r7, #16]
 800b874:	4313      	orrs	r3, r2
 800b876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	011a      	lsls	r2, r3, #4
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	031b      	lsls	r3, r3, #12
 800b884:	4313      	orrs	r3, r2
 800b886:	693a      	ldr	r2, [r7, #16]
 800b888:	4313      	orrs	r3, r2
 800b88a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b892:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b89a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	685a      	ldr	r2, [r3, #4]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	695b      	ldr	r3, [r3, #20]
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	4313      	orrs	r3, r2
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	4313      	orrs	r3, r2
 800b8ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	697a      	ldr	r2, [r7, #20]
 800b8b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68fa      	ldr	r2, [r7, #12]
 800b8c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2201      	movs	r2, #1
 800b8da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2201      	movs	r2, #1
 800b8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2201      	movs	r2, #1
 800b8f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3718      	adds	r7, #24
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	fffebff8 	.word	0xfffebff8
 800b904:	fffffcfc 	.word	0xfffffcfc
 800b908:	fffff3f3 	.word	0xfffff3f3
 800b90c:	ffff0f0f 	.word	0xffff0f0f

0800b910 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
 800b918:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b920:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b928:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b930:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b938:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d110      	bne.n	800b962 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b940:	7bfb      	ldrb	r3, [r7, #15]
 800b942:	2b01      	cmp	r3, #1
 800b944:	d102      	bne.n	800b94c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b946:	7b7b      	ldrb	r3, [r7, #13]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d001      	beq.n	800b950 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	e069      	b.n	800ba24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	2202      	movs	r2, #2
 800b954:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2202      	movs	r2, #2
 800b95c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b960:	e031      	b.n	800b9c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	2b04      	cmp	r3, #4
 800b966:	d110      	bne.n	800b98a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	2b01      	cmp	r3, #1
 800b96c:	d102      	bne.n	800b974 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b96e:	7b3b      	ldrb	r3, [r7, #12]
 800b970:	2b01      	cmp	r3, #1
 800b972:	d001      	beq.n	800b978 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b974:	2301      	movs	r3, #1
 800b976:	e055      	b.n	800ba24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2202      	movs	r2, #2
 800b97c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2202      	movs	r2, #2
 800b984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b988:	e01d      	b.n	800b9c6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b98a:	7bfb      	ldrb	r3, [r7, #15]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d108      	bne.n	800b9a2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b990:	7bbb      	ldrb	r3, [r7, #14]
 800b992:	2b01      	cmp	r3, #1
 800b994:	d105      	bne.n	800b9a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b996:	7b7b      	ldrb	r3, [r7, #13]
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d102      	bne.n	800b9a2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b99c:	7b3b      	ldrb	r3, [r7, #12]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d001      	beq.n	800b9a6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b9a2:	2301      	movs	r3, #1
 800b9a4:	e03e      	b.n	800ba24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2202      	movs	r2, #2
 800b9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2202      	movs	r2, #2
 800b9b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2202      	movs	r2, #2
 800b9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <HAL_TIM_Encoder_Start+0xc4>
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	2b04      	cmp	r3, #4
 800b9d0:	d008      	beq.n	800b9e4 <HAL_TIM_Encoder_Start+0xd4>
 800b9d2:	e00f      	b.n	800b9f4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2201      	movs	r2, #1
 800b9da:	2100      	movs	r1, #0
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f000 f9fb 	bl	800bdd8 <TIM_CCxChannelCmd>
      break;
 800b9e2:	e016      	b.n	800ba12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	2104      	movs	r1, #4
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f000 f9f3 	bl	800bdd8 <TIM_CCxChannelCmd>
      break;
 800b9f2:	e00e      	b.n	800ba12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	2201      	movs	r2, #1
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f000 f9eb 	bl	800bdd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2201      	movs	r2, #1
 800ba08:	2104      	movs	r1, #4
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f000 f9e4 	bl	800bdd8 <TIM_CCxChannelCmd>
      break;
 800ba10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f042 0201 	orr.w	r2, r2, #1
 800ba20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3710      	adds	r7, #16
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}

0800ba2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b084      	sub	sp, #16
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ba44:	68bb      	ldr	r3, [r7, #8]
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d020      	beq.n	800ba90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f003 0302 	and.w	r3, r3, #2
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d01b      	beq.n	800ba90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f06f 0202 	mvn.w	r2, #2
 800ba60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2201      	movs	r2, #1
 800ba66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	699b      	ldr	r3, [r3, #24]
 800ba6e:	f003 0303 	and.w	r3, r3, #3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f8e9 	bl	800bc4e <HAL_TIM_IC_CaptureCallback>
 800ba7c:	e005      	b.n	800ba8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f8db 	bl	800bc3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f8ec 	bl	800bc62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f003 0304 	and.w	r3, r3, #4
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d020      	beq.n	800badc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f003 0304 	and.w	r3, r3, #4
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d01b      	beq.n	800badc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f06f 0204 	mvn.w	r2, #4
 800baac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2202      	movs	r2, #2
 800bab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d003      	beq.n	800baca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f8c3 	bl	800bc4e <HAL_TIM_IC_CaptureCallback>
 800bac8:	e005      	b.n	800bad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f8b5 	bl	800bc3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f000 f8c6 	bl	800bc62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	f003 0308 	and.w	r3, r3, #8
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d020      	beq.n	800bb28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f003 0308 	and.w	r3, r3, #8
 800baec:	2b00      	cmp	r3, #0
 800baee:	d01b      	beq.n	800bb28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f06f 0208 	mvn.w	r2, #8
 800baf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2204      	movs	r2, #4
 800bafe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	69db      	ldr	r3, [r3, #28]
 800bb06:	f003 0303 	and.w	r3, r3, #3
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f89d 	bl	800bc4e <HAL_TIM_IC_CaptureCallback>
 800bb14:	e005      	b.n	800bb22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f000 f88f 	bl	800bc3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 f8a0 	bl	800bc62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	2200      	movs	r2, #0
 800bb26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	f003 0310 	and.w	r3, r3, #16
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d020      	beq.n	800bb74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f003 0310 	and.w	r3, r3, #16
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01b      	beq.n	800bb74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f06f 0210 	mvn.w	r2, #16
 800bb44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2208      	movs	r2, #8
 800bb4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f877 	bl	800bc4e <HAL_TIM_IC_CaptureCallback>
 800bb60:	e005      	b.n	800bb6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f869 	bl	800bc3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f87a 	bl	800bc62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	f003 0301 	and.w	r3, r3, #1
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00c      	beq.n	800bb98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f003 0301 	and.w	r3, r3, #1
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d007      	beq.n	800bb98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f06f 0201 	mvn.w	r2, #1
 800bb90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7f6 fd08 	bl	80025a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d104      	bne.n	800bbac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00c      	beq.n	800bbc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d007      	beq.n	800bbc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800bbbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f000 f9c7 	bl	800bf54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00c      	beq.n	800bbea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d007      	beq.n	800bbea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bbe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f9bf 	bl	800bf68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00c      	beq.n	800bc0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d007      	beq.n	800bc0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f834 	bl	800bc76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	f003 0320 	and.w	r3, r3, #32
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00c      	beq.n	800bc32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	f003 0320 	and.w	r3, r3, #32
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d007      	beq.n	800bc32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f06f 0220 	mvn.w	r2, #32
 800bc2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f987 	bl	800bf40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc32:	bf00      	nop
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b083      	sub	sp, #12
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc42:	bf00      	nop
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc7e:	bf00      	nop
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr
	...

0800bc8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b085      	sub	sp, #20
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a46      	ldr	r2, [pc, #280]	; (800bdb8 <TIM_Base_SetConfig+0x12c>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d013      	beq.n	800bccc <TIM_Base_SetConfig+0x40>
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcaa:	d00f      	beq.n	800bccc <TIM_Base_SetConfig+0x40>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4a43      	ldr	r2, [pc, #268]	; (800bdbc <TIM_Base_SetConfig+0x130>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d00b      	beq.n	800bccc <TIM_Base_SetConfig+0x40>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	4a42      	ldr	r2, [pc, #264]	; (800bdc0 <TIM_Base_SetConfig+0x134>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d007      	beq.n	800bccc <TIM_Base_SetConfig+0x40>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	4a41      	ldr	r2, [pc, #260]	; (800bdc4 <TIM_Base_SetConfig+0x138>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d003      	beq.n	800bccc <TIM_Base_SetConfig+0x40>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	4a40      	ldr	r2, [pc, #256]	; (800bdc8 <TIM_Base_SetConfig+0x13c>)
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d108      	bne.n	800bcde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	4a35      	ldr	r2, [pc, #212]	; (800bdb8 <TIM_Base_SetConfig+0x12c>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d01f      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcec:	d01b      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a32      	ldr	r2, [pc, #200]	; (800bdbc <TIM_Base_SetConfig+0x130>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d017      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a31      	ldr	r2, [pc, #196]	; (800bdc0 <TIM_Base_SetConfig+0x134>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d013      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a30      	ldr	r2, [pc, #192]	; (800bdc4 <TIM_Base_SetConfig+0x138>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d00f      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a2f      	ldr	r2, [pc, #188]	; (800bdc8 <TIM_Base_SetConfig+0x13c>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d00b      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4a2e      	ldr	r2, [pc, #184]	; (800bdcc <TIM_Base_SetConfig+0x140>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d007      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a2d      	ldr	r2, [pc, #180]	; (800bdd0 <TIM_Base_SetConfig+0x144>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d003      	beq.n	800bd26 <TIM_Base_SetConfig+0x9a>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a2c      	ldr	r2, [pc, #176]	; (800bdd4 <TIM_Base_SetConfig+0x148>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d108      	bne.n	800bd38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	68fa      	ldr	r2, [r7, #12]
 800bd34:	4313      	orrs	r3, r2
 800bd36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	4313      	orrs	r3, r2
 800bd44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	68fa      	ldr	r2, [r7, #12]
 800bd4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	689a      	ldr	r2, [r3, #8]
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	4a16      	ldr	r2, [pc, #88]	; (800bdb8 <TIM_Base_SetConfig+0x12c>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d00f      	beq.n	800bd84 <TIM_Base_SetConfig+0xf8>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a18      	ldr	r2, [pc, #96]	; (800bdc8 <TIM_Base_SetConfig+0x13c>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d00b      	beq.n	800bd84 <TIM_Base_SetConfig+0xf8>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a17      	ldr	r2, [pc, #92]	; (800bdcc <TIM_Base_SetConfig+0x140>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d007      	beq.n	800bd84 <TIM_Base_SetConfig+0xf8>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	4a16      	ldr	r2, [pc, #88]	; (800bdd0 <TIM_Base_SetConfig+0x144>)
 800bd78:	4293      	cmp	r3, r2
 800bd7a:	d003      	beq.n	800bd84 <TIM_Base_SetConfig+0xf8>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	4a15      	ldr	r2, [pc, #84]	; (800bdd4 <TIM_Base_SetConfig+0x148>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d103      	bne.n	800bd8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	691a      	ldr	r2, [r3, #16]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	2b01      	cmp	r3, #1
 800bd9c:	d105      	bne.n	800bdaa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	f023 0201 	bic.w	r2, r3, #1
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	611a      	str	r2, [r3, #16]
  }
}
 800bdaa:	bf00      	nop
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr
 800bdb6:	bf00      	nop
 800bdb8:	40010000 	.word	0x40010000
 800bdbc:	40000400 	.word	0x40000400
 800bdc0:	40000800 	.word	0x40000800
 800bdc4:	40000c00 	.word	0x40000c00
 800bdc8:	40010400 	.word	0x40010400
 800bdcc:	40014000 	.word	0x40014000
 800bdd0:	40014400 	.word	0x40014400
 800bdd4:	40014800 	.word	0x40014800

0800bdd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b087      	sub	sp, #28
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	60f8      	str	r0, [r7, #12]
 800bde0:	60b9      	str	r1, [r7, #8]
 800bde2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	f003 031f 	and.w	r3, r3, #31
 800bdea:	2201      	movs	r2, #1
 800bdec:	fa02 f303 	lsl.w	r3, r2, r3
 800bdf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6a1a      	ldr	r2, [r3, #32]
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	43db      	mvns	r3, r3
 800bdfa:	401a      	ands	r2, r3
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	6a1a      	ldr	r2, [r3, #32]
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	f003 031f 	and.w	r3, r3, #31
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	fa01 f303 	lsl.w	r3, r1, r3
 800be10:	431a      	orrs	r2, r3
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	621a      	str	r2, [r3, #32]
}
 800be16:	bf00      	nop
 800be18:	371c      	adds	r7, #28
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
	...

0800be24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be24:	b480      	push	{r7}
 800be26:	b085      	sub	sp, #20
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be34:	2b01      	cmp	r3, #1
 800be36:	d101      	bne.n	800be3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be38:	2302      	movs	r3, #2
 800be3a:	e06d      	b.n	800bf18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2201      	movs	r2, #1
 800be40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2202      	movs	r2, #2
 800be48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	685b      	ldr	r3, [r3, #4]
 800be52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a30      	ldr	r2, [pc, #192]	; (800bf24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d004      	beq.n	800be70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	4a2f      	ldr	r2, [pc, #188]	; (800bf28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d108      	bne.n	800be82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800be76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	4313      	orrs	r3, r2
 800be80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68fa      	ldr	r2, [r7, #12]
 800be90:	4313      	orrs	r3, r2
 800be92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	4a20      	ldr	r2, [pc, #128]	; (800bf24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d022      	beq.n	800beec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beae:	d01d      	beq.n	800beec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	4a1d      	ldr	r2, [pc, #116]	; (800bf2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d018      	beq.n	800beec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4a1c      	ldr	r2, [pc, #112]	; (800bf30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d013      	beq.n	800beec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a1a      	ldr	r2, [pc, #104]	; (800bf34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d00e      	beq.n	800beec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	4a15      	ldr	r2, [pc, #84]	; (800bf28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d009      	beq.n	800beec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	4a16      	ldr	r2, [pc, #88]	; (800bf38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d004      	beq.n	800beec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a15      	ldr	r2, [pc, #84]	; (800bf3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bee8:	4293      	cmp	r3, r2
 800beea:	d10c      	bne.n	800bf06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bef2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	689b      	ldr	r3, [r3, #8]
 800bef8:	68ba      	ldr	r2, [r7, #8]
 800befa:	4313      	orrs	r3, r2
 800befc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2201      	movs	r2, #1
 800bf0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf22:	4770      	bx	lr
 800bf24:	40010000 	.word	0x40010000
 800bf28:	40010400 	.word	0x40010400
 800bf2c:	40000400 	.word	0x40000400
 800bf30:	40000800 	.word	0x40000800
 800bf34:	40000c00 	.word	0x40000c00
 800bf38:	40001800 	.word	0x40001800
 800bf3c:	40014000 	.word	0x40014000

0800bf40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf40:	b480      	push	{r7}
 800bf42:	b083      	sub	sp, #12
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr

0800bf54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf54:	b480      	push	{r7}
 800bf56:	b083      	sub	sp, #12
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf5c:	bf00      	nop
 800bf5e:	370c      	adds	r7, #12
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr

0800bf68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b083      	sub	sp, #12
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bf70:	bf00      	nop
 800bf72:	370c      	adds	r7, #12
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d101      	bne.n	800bf8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf8a:	2301      	movs	r3, #1
 800bf8c:	e042      	b.n	800c014 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d106      	bne.n	800bfa6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f7f6 fd99 	bl	8002ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2224      	movs	r2, #36	; 0x24
 800bfaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f022 0201 	bic.w	r2, r2, #1
 800bfbc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d002      	beq.n	800bfcc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fd90 	bl	800caec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f000 f825 	bl	800c01c <UART_SetConfig>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b01      	cmp	r3, #1
 800bfd6:	d101      	bne.n	800bfdc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e01b      	b.n	800c014 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	685a      	ldr	r2, [r3, #4]
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bfea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	689a      	ldr	r2, [r3, #8]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bffa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f042 0201 	orr.w	r2, r2, #1
 800c00a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 fe0f 	bl	800cc30 <UART_CheckIdleState>
 800c012:	4603      	mov	r3, r0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3708      	adds	r7, #8
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c01c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c020:	b092      	sub	sp, #72	; 0x48
 800c022:	af00      	add	r7, sp, #0
 800c024:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c026:	2300      	movs	r3, #0
 800c028:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	689a      	ldr	r2, [r3, #8]
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	691b      	ldr	r3, [r3, #16]
 800c034:	431a      	orrs	r2, r3
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	431a      	orrs	r2, r3
 800c03c:	697b      	ldr	r3, [r7, #20]
 800c03e:	69db      	ldr	r3, [r3, #28]
 800c040:	4313      	orrs	r3, r2
 800c042:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	4bbe      	ldr	r3, [pc, #760]	; (800c344 <UART_SetConfig+0x328>)
 800c04c:	4013      	ands	r3, r2
 800c04e:	697a      	ldr	r2, [r7, #20]
 800c050:	6812      	ldr	r2, [r2, #0]
 800c052:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c054:	430b      	orrs	r3, r1
 800c056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	68da      	ldr	r2, [r3, #12]
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	430a      	orrs	r2, r1
 800c06c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	699b      	ldr	r3, [r3, #24]
 800c072:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4ab3      	ldr	r2, [pc, #716]	; (800c348 <UART_SetConfig+0x32c>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d004      	beq.n	800c088 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c084:	4313      	orrs	r3, r2
 800c086:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	689a      	ldr	r2, [r3, #8]
 800c08e:	4baf      	ldr	r3, [pc, #700]	; (800c34c <UART_SetConfig+0x330>)
 800c090:	4013      	ands	r3, r2
 800c092:	697a      	ldr	r2, [r7, #20]
 800c094:	6812      	ldr	r2, [r2, #0]
 800c096:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c098:	430b      	orrs	r3, r1
 800c09a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a2:	f023 010f 	bic.w	r1, r3, #15
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0aa:	697b      	ldr	r3, [r7, #20]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	430a      	orrs	r2, r1
 800c0b0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4aa6      	ldr	r2, [pc, #664]	; (800c350 <UART_SetConfig+0x334>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d177      	bne.n	800c1ac <UART_SetConfig+0x190>
 800c0bc:	4ba5      	ldr	r3, [pc, #660]	; (800c354 <UART_SetConfig+0x338>)
 800c0be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c0c4:	2b28      	cmp	r3, #40	; 0x28
 800c0c6:	d86d      	bhi.n	800c1a4 <UART_SetConfig+0x188>
 800c0c8:	a201      	add	r2, pc, #4	; (adr r2, 800c0d0 <UART_SetConfig+0xb4>)
 800c0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0ce:	bf00      	nop
 800c0d0:	0800c175 	.word	0x0800c175
 800c0d4:	0800c1a5 	.word	0x0800c1a5
 800c0d8:	0800c1a5 	.word	0x0800c1a5
 800c0dc:	0800c1a5 	.word	0x0800c1a5
 800c0e0:	0800c1a5 	.word	0x0800c1a5
 800c0e4:	0800c1a5 	.word	0x0800c1a5
 800c0e8:	0800c1a5 	.word	0x0800c1a5
 800c0ec:	0800c1a5 	.word	0x0800c1a5
 800c0f0:	0800c17d 	.word	0x0800c17d
 800c0f4:	0800c1a5 	.word	0x0800c1a5
 800c0f8:	0800c1a5 	.word	0x0800c1a5
 800c0fc:	0800c1a5 	.word	0x0800c1a5
 800c100:	0800c1a5 	.word	0x0800c1a5
 800c104:	0800c1a5 	.word	0x0800c1a5
 800c108:	0800c1a5 	.word	0x0800c1a5
 800c10c:	0800c1a5 	.word	0x0800c1a5
 800c110:	0800c185 	.word	0x0800c185
 800c114:	0800c1a5 	.word	0x0800c1a5
 800c118:	0800c1a5 	.word	0x0800c1a5
 800c11c:	0800c1a5 	.word	0x0800c1a5
 800c120:	0800c1a5 	.word	0x0800c1a5
 800c124:	0800c1a5 	.word	0x0800c1a5
 800c128:	0800c1a5 	.word	0x0800c1a5
 800c12c:	0800c1a5 	.word	0x0800c1a5
 800c130:	0800c18d 	.word	0x0800c18d
 800c134:	0800c1a5 	.word	0x0800c1a5
 800c138:	0800c1a5 	.word	0x0800c1a5
 800c13c:	0800c1a5 	.word	0x0800c1a5
 800c140:	0800c1a5 	.word	0x0800c1a5
 800c144:	0800c1a5 	.word	0x0800c1a5
 800c148:	0800c1a5 	.word	0x0800c1a5
 800c14c:	0800c1a5 	.word	0x0800c1a5
 800c150:	0800c195 	.word	0x0800c195
 800c154:	0800c1a5 	.word	0x0800c1a5
 800c158:	0800c1a5 	.word	0x0800c1a5
 800c15c:	0800c1a5 	.word	0x0800c1a5
 800c160:	0800c1a5 	.word	0x0800c1a5
 800c164:	0800c1a5 	.word	0x0800c1a5
 800c168:	0800c1a5 	.word	0x0800c1a5
 800c16c:	0800c1a5 	.word	0x0800c1a5
 800c170:	0800c19d 	.word	0x0800c19d
 800c174:	2301      	movs	r3, #1
 800c176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17a:	e222      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c17c:	2304      	movs	r3, #4
 800c17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c182:	e21e      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c184:	2308      	movs	r3, #8
 800c186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18a:	e21a      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c18c:	2310      	movs	r3, #16
 800c18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c192:	e216      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c194:	2320      	movs	r3, #32
 800c196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c19a:	e212      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c19c:	2340      	movs	r3, #64	; 0x40
 800c19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1a2:	e20e      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c1a4:	2380      	movs	r3, #128	; 0x80
 800c1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1aa:	e20a      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a69      	ldr	r2, [pc, #420]	; (800c358 <UART_SetConfig+0x33c>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d130      	bne.n	800c218 <UART_SetConfig+0x1fc>
 800c1b6:	4b67      	ldr	r3, [pc, #412]	; (800c354 <UART_SetConfig+0x338>)
 800c1b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1ba:	f003 0307 	and.w	r3, r3, #7
 800c1be:	2b05      	cmp	r3, #5
 800c1c0:	d826      	bhi.n	800c210 <UART_SetConfig+0x1f4>
 800c1c2:	a201      	add	r2, pc, #4	; (adr r2, 800c1c8 <UART_SetConfig+0x1ac>)
 800c1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1c8:	0800c1e1 	.word	0x0800c1e1
 800c1cc:	0800c1e9 	.word	0x0800c1e9
 800c1d0:	0800c1f1 	.word	0x0800c1f1
 800c1d4:	0800c1f9 	.word	0x0800c1f9
 800c1d8:	0800c201 	.word	0x0800c201
 800c1dc:	0800c209 	.word	0x0800c209
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e6:	e1ec      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c1e8:	2304      	movs	r3, #4
 800c1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ee:	e1e8      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c1f0:	2308      	movs	r3, #8
 800c1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f6:	e1e4      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c1f8:	2310      	movs	r3, #16
 800c1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1fe:	e1e0      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c200:	2320      	movs	r3, #32
 800c202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c206:	e1dc      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c208:	2340      	movs	r3, #64	; 0x40
 800c20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c20e:	e1d8      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c210:	2380      	movs	r3, #128	; 0x80
 800c212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c216:	e1d4      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a4f      	ldr	r2, [pc, #316]	; (800c35c <UART_SetConfig+0x340>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d130      	bne.n	800c284 <UART_SetConfig+0x268>
 800c222:	4b4c      	ldr	r3, [pc, #304]	; (800c354 <UART_SetConfig+0x338>)
 800c224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c226:	f003 0307 	and.w	r3, r3, #7
 800c22a:	2b05      	cmp	r3, #5
 800c22c:	d826      	bhi.n	800c27c <UART_SetConfig+0x260>
 800c22e:	a201      	add	r2, pc, #4	; (adr r2, 800c234 <UART_SetConfig+0x218>)
 800c230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c234:	0800c24d 	.word	0x0800c24d
 800c238:	0800c255 	.word	0x0800c255
 800c23c:	0800c25d 	.word	0x0800c25d
 800c240:	0800c265 	.word	0x0800c265
 800c244:	0800c26d 	.word	0x0800c26d
 800c248:	0800c275 	.word	0x0800c275
 800c24c:	2300      	movs	r3, #0
 800c24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c252:	e1b6      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c254:	2304      	movs	r3, #4
 800c256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25a:	e1b2      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c25c:	2308      	movs	r3, #8
 800c25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c262:	e1ae      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c264:	2310      	movs	r3, #16
 800c266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26a:	e1aa      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c26c:	2320      	movs	r3, #32
 800c26e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c272:	e1a6      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c274:	2340      	movs	r3, #64	; 0x40
 800c276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27a:	e1a2      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c27c:	2380      	movs	r3, #128	; 0x80
 800c27e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c282:	e19e      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	4a35      	ldr	r2, [pc, #212]	; (800c360 <UART_SetConfig+0x344>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d130      	bne.n	800c2f0 <UART_SetConfig+0x2d4>
 800c28e:	4b31      	ldr	r3, [pc, #196]	; (800c354 <UART_SetConfig+0x338>)
 800c290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c292:	f003 0307 	and.w	r3, r3, #7
 800c296:	2b05      	cmp	r3, #5
 800c298:	d826      	bhi.n	800c2e8 <UART_SetConfig+0x2cc>
 800c29a:	a201      	add	r2, pc, #4	; (adr r2, 800c2a0 <UART_SetConfig+0x284>)
 800c29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2a0:	0800c2b9 	.word	0x0800c2b9
 800c2a4:	0800c2c1 	.word	0x0800c2c1
 800c2a8:	0800c2c9 	.word	0x0800c2c9
 800c2ac:	0800c2d1 	.word	0x0800c2d1
 800c2b0:	0800c2d9 	.word	0x0800c2d9
 800c2b4:	0800c2e1 	.word	0x0800c2e1
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2be:	e180      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c2c0:	2304      	movs	r3, #4
 800c2c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2c6:	e17c      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c2c8:	2308      	movs	r3, #8
 800c2ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ce:	e178      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c2d0:	2310      	movs	r3, #16
 800c2d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d6:	e174      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c2d8:	2320      	movs	r3, #32
 800c2da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2de:	e170      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c2e0:	2340      	movs	r3, #64	; 0x40
 800c2e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e6:	e16c      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c2e8:	2380      	movs	r3, #128	; 0x80
 800c2ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ee:	e168      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	4a1b      	ldr	r2, [pc, #108]	; (800c364 <UART_SetConfig+0x348>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d142      	bne.n	800c380 <UART_SetConfig+0x364>
 800c2fa:	4b16      	ldr	r3, [pc, #88]	; (800c354 <UART_SetConfig+0x338>)
 800c2fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fe:	f003 0307 	and.w	r3, r3, #7
 800c302:	2b05      	cmp	r3, #5
 800c304:	d838      	bhi.n	800c378 <UART_SetConfig+0x35c>
 800c306:	a201      	add	r2, pc, #4	; (adr r2, 800c30c <UART_SetConfig+0x2f0>)
 800c308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30c:	0800c325 	.word	0x0800c325
 800c310:	0800c32d 	.word	0x0800c32d
 800c314:	0800c335 	.word	0x0800c335
 800c318:	0800c33d 	.word	0x0800c33d
 800c31c:	0800c369 	.word	0x0800c369
 800c320:	0800c371 	.word	0x0800c371
 800c324:	2300      	movs	r3, #0
 800c326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c32a:	e14a      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c32c:	2304      	movs	r3, #4
 800c32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c332:	e146      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c334:	2308      	movs	r3, #8
 800c336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33a:	e142      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c33c:	2310      	movs	r3, #16
 800c33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c342:	e13e      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c344:	cfff69f3 	.word	0xcfff69f3
 800c348:	58000c00 	.word	0x58000c00
 800c34c:	11fff4ff 	.word	0x11fff4ff
 800c350:	40011000 	.word	0x40011000
 800c354:	58024400 	.word	0x58024400
 800c358:	40004400 	.word	0x40004400
 800c35c:	40004800 	.word	0x40004800
 800c360:	40004c00 	.word	0x40004c00
 800c364:	40005000 	.word	0x40005000
 800c368:	2320      	movs	r3, #32
 800c36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c36e:	e128      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c370:	2340      	movs	r3, #64	; 0x40
 800c372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c376:	e124      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c378:	2380      	movs	r3, #128	; 0x80
 800c37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c37e:	e120      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	4acb      	ldr	r2, [pc, #812]	; (800c6b4 <UART_SetConfig+0x698>)
 800c386:	4293      	cmp	r3, r2
 800c388:	d176      	bne.n	800c478 <UART_SetConfig+0x45c>
 800c38a:	4bcb      	ldr	r3, [pc, #812]	; (800c6b8 <UART_SetConfig+0x69c>)
 800c38c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c38e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c392:	2b28      	cmp	r3, #40	; 0x28
 800c394:	d86c      	bhi.n	800c470 <UART_SetConfig+0x454>
 800c396:	a201      	add	r2, pc, #4	; (adr r2, 800c39c <UART_SetConfig+0x380>)
 800c398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c39c:	0800c441 	.word	0x0800c441
 800c3a0:	0800c471 	.word	0x0800c471
 800c3a4:	0800c471 	.word	0x0800c471
 800c3a8:	0800c471 	.word	0x0800c471
 800c3ac:	0800c471 	.word	0x0800c471
 800c3b0:	0800c471 	.word	0x0800c471
 800c3b4:	0800c471 	.word	0x0800c471
 800c3b8:	0800c471 	.word	0x0800c471
 800c3bc:	0800c449 	.word	0x0800c449
 800c3c0:	0800c471 	.word	0x0800c471
 800c3c4:	0800c471 	.word	0x0800c471
 800c3c8:	0800c471 	.word	0x0800c471
 800c3cc:	0800c471 	.word	0x0800c471
 800c3d0:	0800c471 	.word	0x0800c471
 800c3d4:	0800c471 	.word	0x0800c471
 800c3d8:	0800c471 	.word	0x0800c471
 800c3dc:	0800c451 	.word	0x0800c451
 800c3e0:	0800c471 	.word	0x0800c471
 800c3e4:	0800c471 	.word	0x0800c471
 800c3e8:	0800c471 	.word	0x0800c471
 800c3ec:	0800c471 	.word	0x0800c471
 800c3f0:	0800c471 	.word	0x0800c471
 800c3f4:	0800c471 	.word	0x0800c471
 800c3f8:	0800c471 	.word	0x0800c471
 800c3fc:	0800c459 	.word	0x0800c459
 800c400:	0800c471 	.word	0x0800c471
 800c404:	0800c471 	.word	0x0800c471
 800c408:	0800c471 	.word	0x0800c471
 800c40c:	0800c471 	.word	0x0800c471
 800c410:	0800c471 	.word	0x0800c471
 800c414:	0800c471 	.word	0x0800c471
 800c418:	0800c471 	.word	0x0800c471
 800c41c:	0800c461 	.word	0x0800c461
 800c420:	0800c471 	.word	0x0800c471
 800c424:	0800c471 	.word	0x0800c471
 800c428:	0800c471 	.word	0x0800c471
 800c42c:	0800c471 	.word	0x0800c471
 800c430:	0800c471 	.word	0x0800c471
 800c434:	0800c471 	.word	0x0800c471
 800c438:	0800c471 	.word	0x0800c471
 800c43c:	0800c469 	.word	0x0800c469
 800c440:	2301      	movs	r3, #1
 800c442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c446:	e0bc      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c448:	2304      	movs	r3, #4
 800c44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c44e:	e0b8      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c450:	2308      	movs	r3, #8
 800c452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c456:	e0b4      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c458:	2310      	movs	r3, #16
 800c45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c45e:	e0b0      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c460:	2320      	movs	r3, #32
 800c462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c466:	e0ac      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c468:	2340      	movs	r3, #64	; 0x40
 800c46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c46e:	e0a8      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c470:	2380      	movs	r3, #128	; 0x80
 800c472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c476:	e0a4      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c478:	697b      	ldr	r3, [r7, #20]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	4a8f      	ldr	r2, [pc, #572]	; (800c6bc <UART_SetConfig+0x6a0>)
 800c47e:	4293      	cmp	r3, r2
 800c480:	d130      	bne.n	800c4e4 <UART_SetConfig+0x4c8>
 800c482:	4b8d      	ldr	r3, [pc, #564]	; (800c6b8 <UART_SetConfig+0x69c>)
 800c484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c486:	f003 0307 	and.w	r3, r3, #7
 800c48a:	2b05      	cmp	r3, #5
 800c48c:	d826      	bhi.n	800c4dc <UART_SetConfig+0x4c0>
 800c48e:	a201      	add	r2, pc, #4	; (adr r2, 800c494 <UART_SetConfig+0x478>)
 800c490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c494:	0800c4ad 	.word	0x0800c4ad
 800c498:	0800c4b5 	.word	0x0800c4b5
 800c49c:	0800c4bd 	.word	0x0800c4bd
 800c4a0:	0800c4c5 	.word	0x0800c4c5
 800c4a4:	0800c4cd 	.word	0x0800c4cd
 800c4a8:	0800c4d5 	.word	0x0800c4d5
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4b2:	e086      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c4b4:	2304      	movs	r3, #4
 800c4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ba:	e082      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c4bc:	2308      	movs	r3, #8
 800c4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4c2:	e07e      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c4c4:	2310      	movs	r3, #16
 800c4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4ca:	e07a      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c4cc:	2320      	movs	r3, #32
 800c4ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4d2:	e076      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c4d4:	2340      	movs	r3, #64	; 0x40
 800c4d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4da:	e072      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c4dc:	2380      	movs	r3, #128	; 0x80
 800c4de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c4e2:	e06e      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c4e4:	697b      	ldr	r3, [r7, #20]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a75      	ldr	r2, [pc, #468]	; (800c6c0 <UART_SetConfig+0x6a4>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d130      	bne.n	800c550 <UART_SetConfig+0x534>
 800c4ee:	4b72      	ldr	r3, [pc, #456]	; (800c6b8 <UART_SetConfig+0x69c>)
 800c4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4f2:	f003 0307 	and.w	r3, r3, #7
 800c4f6:	2b05      	cmp	r3, #5
 800c4f8:	d826      	bhi.n	800c548 <UART_SetConfig+0x52c>
 800c4fa:	a201      	add	r2, pc, #4	; (adr r2, 800c500 <UART_SetConfig+0x4e4>)
 800c4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c500:	0800c519 	.word	0x0800c519
 800c504:	0800c521 	.word	0x0800c521
 800c508:	0800c529 	.word	0x0800c529
 800c50c:	0800c531 	.word	0x0800c531
 800c510:	0800c539 	.word	0x0800c539
 800c514:	0800c541 	.word	0x0800c541
 800c518:	2300      	movs	r3, #0
 800c51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c51e:	e050      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c520:	2304      	movs	r3, #4
 800c522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c526:	e04c      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c528:	2308      	movs	r3, #8
 800c52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c52e:	e048      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c530:	2310      	movs	r3, #16
 800c532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c536:	e044      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c538:	2320      	movs	r3, #32
 800c53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c53e:	e040      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c540:	2340      	movs	r3, #64	; 0x40
 800c542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c546:	e03c      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c548:	2380      	movs	r3, #128	; 0x80
 800c54a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c54e:	e038      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a5b      	ldr	r2, [pc, #364]	; (800c6c4 <UART_SetConfig+0x6a8>)
 800c556:	4293      	cmp	r3, r2
 800c558:	d130      	bne.n	800c5bc <UART_SetConfig+0x5a0>
 800c55a:	4b57      	ldr	r3, [pc, #348]	; (800c6b8 <UART_SetConfig+0x69c>)
 800c55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c55e:	f003 0307 	and.w	r3, r3, #7
 800c562:	2b05      	cmp	r3, #5
 800c564:	d826      	bhi.n	800c5b4 <UART_SetConfig+0x598>
 800c566:	a201      	add	r2, pc, #4	; (adr r2, 800c56c <UART_SetConfig+0x550>)
 800c568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c56c:	0800c585 	.word	0x0800c585
 800c570:	0800c58d 	.word	0x0800c58d
 800c574:	0800c595 	.word	0x0800c595
 800c578:	0800c59d 	.word	0x0800c59d
 800c57c:	0800c5a5 	.word	0x0800c5a5
 800c580:	0800c5ad 	.word	0x0800c5ad
 800c584:	2302      	movs	r3, #2
 800c586:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c58a:	e01a      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c58c:	2304      	movs	r3, #4
 800c58e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c592:	e016      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c594:	2308      	movs	r3, #8
 800c596:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c59a:	e012      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c59c:	2310      	movs	r3, #16
 800c59e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5a2:	e00e      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c5a4:	2320      	movs	r3, #32
 800c5a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5aa:	e00a      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c5ac:	2340      	movs	r3, #64	; 0x40
 800c5ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5b2:	e006      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c5b4:	2380      	movs	r3, #128	; 0x80
 800c5b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c5ba:	e002      	b.n	800c5c2 <UART_SetConfig+0x5a6>
 800c5bc:	2380      	movs	r3, #128	; 0x80
 800c5be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a3f      	ldr	r2, [pc, #252]	; (800c6c4 <UART_SetConfig+0x6a8>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	f040 80f8 	bne.w	800c7be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c5ce:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c5d2:	2b20      	cmp	r3, #32
 800c5d4:	dc46      	bgt.n	800c664 <UART_SetConfig+0x648>
 800c5d6:	2b02      	cmp	r3, #2
 800c5d8:	f2c0 8082 	blt.w	800c6e0 <UART_SetConfig+0x6c4>
 800c5dc:	3b02      	subs	r3, #2
 800c5de:	2b1e      	cmp	r3, #30
 800c5e0:	d87e      	bhi.n	800c6e0 <UART_SetConfig+0x6c4>
 800c5e2:	a201      	add	r2, pc, #4	; (adr r2, 800c5e8 <UART_SetConfig+0x5cc>)
 800c5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e8:	0800c66b 	.word	0x0800c66b
 800c5ec:	0800c6e1 	.word	0x0800c6e1
 800c5f0:	0800c673 	.word	0x0800c673
 800c5f4:	0800c6e1 	.word	0x0800c6e1
 800c5f8:	0800c6e1 	.word	0x0800c6e1
 800c5fc:	0800c6e1 	.word	0x0800c6e1
 800c600:	0800c683 	.word	0x0800c683
 800c604:	0800c6e1 	.word	0x0800c6e1
 800c608:	0800c6e1 	.word	0x0800c6e1
 800c60c:	0800c6e1 	.word	0x0800c6e1
 800c610:	0800c6e1 	.word	0x0800c6e1
 800c614:	0800c6e1 	.word	0x0800c6e1
 800c618:	0800c6e1 	.word	0x0800c6e1
 800c61c:	0800c6e1 	.word	0x0800c6e1
 800c620:	0800c693 	.word	0x0800c693
 800c624:	0800c6e1 	.word	0x0800c6e1
 800c628:	0800c6e1 	.word	0x0800c6e1
 800c62c:	0800c6e1 	.word	0x0800c6e1
 800c630:	0800c6e1 	.word	0x0800c6e1
 800c634:	0800c6e1 	.word	0x0800c6e1
 800c638:	0800c6e1 	.word	0x0800c6e1
 800c63c:	0800c6e1 	.word	0x0800c6e1
 800c640:	0800c6e1 	.word	0x0800c6e1
 800c644:	0800c6e1 	.word	0x0800c6e1
 800c648:	0800c6e1 	.word	0x0800c6e1
 800c64c:	0800c6e1 	.word	0x0800c6e1
 800c650:	0800c6e1 	.word	0x0800c6e1
 800c654:	0800c6e1 	.word	0x0800c6e1
 800c658:	0800c6e1 	.word	0x0800c6e1
 800c65c:	0800c6e1 	.word	0x0800c6e1
 800c660:	0800c6d3 	.word	0x0800c6d3
 800c664:	2b40      	cmp	r3, #64	; 0x40
 800c666:	d037      	beq.n	800c6d8 <UART_SetConfig+0x6bc>
 800c668:	e03a      	b.n	800c6e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c66a:	f7fe fb37 	bl	800acdc <HAL_RCCEx_GetD3PCLK1Freq>
 800c66e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c670:	e03c      	b.n	800c6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c672:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c676:	4618      	mov	r0, r3
 800c678:	f7fe fb46 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c67c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c680:	e034      	b.n	800c6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c682:	f107 0318 	add.w	r3, r7, #24
 800c686:	4618      	mov	r0, r3
 800c688:	f7fe fc92 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c690:	e02c      	b.n	800c6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c692:	4b09      	ldr	r3, [pc, #36]	; (800c6b8 <UART_SetConfig+0x69c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 0320 	and.w	r3, r3, #32
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d016      	beq.n	800c6cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c69e:	4b06      	ldr	r3, [pc, #24]	; (800c6b8 <UART_SetConfig+0x69c>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	08db      	lsrs	r3, r3, #3
 800c6a4:	f003 0303 	and.w	r3, r3, #3
 800c6a8:	4a07      	ldr	r2, [pc, #28]	; (800c6c8 <UART_SetConfig+0x6ac>)
 800c6aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6b0:	e01c      	b.n	800c6ec <UART_SetConfig+0x6d0>
 800c6b2:	bf00      	nop
 800c6b4:	40011400 	.word	0x40011400
 800c6b8:	58024400 	.word	0x58024400
 800c6bc:	40007800 	.word	0x40007800
 800c6c0:	40007c00 	.word	0x40007c00
 800c6c4:	58000c00 	.word	0x58000c00
 800c6c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c6cc:	4b9d      	ldr	r3, [pc, #628]	; (800c944 <UART_SetConfig+0x928>)
 800c6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d0:	e00c      	b.n	800c6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6d2:	4b9d      	ldr	r3, [pc, #628]	; (800c948 <UART_SetConfig+0x92c>)
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d6:	e009      	b.n	800c6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6de:	e005      	b.n	800c6ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c6ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f000 81de 	beq.w	800cab0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c6f4:	697b      	ldr	r3, [r7, #20]
 800c6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f8:	4a94      	ldr	r2, [pc, #592]	; (800c94c <UART_SetConfig+0x930>)
 800c6fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c6fe:	461a      	mov	r2, r3
 800c700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c702:	fbb3 f3f2 	udiv	r3, r3, r2
 800c706:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	4613      	mov	r3, r2
 800c70e:	005b      	lsls	r3, r3, #1
 800c710:	4413      	add	r3, r2
 800c712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c714:	429a      	cmp	r2, r3
 800c716:	d305      	bcc.n	800c724 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	685b      	ldr	r3, [r3, #4]
 800c71c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c71e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c720:	429a      	cmp	r2, r3
 800c722:	d903      	bls.n	800c72c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c72a:	e1c1      	b.n	800cab0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c72c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c72e:	2200      	movs	r2, #0
 800c730:	60bb      	str	r3, [r7, #8]
 800c732:	60fa      	str	r2, [r7, #12]
 800c734:	697b      	ldr	r3, [r7, #20]
 800c736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c738:	4a84      	ldr	r2, [pc, #528]	; (800c94c <UART_SetConfig+0x930>)
 800c73a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c73e:	b29b      	uxth	r3, r3
 800c740:	2200      	movs	r2, #0
 800c742:	603b      	str	r3, [r7, #0]
 800c744:	607a      	str	r2, [r7, #4]
 800c746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c74a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c74e:	f7f3 fdc3 	bl	80002d8 <__aeabi_uldivmod>
 800c752:	4602      	mov	r2, r0
 800c754:	460b      	mov	r3, r1
 800c756:	4610      	mov	r0, r2
 800c758:	4619      	mov	r1, r3
 800c75a:	f04f 0200 	mov.w	r2, #0
 800c75e:	f04f 0300 	mov.w	r3, #0
 800c762:	020b      	lsls	r3, r1, #8
 800c764:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c768:	0202      	lsls	r2, r0, #8
 800c76a:	6979      	ldr	r1, [r7, #20]
 800c76c:	6849      	ldr	r1, [r1, #4]
 800c76e:	0849      	lsrs	r1, r1, #1
 800c770:	2000      	movs	r0, #0
 800c772:	460c      	mov	r4, r1
 800c774:	4605      	mov	r5, r0
 800c776:	eb12 0804 	adds.w	r8, r2, r4
 800c77a:	eb43 0905 	adc.w	r9, r3, r5
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	2200      	movs	r2, #0
 800c784:	469a      	mov	sl, r3
 800c786:	4693      	mov	fp, r2
 800c788:	4652      	mov	r2, sl
 800c78a:	465b      	mov	r3, fp
 800c78c:	4640      	mov	r0, r8
 800c78e:	4649      	mov	r1, r9
 800c790:	f7f3 fda2 	bl	80002d8 <__aeabi_uldivmod>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	4613      	mov	r3, r2
 800c79a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c7a2:	d308      	bcc.n	800c7b6 <UART_SetConfig+0x79a>
 800c7a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c7aa:	d204      	bcs.n	800c7b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c7ac:	697b      	ldr	r3, [r7, #20]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7b2:	60da      	str	r2, [r3, #12]
 800c7b4:	e17c      	b.n	800cab0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c7bc:	e178      	b.n	800cab0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c7be:	697b      	ldr	r3, [r7, #20]
 800c7c0:	69db      	ldr	r3, [r3, #28]
 800c7c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7c6:	f040 80c5 	bne.w	800c954 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c7ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c7ce:	2b20      	cmp	r3, #32
 800c7d0:	dc48      	bgt.n	800c864 <UART_SetConfig+0x848>
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	db7b      	blt.n	800c8ce <UART_SetConfig+0x8b2>
 800c7d6:	2b20      	cmp	r3, #32
 800c7d8:	d879      	bhi.n	800c8ce <UART_SetConfig+0x8b2>
 800c7da:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <UART_SetConfig+0x7c4>)
 800c7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e0:	0800c86b 	.word	0x0800c86b
 800c7e4:	0800c873 	.word	0x0800c873
 800c7e8:	0800c8cf 	.word	0x0800c8cf
 800c7ec:	0800c8cf 	.word	0x0800c8cf
 800c7f0:	0800c87b 	.word	0x0800c87b
 800c7f4:	0800c8cf 	.word	0x0800c8cf
 800c7f8:	0800c8cf 	.word	0x0800c8cf
 800c7fc:	0800c8cf 	.word	0x0800c8cf
 800c800:	0800c88b 	.word	0x0800c88b
 800c804:	0800c8cf 	.word	0x0800c8cf
 800c808:	0800c8cf 	.word	0x0800c8cf
 800c80c:	0800c8cf 	.word	0x0800c8cf
 800c810:	0800c8cf 	.word	0x0800c8cf
 800c814:	0800c8cf 	.word	0x0800c8cf
 800c818:	0800c8cf 	.word	0x0800c8cf
 800c81c:	0800c8cf 	.word	0x0800c8cf
 800c820:	0800c89b 	.word	0x0800c89b
 800c824:	0800c8cf 	.word	0x0800c8cf
 800c828:	0800c8cf 	.word	0x0800c8cf
 800c82c:	0800c8cf 	.word	0x0800c8cf
 800c830:	0800c8cf 	.word	0x0800c8cf
 800c834:	0800c8cf 	.word	0x0800c8cf
 800c838:	0800c8cf 	.word	0x0800c8cf
 800c83c:	0800c8cf 	.word	0x0800c8cf
 800c840:	0800c8cf 	.word	0x0800c8cf
 800c844:	0800c8cf 	.word	0x0800c8cf
 800c848:	0800c8cf 	.word	0x0800c8cf
 800c84c:	0800c8cf 	.word	0x0800c8cf
 800c850:	0800c8cf 	.word	0x0800c8cf
 800c854:	0800c8cf 	.word	0x0800c8cf
 800c858:	0800c8cf 	.word	0x0800c8cf
 800c85c:	0800c8cf 	.word	0x0800c8cf
 800c860:	0800c8c1 	.word	0x0800c8c1
 800c864:	2b40      	cmp	r3, #64	; 0x40
 800c866:	d02e      	beq.n	800c8c6 <UART_SetConfig+0x8aa>
 800c868:	e031      	b.n	800c8ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c86a:	f7fc fa81 	bl	8008d70 <HAL_RCC_GetPCLK1Freq>
 800c86e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c870:	e033      	b.n	800c8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c872:	f7fc fa93 	bl	8008d9c <HAL_RCC_GetPCLK2Freq>
 800c876:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c878:	e02f      	b.n	800c8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c87a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c87e:	4618      	mov	r0, r3
 800c880:	f7fe fa42 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c888:	e027      	b.n	800c8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c88a:	f107 0318 	add.w	r3, r7, #24
 800c88e:	4618      	mov	r0, r3
 800c890:	f7fe fb8e 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c894:	69fb      	ldr	r3, [r7, #28]
 800c896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c898:	e01f      	b.n	800c8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c89a:	4b2d      	ldr	r3, [pc, #180]	; (800c950 <UART_SetConfig+0x934>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f003 0320 	and.w	r3, r3, #32
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d009      	beq.n	800c8ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c8a6:	4b2a      	ldr	r3, [pc, #168]	; (800c950 <UART_SetConfig+0x934>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	08db      	lsrs	r3, r3, #3
 800c8ac:	f003 0303 	and.w	r3, r3, #3
 800c8b0:	4a24      	ldr	r2, [pc, #144]	; (800c944 <UART_SetConfig+0x928>)
 800c8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c8b8:	e00f      	b.n	800c8da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c8ba:	4b22      	ldr	r3, [pc, #136]	; (800c944 <UART_SetConfig+0x928>)
 800c8bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8be:	e00c      	b.n	800c8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c8c0:	4b21      	ldr	r3, [pc, #132]	; (800c948 <UART_SetConfig+0x92c>)
 800c8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c4:	e009      	b.n	800c8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c8c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8cc:	e005      	b.n	800c8da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c8d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f000 80e7 	beq.w	800cab0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e6:	4a19      	ldr	r2, [pc, #100]	; (800c94c <UART_SetConfig+0x930>)
 800c8e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8f4:	005a      	lsls	r2, r3, #1
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	085b      	lsrs	r3, r3, #1
 800c8fc:	441a      	add	r2, r3
 800c8fe:	697b      	ldr	r3, [r7, #20]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	fbb2 f3f3 	udiv	r3, r2, r3
 800c906:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90a:	2b0f      	cmp	r3, #15
 800c90c:	d916      	bls.n	800c93c <UART_SetConfig+0x920>
 800c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c914:	d212      	bcs.n	800c93c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c918:	b29b      	uxth	r3, r3
 800c91a:	f023 030f 	bic.w	r3, r3, #15
 800c91e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c922:	085b      	lsrs	r3, r3, #1
 800c924:	b29b      	uxth	r3, r3
 800c926:	f003 0307 	and.w	r3, r3, #7
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c92e:	4313      	orrs	r3, r2
 800c930:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c932:	697b      	ldr	r3, [r7, #20]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c938:	60da      	str	r2, [r3, #12]
 800c93a:	e0b9      	b.n	800cab0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c93c:	2301      	movs	r3, #1
 800c93e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c942:	e0b5      	b.n	800cab0 <UART_SetConfig+0xa94>
 800c944:	03d09000 	.word	0x03d09000
 800c948:	003d0900 	.word	0x003d0900
 800c94c:	0800d224 	.word	0x0800d224
 800c950:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c954:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c958:	2b20      	cmp	r3, #32
 800c95a:	dc49      	bgt.n	800c9f0 <UART_SetConfig+0x9d4>
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	db7c      	blt.n	800ca5a <UART_SetConfig+0xa3e>
 800c960:	2b20      	cmp	r3, #32
 800c962:	d87a      	bhi.n	800ca5a <UART_SetConfig+0xa3e>
 800c964:	a201      	add	r2, pc, #4	; (adr r2, 800c96c <UART_SetConfig+0x950>)
 800c966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96a:	bf00      	nop
 800c96c:	0800c9f7 	.word	0x0800c9f7
 800c970:	0800c9ff 	.word	0x0800c9ff
 800c974:	0800ca5b 	.word	0x0800ca5b
 800c978:	0800ca5b 	.word	0x0800ca5b
 800c97c:	0800ca07 	.word	0x0800ca07
 800c980:	0800ca5b 	.word	0x0800ca5b
 800c984:	0800ca5b 	.word	0x0800ca5b
 800c988:	0800ca5b 	.word	0x0800ca5b
 800c98c:	0800ca17 	.word	0x0800ca17
 800c990:	0800ca5b 	.word	0x0800ca5b
 800c994:	0800ca5b 	.word	0x0800ca5b
 800c998:	0800ca5b 	.word	0x0800ca5b
 800c99c:	0800ca5b 	.word	0x0800ca5b
 800c9a0:	0800ca5b 	.word	0x0800ca5b
 800c9a4:	0800ca5b 	.word	0x0800ca5b
 800c9a8:	0800ca5b 	.word	0x0800ca5b
 800c9ac:	0800ca27 	.word	0x0800ca27
 800c9b0:	0800ca5b 	.word	0x0800ca5b
 800c9b4:	0800ca5b 	.word	0x0800ca5b
 800c9b8:	0800ca5b 	.word	0x0800ca5b
 800c9bc:	0800ca5b 	.word	0x0800ca5b
 800c9c0:	0800ca5b 	.word	0x0800ca5b
 800c9c4:	0800ca5b 	.word	0x0800ca5b
 800c9c8:	0800ca5b 	.word	0x0800ca5b
 800c9cc:	0800ca5b 	.word	0x0800ca5b
 800c9d0:	0800ca5b 	.word	0x0800ca5b
 800c9d4:	0800ca5b 	.word	0x0800ca5b
 800c9d8:	0800ca5b 	.word	0x0800ca5b
 800c9dc:	0800ca5b 	.word	0x0800ca5b
 800c9e0:	0800ca5b 	.word	0x0800ca5b
 800c9e4:	0800ca5b 	.word	0x0800ca5b
 800c9e8:	0800ca5b 	.word	0x0800ca5b
 800c9ec:	0800ca4d 	.word	0x0800ca4d
 800c9f0:	2b40      	cmp	r3, #64	; 0x40
 800c9f2:	d02e      	beq.n	800ca52 <UART_SetConfig+0xa36>
 800c9f4:	e031      	b.n	800ca5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9f6:	f7fc f9bb 	bl	8008d70 <HAL_RCC_GetPCLK1Freq>
 800c9fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c9fc:	e033      	b.n	800ca66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9fe:	f7fc f9cd 	bl	8008d9c <HAL_RCC_GetPCLK2Freq>
 800ca02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ca04:	e02f      	b.n	800ca66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	f7fe f97c 	bl	800ad08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ca10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca14:	e027      	b.n	800ca66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ca16:	f107 0318 	add.w	r3, r7, #24
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fe fac8 	bl	800afb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca24:	e01f      	b.n	800ca66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca26:	4b2d      	ldr	r3, [pc, #180]	; (800cadc <UART_SetConfig+0xac0>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 0320 	and.w	r3, r3, #32
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d009      	beq.n	800ca46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ca32:	4b2a      	ldr	r3, [pc, #168]	; (800cadc <UART_SetConfig+0xac0>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	08db      	lsrs	r3, r3, #3
 800ca38:	f003 0303 	and.w	r3, r3, #3
 800ca3c:	4a28      	ldr	r2, [pc, #160]	; (800cae0 <UART_SetConfig+0xac4>)
 800ca3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ca42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ca44:	e00f      	b.n	800ca66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ca46:	4b26      	ldr	r3, [pc, #152]	; (800cae0 <UART_SetConfig+0xac4>)
 800ca48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca4a:	e00c      	b.n	800ca66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ca4c:	4b25      	ldr	r3, [pc, #148]	; (800cae4 <UART_SetConfig+0xac8>)
 800ca4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca50:	e009      	b.n	800ca66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca58:	e005      	b.n	800ca66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ca64:	bf00      	nop
    }

    if (pclk != 0U)
 800ca66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d021      	beq.n	800cab0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca70:	4a1d      	ldr	r2, [pc, #116]	; (800cae8 <UART_SetConfig+0xacc>)
 800ca72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca76:	461a      	mov	r2, r3
 800ca78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	685b      	ldr	r3, [r3, #4]
 800ca82:	085b      	lsrs	r3, r3, #1
 800ca84:	441a      	add	r2, r3
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca8e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	2b0f      	cmp	r3, #15
 800ca94:	d909      	bls.n	800caaa <UART_SetConfig+0xa8e>
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca9c:	d205      	bcs.n	800caaa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa0:	b29a      	uxth	r2, r3
 800caa2:	697b      	ldr	r3, [r7, #20]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	60da      	str	r2, [r3, #12]
 800caa8:	e002      	b.n	800cab0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800caaa:	2301      	movs	r3, #1
 800caac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	2201      	movs	r2, #1
 800cab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	2201      	movs	r2, #1
 800cabc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cac0:	697b      	ldr	r3, [r7, #20]
 800cac2:	2200      	movs	r2, #0
 800cac4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	2200      	movs	r2, #0
 800caca:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800cacc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	3748      	adds	r7, #72	; 0x48
 800cad4:	46bd      	mov	sp, r7
 800cad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cada:	bf00      	nop
 800cadc:	58024400 	.word	0x58024400
 800cae0:	03d09000 	.word	0x03d09000
 800cae4:	003d0900 	.word	0x003d0900
 800cae8:	0800d224 	.word	0x0800d224

0800caec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800caec:	b480      	push	{r7}
 800caee:	b083      	sub	sp, #12
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caf8:	f003 0308 	and.w	r3, r3, #8
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00a      	beq.n	800cb16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	430a      	orrs	r2, r1
 800cb14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb1a:	f003 0301 	and.w	r3, r3, #1
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00a      	beq.n	800cb38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	430a      	orrs	r2, r1
 800cb36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3c:	f003 0302 	and.w	r3, r3, #2
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00a      	beq.n	800cb5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	430a      	orrs	r2, r1
 800cb58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb5e:	f003 0304 	and.w	r3, r3, #4
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00a      	beq.n	800cb7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	430a      	orrs	r2, r1
 800cb7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb80:	f003 0310 	and.w	r3, r3, #16
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00a      	beq.n	800cb9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	430a      	orrs	r2, r1
 800cb9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba2:	f003 0320 	and.w	r3, r3, #32
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d00a      	beq.n	800cbc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	430a      	orrs	r2, r1
 800cbbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d01a      	beq.n	800cc02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	430a      	orrs	r2, r1
 800cbe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cbea:	d10a      	bne.n	800cc02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	430a      	orrs	r2, r1
 800cc00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00a      	beq.n	800cc24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	685b      	ldr	r3, [r3, #4]
 800cc14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	430a      	orrs	r2, r1
 800cc22:	605a      	str	r2, [r3, #4]
  }
}
 800cc24:	bf00      	nop
 800cc26:	370c      	adds	r7, #12
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b098      	sub	sp, #96	; 0x60
 800cc34:	af02      	add	r7, sp, #8
 800cc36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cc40:	f7f6 f902 	bl	8002e48 <HAL_GetTick>
 800cc44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f003 0308 	and.w	r3, r3, #8
 800cc50:	2b08      	cmp	r3, #8
 800cc52:	d12f      	bne.n	800ccb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f000 f88e 	bl	800cd84 <UART_WaitOnFlagUntilTimeout>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d022      	beq.n	800ccb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	e853 3f00 	ldrex	r3, [r3]
 800cc7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc82:	653b      	str	r3, [r7, #80]	; 0x50
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	461a      	mov	r2, r3
 800cc8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc8c:	647b      	str	r3, [r7, #68]	; 0x44
 800cc8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc94:	e841 2300 	strex	r3, r2, [r1]
 800cc98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1e6      	bne.n	800cc6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2220      	movs	r2, #32
 800cca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ccb0:	2303      	movs	r3, #3
 800ccb2:	e063      	b.n	800cd7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 0304 	and.w	r3, r3, #4
 800ccbe:	2b04      	cmp	r3, #4
 800ccc0:	d149      	bne.n	800cd56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ccc2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ccc6:	9300      	str	r3, [sp, #0]
 800ccc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ccca:	2200      	movs	r2, #0
 800cccc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f000 f857 	bl	800cd84 <UART_WaitOnFlagUntilTimeout>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d03c      	beq.n	800cd56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce4:	e853 3f00 	ldrex	r3, [r3]
 800cce8:	623b      	str	r3, [r7, #32]
   return(result);
 800ccea:	6a3b      	ldr	r3, [r7, #32]
 800ccec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ccf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccfa:	633b      	str	r3, [r7, #48]	; 0x30
 800ccfc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd02:	e841 2300 	strex	r3, r2, [r1]
 800cd06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1e6      	bne.n	800ccdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	3308      	adds	r3, #8
 800cd14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	e853 3f00 	ldrex	r3, [r3]
 800cd1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	f023 0301 	bic.w	r3, r3, #1
 800cd24:	64bb      	str	r3, [r7, #72]	; 0x48
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	3308      	adds	r3, #8
 800cd2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cd2e:	61fa      	str	r2, [r7, #28]
 800cd30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd32:	69b9      	ldr	r1, [r7, #24]
 800cd34:	69fa      	ldr	r2, [r7, #28]
 800cd36:	e841 2300 	strex	r3, r2, [r1]
 800cd3a:	617b      	str	r3, [r7, #20]
   return(result);
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1e5      	bne.n	800cd0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2220      	movs	r2, #32
 800cd46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd52:	2303      	movs	r3, #3
 800cd54:	e012      	b.n	800cd7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2220      	movs	r2, #32
 800cd5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2220      	movs	r2, #32
 800cd62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd7a:	2300      	movs	r3, #0
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3758      	adds	r7, #88	; 0x58
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}

0800cd84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b084      	sub	sp, #16
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	603b      	str	r3, [r7, #0]
 800cd90:	4613      	mov	r3, r2
 800cd92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd94:	e04f      	b.n	800ce36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd96:	69bb      	ldr	r3, [r7, #24]
 800cd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd9c:	d04b      	beq.n	800ce36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd9e:	f7f6 f853 	bl	8002e48 <HAL_GetTick>
 800cda2:	4602      	mov	r2, r0
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	1ad3      	subs	r3, r2, r3
 800cda8:	69ba      	ldr	r2, [r7, #24]
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	d302      	bcc.n	800cdb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800cdae:	69bb      	ldr	r3, [r7, #24]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d101      	bne.n	800cdb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cdb4:	2303      	movs	r3, #3
 800cdb6:	e04e      	b.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f003 0304 	and.w	r3, r3, #4
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d037      	beq.n	800ce36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cdc6:	68bb      	ldr	r3, [r7, #8]
 800cdc8:	2b80      	cmp	r3, #128	; 0x80
 800cdca:	d034      	beq.n	800ce36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	2b40      	cmp	r3, #64	; 0x40
 800cdd0:	d031      	beq.n	800ce36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	69db      	ldr	r3, [r3, #28]
 800cdd8:	f003 0308 	and.w	r3, r3, #8
 800cddc:	2b08      	cmp	r3, #8
 800cdde:	d110      	bne.n	800ce02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	2208      	movs	r2, #8
 800cde6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f000 f839 	bl	800ce60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2208      	movs	r2, #8
 800cdf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800cdfe:	2301      	movs	r3, #1
 800ce00:	e029      	b.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	69db      	ldr	r3, [r3, #28]
 800ce08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ce10:	d111      	bne.n	800ce36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 f81f 	bl	800ce60 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	2220      	movs	r2, #32
 800ce26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800ce32:	2303      	movs	r3, #3
 800ce34:	e00f      	b.n	800ce56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	69da      	ldr	r2, [r3, #28]
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	4013      	ands	r3, r2
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	bf0c      	ite	eq
 800ce46:	2301      	moveq	r3, #1
 800ce48:	2300      	movne	r3, #0
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d0a0      	beq.n	800cd96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce54:	2300      	movs	r3, #0
}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3710      	adds	r7, #16
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}
	...

0800ce60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b095      	sub	sp, #84	; 0x54
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce70:	e853 3f00 	ldrex	r3, [r3]
 800ce74:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ce76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	461a      	mov	r2, r3
 800ce84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce86:	643b      	str	r3, [r7, #64]	; 0x40
 800ce88:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ce8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ce8e:	e841 2300 	strex	r3, r2, [r1]
 800ce92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d1e6      	bne.n	800ce68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3308      	adds	r3, #8
 800cea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	e853 3f00 	ldrex	r3, [r3]
 800cea8:	61fb      	str	r3, [r7, #28]
   return(result);
 800ceaa:	69fa      	ldr	r2, [r7, #28]
 800ceac:	4b1e      	ldr	r3, [pc, #120]	; (800cf28 <UART_EndRxTransfer+0xc8>)
 800ceae:	4013      	ands	r3, r2
 800ceb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	3308      	adds	r3, #8
 800ceb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ceba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cebc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cec2:	e841 2300 	strex	r3, r2, [r1]
 800cec6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d1e5      	bne.n	800ce9a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d118      	bne.n	800cf08 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	e853 3f00 	ldrex	r3, [r3]
 800cee2:	60bb      	str	r3, [r7, #8]
   return(result);
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	f023 0310 	bic.w	r3, r3, #16
 800ceea:	647b      	str	r3, [r7, #68]	; 0x44
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	461a      	mov	r2, r3
 800cef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef4:	61bb      	str	r3, [r7, #24]
 800cef6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cef8:	6979      	ldr	r1, [r7, #20]
 800cefa:	69ba      	ldr	r2, [r7, #24]
 800cefc:	e841 2300 	strex	r3, r2, [r1]
 800cf00:	613b      	str	r3, [r7, #16]
   return(result);
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d1e6      	bne.n	800ced6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2220      	movs	r2, #32
 800cf0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cf1c:	bf00      	nop
 800cf1e:	3754      	adds	r7, #84	; 0x54
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr
 800cf28:	effffffe 	.word	0xeffffffe

0800cf2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b085      	sub	sp, #20
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d101      	bne.n	800cf42 <HAL_UARTEx_DisableFifoMode+0x16>
 800cf3e:	2302      	movs	r3, #2
 800cf40:	e027      	b.n	800cf92 <HAL_UARTEx_DisableFifoMode+0x66>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2201      	movs	r2, #1
 800cf46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2224      	movs	r2, #36	; 0x24
 800cf4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f022 0201 	bic.w	r2, r2, #1
 800cf68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cf70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2220      	movs	r2, #32
 800cf84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3714      	adds	r7, #20
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr

0800cf9e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b084      	sub	sp, #16
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d101      	bne.n	800cfb6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cfb2:	2302      	movs	r3, #2
 800cfb4:	e02d      	b.n	800d012 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2224      	movs	r2, #36	; 0x24
 800cfc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	681a      	ldr	r2, [r3, #0]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f022 0201 	bic.w	r2, r2, #1
 800cfdc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	689b      	ldr	r3, [r3, #8]
 800cfe4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	430a      	orrs	r2, r1
 800cff0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 f850 	bl	800d098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2220      	movs	r2, #32
 800d004:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2200      	movs	r2, #0
 800d00c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d010:	2300      	movs	r3, #0
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b084      	sub	sp, #16
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d101      	bne.n	800d032 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d02e:	2302      	movs	r3, #2
 800d030:	e02d      	b.n	800d08e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2224      	movs	r2, #36	; 0x24
 800d03e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	f022 0201 	bic.w	r2, r2, #1
 800d058:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	430a      	orrs	r2, r1
 800d06c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 f812 	bl	800d098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	2220      	movs	r2, #32
 800d080:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d08c:	2300      	movs	r3, #0
}
 800d08e:	4618      	mov	r0, r3
 800d090:	3710      	adds	r7, #16
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
	...

0800d098 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d098:	b480      	push	{r7}
 800d09a:	b085      	sub	sp, #20
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d108      	bne.n	800d0ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0b8:	e031      	b.n	800d11e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0ba:	2310      	movs	r3, #16
 800d0bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0be:	2310      	movs	r3, #16
 800d0c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	0e5b      	lsrs	r3, r3, #25
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	f003 0307 	and.w	r3, r3, #7
 800d0d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	0f5b      	lsrs	r3, r3, #29
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	f003 0307 	and.w	r3, r3, #7
 800d0e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0e2:	7bbb      	ldrb	r3, [r7, #14]
 800d0e4:	7b3a      	ldrb	r2, [r7, #12]
 800d0e6:	4911      	ldr	r1, [pc, #68]	; (800d12c <UARTEx_SetNbDataToProcess+0x94>)
 800d0e8:	5c8a      	ldrb	r2, [r1, r2]
 800d0ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d0ee:	7b3a      	ldrb	r2, [r7, #12]
 800d0f0:	490f      	ldr	r1, [pc, #60]	; (800d130 <UARTEx_SetNbDataToProcess+0x98>)
 800d0f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0f8:	b29a      	uxth	r2, r3
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d100:	7bfb      	ldrb	r3, [r7, #15]
 800d102:	7b7a      	ldrb	r2, [r7, #13]
 800d104:	4909      	ldr	r1, [pc, #36]	; (800d12c <UARTEx_SetNbDataToProcess+0x94>)
 800d106:	5c8a      	ldrb	r2, [r1, r2]
 800d108:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d10c:	7b7a      	ldrb	r2, [r7, #13]
 800d10e:	4908      	ldr	r1, [pc, #32]	; (800d130 <UARTEx_SetNbDataToProcess+0x98>)
 800d110:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d112:	fb93 f3f2 	sdiv	r3, r3, r2
 800d116:	b29a      	uxth	r2, r3
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d11e:	bf00      	nop
 800d120:	3714      	adds	r7, #20
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	0800d23c 	.word	0x0800d23c
 800d130:	0800d244 	.word	0x0800d244

0800d134 <memset>:
 800d134:	4402      	add	r2, r0
 800d136:	4603      	mov	r3, r0
 800d138:	4293      	cmp	r3, r2
 800d13a:	d100      	bne.n	800d13e <memset+0xa>
 800d13c:	4770      	bx	lr
 800d13e:	f803 1b01 	strb.w	r1, [r3], #1
 800d142:	e7f9      	b.n	800d138 <memset+0x4>

0800d144 <__libc_init_array>:
 800d144:	b570      	push	{r4, r5, r6, lr}
 800d146:	4d0d      	ldr	r5, [pc, #52]	; (800d17c <__libc_init_array+0x38>)
 800d148:	4c0d      	ldr	r4, [pc, #52]	; (800d180 <__libc_init_array+0x3c>)
 800d14a:	1b64      	subs	r4, r4, r5
 800d14c:	10a4      	asrs	r4, r4, #2
 800d14e:	2600      	movs	r6, #0
 800d150:	42a6      	cmp	r6, r4
 800d152:	d109      	bne.n	800d168 <__libc_init_array+0x24>
 800d154:	4d0b      	ldr	r5, [pc, #44]	; (800d184 <__libc_init_array+0x40>)
 800d156:	4c0c      	ldr	r4, [pc, #48]	; (800d188 <__libc_init_array+0x44>)
 800d158:	f000 f826 	bl	800d1a8 <_init>
 800d15c:	1b64      	subs	r4, r4, r5
 800d15e:	10a4      	asrs	r4, r4, #2
 800d160:	2600      	movs	r6, #0
 800d162:	42a6      	cmp	r6, r4
 800d164:	d105      	bne.n	800d172 <__libc_init_array+0x2e>
 800d166:	bd70      	pop	{r4, r5, r6, pc}
 800d168:	f855 3b04 	ldr.w	r3, [r5], #4
 800d16c:	4798      	blx	r3
 800d16e:	3601      	adds	r6, #1
 800d170:	e7ee      	b.n	800d150 <__libc_init_array+0xc>
 800d172:	f855 3b04 	ldr.w	r3, [r5], #4
 800d176:	4798      	blx	r3
 800d178:	3601      	adds	r6, #1
 800d17a:	e7f2      	b.n	800d162 <__libc_init_array+0x1e>
 800d17c:	0800d254 	.word	0x0800d254
 800d180:	0800d254 	.word	0x0800d254
 800d184:	0800d254 	.word	0x0800d254
 800d188:	0800d258 	.word	0x0800d258

0800d18c <memcpy>:
 800d18c:	440a      	add	r2, r1
 800d18e:	4291      	cmp	r1, r2
 800d190:	f100 33ff 	add.w	r3, r0, #4294967295
 800d194:	d100      	bne.n	800d198 <memcpy+0xc>
 800d196:	4770      	bx	lr
 800d198:	b510      	push	{r4, lr}
 800d19a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d19e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1a2:	4291      	cmp	r1, r2
 800d1a4:	d1f9      	bne.n	800d19a <memcpy+0xe>
 800d1a6:	bd10      	pop	{r4, pc}

0800d1a8 <_init>:
 800d1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1aa:	bf00      	nop
 800d1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ae:	bc08      	pop	{r3}
 800d1b0:	469e      	mov	lr, r3
 800d1b2:	4770      	bx	lr

0800d1b4 <_fini>:
 800d1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1b6:	bf00      	nop
 800d1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ba:	bc08      	pop	{r3}
 800d1bc:	469e      	mov	lr, r3
 800d1be:	4770      	bx	lr

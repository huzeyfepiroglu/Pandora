
Pandora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d5d0  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800d868  0800d868  0001d868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d8f4  0800d8f4  0001d8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d8fc  0800d8fc  0001d8fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d900  0800d900  0001d900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800d904  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800d918  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800d978  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  240000d4  0800d9d8  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000960  0800d9d8  00020960  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e09d  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ead  00000000  00000000  0004e1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f08  00000000  00000000  00053090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000184e  00000000  00000000  00054f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003ea7f  00000000  00000000  000567e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e1dc  00000000  00000000  00095265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018ab66  00000000  00000000  000c3441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000084dc  00000000  00000000  0024dfa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00256484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d850 	.word	0x0800d850

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	0800d850 	.word	0x0800d850

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f8:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <MX_ADC1_Init+0xe4>)
 80005fa:	4a30      	ldr	r2, [pc, #192]	; (80006bc <MX_ADC1_Init+0xe8>)
 80005fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000612:	2204      	movs	r2, #4
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000618:	2200      	movs	r2, #0
 800061a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800061e:	2201      	movs	r2, #1
 8000620:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000624:	2201      	movs	r2, #1
 8000626:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800062a:	2200      	movs	r2, #0
 800062c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000642:	2200      	movs	r2, #0
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000656:	f002 fef9 	bl	800344c <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000660:	f001 fc68 	bl	8001f34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000670:	f003 ff1c 	bl	80044ac <HAL_ADCEx_MultiModeConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800067a:	f001 fc5b 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_ADC1_Init+0xec>)
 8000680:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000682:	2306      	movs	r3, #6
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800068e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000690:	2304      	movs	r3, #4
 8000692:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_ADC1_Init+0xe4>)
 80006a2:	f003 f957 	bl	8003954 <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006ac:	f001 fc42 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	240000f0 	.word	0x240000f0
 80006bc:	40022000 	.word	0x40022000
 80006c0:	08600004 	.word	0x08600004

080006c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006de:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <MX_ADC2_Init+0xc4>)
 80006e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000702:	2201      	movs	r2, #1
 8000704:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000708:	2201      	movs	r2, #1
 800070a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC2_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_ADC2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_ADC2_Init+0xc0>)
 800073a:	f002 fe87 	bl	800344c <HAL_ADC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000744:	f001 fbf6 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_ADC2_Init+0xc8>)
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074c:	2306      	movs	r3, #6
 800074e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000754:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000758:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_ADC2_Init+0xc0>)
 800076c:	f003 f8f2 	bl	8003954 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000776:	f001 fbdd 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	24000154 	.word	0x24000154
 8000788:	40022100 	.word	0x40022100
 800078c:	08600004 	.word	0x08600004

08000790 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007aa:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <MX_ADC3_Init+0xc4>)
 80007ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_ADC3_Init+0xc0>)
 8000806:	f002 fe21 	bl	800344c <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000810:	f001 fb90 	bl	8001f34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_ADC3_Init+0xc8>)
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000818:	2306      	movs	r3, #6
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000820:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000826:	2304      	movs	r3, #4
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_ADC3_Init+0xc0>)
 8000838:	f003 f88c 	bl	8003954 <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000842:	f001 fb77 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	240001b8 	.word	0x240001b8
 8000854:	58026000 	.word	0x58026000
 8000858:	21800100 	.word	0x21800100

0800085c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a99      	ldr	r2, [pc, #612]	; (8000ae0 <HAL_ADC_MspInit+0x284>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d164      	bne.n	8000948 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800087e:	4b99      	ldr	r3, [pc, #612]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a97      	ldr	r2, [pc, #604]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000886:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000888:	4b96      	ldr	r3, [pc, #600]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10e      	bne.n	80008ae <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000890:	4b95      	ldr	r3, [pc, #596]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000896:	4a94      	ldr	r2, [pc, #592]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008a0:	4b91      	ldr	r3, [pc, #580]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	623b      	str	r3, [r7, #32]
 80008ac:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b8e      	ldr	r3, [pc, #568]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b4:	4a8c      	ldr	r2, [pc, #560]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008be:	4b8a      	ldr	r3, [pc, #552]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = EOS_CURRENT_Pin|KKU_CURRENT_Pin;
 80008cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4882      	ldr	r0, [pc, #520]	; (8000aec <HAL_ADC_MspInit+0x290>)
 80008e2:	f007 f841 	bl	8007968 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80008e6:	4b82      	ldr	r3, [pc, #520]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008e8:	4a82      	ldr	r2, [pc, #520]	; (8000af4 <HAL_ADC_MspInit+0x298>)
 80008ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008ec:	4b80      	ldr	r3, [pc, #512]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008ee:	2209      	movs	r2, #9
 80008f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f2:	4b7f      	ldr	r3, [pc, #508]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f8:	4b7d      	ldr	r3, [pc, #500]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008fe:	4b7c      	ldr	r3, [pc, #496]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000904:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000906:	4b7a      	ldr	r3, [pc, #488]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800090c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800090e:	4b78      	ldr	r3, [pc, #480]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000910:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000914:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000916:	4b76      	ldr	r3, [pc, #472]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800091c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b74      	ldr	r3, [pc, #464]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000924:	4b72      	ldr	r3, [pc, #456]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800092a:	4871      	ldr	r0, [pc, #452]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 800092c:	f003 ffac 	bl	8004888 <HAL_DMA_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000936:	f001 fafd 	bl	8001f34 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a6c      	ldr	r2, [pc, #432]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 800093e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000940:	4a6b      	ldr	r2, [pc, #428]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000946:	e0c6      	b.n	8000ad6 <HAL_ADC_MspInit+0x27a>
  else if(adcHandle->Instance==ADC2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a6a      	ldr	r2, [pc, #424]	; (8000af8 <HAL_ADC_MspInit+0x29c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d164      	bne.n	8000a1c <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000952:	4b64      	ldr	r3, [pc, #400]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	4a62      	ldr	r2, [pc, #392]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800095a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800095c:	4b61      	ldr	r3, [pc, #388]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10e      	bne.n	8000982 <HAL_ADC_MspInit+0x126>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000964:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800096a:	4a5f      	ldr	r2, [pc, #380]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 800096c:	f043 0320 	orr.w	r3, r3, #32
 8000970:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000974:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000976:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800097a:	f003 0320 	and.w	r3, r3, #32
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000982:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a57      	ldr	r2, [pc, #348]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b55      	ldr	r3, [pc, #340]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AKB_CURRENT_Pin|SERVO_CURRENT_Pin;
 80009a0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a6:	2303      	movs	r3, #3
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	484d      	ldr	r0, [pc, #308]	; (8000aec <HAL_ADC_MspInit+0x290>)
 80009b6:	f006 ffd7 	bl	8007968 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 80009ba:	4b50      	ldr	r3, [pc, #320]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009bc:	4a50      	ldr	r2, [pc, #320]	; (8000b00 <HAL_ADC_MspInit+0x2a4>)
 80009be:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009c0:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009c2:	220a      	movs	r2, #10
 80009c4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c6:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009cc:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009d2:	4b4a      	ldr	r3, [pc, #296]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009da:	4b48      	ldr	r3, [pc, #288]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009e2:	4b46      	ldr	r3, [pc, #280]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80009f2:	4b42      	ldr	r3, [pc, #264]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009f8:	4b40      	ldr	r3, [pc, #256]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009fe:	483f      	ldr	r0, [pc, #252]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a00:	f003 ff42 	bl	8004888 <HAL_DMA_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8000a0a:	f001 fa93 	bl	8001f34 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a12:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a14:	4a39      	ldr	r2, [pc, #228]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a1a:	e05c      	b.n	8000ad6 <HAL_ADC_MspInit+0x27a>
  else if(adcHandle->Instance==ADC3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a38      	ldr	r2, [pc, #224]	; (8000b04 <HAL_ADC_MspInit+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d157      	bne.n	8000ad6 <HAL_ADC_MspInit+0x27a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a4c:	f043 0320 	orr.w	r3, r3, #32
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAIN_POWER_VOLTAGE_Pin|MAIN_POWER_CURRENT_Pin|SOLENOID_CURRENT_Pin|COCKING_HANDLE_CURRENT_Pin;
 8000a62:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	481d      	ldr	r0, [pc, #116]	; (8000aec <HAL_ADC_MspInit+0x290>)
 8000a78:	f006 ff76 	bl	8007968 <HAL_GPIO_Init>
    hdma_adc3.Instance = BDMA_Channel0;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_ADC_MspInit+0x2b0>)
 8000a80:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a84:	2211      	movs	r2, #17
 8000a86:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aa2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aaa:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000aba:	4813      	ldr	r0, [pc, #76]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000abc:	f003 fee4 	bl	8004888 <HAL_DMA_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_ADC_MspInit+0x26e>
      Error_Handler();
 8000ac6:	f001 fa35 	bl	8001f34 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ace:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ad6:	bf00      	nop
 8000ad8:	3738      	adds	r7, #56	; 0x38
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000
 8000ae4:	24000384 	.word	0x24000384
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58021400 	.word	0x58021400
 8000af0:	2400021c 	.word	0x2400021c
 8000af4:	40020010 	.word	0x40020010
 8000af8:	40022100 	.word	0x40022100
 8000afc:	24000294 	.word	0x24000294
 8000b00:	40020028 	.word	0x40020028
 8000b04:	58026000 	.word	0x58026000
 8000b08:	2400030c 	.word	0x2400030c
 8000b0c:	58025408 	.word	0x58025408

08000b10 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	2081      	movs	r0, #129	; 0x81
 8000b3a:	f003 fe70 	bl	800481e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000b3e:	2081      	movs	r0, #129	; 0x81
 8000b40:	f003 fe87 	bl	8004852 <HAL_NVIC_EnableIRQ>

}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400

08000b50 <functionCockingMotorDrive>:

// variables needed for just cocking_handle_maingun.c not global
int32_t lastCount = 0;

void functionCockingMotorDrive(bool direction)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	if(direction == FORWARD)
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00d      	beq.n	8000b7c <functionCockingMotorDrive+0x2c>
	{
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,OFF);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2102      	movs	r1, #2
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b66:	f007 f8af 	bl	8007cc8 <HAL_GPIO_WritePin>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,ON);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b70:	f007 f8aa 	bl	8007cc8 <HAL_GPIO_WritePin>

		pandora.gun.cockingHandle.motorState = FORWARD;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <functionCockingMotorDrive+0x60>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	715a      	strb	r2, [r3, #5]
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,ON);

		pandora.gun.cockingHandle.motorState = BACKWARD;
	}
}
 8000b7a:	e012      	b.n	8000ba2 <functionCockingMotorDrive+0x52>
	else if(direction == BACKWARD)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f083 0301 	eor.w	r3, r3, #1
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00c      	beq.n	8000ba2 <functionCockingMotorDrive+0x52>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b8e:	f007 f89b 	bl	8007cc8 <HAL_GPIO_WritePin>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,ON);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2102      	movs	r1, #2
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b98:	f007 f896 	bl	8007cc8 <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.motorState = BACKWARD;
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <functionCockingMotorDrive+0x60>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	715a      	strb	r2, [r3, #5]
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	58021800 	.word	0x58021800
 8000bb0:	24000570 	.word	0x24000570

08000bb4 <functionCockingMotorBrake>:

void functionCockingMotorBrake (bool state)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	if(state == ON)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d009      	beq.n	8000bd8 <functionCockingMotorBrake+0x24>
	{
		MOTOR_CONTROL(BRAKE_DRV_28V,ON);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <functionCockingMotorBrake+0x4c>)
 8000bcc:	f007 f87c 	bl	8007cc8 <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.brakeState = ON;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <functionCockingMotorBrake+0x50>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	719a      	strb	r2, [r3, #6]
	{
		MOTOR_CONTROL(BRAKE_DRV_28V,OFF);
		pandora.gun.cockingHandle.brakeState = OFF;
	}

}
 8000bd6:	e00e      	b.n	8000bf6 <functionCockingMotorBrake+0x42>
	else if (state == OFF)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f083 0301 	eor.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d008      	beq.n	8000bf6 <functionCockingMotorBrake+0x42>
		MOTOR_CONTROL(BRAKE_DRV_28V,OFF);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <functionCockingMotorBrake+0x4c>)
 8000bec:	f007 f86c 	bl	8007cc8 <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.brakeState = OFF;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <functionCockingMotorBrake+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	719a      	strb	r2, [r3, #6]
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	58020c00 	.word	0x58020c00
 8000c04:	24000570 	.word	0x24000570

08000c08 <functionCockingMotorStop>:

void functionCockingMotorStop(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,OFF);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <functionCockingMotorStop+0x24>)
 8000c12:	f007 f859 	bl	8007cc8 <HAL_GPIO_WritePin>
	MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <functionCockingMotorStop+0x24>)
 8000c1c:	f007 f854 	bl	8007cc8 <HAL_GPIO_WritePin>

	pandora.gun.cockingHandle.motorState = IDLE;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <functionCockingMotorStop+0x28>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	715a      	strb	r2, [r3, #5]
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	58021800 	.word	0x58021800
 8000c30:	24000570 	.word	0x24000570

08000c34 <functionCockingHandleGoSafe>:
	pandora.gun.cockingHandle.safe  = false;
	pandora.gun.cockingHandle.home  = true;
}

void functionCockingHandleGoSafe (void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	if(!pandora.switches.switches_cocking_handle_home)
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c3a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000c3e:	f083 0301 	eor.w	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00f      	beq.n	8000c68 <functionCockingHandleGoSafe+0x34>
	{
		functionCockingMotorBrake(OFF);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff ffb3 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff ff7e 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c56:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f7      	bne.n	8000c4e <functionCockingHandleGoSafe+0x1a>

		functionCockingMotorStop();
 8000c5e:	f7ff ffd3 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f7ff ffa6 	bl	8000bb4 <functionCockingMotorBrake>
	}

	if(pandora.switches.switches_cocking_handle_home)
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c6a:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d014      	beq.n	8000c9c <functionCockingHandleGoSafe+0x68>
	{
		functionCockingMotorBrake(OFF);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff ff9e 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(FORWARD);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff ff69 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(!functionCountEncoderPulse(SAFE_POSITION));
 8000c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c82:	f000 f873 	bl	8000d6c <functionCountEncoderPulse>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f083 0301 	eor.w	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f2      	bne.n	8000c78 <functionCockingHandleGoSafe+0x44>

		functionCockingMotorStop();
 8000c92:	f7ff ffb9 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff ff8c 	bl	8000bb4 <functionCockingMotorBrake>
	}

	pandora.gun.cockingHandle.armed = false;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	71da      	strb	r2, [r3, #7]
	pandora.gun.cockingHandle.safe  = true;
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	721a      	strb	r2, [r3, #8]
	pandora.gun.cockingHandle.home  = true;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	725a      	strb	r2, [r3, #9]
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24000570 	.word	0x24000570

08000cb8 <functionCockingHandleGoArm>:

void functionCockingHandleGoArm (void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	if(!pandora.switches.switches_cocking_handle_home)
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000cbe:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000cc2:	f083 0301 	eor.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00f      	beq.n	8000cec <functionCockingHandleGoArm+0x34>
	{
		functionCockingMotorBrake(OFF);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff ff71 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff ff3c 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000cda:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f7      	bne.n	8000cd2 <functionCockingHandleGoArm+0x1a>

		functionCockingMotorStop();
 8000ce2:	f7ff ff91 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff ff64 	bl	8000bb4 <functionCockingMotorBrake>
	}

	if(pandora.switches.switches_cocking_handle_home)
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000cee:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d014      	beq.n	8000d20 <functionCockingHandleGoArm+0x68>
	{
		functionCockingMotorBrake(OFF);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ff5c 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(FORWARD);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff ff27 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(!functionCountEncoderPulse(ARM_POSITION));
 8000d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d06:	f000 f831 	bl	8000d6c <functionCountEncoderPulse>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f083 0301 	eor.w	r3, r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f2      	bne.n	8000cfc <functionCockingHandleGoArm+0x44>

		functionCockingMotorStop();
 8000d16:	f7ff ff77 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff ff4a 	bl	8000bb4 <functionCockingMotorBrake>
	}

	if(!pandora.switches.switches_cocking_handle_home)
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d22:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000d26:	f083 0301 	eor.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00f      	beq.n	8000d50 <functionCockingHandleGoArm+0x98>
	{
		functionCockingMotorBrake(OFF);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff ff3f 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff0a 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d3e:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f7      	bne.n	8000d36 <functionCockingHandleGoArm+0x7e>


		functionCockingMotorStop();
 8000d46:	f7ff ff5f 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff ff32 	bl	8000bb4 <functionCockingMotorBrake>
	}

	pandora.gun.cockingHandle.armed = true;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	71da      	strb	r2, [r3, #7]
	pandora.gun.cockingHandle.safe  = false;
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	721a      	strb	r2, [r3, #8]
	pandora.gun.cockingHandle.home  = true;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	725a      	strb	r2, [r3, #9]
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	24000570 	.word	0x24000570

08000d6c <functionCountEncoderPulse>:

bool functionCountEncoderPulse(uint32_t position)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if(pandora.gun.cockingHandle.encoderCounter <= position)								// main içerisinde functionEncoderCounter saymalı..! OK #huzeyfe
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <functionCountEncoderPulse+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d301      	bcc.n	8000d84 <functionCountEncoderPulse+0x18>
		return true;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <functionCountEncoderPulse+0x1a>
	else
		return false;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	24000570 	.word	0x24000570

08000d98 <functionEncoderRead>:

void functionEncoderRead(TIM_HandleTypeDef *htim)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	int32_t currentCount = __HAL_TIM_GET_COUNTER(htim);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	60fb      	str	r3, [r7, #12]
	int32_t difference = currentCount - lastCount;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <functionEncoderRead+0x74>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	60bb      	str	r3, [r7, #8]

	if(pandora.switches.switches_cocking_handle_home)
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <functionEncoderRead+0x78>)
 8000db4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <functionEncoderRead+0x30>
	{
		currentCount = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
		lastCount = 0;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <functionEncoderRead+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]

		return;
 8000dc6:	e01b      	b.n	8000e00 <functionEncoderRead+0x68>
	}

	if(difference > 0)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dd09      	ble.n	8000de2 <functionEncoderRead+0x4a>
	{
		pandora.gun.cockingHandle.encoderRotation = FORWARD;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <functionEncoderRead+0x78>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	711a      	strb	r2, [r3, #4]
		pandora.gun.cockingHandle.encoderCounter += difference;
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <functionEncoderRead+0x78>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <functionEncoderRead+0x78>)
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	e00b      	b.n	8000dfa <functionEncoderRead+0x62>
	}

	else if (difference < 0)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da08      	bge.n	8000dfa <functionEncoderRead+0x62>
	{
		pandora.gun.cockingHandle.encoderRotation = BACKWARD;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <functionEncoderRead+0x78>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	711a      	strb	r2, [r3, #4]
		pandora.gun.cockingHandle.encoderCounter += difference;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <functionEncoderRead+0x78>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <functionEncoderRead+0x78>)
 8000df8:	6013      	str	r3, [r2, #0]

	}

	lastCount = currentCount;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <functionEncoderRead+0x74>)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	24000388 	.word	0x24000388
 8000e10:	24000570 	.word	0x24000570

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_DMA_Init+0x4c>)
 8000e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e20:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <MX_DMA_Init+0x4c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_DMA_Init+0x4c>)
 8000e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	200b      	movs	r0, #11
 8000e3e:	f003 fcee 	bl	800481e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e42:	200b      	movs	r0, #11
 8000e44:	f003 fd05 	bl	8004852 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	200c      	movs	r0, #12
 8000e4e:	f003 fce6 	bl	800481e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e52:	200c      	movs	r0, #12
 8000e54:	f003 fcfd 	bl	8004852 <HAL_NVIC_EnableIRQ>

}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400

08000e64 <functionErrorCurrentVoltageCheck>:
#include "power_management.h"

extern pandoraStructer pandora;

void functionErrorCurrentVoltageCheck (void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	pandora.error.solenoidCurrentHigh		= (pandora.powerManagement.SCurrent		 	> AMPER_5) 	? true : false;
 8000e68:	4b2f      	ldr	r3, [pc, #188]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	bf8c      	ite	hi
 8000e72:	2301      	movhi	r3, #1
 8000e74:	2300      	movls	r3, #0
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b2b      	ldr	r3, [pc, #172]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e7a:	745a      	strb	r2, [r3, #17]
	pandora.error.cockingHandleCurrentHigh	= (pandora.powerManagement.CHCurrent		> AMPER_5) 	? true : false;
 8000e7c:	4b2a      	ldr	r3, [pc, #168]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	bf8c      	ite	hi
 8000e86:	2301      	movhi	r3, #1
 8000e88:	2300      	movls	r3, #0
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e8e:	74da      	strb	r2, [r3, #19]
	pandora.error.herculeCurrentHigh 		= (pandora.powerManagement.HERCULECurrent 	> AMPER_5) 	? true : false;
 8000e90:	4b25      	ldr	r3, [pc, #148]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000e92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	bf8c      	ite	hi
 8000e9a:	2301      	movhi	r3, #1
 8000e9c:	2300      	movls	r3, #0
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ea2:	755a      	strb	r2, [r3, #21]
	pandora.error.kkuCurrentHigh 			= (pandora.powerManagement.KKUCurrent 		> AMPER_5) 	? true : false;
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ea6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000eaa:	2b05      	cmp	r3, #5
 8000eac:	bf8c      	ite	hi
 8000eae:	2301      	movhi	r3, #1
 8000eb0:	2300      	movls	r3, #0
 8000eb2:	b2da      	uxtb	r2, r3
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000eb6:	765a      	strb	r2, [r3, #25]
	pandora.error.akbCurrentHigh 			= (pandora.powerManagement.AKBCurrent 		> AMPER_5) 	? true : false;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000eba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	bf8c      	ite	hi
 8000ec2:	2301      	movhi	r3, #1
 8000ec4:	2300      	movls	r3, #0
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000eca:	75da      	strb	r2, [r3, #23]
	pandora.error.gdbCurrentHigh 			= (pandora.powerManagement.GDBCurrent 		> AMPER_5) 	? true : false;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ece:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000ed2:	2b05      	cmp	r3, #5
 8000ed4:	bf8c      	ite	hi
 8000ed6:	2301      	movhi	r3, #1
 8000ed8:	2300      	movls	r3, #0
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ede:	775a      	strb	r2, [r3, #29]
	pandora.error.eosCurrentHigh 			= (pandora.powerManagement.EOSCurrent 		> AMPER_5) 	? true : false;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ee2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	bf8c      	ite	hi
 8000eea:	2301      	movhi	r3, #1
 8000eec:	2300      	movls	r3, #0
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ef2:	76da      	strb	r2, [r3, #27]
	pandora.error.gdbVoltageHigh 			= (pandora.powerManagement.BATVoltage 		> VOLT_28) 	? true : false;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000ef6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000efa:	2b1c      	cmp	r3, #28
 8000efc:	bf8c      	ite	hi
 8000efe:	2301      	movhi	r3, #1
 8000f00:	2300      	movls	r3, #0
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	4b08      	ldr	r3, [pc, #32]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f06:	77da      	strb	r2, [r3, #31]
	pandora.error.gdbVoltageLow	 			= (pandora.powerManagement.BATVoltage 		< VOLT_22) 	? true : false;
 8000f08:	4b07      	ldr	r3, [pc, #28]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8000f0e:	2b15      	cmp	r3, #21
 8000f10:	bf94      	ite	ls
 8000f12:	2301      	movls	r3, #1
 8000f14:	2300      	movhi	r3, #0
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <functionErrorCurrentVoltageCheck+0xc4>)
 8000f1a:	779a      	strb	r2, [r3, #30]
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	24000570 	.word	0x24000570

08000f2c <functionErrorMosfetCheck>:

void functionErrorMosfetCheck (void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
	if((pandora.switches.switches_fire_order 	== true)	&&
 8000f30:	4b49      	ldr	r3, [pc, #292]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f32:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d014      	beq.n	8000f64 <functionErrorMosfetCheck+0x38>
	   (pandora.states.firing 					== true )   &&
 8000f3a:	4b47      	ldr	r3, [pc, #284]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
	if((pandora.switches.switches_fire_order 	== true)	&&
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00f      	beq.n	8000f64 <functionErrorMosfetCheck+0x38>
	   (pandora.powerManagement.SCurrent 		< AMPER_1)  &&
 8000f44:	4b44      	ldr	r3, [pc, #272]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	   (pandora.states.firing 					== true )   &&
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10a      	bne.n	8000f64 <functionErrorMosfetCheck+0x38>
	   (pandora.error.system 					== false))
 8000f4e:	4b42      	ldr	r3, [pc, #264]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f50:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000f54:	f083 0301 	eor.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.SCurrent 		< AMPER_1)  &&
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <functionErrorMosfetCheck+0x38>
	{
		pandora.error.solenoidCurrentLow = true; // mosfet hatası. LOOP kontrolü var olduğu için atış durumunda akım çekmiyorsa mosfet arızalıdır.
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	741a      	strb	r2, [r3, #16]
	}

	if((pandora.switches.switches_cocking_handle_order 	== true    )	&&
 8000f64:	4b3c      	ldr	r3, [pc, #240]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d01a      	beq.n	8000fa4 <functionErrorMosfetCheck+0x78>
	   (pandora.gun.cockingHandle.brakeState 			== OFF     )	&&
 8000f6e:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f70:	799b      	ldrb	r3, [r3, #6]
 8000f72:	f083 0301 	eor.w	r3, r3, #1
 8000f76:	b2db      	uxtb	r3, r3
	if((pandora.switches.switches_cocking_handle_order 	== true    )	&&
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d013      	beq.n	8000fa4 <functionErrorMosfetCheck+0x78>
	   (pandora.gun.cockingHandle.motorState 			!= IDLE    )	&&
 8000f7c:	4b36      	ldr	r3, [pc, #216]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f7e:	795b      	ldrb	r3, [r3, #5]
	   (pandora.gun.cockingHandle.brakeState 			== OFF     )	&&
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d00f      	beq.n	8000fa4 <functionErrorMosfetCheck+0x78>
	   (pandora.powerManagement.CHCurrent				<  AMPER_1 ) 	&&
 8000f84:	4b34      	ldr	r3, [pc, #208]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	   (pandora.gun.cockingHandle.motorState 			!= IDLE    )	&&
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d10a      	bne.n	8000fa4 <functionErrorMosfetCheck+0x78>
	   (pandora.error.system 							== false   ))
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000f90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000f94:	f083 0301 	eor.w	r3, r3, #1
 8000f98:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.CHCurrent				<  AMPER_1 ) 	&&
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <functionErrorMosfetCheck+0x78>
	{
		pandora.error.cockingHandleCurrentLow = true; // mosfet hatası. LOOP kontrolü var olduğu için atış durumunda akım çekmiyorsa mosfet arızalıdır.
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	749a      	strb	r2, [r3, #18]
	}

	if((pandora.states.AKBPowerOnOff				 	== true    )	&&
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fa6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d00f      	beq.n	8000fce <functionErrorMosfetCheck+0xa2>
	   (pandora.powerManagement.AKBCurrent				<  AMPER_1 ) 	&&
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fb0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
	if((pandora.states.AKBPowerOnOff				 	== true    )	&&
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10a      	bne.n	8000fce <functionErrorMosfetCheck+0xa2>
	   (pandora.error.system 							== false   ))
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000fbe:	f083 0301 	eor.w	r3, r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.AKBCurrent				<  AMPER_1 ) 	&&
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d002      	beq.n	8000fce <functionErrorMosfetCheck+0xa2>
	{
		pandora.error.akbCurrentLow = true;
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	759a      	strb	r2, [r3, #22]
	}

	if((pandora.states.KKBPowerOnOff				 	== true    )	&&
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fd0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00f      	beq.n	8000ff8 <functionErrorMosfetCheck+0xcc>
	   (pandora.powerManagement.KKUCurrent				<  AMPER_1 ) 	&&
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
	if((pandora.states.KKBPowerOnOff				 	== true    )	&&
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10a      	bne.n	8000ff8 <functionErrorMosfetCheck+0xcc>
	   (pandora.error.system 							== false   ))
 8000fe2:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000fe4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.KKUCurrent				<  AMPER_1 ) 	&&
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d002      	beq.n	8000ff8 <functionErrorMosfetCheck+0xcc>
	{
		pandora.error.kkuCurrentLow = true;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	761a      	strb	r2, [r3, #24]
	}

	if((pandora.states.EOSPowerOnOff				 	== true    )	&&
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8000ffa:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00f      	beq.n	8001022 <functionErrorMosfetCheck+0xf6>
	   (pandora.powerManagement.EOSCurrent				<  AMPER_1 ) 	&&
 8001002:	4b15      	ldr	r3, [pc, #84]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8001004:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if((pandora.states.EOSPowerOnOff				 	== true    )	&&
 8001008:	2b00      	cmp	r3, #0
 800100a:	d10a      	bne.n	8001022 <functionErrorMosfetCheck+0xf6>
	   (pandora.error.system 							== false   ))
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 800100e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001012:	f083 0301 	eor.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.EOSCurrent				<  AMPER_1 ) 	&&
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <functionErrorMosfetCheck+0xf6>
	{
		pandora.error.eosCurrentLow = true;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 800101e:	2201      	movs	r2, #1
 8001020:	769a      	strb	r2, [r3, #26]
	}

	if((pandora.states.HERCULEPowerOnOff				== true    )	&&
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8001024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001028:	2b00      	cmp	r3, #0
 800102a:	d00f      	beq.n	800104c <functionErrorMosfetCheck+0x120>
	   (pandora.powerManagement.HERCULECurrent			<  AMPER_1 ) 	&&
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 800102e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
	if((pandora.states.HERCULEPowerOnOff				== true    )	&&
 8001032:	2b00      	cmp	r3, #0
 8001034:	d10a      	bne.n	800104c <functionErrorMosfetCheck+0x120>
	   (pandora.error.system 							== false   ))
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8001038:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800103c:	f083 0301 	eor.w	r3, r3, #1
 8001040:	b2db      	uxtb	r3, r3
	   (pandora.powerManagement.HERCULECurrent			<  AMPER_1 ) 	&&
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <functionErrorMosfetCheck+0x120>
	{
		pandora.error.herculeCurrentLow = true;
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <functionErrorMosfetCheck+0x12c>)
 8001048:	2201      	movs	r2, #1
 800104a:	751a      	strb	r2, [r3, #20]
	}
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	24000570 	.word	0x24000570

0800105c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001060:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_ETH_Init+0x80>)
 8001062:	4a1f      	ldr	r2, [pc, #124]	; (80010e0 <MX_ETH_Init+0x84>)
 8001064:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_ETH_Init+0x88>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_ETH_Init+0x88>)
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_ETH_Init+0x88>)
 8001074:	22e1      	movs	r2, #225	; 0xe1
 8001076:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <MX_ETH_Init+0x88>)
 800107a:	2200      	movs	r2, #0
 800107c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_ETH_Init+0x88>)
 8001080:	2200      	movs	r2, #0
 8001082:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <MX_ETH_Init+0x88>)
 8001086:	2200      	movs	r2, #0
 8001088:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_ETH_Init+0x80>)
 800108c:	4a15      	ldr	r2, [pc, #84]	; (80010e4 <MX_ETH_Init+0x88>)
 800108e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001090:	4b12      	ldr	r3, [pc, #72]	; (80010dc <MX_ETH_Init+0x80>)
 8001092:	2201      	movs	r2, #1
 8001094:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_ETH_Init+0x80>)
 8001098:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <MX_ETH_Init+0x8c>)
 800109a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_ETH_Init+0x80>)
 800109e:	4a13      	ldr	r2, [pc, #76]	; (80010ec <MX_ETH_Init+0x90>)
 80010a0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_ETH_Init+0x80>)
 80010a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010a8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_ETH_Init+0x80>)
 80010ac:	f005 fcc4 	bl	8006a38 <HAL_ETH_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80010b6:	f000 ff3d 	bl	8001f34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80010ba:	2238      	movs	r2, #56	; 0x38
 80010bc:	2100      	movs	r1, #0
 80010be:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_ETH_Init+0x94>)
 80010c0:	f00c fb8c 	bl	800d7dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80010c4:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <MX_ETH_Init+0x94>)
 80010c6:	2221      	movs	r2, #33	; 0x21
 80010c8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_ETH_Init+0x94>)
 80010cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010d0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <MX_ETH_Init+0x94>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	240003c4 	.word	0x240003c4
 80010e0:	40028000 	.word	0x40028000
 80010e4:	24000474 	.word	0x24000474
 80010e8:	24000074 	.word	0x24000074
 80010ec:	24000014 	.word	0x24000014
 80010f0:	2400038c 	.word	0x2400038c

080010f4 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a49      	ldr	r2, [pc, #292]	; (8001238 <HAL_ETH_MspInit+0x144>)
 8001112:	4293      	cmp	r3, r2
 8001114:	f040 808b 	bne.w	800122e <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001118:	4b48      	ldr	r3, [pc, #288]	; (800123c <HAL_ETH_MspInit+0x148>)
 800111a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800111e:	4a47      	ldr	r2, [pc, #284]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001124:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001128:	4b44      	ldr	r3, [pc, #272]	; (800123c <HAL_ETH_MspInit+0x148>)
 800112a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800112e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001132:	623b      	str	r3, [r7, #32]
 8001134:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001136:	4b41      	ldr	r3, [pc, #260]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001138:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800113c:	4a3f      	ldr	r2, [pc, #252]	; (800123c <HAL_ETH_MspInit+0x148>)
 800113e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001142:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001146:	4b3d      	ldr	r3, [pc, #244]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001148:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	61fb      	str	r3, [r7, #28]
 8001152:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001154:	4b39      	ldr	r3, [pc, #228]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001156:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800115a:	4a38      	ldr	r2, [pc, #224]	; (800123c <HAL_ETH_MspInit+0x148>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001166:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	4b32      	ldr	r3, [pc, #200]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001174:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001178:	4a30      	ldr	r2, [pc, #192]	; (800123c <HAL_ETH_MspInit+0x148>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001182:	4b2e      	ldr	r3, [pc, #184]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001184:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001188:	f003 0304 	and.w	r3, r3, #4
 800118c:	617b      	str	r3, [r7, #20]
 800118e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b2a      	ldr	r3, [pc, #168]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001196:	4a29      	ldr	r2, [pc, #164]	; (800123c <HAL_ETH_MspInit+0x148>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_ETH_MspInit+0x148>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <HAL_ETH_MspInit+0x148>)
 80011b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b4:	4a21      	ldr	r2, [pc, #132]	; (800123c <HAL_ETH_MspInit+0x148>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011be:	4b1f      	ldr	r3, [pc, #124]	; (800123c <HAL_ETH_MspInit+0x148>)
 80011c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80011cc:	2332      	movs	r3, #50	; 0x32
 80011ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011dc:	230b      	movs	r3, #11
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4816      	ldr	r0, [pc, #88]	; (8001240 <HAL_ETH_MspInit+0x14c>)
 80011e8:	f006 fbbe 	bl	8007968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80011ec:	2386      	movs	r3, #134	; 0x86
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011fc:	230b      	movs	r3, #11
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	4619      	mov	r1, r3
 8001206:	480f      	ldr	r0, [pc, #60]	; (8001244 <HAL_ETH_MspInit+0x150>)
 8001208:	f006 fbae 	bl	8007968 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800120c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001212:	2302      	movs	r3, #2
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800121e:	230b      	movs	r3, #11
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001226:	4619      	mov	r1, r3
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <HAL_ETH_MspInit+0x154>)
 800122a:	f006 fb9d 	bl	8007968 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800122e:	bf00      	nop
 8001230:	3738      	adds	r7, #56	; 0x38
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40028000 	.word	0x40028000
 800123c:	58024400 	.word	0x58024400
 8001240:	58020800 	.word	0x58020800
 8001244:	58020000 	.word	0x58020000
 8001248:	58020400 	.word	0x58020400

0800124c <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <MX_FDCAN2_Init+0xc4>)
 8001254:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001256:	4b2d      	ldr	r3, [pc, #180]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800125c:	4b2b      	ldr	r3, [pc, #172]	; (800130c <MX_FDCAN2_Init+0xc0>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001262:	4b2a      	ldr	r3, [pc, #168]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001264:	2200      	movs	r2, #0
 8001266:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <MX_FDCAN2_Init+0xc0>)
 800126a:	2200      	movs	r2, #0
 800126c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800126e:	4b27      	ldr	r3, [pc, #156]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001270:	2200      	movs	r2, #0
 8001272:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001276:	2210      	movs	r2, #16
 8001278:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 800127a:	4b24      	ldr	r3, [pc, #144]	; (800130c <MX_FDCAN2_Init+0xc0>)
 800127c:	2201      	movs	r2, #1
 800127e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8001280:	4b22      	ldr	r3, [pc, #136]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001282:	2202      	movs	r2, #2
 8001284:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001286:	4b21      	ldr	r3, [pc, #132]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001288:	2202      	movs	r2, #2
 800128a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 800128c:	4b1f      	ldr	r3, [pc, #124]	; (800130c <MX_FDCAN2_Init+0xc0>)
 800128e:	2201      	movs	r2, #1
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8001292:	4b1e      	ldr	r3, [pc, #120]	; (800130c <MX_FDCAN2_Init+0xc0>)
 8001294:	2201      	movs	r2, #1
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001298:	4b1c      	ldr	r3, [pc, #112]	; (800130c <MX_FDCAN2_Init+0xc0>)
 800129a:	2201      	movs	r2, #1
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80012a4:	4b19      	ldr	r3, [pc, #100]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012be:	2204      	movs	r2, #4
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80012c8:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80012ce:	4b0f      	ldr	r3, [pc, #60]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80012d4:	4b0d      	ldr	r3, [pc, #52]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012d6:	2204      	movs	r2, #4
 80012d8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80012da:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012dc:	2200      	movs	r2, #0
 80012de:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80012e0:	4b0a      	ldr	r3, [pc, #40]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80012ec:	4b07      	ldr	r3, [pc, #28]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012f4:	2204      	movs	r2, #4
 80012f6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_FDCAN2_Init+0xc0>)
 80012fa:	f005 ffd1 	bl	80072a0 <HAL_FDCAN_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8001304:	f000 fe16 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	2400047c 	.word	0x2400047c
 8001310:	4000a400 	.word	0x4000a400

08001314 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b0ba      	sub	sp, #232	; 0xe8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800132c:	f107 0310 	add.w	r3, r7, #16
 8001330:	22c0      	movs	r2, #192	; 0xc0
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f00c fa51 	bl	800d7dc <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a27      	ldr	r2, [pc, #156]	; (80013dc <HAL_FDCAN_MspInit+0xc8>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d146      	bne.n	80013d2 <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001344:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001350:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001354:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4618      	mov	r0, r3
 800135e:	f007 fe21 	bl	8008fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001368:	f000 fde4 	bl	8001f34 <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800136c:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 800136e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 8001374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001378:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 800137e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001390:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <HAL_FDCAN_MspInit+0xcc>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013a8:	2360      	movs	r3, #96	; 0x60
 80013aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80013c0:	2309      	movs	r3, #9
 80013c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <HAL_FDCAN_MspInit+0xd0>)
 80013ce:	f006 facb 	bl	8007968 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80013d2:	bf00      	nop
 80013d4:	37e8      	adds	r7, #232	; 0xe8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	4000a400 	.word	0x4000a400
 80013e0:	58024400 	.word	0x58024400
 80013e4:	58020400 	.word	0x58020400

080013e8 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013fe:	4b6b      	ldr	r3, [pc, #428]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001400:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001404:	4a69      	ldr	r2, [pc, #420]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001406:	f043 0320 	orr.w	r3, r3, #32
 800140a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800140e:	4b67      	ldr	r3, [pc, #412]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001410:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001414:	f003 0320 	and.w	r3, r3, #32
 8001418:	623b      	str	r3, [r7, #32]
 800141a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141c:	4b63      	ldr	r3, [pc, #396]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800141e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001422:	4a62      	ldr	r2, [pc, #392]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142c:	4b5f      	ldr	r3, [pc, #380]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800142e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	4b5c      	ldr	r3, [pc, #368]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800143c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001440:	4a5a      	ldr	r2, [pc, #360]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001442:	f043 0304 	orr.w	r3, r3, #4
 8001446:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144a:	4b58      	ldr	r3, [pc, #352]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800144c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
 8001456:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001458:	4b54      	ldr	r3, [pc, #336]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800145a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800145e:	4a53      	ldr	r2, [pc, #332]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001468:	4b50      	ldr	r3, [pc, #320]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800146a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001476:	4b4d      	ldr	r3, [pc, #308]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	4a4b      	ldr	r2, [pc, #300]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800147e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001482:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001486:	4b49      	ldr	r3, [pc, #292]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <MX_GPIO_Init+0x1c4>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	4a44      	ldr	r2, [pc, #272]	; (80015ac <MX_GPIO_Init+0x1c4>)
 800149c:	f043 0310 	orr.w	r3, r3, #16
 80014a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a4:	4b41      	ldr	r3, [pc, #260]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b2:	4b3e      	ldr	r3, [pc, #248]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	4a3c      	ldr	r2, [pc, #240]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c2:	4b3a      	ldr	r3, [pc, #232]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d0:	4b36      	ldr	r3, [pc, #216]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	4a35      	ldr	r2, [pc, #212]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <MX_GPIO_Init+0x1c4>)
 80014e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	607b      	str	r3, [r7, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, COCKING_HANDLE_DRV_H_BACKWARD_Pin|COCKING_HANDLE_DRV_H_FORWARD_Pin|COCKING_HANDLE_POWER_Pin|SOLENOID_POWER_Pin
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80014f4:	482e      	ldr	r0, [pc, #184]	; (80015b0 <MX_GPIO_Init+0x1c8>)
 80014f6:	f006 fbe7 	bl	8007cc8 <HAL_GPIO_WritePin>
                          |SOLENOID_DRV_2_Pin|SOLENOID_DRV_1_Pin|SOLENOID_DRV_H_REVERSE_Pin|SOLENOID_DRV_H_FORWARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CASE_LED_GPIO_Port, CASE_LED_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001500:	482c      	ldr	r0, [pc, #176]	; (80015b4 <MX_GPIO_Init+0x1cc>)
 8001502:	f006 fbe1 	bl	8007cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EOS_POWER_Pin|SERVO_POWER_Pin|AKB_POWER_Pin|KKU_POWER_Pin
 8001506:	2200      	movs	r2, #0
 8001508:	f64d 6121 	movw	r1, #56865	; 0xde21
 800150c:	482a      	ldr	r0, [pc, #168]	; (80015b8 <MX_GPIO_Init+0x1d0>)
 800150e:	f006 fbdb 	bl	8007cc8 <HAL_GPIO_WritePin>
                          |BRAKE_DRV_12V_Pin|BRAKE_DRV_28V_Pin|EMERGENCY_STOP_RESET_Pin|SYSTEM_ON_OFFD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = COCKING_HANDLE_DRV_H_BACKWARD_Pin|COCKING_HANDLE_DRV_H_FORWARD_Pin|COCKING_HANDLE_POWER_Pin|SOLENOID_POWER_Pin
 8001512:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
                          |SOLENOID_DRV_2_Pin|SOLENOID_DRV_1_Pin|SOLENOID_DRV_H_REVERSE_Pin|SOLENOID_DRV_H_FORWARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001518:	2301      	movs	r3, #1
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001520:	2300      	movs	r3, #0
 8001522:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	4821      	ldr	r0, [pc, #132]	; (80015b0 <MX_GPIO_Init+0x1c8>)
 800152c:	f006 fa1c 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CASE_LED_Pin;
 8001530:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001536:	2301      	movs	r3, #1
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CASE_LED_GPIO_Port, &GPIO_InitStruct);
 8001542:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001546:	4619      	mov	r1, r3
 8001548:	481a      	ldr	r0, [pc, #104]	; (80015b4 <MX_GPIO_Init+0x1cc>)
 800154a:	f006 fa0d 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = EOS_POWER_Pin|SERVO_POWER_Pin|AKB_POWER_Pin|KKU_POWER_Pin
 800154e:	f64d 6321 	movw	r3, #56865	; 0xde21
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
                          |BRAKE_DRV_12V_Pin|BRAKE_DRV_28V_Pin|EMERGENCY_STOP_RESET_Pin|SYSTEM_ON_OFFD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001554:	2301      	movs	r3, #1
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	4814      	ldr	r0, [pc, #80]	; (80015b8 <MX_GPIO_Init+0x1d0>)
 8001568:	f006 f9fe 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_FEEDBACK_Pin|SYSTEM_ON_OFF_Pin|SWITCHES_FIRE_ORDER_Pin|SWITCHES_SAFETY_Pin
 800156c:	23de      	movs	r3, #222	; 0xde
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SWITCHES_COCKING_HANDLE_ORDER_Pin|SWITCHES_MOVEMENT_ALLOWED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001570:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <MX_GPIO_Init+0x1d0>)
 8001582:	f006 f9f1 	bl	8007968 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = SWITCHES_SMGA_Pin|SWITCHES_SYSTEM_ON_OFF_Pin|SWITCHES_CREW_1_Pin|SWITCHES_CREW_2_Pin
 8001586:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SWITCHES_COCKING_HANDLE_HOME_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800158c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	4804      	ldr	r0, [pc, #16]	; (80015b0 <MX_GPIO_Init+0x1c8>)
 800159e:	f006 f9e3 	bl	8007968 <HAL_GPIO_Init>

}
 80015a2:	bf00      	nop
 80015a4:	3738      	adds	r7, #56	; 0x38
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58021800 	.word	0x58021800
 80015b4:	58021000 	.word	0x58021000
 80015b8:	58020c00 	.word	0x58020c00

080015bc <functionGunControlGetShotInterval>:

// global structer
extern pandoraStructer pandora;

static uint32_t functionGunControlGetShotInterval(uint16_t rpm)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
    return 60000 / rpm;
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80015cc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <functionGunControlInit>:

void functionGunControlInit(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	SOLENOID(SOLENOID_DRV_1,OFF);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2140      	movs	r1, #64	; 0x40
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <functionGunControlInit+0x38>)
 80015e6:	f006 fb6f 	bl	8007cc8 <HAL_GPIO_WritePin>
//	pandora.configurations.solenoidTime 		= pandora.eeprom.solenoidTime;
//	pandora.configurations.solenoidActiveTime  	= pandora.eeprom.solenoidActiveTime;
//	pandora.configurations.solenoidPassiveTime 	= pandora.eeprom.solenoidPassiveTime;
//	pandora.configurations.solenoidFireMode 	= pandora.eeprom.fireMode;

	pandora.states.solenoidActive 		= false;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <functionGunControlInit+0x3c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	pandora.states.triggerHeld 			= false;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <functionGunControlInit+0x3c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	pandora.states.changeTime 			= 0;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <functionGunControlInit+0x3c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
	pandora.states.burstCounter 		= 0;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <functionGunControlInit+0x3c>)
 8001602:	2200      	movs	r2, #0
 8001604:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	pandora.states.ammoCounter			= 0;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <functionGunControlInit+0x3c>)
 800160a:	2200      	movs	r2, #0
 800160c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	58021800 	.word	0x58021800
 8001618:	24000570 	.word	0x24000570

0800161c <functionGunControlTriggerPressed>:

void functionGunControlTriggerPressed(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
    pandora.states.triggerHeld = true;
 8001620:	4b18      	ldr	r3, [pc, #96]	; (8001684 <functionGunControlTriggerPressed+0x68>)
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    pandora.states.burstCounter = 0;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <functionGunControlTriggerPressed+0x68>)
 800162a:	2200      	movs	r2, #0
 800162c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pandora.states.changeTime = HAL_GetTick();
 8001630:	f001 fcf8 	bl	8003024 <HAL_GetTick>
 8001634:	4603      	mov	r3, r0
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <functionGunControlTriggerPressed+0x68>)
 8001638:	6453      	str	r3, [r2, #68]	; 0x44

    if (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_SINGLE)
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <functionGunControlTriggerPressed+0x68>)
 800163c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <functionGunControlTriggerPressed+0x3c>
    {
        SOLENOID(SOLENOID_DRV_1,ON);
 8001644:	2201      	movs	r2, #1
 8001646:	2140      	movs	r1, #64	; 0x40
 8001648:	480f      	ldr	r0, [pc, #60]	; (8001688 <functionGunControlTriggerPressed+0x6c>)
 800164a:	f006 fb3d 	bl	8007cc8 <HAL_GPIO_WritePin>
        pandora.states.solenoidActive = true;
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <functionGunControlTriggerPressed+0x68>)
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    else if (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_3 || pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_5)
    {
        pandora.states.solenoidActive = true;
        SOLENOID(SOLENOID_DRV_1,ON);
    }
}
 8001656:	e012      	b.n	800167e <functionGunControlTriggerPressed+0x62>
    else if (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_3 || pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_5)
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <functionGunControlTriggerPressed+0x68>)
 800165a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800165e:	2b02      	cmp	r3, #2
 8001660:	d004      	beq.n	800166c <functionGunControlTriggerPressed+0x50>
 8001662:	4b08      	ldr	r3, [pc, #32]	; (8001684 <functionGunControlTriggerPressed+0x68>)
 8001664:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001668:	2b03      	cmp	r3, #3
 800166a:	d108      	bne.n	800167e <functionGunControlTriggerPressed+0x62>
        pandora.states.solenoidActive = true;
 800166c:	4b05      	ldr	r3, [pc, #20]	; (8001684 <functionGunControlTriggerPressed+0x68>)
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        SOLENOID(SOLENOID_DRV_1,ON);
 8001674:	2201      	movs	r2, #1
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	4803      	ldr	r0, [pc, #12]	; (8001688 <functionGunControlTriggerPressed+0x6c>)
 800167a:	f006 fb25 	bl	8007cc8 <HAL_GPIO_WritePin>
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	24000570 	.word	0x24000570
 8001688:	58021800 	.word	0x58021800

0800168c <functionGunControlTriggerReleased>:

void functionGunControlTriggerReleased(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
    pandora.states.triggerHeld = false;
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <functionGunControlTriggerReleased+0x2c>)
 8001692:	2200      	movs	r2, #0
 8001694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    pandora.states.solenoidActive = false;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <functionGunControlTriggerReleased+0x2c>)
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    pandora.states.burstCounter = 0;
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <functionGunControlTriggerReleased+0x2c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SOLENOID(SOLENOID_DRV_1,OFF);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2140      	movs	r1, #64	; 0x40
 80016ac:	4803      	ldr	r0, [pc, #12]	; (80016bc <functionGunControlTriggerReleased+0x30>)
 80016ae:	f006 fb0b 	bl	8007cc8 <HAL_GPIO_WritePin>
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	24000570 	.word	0x24000570
 80016bc:	58021800 	.word	0x58021800

080016c0 <functionGunControlProcess>:

void functionGunControlProcess(uint32_t now)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
    if (!pandora.states.triggerHeld && pandora.canMessages.AKB.commandFireMode != FIRE_MODE_SINGLE) return;
 80016c8:	4bab      	ldr	r3, [pc, #684]	; (8001978 <functionGunControlProcess+0x2b8>)
 80016ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80016ce:	f083 0301 	eor.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <functionGunControlProcess+0x24>
 80016d8:	4ba7      	ldr	r3, [pc, #668]	; (8001978 <functionGunControlProcess+0x2b8>)
 80016da:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f040 813c 	bne.w	800195c <functionGunControlProcess+0x29c>

    switch (pandora.canMessages.AKB.commandFireMode)
 80016e4:	4ba4      	ldr	r3, [pc, #656]	; (8001978 <functionGunControlProcess+0x2b8>)
 80016e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80016ea:	2b06      	cmp	r3, #6
 80016ec:	f200 8138 	bhi.w	8001960 <functionGunControlProcess+0x2a0>
 80016f0:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <functionGunControlProcess+0x38>)
 80016f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f6:	bf00      	nop
 80016f8:	08001715 	.word	0x08001715
 80016fc:	08001753 	.word	0x08001753
 8001700:	080017cd 	.word	0x080017cd
 8001704:	080017cd 	.word	0x080017cd
 8001708:	08001831 	.word	0x08001831
 800170c:	080018af 	.word	0x080018af
 8001710:	080018af 	.word	0x080018af
    {
        case FIRE_MODE_SINGLE:
            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidTime)
 8001714:	4b98      	ldr	r3, [pc, #608]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800171a:	2b00      	cmp	r3, #0
 800171c:	f000 8122 	beq.w	8001964 <functionGunControlProcess+0x2a4>
 8001720:	4b95      	ldr	r3, [pc, #596]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	4a93      	ldr	r2, [pc, #588]	; (8001978 <functionGunControlProcess+0x2b8>)
 800172a:	f892 207a 	ldrb.w	r2, [r2, #122]	; 0x7a
 800172e:	4293      	cmp	r3, r2
 8001730:	f0c0 8118 	bcc.w	8001964 <functionGunControlProcess+0x2a4>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001734:	2200      	movs	r2, #0
 8001736:	2140      	movs	r1, #64	; 0x40
 8001738:	4890      	ldr	r0, [pc, #576]	; (800197c <functionGunControlProcess+0x2bc>)
 800173a:	f006 fac5 	bl	8007cc8 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 800173e:	4b8e      	ldr	r3, [pc, #568]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.ammoCounter++;
 8001746:	4b8c      	ldr	r3, [pc, #560]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	3301      	adds	r3, #1
 800174c:	4a8a      	ldr	r2, [pc, #552]	; (8001978 <functionGunControlProcess+0x2b8>)
 800174e:	64d3      	str	r3, [r2, #76]	; 0x4c
            }
            break;
 8001750:	e108      	b.n	8001964 <functionGunControlProcess+0x2a4>

        case FIRE_MODE_FAST_AUTO:
            if (pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidActiveTime)
 8001752:	4b89      	ldr	r3, [pc, #548]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001754:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001758:	2b00      	cmp	r3, #0
 800175a:	d01a      	beq.n	8001792 <functionGunControlProcess+0xd2>
 800175c:	4b86      	ldr	r3, [pc, #536]	; (8001978 <functionGunControlProcess+0x2b8>)
 800175e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	4a84      	ldr	r2, [pc, #528]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001766:	f892 207b 	ldrb.w	r2, [r2, #123]	; 0x7b
 800176a:	4293      	cmp	r3, r2
 800176c:	d311      	bcc.n	8001792 <functionGunControlProcess+0xd2>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 800176e:	2200      	movs	r2, #0
 8001770:	2140      	movs	r1, #64	; 0x40
 8001772:	4882      	ldr	r0, [pc, #520]	; (800197c <functionGunControlProcess+0x2bc>)
 8001774:	f006 faa8 	bl	8007cc8 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001778:	4b7f      	ldr	r3, [pc, #508]	; (8001978 <functionGunControlProcess+0x2b8>)
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.ammoCounter++;
 8001780:	4b7d      	ldr	r3, [pc, #500]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001784:	3301      	adds	r3, #1
 8001786:	4a7c      	ldr	r2, [pc, #496]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
                pandora.states.changeTime = now;
 800178a:	4a7b      	ldr	r2, [pc, #492]	; (8001978 <functionGunControlProcess+0x2b8>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6453      	str	r3, [r2, #68]	; 0x44
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
                pandora.states.solenoidActive = true;
                pandora.states.changeTime = now;
            }
            break;
 8001790:	e0ea      	b.n	8001968 <functionGunControlProcess+0x2a8>
            else if (!pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidPassiveTime)
 8001792:	4b79      	ldr	r3, [pc, #484]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001794:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001798:	2b00      	cmp	r3, #0
 800179a:	f040 80e5 	bne.w	8001968 <functionGunControlProcess+0x2a8>
 800179e:	4b76      	ldr	r3, [pc, #472]	; (8001978 <functionGunControlProcess+0x2b8>)
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	4a74      	ldr	r2, [pc, #464]	; (8001978 <functionGunControlProcess+0x2b8>)
 80017a8:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 80017ac:	4293      	cmp	r3, r2
 80017ae:	f0c0 80db 	bcc.w	8001968 <functionGunControlProcess+0x2a8>
            	SOLENOID(SOLENOID_DRV_1,ON);
 80017b2:	2201      	movs	r2, #1
 80017b4:	2140      	movs	r1, #64	; 0x40
 80017b6:	4871      	ldr	r0, [pc, #452]	; (800197c <functionGunControlProcess+0x2bc>)
 80017b8:	f006 fa86 	bl	8007cc8 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 80017bc:	4b6e      	ldr	r3, [pc, #440]	; (8001978 <functionGunControlProcess+0x2b8>)
 80017be:	2201      	movs	r2, #1
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.changeTime = now;
 80017c4:	4a6c      	ldr	r2, [pc, #432]	; (8001978 <functionGunControlProcess+0x2b8>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80017ca:	e0cd      	b.n	8001968 <functionGunControlProcess+0x2a8>

        case FIRE_MODE_FAST_BURST_3:
        case FIRE_MODE_FAST_BURST_5:
        {
            uint8_t target = (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_FAST_BURST_3) ? 3 : 5;
 80017cc:	4b6a      	ldr	r3, [pc, #424]	; (8001978 <functionGunControlProcess+0x2b8>)
 80017ce:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d101      	bne.n	80017da <functionGunControlProcess+0x11a>
 80017d6:	2303      	movs	r3, #3
 80017d8:	e000      	b.n	80017dc <functionGunControlProcess+0x11c>
 80017da:	2305      	movs	r3, #5
 80017dc:	73bb      	strb	r3, [r7, #14]
            uint32_t burst_duration = functionGunControlGetShotInterval(pandora.canMessages.AKB.solenoidFastRpm) * target;
 80017de:	4b66      	ldr	r3, [pc, #408]	; (8001978 <functionGunControlProcess+0x2b8>)
 80017e0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fee9 	bl	80015bc <functionGunControlGetShotInterval>
 80017ea:	4602      	mov	r2, r0
 80017ec:	7bbb      	ldrb	r3, [r7, #14]
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	60bb      	str	r3, [r7, #8]

            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= burst_duration)
 80017f4:	4b60      	ldr	r3, [pc, #384]	; (8001978 <functionGunControlProcess+0x2b8>)
 80017f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 80b6 	beq.w	800196c <functionGunControlProcess+0x2ac>
 8001800:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	429a      	cmp	r2, r3
 800180c:	f200 80ae 	bhi.w	800196c <functionGunControlProcess+0x2ac>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001810:	2200      	movs	r2, #0
 8001812:	2140      	movs	r1, #64	; 0x40
 8001814:	4859      	ldr	r0, [pc, #356]	; (800197c <functionGunControlProcess+0x2bc>)
 8001816:	f006 fa57 	bl	8007cc8 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 800181a:	4b57      	ldr	r3, [pc, #348]	; (8001978 <functionGunControlProcess+0x2b8>)
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.ammoCounter += target;
 8001822:	4b55      	ldr	r3, [pc, #340]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	4413      	add	r3, r2
 800182a:	4a53      	ldr	r2, [pc, #332]	; (8001978 <functionGunControlProcess+0x2b8>)
 800182c:	64d3      	str	r3, [r2, #76]	; 0x4c
            }
            break;
 800182e:	e09d      	b.n	800196c <functionGunControlProcess+0x2ac>
        }

        case FIRE_MODE_SLOW_AUTO:
            if (!pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= functionGunControlGetShotInterval(pandora.canMessages.AKB.solenoidSlowRpm))
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001832:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001836:	2b00      	cmp	r3, #0
 8001838:	d119      	bne.n	800186e <functionGunControlProcess+0x1ae>
 800183a:	4b4f      	ldr	r3, [pc, #316]	; (8001978 <functionGunControlProcess+0x2b8>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	1ad4      	subs	r4, r2, r3
 8001842:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001844:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff feb7 	bl	80015bc <functionGunControlGetShotInterval>
 800184e:	4603      	mov	r3, r0
 8001850:	429c      	cmp	r4, r3
 8001852:	d30c      	bcc.n	800186e <functionGunControlProcess+0x1ae>
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
 8001854:	2201      	movs	r2, #1
 8001856:	2140      	movs	r1, #64	; 0x40
 8001858:	4848      	ldr	r0, [pc, #288]	; (800197c <functionGunControlProcess+0x2bc>)
 800185a:	f006 fa35 	bl	8007cc8 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 800185e:	4b46      	ldr	r3, [pc, #280]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001860:	2201      	movs	r2, #1
 8001862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.changeTime = now;
 8001866:	4a44      	ldr	r2, [pc, #272]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6453      	str	r3, [r2, #68]	; 0x44
            	SOLENOID(SOLENOID_DRV_1,OFF);
                pandora.states.solenoidActive = false;
                pandora.states.ammoCounter++;
                pandora.states.changeTime = now;
            }
            break;
 800186c:	e080      	b.n	8001970 <functionGunControlProcess+0x2b0>
            else if (pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidTime)
 800186e:	4b42      	ldr	r3, [pc, #264]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001870:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001874:	2b00      	cmp	r3, #0
 8001876:	d07b      	beq.n	8001970 <functionGunControlProcess+0x2b0>
 8001878:	4b3f      	ldr	r3, [pc, #252]	; (8001978 <functionGunControlProcess+0x2b8>)
 800187a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	4a3d      	ldr	r2, [pc, #244]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001882:	f892 207a 	ldrb.w	r2, [r2, #122]	; 0x7a
 8001886:	4293      	cmp	r3, r2
 8001888:	d372      	bcc.n	8001970 <functionGunControlProcess+0x2b0>
            	SOLENOID(SOLENOID_DRV_1,OFF);
 800188a:	2200      	movs	r2, #0
 800188c:	2140      	movs	r1, #64	; 0x40
 800188e:	483b      	ldr	r0, [pc, #236]	; (800197c <functionGunControlProcess+0x2bc>)
 8001890:	f006 fa1a 	bl	8007cc8 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001894:	4b38      	ldr	r3, [pc, #224]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001896:	2200      	movs	r2, #0
 8001898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.ammoCounter++;
 800189c:	4b36      	ldr	r3, [pc, #216]	; (8001978 <functionGunControlProcess+0x2b8>)
 800189e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a0:	3301      	adds	r3, #1
 80018a2:	4a35      	ldr	r2, [pc, #212]	; (8001978 <functionGunControlProcess+0x2b8>)
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
                pandora.states.changeTime = now;
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <functionGunControlProcess+0x2b8>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 80018ac:	e060      	b.n	8001970 <functionGunControlProcess+0x2b0>

        case FIRE_MODE_SLOW_BURST_3:
        case FIRE_MODE_SLOW_BURST_5:
        {
            uint8_t target = (pandora.canMessages.AKB.commandFireMode == FIRE_MODE_SLOW_BURST_3) ? 3 : 5;
 80018ae:	4b32      	ldr	r3, [pc, #200]	; (8001978 <functionGunControlProcess+0x2b8>)
 80018b0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80018b4:	2b05      	cmp	r3, #5
 80018b6:	d101      	bne.n	80018bc <functionGunControlProcess+0x1fc>
 80018b8:	2303      	movs	r3, #3
 80018ba:	e000      	b.n	80018be <functionGunControlProcess+0x1fe>
 80018bc:	2305      	movs	r3, #5
 80018be:	73fb      	strb	r3, [r7, #15]
            if (pandora.states.burstCounter >= target) break;
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <functionGunControlProcess+0x2b8>)
 80018c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d252      	bcs.n	8001974 <functionGunControlProcess+0x2b4>

            if (!pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= functionGunControlGetShotInterval(pandora.canMessages.AKB.solenoidSlowRpm))
 80018ce:	4b2a      	ldr	r3, [pc, #168]	; (8001978 <functionGunControlProcess+0x2b8>)
 80018d0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d119      	bne.n	800190c <functionGunControlProcess+0x24c>
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <functionGunControlProcess+0x2b8>)
 80018da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	1ad4      	subs	r4, r2, r3
 80018e0:	4b25      	ldr	r3, [pc, #148]	; (8001978 <functionGunControlProcess+0x2b8>)
 80018e2:	f8b3 3078 	ldrh.w	r3, [r3, #120]	; 0x78
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fe68 	bl	80015bc <functionGunControlGetShotInterval>
 80018ec:	4603      	mov	r3, r0
 80018ee:	429c      	cmp	r4, r3
 80018f0:	d30c      	bcc.n	800190c <functionGunControlProcess+0x24c>
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
 80018f2:	2201      	movs	r2, #1
 80018f4:	2140      	movs	r1, #64	; 0x40
 80018f6:	4821      	ldr	r0, [pc, #132]	; (800197c <functionGunControlProcess+0x2bc>)
 80018f8:	f006 f9e6 	bl	8007cc8 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <functionGunControlProcess+0x2b8>)
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.changeTime = now;
 8001904:	4a1c      	ldr	r2, [pc, #112]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6453      	str	r3, [r2, #68]	; 0x44
                pandora.states.solenoidActive = false;
                pandora.states.ammoCounter++;
                pandora.states.burstCounter++;
                pandora.states.changeTime = now;
            }
            break;
 800190a:	e039      	b.n	8001980 <functionGunControlProcess+0x2c0>
            else if (pandora.canMessages.AKB.solenoidActiveTime && now - pandora.states.changeTime >= pandora.canMessages.AKB.solenoidTime)
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <functionGunControlProcess+0x2b8>)
 800190e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001912:	2b00      	cmp	r3, #0
 8001914:	d034      	beq.n	8001980 <functionGunControlProcess+0x2c0>
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	4a16      	ldr	r2, [pc, #88]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001920:	f892 207a 	ldrb.w	r2, [r2, #122]	; 0x7a
 8001924:	4293      	cmp	r3, r2
 8001926:	d32b      	bcc.n	8001980 <functionGunControlProcess+0x2c0>
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001928:	2200      	movs	r2, #0
 800192a:	2140      	movs	r1, #64	; 0x40
 800192c:	4813      	ldr	r0, [pc, #76]	; (800197c <functionGunControlProcess+0x2bc>)
 800192e:	f006 f9cb 	bl	8007cc8 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
                pandora.states.ammoCounter++;
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <functionGunControlProcess+0x2b8>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	3301      	adds	r3, #1
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001942:	64d3      	str	r3, [r2, #76]	; 0x4c
                pandora.states.burstCounter++;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001946:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800194a:	3301      	adds	r3, #1
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001950:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                pandora.states.changeTime = now;
 8001954:	4a08      	ldr	r2, [pc, #32]	; (8001978 <functionGunControlProcess+0x2b8>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6453      	str	r3, [r2, #68]	; 0x44
            break;
 800195a:	e011      	b.n	8001980 <functionGunControlProcess+0x2c0>
    if (!pandora.states.triggerHeld && pandora.canMessages.AKB.commandFireMode != FIRE_MODE_SINGLE) return;
 800195c:	bf00      	nop
 800195e:	e010      	b.n	8001982 <functionGunControlProcess+0x2c2>
        }

        default:
            break;
 8001960:	bf00      	nop
 8001962:	e00e      	b.n	8001982 <functionGunControlProcess+0x2c2>
            break;
 8001964:	bf00      	nop
 8001966:	e00c      	b.n	8001982 <functionGunControlProcess+0x2c2>
            break;
 8001968:	bf00      	nop
 800196a:	e00a      	b.n	8001982 <functionGunControlProcess+0x2c2>
            break;
 800196c:	bf00      	nop
 800196e:	e008      	b.n	8001982 <functionGunControlProcess+0x2c2>
            break;
 8001970:	bf00      	nop
 8001972:	e006      	b.n	8001982 <functionGunControlProcess+0x2c2>
            if (pandora.states.burstCounter >= target) break;
 8001974:	bf00      	nop
 8001976:	e004      	b.n	8001982 <functionGunControlProcess+0x2c2>
 8001978:	24000570 	.word	0x24000570
 800197c:	58021800 	.word	0x58021800
            break;
 8001980:	bf00      	nop
    }
}
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bd90      	pop	{r4, r7, pc}

08001988 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <MX_I2C1_Init+0x74>)
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <MX_I2C1_Init+0x78>)
 8001990:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001992:	4b1a      	ldr	r3, [pc, #104]	; (80019fc <MX_I2C1_Init+0x74>)
 8001994:	4a1b      	ldr	r2, [pc, #108]	; (8001a04 <MX_I2C1_Init+0x7c>)
 8001996:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <MX_I2C1_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800199e:	4b17      	ldr	r3, [pc, #92]	; (80019fc <MX_I2C1_Init+0x74>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019a4:	4b15      	ldr	r3, [pc, #84]	; (80019fc <MX_I2C1_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <MX_I2C1_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <MX_I2C1_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019b6:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_I2C1_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <MX_I2C1_Init+0x74>)
 80019be:	2200      	movs	r2, #0
 80019c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019c2:	480e      	ldr	r0, [pc, #56]	; (80019fc <MX_I2C1_Init+0x74>)
 80019c4:	f006 f99a 	bl	8007cfc <HAL_I2C_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019ce:	f000 fab1 	bl	8001f34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019d2:	2100      	movs	r1, #0
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <MX_I2C1_Init+0x74>)
 80019d6:	f006 fa2d 	bl	8007e34 <HAL_I2CEx_ConfigAnalogFilter>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019e0:	f000 faa8 	bl	8001f34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019e4:	2100      	movs	r1, #0
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_I2C1_Init+0x74>)
 80019e8:	f006 fa6f 	bl	8007eca <HAL_I2CEx_ConfigDigitalFilter>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019f2:	f000 fa9f 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2400051c 	.word	0x2400051c
 8001a00:	40005400 	.word	0x40005400
 8001a04:	307075b1 	.word	0x307075b1

08001a08 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b0ba      	sub	sp, #232	; 0xe8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	22c0      	movs	r2, #192	; 0xc0
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f00b fed7 	bl	800d7dc <memset>
  if(i2cHandle->Instance==I2C1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <HAL_I2C_MspInit+0xc8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d146      	bne.n	8001ac6 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001a38:	f04f 0208 	mov.w	r2, #8
 8001a3c:	f04f 0300 	mov.w	r3, #0
 8001a40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f007 faa8 	bl	8008fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001a5a:	f000 fa6b 	bl	8001f34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_I2C_MspInit+0xcc>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <HAL_I2C_MspInit+0xcc>)
 8001a66:	f043 0302 	orr.w	r3, r3, #2
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_I2C_MspInit+0xcc>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = RTC_I2C_SDA_Pin|RTC_I2C_SCL_Pin;
 8001a7c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a84:	2312      	movs	r3, #18
 8001a86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a96:	2304      	movs	r3, #4
 8001a98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <HAL_I2C_MspInit+0xd0>)
 8001aa4:	f005 ff60 	bl	8007968 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_I2C_MspInit+0xcc>)
 8001aaa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aae:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_I2C_MspInit+0xcc>)
 8001ab0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ab4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <HAL_I2C_MspInit+0xcc>)
 8001aba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	37e8      	adds	r7, #232	; 0xe8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40005400 	.word	0x40005400
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	58020400 	.word	0x58020400

08001adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ae0:	f001 fa1a 	bl	8002f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ae4:	f000 f948 	bl	8001d78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ae8:	f000 f9f4 	bl	8001ed4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aec:	f7ff fc7c 	bl	80013e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001af0:	f7ff f990 	bl	8000e14 <MX_DMA_Init>
  MX_BDMA_Init();
 8001af4:	f7ff f80c 	bl	8000b10 <MX_BDMA_Init>
  MX_TIM1_Init();
 8001af8:	f000 fc28 	bl	800234c <MX_TIM1_Init>
  MX_ADC2_Init();
 8001afc:	f7fe fde2 	bl	80006c4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001b00:	f7fe fe46 	bl	8000790 <MX_ADC3_Init>
  MX_ETH_Init();
 8001b04:	f7ff faaa 	bl	800105c <MX_ETH_Init>
  MX_FDCAN2_Init();
 8001b08:	f7ff fba0 	bl	800124c <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001b0c:	f7ff ff3c 	bl	8001988 <MX_I2C1_Init>
  MX_UART4_Init();
 8001b10:	f000 ffec 	bl	8002aec <MX_UART4_Init>
  MX_UART7_Init();
 8001b14:	f001 f836 	bl	8002b84 <MX_UART7_Init>
  MX_ADC1_Init();
 8001b18:	f7fe fd5c 	bl	80005d4 <MX_ADC1_Init>
  MX_UART8_Init();
 8001b1c:	f001 f87e 	bl	8002c1c <MX_UART8_Init>
  MX_TIM3_Init();
 8001b20:	f000 fcbc 	bl	800249c <MX_TIM3_Init>
  MX_TIM2_Init();
 8001b24:	f000 fc6c 	bl	8002400 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b28:	f000 fd0e 	bl	8002548 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001b2c:	4887      	ldr	r0, [pc, #540]	; (8001d4c <main+0x270>)
 8001b2e:	f009 ff8f 	bl	800ba50 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001b32:	4887      	ldr	r0, [pc, #540]	; (8001d50 <main+0x274>)
 8001b34:	f009 ff8c 	bl	800ba50 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, pandora.analogDigitalConverter.hadc1Buffer, 1);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4986      	ldr	r1, [pc, #536]	; (8001d54 <main+0x278>)
 8001b3c:	4886      	ldr	r0, [pc, #536]	; (8001d58 <main+0x27c>)
 8001b3e:	f001 fe27 	bl	8003790 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, pandora.analogDigitalConverter.hadc2Buffer, 1);
 8001b42:	2201      	movs	r2, #1
 8001b44:	4985      	ldr	r1, [pc, #532]	; (8001d5c <main+0x280>)
 8001b46:	4886      	ldr	r0, [pc, #536]	; (8001d60 <main+0x284>)
 8001b48:	f001 fe22 	bl	8003790 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, pandora.analogDigitalConverter.hadc3Buffer, 1);
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4985      	ldr	r1, [pc, #532]	; (8001d64 <main+0x288>)
 8001b50:	4885      	ldr	r0, [pc, #532]	; (8001d68 <main+0x28c>)
 8001b52:	f001 fe1d 	bl	8003790 <HAL_ADC_Start_DMA>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b56:	213c      	movs	r1, #60	; 0x3c
 8001b58:	4884      	ldr	r0, [pc, #528]	; (8001d6c <main+0x290>)
 8001b5a:	f00a f897 	bl	800bc8c <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim3,0);
 8001b5e:	4b83      	ldr	r3, [pc, #524]	; (8001d6c <main+0x290>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
//  pandora.error.isPluggedAKB 	 = (pandora.powerManagement.actualAKBOK 	|| pandora.configurations.overrideAKBOK); // takılı olmadan da çalışabilmesi için override'a bak
//  pandora.error.isPluggedEOS	 = (pandora.powerManagement.actualEOSOK 	|| pandora.configurations.overrideEOSOK);
//  pandora.error.isPluggedHERCULE = (pandora.powerManagement.actualHERCULEOK || pandora.configurations.overrideHERCULEOK);
//  pandora.error.isPluggedKKU	 = (pandora.powerManagement.actualKKUOK	    || pandora.configurations.overrideKKUOK);

  pandora.error.system 			 =!(pandora.error.AKBOK &&
 8001b66:	4b82      	ldr	r3, [pc, #520]	; (8001d70 <main+0x294>)
 8001b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001b6c:	f083 0301 	eor.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d11f      	bne.n	8001bb6 <main+0xda>
										pandora.error.EOSOK &&
 8001b76:	4b7e      	ldr	r3, [pc, #504]	; (8001d70 <main+0x294>)
 8001b78:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
  pandora.error.system 			 =!(pandora.error.AKBOK &&
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d117      	bne.n	8001bb6 <main+0xda>
											pandora.error.GDBOK &&
 8001b86:	4b7a      	ldr	r3, [pc, #488]	; (8001d70 <main+0x294>)
 8001b88:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
										pandora.error.EOSOK &&
 8001b8c:	f083 0301 	eor.w	r3, r3, #1
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10f      	bne.n	8001bb6 <main+0xda>
												pandora.error.HERCULEOK &&
 8001b96:	4b76      	ldr	r3, [pc, #472]	; (8001d70 <main+0x294>)
 8001b98:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
											pandora.error.GDBOK &&
 8001b9c:	f083 0301 	eor.w	r3, r3, #1
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d107      	bne.n	8001bb6 <main+0xda>
													pandora.error.KKUOK);
 8001ba6:	4b72      	ldr	r3, [pc, #456]	; (8001d70 <main+0x294>)
 8001ba8:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
												pandora.error.HERCULEOK &&
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
  pandora.error.system 			 =!(pandora.error.AKBOK &&
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <main+0xde>
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e000      	b.n	8001bbc <main+0xe0>
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <main+0x294>)
 8001bc4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /*
   * 	SWITCHES CHECK
   */

  pandora.states.firePermission = !pandora.switches.switches_smga;
 8001bc8:	4b69      	ldr	r3, [pc, #420]	; (8001d70 <main+0x294>)
 8001bca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	f083 0301 	eor.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	b2da      	uxtb	r2, r3
 8001be4:	4b62      	ldr	r3, [pc, #392]	; (8001d70 <main+0x294>)
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /*
   * 	SYSTEM CHECK
   */
  /////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  functionGunControlInit();
 8001bea:	f7ff fcf7 	bl	80015dc <functionGunControlInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startTimeScanFlags();
 8001bee:	f000 feaf 	bl	8002950 <startTimeScanFlags>

	  if(_100msFlag)
 8001bf2:	4b60      	ldr	r3, [pc, #384]	; (8001d74 <main+0x298>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d007      	beq.n	8001c0a <main+0x12e>
	  {
		  //huzeyfepiroglu
		  functionMeasureVoltage();
 8001bfa:	f000 f9a1 	bl	8001f40 <functionMeasureVoltage>
		  functionMeasureCurrent();
 8001bfe:	f000 f9d3 	bl	8001fa8 <functionMeasureCurrent>

		  functionErrorCurrentVoltageCheck();
 8001c02:	f7ff f92f 	bl	8000e64 <functionErrorCurrentVoltageCheck>
		  functionErrorMosfetCheck();
 8001c06:	f7ff f991 	bl	8000f2c <functionErrorMosfetCheck>
	  }

	  if(!pandora.error.system 						&&
 8001c0a:	4b59      	ldr	r3, [pc, #356]	; (8001d70 <main+0x294>)
 8001c0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001c10:	f083 0301 	eor.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d039      	beq.n	8001c8e <main+0x1b2>
		 pandora.gun.cockingHandle.armed 			&&
 8001c1a:	4b55      	ldr	r3, [pc, #340]	; (8001d70 <main+0x294>)
 8001c1c:	79db      	ldrb	r3, [r3, #7]
	  if(!pandora.error.system 						&&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d035      	beq.n	8001c8e <main+0x1b2>
	  	 pandora.switches.switches_movement_allowed &&
 8001c22:	4b53      	ldr	r3, [pc, #332]	; (8001d70 <main+0x294>)
 8001c24:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
		 pandora.gun.cockingHandle.armed 			&&
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d030      	beq.n	8001c8e <main+0x1b2>
		 pandora.switches.switches_safety 			&&
 8001c2c:	4b50      	ldr	r3, [pc, #320]	; (8001d70 <main+0x294>)
 8001c2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
	  	 pandora.switches.switches_movement_allowed &&
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d02b      	beq.n	8001c8e <main+0x1b2>
		 (!pandora.switches.switches_smga || pandora.canMessages.AKB.commandSmgaOveride) &&
 8001c36:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <main+0x294>)
 8001c38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001c3c:	f083 0301 	eor.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
		 pandora.switches.switches_safety 			&&
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d104      	bne.n	8001c50 <main+0x174>
		 (!pandora.switches.switches_smga || pandora.canMessages.AKB.commandSmgaOveride) &&
 8001c46:	4b4a      	ldr	r3, [pc, #296]	; (8001d70 <main+0x294>)
 8001c48:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d01e      	beq.n	8001c8e <main+0x1b2>
		 pandora.switches.switches_fire_order 		&&
 8001c50:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <main+0x294>)
 8001c52:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
		 (!pandora.switches.switches_smga || pandora.canMessages.AKB.commandSmgaOveride) &&
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d019      	beq.n	8001c8e <main+0x1b2>
		 !pandora.canMessages.AKB.commandEmergencyStop 				&&
 8001c5a:	4b45      	ldr	r3, [pc, #276]	; (8001d70 <main+0x294>)
 8001c5c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8001c60:	f083 0301 	eor.w	r3, r3, #1
 8001c64:	b2db      	uxtb	r3, r3
		 pandora.switches.switches_fire_order 		&&
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d011      	beq.n	8001c8e <main+0x1b2>
		 (!pandora.canMessages.AKB.commandFireBlockedArea || pandora.canMessages.AKB.commandFireBlockedAreaOveride))
 8001c6a:	4b41      	ldr	r3, [pc, #260]	; (8001d70 <main+0x294>)
 8001c6c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001c70:	f083 0301 	eor.w	r3, r3, #1
 8001c74:	b2db      	uxtb	r3, r3
		 !pandora.canMessages.AKB.commandEmergencyStop 				&&
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d104      	bne.n	8001c84 <main+0x1a8>
		 (!pandora.canMessages.AKB.commandFireBlockedArea || pandora.canMessages.AKB.commandFireBlockedAreaOveride))
 8001c7a:	4b3d      	ldr	r3, [pc, #244]	; (8001d70 <main+0x294>)
 8001c7c:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d004      	beq.n	8001c8e <main+0x1b2>
	  {
		  pandora.states.firePermission = true;
 8001c84:	4b3a      	ldr	r3, [pc, #232]	; (8001d70 <main+0x294>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c8c:	e003      	b.n	8001c96 <main+0x1ba>
	  }
	  else
	  {
		  pandora.states.firePermission = false;
 8001c8e:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <main+0x294>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	  }

	  /* COCKING HANDLE LOOP BEGIN */
	  if(pandora.gun.cockingHandle.motorState != IDLE)
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <main+0x294>)
 8001c98:	795b      	ldrb	r3, [r3, #5]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d002      	beq.n	8001ca4 <main+0x1c8>
	  {
		  functionEncoderRead(&htim3);
 8001c9e:	4833      	ldr	r0, [pc, #204]	; (8001d6c <main+0x290>)
 8001ca0:	f7ff f87a 	bl	8000d98 <functionEncoderRead>
	  }

	  if(pandora.switches.switches_cocking_handle_order && pandora.switches.switches_safety && !pandora.gun.cockingHandle.armed)
 8001ca4:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <main+0x294>)
 8001ca6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00e      	beq.n	8001ccc <main+0x1f0>
 8001cae:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <main+0x294>)
 8001cb0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <main+0x1f0>
 8001cb8:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <main+0x294>)
 8001cba:	79db      	ldrb	r3, [r3, #7]
 8001cbc:	f083 0301 	eor.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <main+0x1f0>
	  {
		  functionCockingHandleGoArm();
 8001cc6:	f7fe fff7 	bl	8000cb8 <functionCockingHandleGoArm>
 8001cca:	e010      	b.n	8001cee <main+0x212>
	  }

	  else if (!pandora.switches.switches_safety && !pandora.gun.cockingHandle.safe)
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <main+0x294>)
 8001cce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <main+0x212>
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <main+0x294>)
 8001cde:	7a1b      	ldrb	r3, [r3, #8]
 8001ce0:	f083 0301 	eor.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <main+0x212>
	  {
		  functionCockingHandleGoSafe();
 8001cea:	f7fe ffa3 	bl	8000c34 <functionCockingHandleGoSafe>
	  }
	  /* COCKING HANDLE LOOP END */

	  /* SOLENOID LOOP BEGIN */
	  functionGunControlProcess(HAL_GetTick());
 8001cee:	f001 f999 	bl	8003024 <HAL_GetTick>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff fce3 	bl	80016c0 <functionGunControlProcess>

	  if((pandora.switches.switches_fire_order ||  pandora.canMessages.AKB.commandGunFireOveride)		&&   // ama bence tehlikeli
 8001cfa:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <main+0x294>)
 8001cfc:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d104      	bne.n	8001d0e <main+0x232>
 8001d04:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <main+0x294>)
 8001d06:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d019      	beq.n	8001d42 <main+0x266>
		 pandora.switches.switches_safety 			&&
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <main+0x294>)
 8001d10:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
	  if((pandora.switches.switches_fire_order ||  pandora.canMessages.AKB.commandGunFireOveride)		&&   // ama bence tehlikeli
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d014      	beq.n	8001d42 <main+0x266>
		 pandora.switches.switches_movement_allowed &&
 8001d18:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <main+0x294>)
 8001d1a:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
		 pandora.switches.switches_safety 			&&
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00f      	beq.n	8001d42 <main+0x266>
		(!pandora.switches.switches_smga || pandora.states.overrideSmga)) // atış emniyet anahtarı ve hareket anahtarı
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <main+0x294>)
 8001d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001d28:	f083 0301 	eor.w	r3, r3, #1
 8001d2c:	b2db      	uxtb	r3, r3
		 pandora.switches.switches_movement_allowed &&
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d104      	bne.n	8001d3c <main+0x260>
		(!pandora.switches.switches_smga || pandora.states.overrideSmga)) // atış emniyet anahtarı ve hareket anahtarı
 8001d32:	4b0f      	ldr	r3, [pc, #60]	; (8001d70 <main+0x294>)
 8001d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <main+0x266>
	  {
		  functionGunControlTriggerPressed();
 8001d3c:	f7ff fc6e 	bl	800161c <functionGunControlTriggerPressed>
 8001d40:	e001      	b.n	8001d46 <main+0x26a>
	  }
	  else
	  {
		  functionGunControlTriggerReleased();
 8001d42:	f7ff fca3 	bl	800168c <functionGunControlTriggerReleased>
	  }
	  /* SOLENOID LOOP END */

	  clearTimeScanFlags();
 8001d46:	f000 fe97 	bl	8002a78 <clearTimeScanFlags>
	  startTimeScanFlags();
 8001d4a:	e750      	b.n	8001bee <main+0x112>
 8001d4c:	24000698 	.word	0x24000698
 8001d50:	24000730 	.word	0x24000730
 8001d54:	2400062c 	.word	0x2400062c
 8001d58:	240000f0 	.word	0x240000f0
 8001d5c:	24000634 	.word	0x24000634
 8001d60:	24000154 	.word	0x24000154
 8001d64:	2400063c 	.word	0x2400063c
 8001d68:	240001b8 	.word	0x240001b8
 8001d6c:	240006e4 	.word	0x240006e4
 8001d70:	24000570 	.word	0x24000570
 8001d74:	24000799 	.word	0x24000799

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b09e      	sub	sp, #120	; 0x78
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d82:	224c      	movs	r2, #76	; 0x4c
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f00b fd28 	bl	800d7dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2220      	movs	r2, #32
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f00b fd21 	bl	800d7dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	f006 f8e2 	bl	8007f64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]
 8001da4:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <SystemClock_Config+0x150>)
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	4a47      	ldr	r2, [pc, #284]	; (8001ec8 <SystemClock_Config+0x150>)
 8001daa:	f023 0301 	bic.w	r3, r3, #1
 8001dae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001db0:	4b45      	ldr	r3, [pc, #276]	; (8001ec8 <SystemClock_Config+0x150>)
 8001db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	4b44      	ldr	r3, [pc, #272]	; (8001ecc <SystemClock_Config+0x154>)
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	4a43      	ldr	r2, [pc, #268]	; (8001ecc <SystemClock_Config+0x154>)
 8001dc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dc4:	6193      	str	r3, [r2, #24]
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <SystemClock_Config+0x154>)
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dce:	60bb      	str	r3, [r7, #8]
 8001dd0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001dd2:	bf00      	nop
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ecc <SystemClock_Config+0x154>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de0:	d1f8      	bne.n	8001dd4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001de2:	4b3b      	ldr	r3, [pc, #236]	; (8001ed0 <SystemClock_Config+0x158>)
 8001de4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001de8:	4a39      	ldr	r2, [pc, #228]	; (8001ed0 <SystemClock_Config+0x158>)
 8001dea:	f043 0302 	orr.w	r3, r3, #2
 8001dee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001df2:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <SystemClock_Config+0x158>)
 8001df4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001e00:	2300      	movs	r3, #0
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	4b31      	ldr	r3, [pc, #196]	; (8001ecc <SystemClock_Config+0x154>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <SystemClock_Config+0x154>)
 8001e0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b2e      	ldr	r3, [pc, #184]	; (8001ecc <SystemClock_Config+0x154>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <SystemClock_Config+0x150>)
 8001e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e1e:	4a2a      	ldr	r2, [pc, #168]	; (8001ec8 <SystemClock_Config+0x150>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001e26:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <SystemClock_Config+0x150>)
 8001e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2a:	f003 0301 	and.w	r3, r3, #1
 8001e2e:	603b      	str	r3, [r7, #0]
 8001e30:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001e32:	bf00      	nop
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <SystemClock_Config+0x154>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e40:	d1f8      	bne.n	8001e34 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e42:	2301      	movs	r3, #1
 8001e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e50:	2302      	movs	r3, #2
 8001e52:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001e54:	2302      	movs	r3, #2
 8001e56:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001e58:	2350      	movs	r3, #80	; 0x50
 8001e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001e60:	2308      	movs	r3, #8
 8001e62:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e64:	2302      	movs	r3, #2
 8001e66:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e68:	230c      	movs	r3, #12
 8001e6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f006 f8ad 	bl	8007fd8 <HAL_RCC_OscConfig>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001e84:	f000 f856 	bl	8001f34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e88:	233f      	movs	r3, #63	; 0x3f
 8001e8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e94:	2308      	movs	r3, #8
 8001e96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e98:	2340      	movs	r3, #64	; 0x40
 8001e9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e9c:	2340      	movs	r3, #64	; 0x40
 8001e9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ea0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ea6:	2340      	movs	r3, #64	; 0x40
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001eaa:	f107 030c 	add.w	r3, r7, #12
 8001eae:	2104      	movs	r1, #4
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f006 fceb 	bl	800888c <HAL_RCC_ClockConfig>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001ebc:	f000 f83a 	bl	8001f34 <Error_Handler>
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	3778      	adds	r7, #120	; 0x78
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	58000400 	.word	0x58000400
 8001ecc:	58024800 	.word	0x58024800
 8001ed0:	58024400 	.word	0x58024400

08001ed4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b0b0      	sub	sp, #192	; 0xc0
 8001ed8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eda:	463b      	mov	r3, r7
 8001edc:	22c0      	movs	r2, #192	; 0xc0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00b fc7b 	bl	800d7dc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ee6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001ef6:	230c      	movs	r3, #12
 8001ef8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001efa:	2302      	movs	r3, #2
 8001efc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001efe:	2302      	movs	r3, #2
 8001f00:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001f02:	2302      	movs	r3, #2
 8001f04:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001f06:	23c0      	movs	r3, #192	; 0xc0
 8001f08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001f0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1a:	463b      	mov	r3, r7
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f007 f841 	bl	8008fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001f28:	f000 f804 	bl	8001f34 <Error_Handler>
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	37c0      	adds	r7, #192	; 0xc0
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <Error_Handler+0x8>
	...

08001f40 <functionMeasureVoltage>:
 * 28 Volt için 0.935 Volt #28/0.935#=29.94652 				Katsayı
 * #3.3/65535# = 0.000050354 								1 Bite Gelen Volt Değeri
 * VOLTAGE = ((ADC_VALUE * 3.3)/65535)*(28/0.935)			Formül
 */
void functionMeasureVoltage(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
	pandora.powerManagement.BATVoltage = (((pandora.analogDigitalConverter.hadc3Buffer[3])*3.3)/65535)*(28/0.935);
 8001f44:	4b16      	ldr	r3, [pc, #88]	; (8001fa0 <functionMeasureVoltage+0x60>)
 8001f46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f4a:	ee07 3a90 	vmov	s15, r3
 8001f4e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001f52:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001f88 <functionMeasureVoltage+0x48>
 8001f56:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001f5a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8001f90 <functionMeasureVoltage+0x50>
 8001f5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f62:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001f98 <functionMeasureVoltage+0x58>
 8001f66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001f6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001f6e:	ee17 2a90 	vmov	r2, s15
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <functionMeasureVoltage+0x60>)
 8001f74:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	f3af 8000 	nop.w
 8001f88:	66666666 	.word	0x66666666
 8001f8c:	400a6666 	.word	0x400a6666
 8001f90:	00000000 	.word	0x00000000
 8001f94:	40efffe0 	.word	0x40efffe0
 8001f98:	66ac7df2 	.word	0x66ac7df2
 8001f9c:	403df24f 	.word	0x403df24f
 8001fa0:	24000570 	.word	0x24000570
 8001fa4:	00000000 	.word	0x00000000

08001fa8 <functionMeasureCurrent>:
 * CURRENT = ((ADC_VALUE * 3.3)/65535)*(5/0.8)				Formül
 */


void functionMeasureCurrent(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
	pandora.powerManagement.SCurrent 				= ((pandora.analogDigitalConverter.hadc3Buffer[2] * 3.3)/65535)*(5/0.8); // #DÜZENLE KESME DEĞERLERİNİ
 8001fac:	4b62      	ldr	r3, [pc, #392]	; (8002138 <functionMeasureCurrent+0x190>)
 8001fae:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001fb2:	ee07 3a90 	vmov	s15, r3
 8001fb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001fba:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 8002128 <functionMeasureCurrent+0x180>
 8001fbe:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001fc2:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 8002130 <functionMeasureCurrent+0x188>
 8001fc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001fca:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 8001fce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001fd2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8001fd6:	ee17 2a90 	vmov	r2, s15
 8001fda:	4b57      	ldr	r3, [pc, #348]	; (8002138 <functionMeasureCurrent+0x190>)
 8001fdc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	pandora.powerManagement.CHCurrent 				= ((pandora.analogDigitalConverter.hadc3Buffer[0] * 3.3)/65535)*(5/0.8);
 8001fe0:	4b55      	ldr	r3, [pc, #340]	; (8002138 <functionMeasureCurrent+0x190>)
 8001fe2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001fee:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8002128 <functionMeasureCurrent+0x180>
 8001ff2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001ff6:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8002130 <functionMeasureCurrent+0x188>
 8001ffa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ffe:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 8002002:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002006:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800200a:	ee17 2a90 	vmov	r2, s15
 800200e:	4b4a      	ldr	r3, [pc, #296]	; (8002138 <functionMeasureCurrent+0x190>)
 8002010:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	pandora.powerManagement.HERCULECurrent 			= ((pandora.analogDigitalConverter.hadc2Buffer[1] * 3.3)/65535)*(5/0.8);
 8002014:	4b48      	ldr	r3, [pc, #288]	; (8002138 <functionMeasureCurrent+0x190>)
 8002016:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002022:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8002128 <functionMeasureCurrent+0x180>
 8002026:	ee27 6b06 	vmul.f64	d6, d7, d6
 800202a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8002130 <functionMeasureCurrent+0x188>
 800202e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002032:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 8002036:	ee27 7b06 	vmul.f64	d7, d7, d6
 800203a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800203e:	ee17 2a90 	vmov	r2, s15
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <functionMeasureCurrent+0x190>)
 8002044:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	pandora.powerManagement.AKBCurrent 				= ((pandora.analogDigitalConverter.hadc2Buffer[0] * 3.3)/65535)*(5/0.8);
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <functionMeasureCurrent+0x190>)
 800204a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800204e:	ee07 3a90 	vmov	s15, r3
 8002052:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8002056:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8002128 <functionMeasureCurrent+0x180>
 800205a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800205e:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8002130 <functionMeasureCurrent+0x188>
 8002062:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002066:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 800206a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800206e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002072:	ee17 2a90 	vmov	r2, s15
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <functionMeasureCurrent+0x190>)
 8002078:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	pandora.powerManagement.EOSCurrent 				= ((pandora.analogDigitalConverter.hadc1Buffer[0] * 3.3)/65535)*(5/0.8);
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <functionMeasureCurrent+0x190>)
 800207e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800208a:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8002128 <functionMeasureCurrent+0x180>
 800208e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8002092:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8002130 <functionMeasureCurrent+0x188>
 8002096:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800209a:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 800209e:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020a2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020a6:	ee17 2a90 	vmov	r2, s15
 80020aa:	4b23      	ldr	r3, [pc, #140]	; (8002138 <functionMeasureCurrent+0x190>)
 80020ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	pandora.powerManagement.GDBCurrent 				= ((pandora.analogDigitalConverter.hadc3Buffer[0] * 3.3)/65535)*(5/0.8);
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <functionMeasureCurrent+0x190>)
 80020b2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020be:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8002128 <functionMeasureCurrent+0x180>
 80020c2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020c6:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8002130 <functionMeasureCurrent+0x188>
 80020ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80020ce:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 80020d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80020d6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80020da:	ee17 2a90 	vmov	r2, s15
 80020de:	4b16      	ldr	r3, [pc, #88]	; (8002138 <functionMeasureCurrent+0x190>)
 80020e0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	pandora.powerManagement.KKUCurrent 				= ((pandora.analogDigitalConverter.hadc1Buffer[1] * 3.3)/65535)*(5/0.8);
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <functionMeasureCurrent+0x190>)
 80020e6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80020f2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8002128 <functionMeasureCurrent+0x180>
 80020f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80020fa:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8002130 <functionMeasureCurrent+0x188>
 80020fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002102:	eeb1 6b09 	vmov.f64	d6, #25	; 0x40c80000  6.250
 8002106:	ee27 7b06 	vmul.f64	d7, d7, d6
 800210a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800210e:	ee17 2a90 	vmov	r2, s15
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <functionMeasureCurrent+0x190>)
 8002114:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	f3af 8000 	nop.w
 8002128:	66666666 	.word	0x66666666
 800212c:	400a6666 	.word	0x400a6666
 8002130:	00000000 	.word	0x00000000
 8002134:	40efffe0 	.word	0x40efffe0
 8002138:	24000570 	.word	0x24000570

0800213c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_MspInit+0x30>)
 8002144:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002148:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_MspInit+0x30>)
 800214a:	f043 0302 	orr.w	r3, r3, #2
 800214e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_MspInit+0x30>)
 8002154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	58024400 	.word	0x58024400

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021bc:	f000 ff1e 	bl	8002ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <DMA1_Stream0_IRQHandler+0x10>)
 80021ca:	f003 f923 	bl	8005414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2400021c 	.word	0x2400021c

080021d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <DMA1_Stream1_IRQHandler+0x10>)
 80021de:	f003 f919 	bl	8005414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	24000294 	.word	0x24000294

080021ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <TIM2_IRQHandler+0x10>)
 80021f2:	f009 fdd9 	bl	800bda8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	24000698 	.word	0x24000698

08002200 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <TIM3_IRQHandler+0x10>)
 8002206:	f009 fdcf 	bl	800bda8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	240006e4 	.word	0x240006e4

08002214 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002218:	4802      	ldr	r0, [pc, #8]	; (8002224 <TIM4_IRQHandler+0x10>)
 800221a:	f009 fdc5 	bl	800bda8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	24000730 	.word	0x24000730

08002228 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800222c:	4802      	ldr	r0, [pc, #8]	; (8002238 <BDMA_Channel0_IRQHandler+0x10>)
 800222e:	f003 f8f1 	bl	8005414 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	2400030c 	.word	0x2400030c

0800223c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002240:	4b37      	ldr	r3, [pc, #220]	; (8002320 <SystemInit+0xe4>)
 8002242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002246:	4a36      	ldr	r2, [pc, #216]	; (8002320 <SystemInit+0xe4>)
 8002248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800224c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002250:	4b34      	ldr	r3, [pc, #208]	; (8002324 <SystemInit+0xe8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	2b06      	cmp	r3, #6
 800225a:	d807      	bhi.n	800226c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <SystemInit+0xe8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f023 030f 	bic.w	r3, r3, #15
 8002264:	4a2f      	ldr	r2, [pc, #188]	; (8002324 <SystemInit+0xe8>)
 8002266:	f043 0307 	orr.w	r3, r3, #7
 800226a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800226c:	4b2e      	ldr	r3, [pc, #184]	; (8002328 <SystemInit+0xec>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a2d      	ldr	r2, [pc, #180]	; (8002328 <SystemInit+0xec>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002278:	4b2b      	ldr	r3, [pc, #172]	; (8002328 <SystemInit+0xec>)
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800227e:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <SystemInit+0xec>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	4929      	ldr	r1, [pc, #164]	; (8002328 <SystemInit+0xec>)
 8002284:	4b29      	ldr	r3, [pc, #164]	; (800232c <SystemInit+0xf0>)
 8002286:	4013      	ands	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <SystemInit+0xe8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d007      	beq.n	80022a6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002296:	4b23      	ldr	r3, [pc, #140]	; (8002324 <SystemInit+0xe8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 030f 	bic.w	r3, r3, #15
 800229e:	4a21      	ldr	r2, [pc, #132]	; (8002324 <SystemInit+0xe8>)
 80022a0:	f043 0307 	orr.w	r3, r3, #7
 80022a4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80022a6:	4b20      	ldr	r3, [pc, #128]	; (8002328 <SystemInit+0xec>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <SystemInit+0xec>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80022b2:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <SystemInit+0xec>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <SystemInit+0xec>)
 80022ba:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <SystemInit+0xf4>)
 80022bc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <SystemInit+0xec>)
 80022c0:	4a1c      	ldr	r2, [pc, #112]	; (8002334 <SystemInit+0xf8>)
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022c4:	4b18      	ldr	r3, [pc, #96]	; (8002328 <SystemInit+0xec>)
 80022c6:	4a1c      	ldr	r2, [pc, #112]	; (8002338 <SystemInit+0xfc>)
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <SystemInit+0xec>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <SystemInit+0xec>)
 80022d2:	4a19      	ldr	r2, [pc, #100]	; (8002338 <SystemInit+0xfc>)
 80022d4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022d6:	4b14      	ldr	r3, [pc, #80]	; (8002328 <SystemInit+0xec>)
 80022d8:	2200      	movs	r2, #0
 80022da:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022dc:	4b12      	ldr	r3, [pc, #72]	; (8002328 <SystemInit+0xec>)
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <SystemInit+0xfc>)
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022e2:	4b11      	ldr	r3, [pc, #68]	; (8002328 <SystemInit+0xec>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022e8:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <SystemInit+0xec>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0e      	ldr	r2, [pc, #56]	; (8002328 <SystemInit+0xec>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <SystemInit+0xec>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <SystemInit+0x100>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <SystemInit+0x104>)
 8002300:	4013      	ands	r3, r2
 8002302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002306:	d202      	bcs.n	800230e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <SystemInit+0x108>)
 800230a:	2201      	movs	r2, #1
 800230c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800230e:	4b0e      	ldr	r3, [pc, #56]	; (8002348 <SystemInit+0x10c>)
 8002310:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002314:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000ed00 	.word	0xe000ed00
 8002324:	52002000 	.word	0x52002000
 8002328:	58024400 	.word	0x58024400
 800232c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002330:	02020200 	.word	0x02020200
 8002334:	01ff0000 	.word	0x01ff0000
 8002338:	01010280 	.word	0x01010280
 800233c:	5c001000 	.word	0x5c001000
 8002340:	ffff0000 	.word	0xffff0000
 8002344:	51008108 	.word	0x51008108
 8002348:	52004000 	.word	0x52004000

0800234c <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08c      	sub	sp, #48	; 0x30
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002352:	f107 030c 	add.w	r3, r7, #12
 8002356:	2224      	movs	r2, #36	; 0x24
 8002358:	2100      	movs	r1, #0
 800235a:	4618      	mov	r0, r3
 800235c:	f00b fa3e 	bl	800d7dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002360:	463b      	mov	r3, r7
 8002362:	2200      	movs	r2, #0
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	605a      	str	r2, [r3, #4]
 8002368:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800236a:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <MX_TIM1_Init+0xac>)
 800236c:	4a23      	ldr	r2, [pc, #140]	; (80023fc <MX_TIM1_Init+0xb0>)
 800236e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002370:	4b21      	ldr	r3, [pc, #132]	; (80023f8 <MX_TIM1_Init+0xac>)
 8002372:	2200      	movs	r2, #0
 8002374:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <MX_TIM1_Init+0xac>)
 8002378:	2200      	movs	r2, #0
 800237a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800237c:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <MX_TIM1_Init+0xac>)
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002384:	4b1c      	ldr	r3, [pc, #112]	; (80023f8 <MX_TIM1_Init+0xac>)
 8002386:	2200      	movs	r2, #0
 8002388:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <MX_TIM1_Init+0xac>)
 800238c:	2200      	movs	r2, #0
 800238e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <MX_TIM1_Init+0xac>)
 8002392:	2200      	movs	r2, #0
 8002394:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002396:	2301      	movs	r3, #1
 8002398:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800239a:	2300      	movs	r3, #0
 800239c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800239e:	2301      	movs	r3, #1
 80023a0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023aa:	2300      	movs	r3, #0
 80023ac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023ae:	2301      	movs	r3, #1
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	4619      	mov	r1, r3
 80023c0:	480d      	ldr	r0, [pc, #52]	; (80023f8 <MX_TIM1_Init+0xac>)
 80023c2:	f009 fbbd 	bl	800bb40 <HAL_TIM_Encoder_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80023cc:	f7ff fdb2 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023d4:	2300      	movs	r3, #0
 80023d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023dc:	463b      	mov	r3, r7
 80023de:	4619      	mov	r1, r3
 80023e0:	4805      	ldr	r0, [pc, #20]	; (80023f8 <MX_TIM1_Init+0xac>)
 80023e2:	f00a f873 	bl	800c4cc <HAL_TIMEx_MasterConfigSynchronization>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80023ec:	f7ff fda2 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80023f0:	bf00      	nop
 80023f2:	3730      	adds	r7, #48	; 0x30
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	2400064c 	.word	0x2400064c
 80023fc:	40010000 	.word	0x40010000

08002400 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002406:	f107 0310 	add.w	r3, r7, #16
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002414:	1d3b      	adds	r3, r7, #4
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <MX_TIM2_Init+0x98>)
 8002420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002424:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8002426:	4b1c      	ldr	r3, [pc, #112]	; (8002498 <MX_TIM2_Init+0x98>)
 8002428:	22ef      	movs	r2, #239	; 0xef
 800242a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <MX_TIM2_Init+0x98>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <MX_TIM2_Init+0x98>)
 8002434:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002438:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243a:	4b17      	ldr	r3, [pc, #92]	; (8002498 <MX_TIM2_Init+0x98>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002440:	4b15      	ldr	r3, [pc, #84]	; (8002498 <MX_TIM2_Init+0x98>)
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002446:	4814      	ldr	r0, [pc, #80]	; (8002498 <MX_TIM2_Init+0x98>)
 8002448:	f009 faaa 	bl	800b9a0 <HAL_TIM_Base_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002452:	f7ff fd6f 	bl	8001f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800245a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	4619      	mov	r1, r3
 8002462:	480d      	ldr	r0, [pc, #52]	; (8002498 <MX_TIM2_Init+0x98>)
 8002464:	f009 fda8 	bl	800bfb8 <HAL_TIM_ConfigClockSource>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800246e:	f7ff fd61 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800247a:	1d3b      	adds	r3, r7, #4
 800247c:	4619      	mov	r1, r3
 800247e:	4806      	ldr	r0, [pc, #24]	; (8002498 <MX_TIM2_Init+0x98>)
 8002480:	f00a f824 	bl	800c4cc <HAL_TIMEx_MasterConfigSynchronization>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800248a:	f7ff fd53 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800248e:	bf00      	nop
 8002490:	3720      	adds	r7, #32
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	24000698 	.word	0x24000698

0800249c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024a2:	f107 030c 	add.w	r3, r7, #12
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f00b f996 	bl	800d7dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b0:	463b      	mov	r3, r7
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]
 80024b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ba:	4b21      	ldr	r3, [pc, #132]	; (8002540 <MX_TIM3_Init+0xa4>)
 80024bc:	4a21      	ldr	r2, [pc, #132]	; (8002544 <MX_TIM3_Init+0xa8>)
 80024be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <MX_TIM3_Init+0xa4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <MX_TIM3_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <MX_TIM3_Init+0xa4>)
 80024ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d4:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <MX_TIM3_Init+0xa4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <MX_TIM3_Init+0xa4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024e0:	2301      	movs	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024e8:	2301      	movs	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024f8:	2301      	movs	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	4619      	mov	r1, r3
 800250a:	480d      	ldr	r0, [pc, #52]	; (8002540 <MX_TIM3_Init+0xa4>)
 800250c:	f009 fb18 	bl	800bb40 <HAL_TIM_Encoder_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002516:	f7ff fd0d 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002522:	463b      	mov	r3, r7
 8002524:	4619      	mov	r1, r3
 8002526:	4806      	ldr	r0, [pc, #24]	; (8002540 <MX_TIM3_Init+0xa4>)
 8002528:	f009 ffd0 	bl	800c4cc <HAL_TIMEx_MasterConfigSynchronization>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002532:	f7ff fcff 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	3730      	adds	r7, #48	; 0x30
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	240006e4 	.word	0x240006e4
 8002544:	40000400 	.word	0x40000400

08002548 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800254e:	f107 0310 	add.w	r3, r7, #16
 8002552:	2200      	movs	r2, #0
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	609a      	str	r2, [r3, #8]
 800255a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800255c:	1d3b      	adds	r3, r7, #4
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002566:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <MX_TIM4_Init+0x94>)
 8002568:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <MX_TIM4_Init+0x98>)
 800256a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 239;
 800256c:	4b1b      	ldr	r3, [pc, #108]	; (80025dc <MX_TIM4_Init+0x94>)
 800256e:	22ef      	movs	r2, #239	; 0xef
 8002570:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002572:	4b1a      	ldr	r3, [pc, #104]	; (80025dc <MX_TIM4_Init+0x94>)
 8002574:	2200      	movs	r2, #0
 8002576:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002578:	4b18      	ldr	r3, [pc, #96]	; (80025dc <MX_TIM4_Init+0x94>)
 800257a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800257e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002580:	4b16      	ldr	r3, [pc, #88]	; (80025dc <MX_TIM4_Init+0x94>)
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <MX_TIM4_Init+0x94>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800258c:	4813      	ldr	r0, [pc, #76]	; (80025dc <MX_TIM4_Init+0x94>)
 800258e:	f009 fa07 	bl	800b9a0 <HAL_TIM_Base_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002598:	f7ff fccc 	bl	8001f34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800259c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025a2:	f107 0310 	add.w	r3, r7, #16
 80025a6:	4619      	mov	r1, r3
 80025a8:	480c      	ldr	r0, [pc, #48]	; (80025dc <MX_TIM4_Init+0x94>)
 80025aa:	f009 fd05 	bl	800bfb8 <HAL_TIM_ConfigClockSource>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80025b4:	f7ff fcbe 	bl	8001f34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b8:	2300      	movs	r3, #0
 80025ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	4619      	mov	r1, r3
 80025c4:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_TIM4_Init+0x94>)
 80025c6:	f009 ff81 	bl	800c4cc <HAL_TIMEx_MasterConfigSynchronization>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80025d0:	f7ff fcb0 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025d4:	bf00      	nop
 80025d6:	3720      	adds	r7, #32
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	24000730 	.word	0x24000730
 80025e0:	40000800 	.word	0x40000800

080025e4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08c      	sub	sp, #48	; 0x30
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 031c 	add.w	r3, r7, #28
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a38      	ldr	r2, [pc, #224]	; (80026e4 <HAL_TIM_Encoder_MspInit+0x100>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d12f      	bne.n	8002666 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002606:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002608:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800260c:	4a36      	ldr	r2, [pc, #216]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 800260e:	f043 0301 	orr.w	r3, r3, #1
 8002612:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002616:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002618:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002624:	4b30      	ldr	r3, [pc, #192]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262a:	4a2f      	ldr	r2, [pc, #188]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 800262c:	f043 0301 	orr.w	r3, r3, #1
 8002630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_2_PHASE_A_Pin|ENCODER_2_PHASE_B_Pin;
 8002642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002648:	2302      	movs	r3, #2
 800264a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002650:	2300      	movs	r3, #0
 8002652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002654:	2301      	movs	r3, #1
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	4619      	mov	r1, r3
 800265e:	4823      	ldr	r0, [pc, #140]	; (80026ec <HAL_TIM_Encoder_MspInit+0x108>)
 8002660:	f005 f982 	bl	8007968 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002664:	e03a      	b.n	80026dc <HAL_TIM_Encoder_MspInit+0xf8>
  else if(tim_encoderHandle->Instance==TIM3)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <HAL_TIM_Encoder_MspInit+0x10c>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d135      	bne.n	80026dc <HAL_TIM_Encoder_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002672:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002678:	f043 0302 	orr.w	r3, r3, #2
 800267c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002680:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002682:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002694:	4a14      	ldr	r2, [pc, #80]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_TIM_Encoder_MspInit+0x104>)
 80026a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_1_PHASE_A_Pin|ENCODER_1_PHASE_B_Pin;
 80026ac:	23c0      	movs	r3, #192	; 0xc0
 80026ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b0:	2302      	movs	r3, #2
 80026b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	2300      	movs	r3, #0
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026bc:	2302      	movs	r3, #2
 80026be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026c0:	f107 031c 	add.w	r3, r7, #28
 80026c4:	4619      	mov	r1, r3
 80026c6:	480b      	ldr	r0, [pc, #44]	; (80026f4 <HAL_TIM_Encoder_MspInit+0x110>)
 80026c8:	f005 f94e 	bl	8007968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2100      	movs	r1, #0
 80026d0:	201d      	movs	r0, #29
 80026d2:	f002 f8a4 	bl	800481e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026d6:	201d      	movs	r0, #29
 80026d8:	f002 f8bb 	bl	8004852 <HAL_NVIC_EnableIRQ>
}
 80026dc:	bf00      	nop
 80026de:	3730      	adds	r7, #48	; 0x30
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40010000 	.word	0x40010000
 80026e8:	58024400 	.word	0x58024400
 80026ec:	58020000 	.word	0x58020000
 80026f0:	40000400 	.word	0x40000400
 80026f4:	58020800 	.word	0x58020800

080026f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d117      	bne.n	800273a <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800270a:	4b1c      	ldr	r3, [pc, #112]	; (800277c <HAL_TIM_Base_MspInit+0x84>)
 800270c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002710:	4a1a      	ldr	r2, [pc, #104]	; (800277c <HAL_TIM_Base_MspInit+0x84>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800271a:	4b18      	ldr	r3, [pc, #96]	; (800277c <HAL_TIM_Base_MspInit+0x84>)
 800271c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002728:	2200      	movs	r2, #0
 800272a:	2100      	movs	r1, #0
 800272c:	201c      	movs	r0, #28
 800272e:	f002 f876 	bl	800481e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002732:	201c      	movs	r0, #28
 8002734:	f002 f88d 	bl	8004852 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002738:	e01b      	b.n	8002772 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM4)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_TIM_Base_MspInit+0x88>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d116      	bne.n	8002772 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_TIM_Base_MspInit+0x84>)
 8002746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800274a:	4a0c      	ldr	r2, [pc, #48]	; (800277c <HAL_TIM_Base_MspInit+0x84>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_TIM_Base_MspInit+0x84>)
 8002756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	201e      	movs	r0, #30
 8002768:	f002 f859 	bl	800481e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800276c:	201e      	movs	r0, #30
 800276e:	f002 f870 	bl	8004852 <HAL_NVIC_EnableIRQ>
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	58024400 	.word	0x58024400
 8002780:	40000800 	.word	0x40000800

08002784 <HAL_TIM_PeriodElapsedCallback>:
bool _500msFlag		 		= false;
bool _1sFlag				= false;
bool _10sFlag				= false;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
    {
        // 1 ms’de bir gelecek yer
        // örn: tick say, LED toggle, task scheduler vs.
    }

    if (htim->Instance == TIM4)   // şuan 50ms 1msye  ayarla
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a58      	ldr	r2, [pc, #352]	; (80028f4 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002792:	4293      	cmp	r3, r2
 8002794:	f040 80a9 	bne.w	80028ea <HAL_TIM_PeriodElapsedCallback+0x166>
    {
    	functionEncoderRead(&htim3);		// her ms değerinde çağrılır. IDLE durumunda çağrılmayabilir #huzeyfe
 8002798:	4857      	ldr	r0, [pc, #348]	; (80028f8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800279a:	f7fe fafd 	bl	8000d98 <functionEncoderRead>

    	_configurableCounter++;
 800279e:	4b57      	ldr	r3, [pc, #348]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x178>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b55      	ldr	r3, [pc, #340]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x178>)
 80027a8:	701a      	strb	r2, [r3, #0]
    	if(_configurableCounter>configurableTime)
 80027aa:	4b54      	ldr	r3, [pc, #336]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x178>)
 80027ac:	781a      	ldrb	r2, [r3, #0]
 80027ae:	4b54      	ldr	r3, [pc, #336]	; (8002900 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d905      	bls.n	80027c2 <HAL_TIM_PeriodElapsedCallback+0x3e>
    	{
    		_configurableFlagScanStart = true;
 80027b6:	4b53      	ldr	r3, [pc, #332]	; (8002904 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80027b8:	2201      	movs	r2, #1
 80027ba:	701a      	strb	r2, [r3, #0]
    		_configurableCounter = 0;
 80027bc:	4b4f      	ldr	r3, [pc, #316]	; (80028fc <HAL_TIM_PeriodElapsedCallback+0x178>)
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
    	}

    	_1msCounter++;
 80027c2:	4b51      	ldr	r3, [pc, #324]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	3301      	adds	r3, #1
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4b4f      	ldr	r3, [pc, #316]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80027cc:	701a      	strb	r2, [r3, #0]
    	if(_1msCounter>0)
 80027ce:	4b4e      	ldr	r3, [pc, #312]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d005      	beq.n	80027e2 <HAL_TIM_PeriodElapsedCallback+0x5e>
    	{
    		_1msFlagScanStart = true;
 80027d6:	4b4d      	ldr	r3, [pc, #308]	; (800290c <HAL_TIM_PeriodElapsedCallback+0x188>)
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
    		_1msCounter = 0;
 80027dc:	4b4a      	ldr	r3, [pc, #296]	; (8002908 <HAL_TIM_PeriodElapsedCallback+0x184>)
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
    	}


    	_10msCounter++;
 80027e2:	4b4b      	ldr	r3, [pc, #300]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	4b49      	ldr	r3, [pc, #292]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80027ec:	701a      	strb	r2, [r3, #0]
    	if(_10msCounter>9)
 80027ee:	4b48      	ldr	r3, [pc, #288]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b09      	cmp	r3, #9
 80027f4:	d905      	bls.n	8002802 <HAL_TIM_PeriodElapsedCallback+0x7e>
    	{
    		_10msFlagScanStart = true;
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80027f8:	2201      	movs	r2, #1
 80027fa:	701a      	strb	r2, [r3, #0]
    		_10msCounter = 0;
 80027fc:	4b44      	ldr	r3, [pc, #272]	; (8002910 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
    	}

    	_25msCounter++;
 8002802:	4b45      	ldr	r3, [pc, #276]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	3301      	adds	r3, #1
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b43      	ldr	r3, [pc, #268]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800280c:	701a      	strb	r2, [r3, #0]
    	if(_25msCounter>24)
 800280e:	4b42      	ldr	r3, [pc, #264]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b18      	cmp	r3, #24
 8002814:	d905      	bls.n	8002822 <HAL_TIM_PeriodElapsedCallback+0x9e>
    	{
    		_25msFlagScanStart = true;
 8002816:	4b41      	ldr	r3, [pc, #260]	; (800291c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
    		_25msCounter = 0;
 800281c:	4b3e      	ldr	r3, [pc, #248]	; (8002918 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
    	}

    	_50msCounter++;
 8002822:	4b3f      	ldr	r3, [pc, #252]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800282c:	701a      	strb	r2, [r3, #0]
    	if(_50msCounter>49)
 800282e:	4b3c      	ldr	r3, [pc, #240]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b31      	cmp	r3, #49	; 0x31
 8002834:	d905      	bls.n	8002842 <HAL_TIM_PeriodElapsedCallback+0xbe>
    	{
    		_50msFlagScanStart = true;
 8002836:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002838:	2201      	movs	r2, #1
 800283a:	701a      	strb	r2, [r3, #0]
    		_50msCounter = 0;
 800283c:	4b38      	ldr	r3, [pc, #224]	; (8002920 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
    	}

    	_100msCounter++;
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	3301      	adds	r3, #1
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4b37      	ldr	r3, [pc, #220]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800284c:	701a      	strb	r2, [r3, #0]
    	if(_100msCounter>99)
 800284e:	4b36      	ldr	r3, [pc, #216]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b63      	cmp	r3, #99	; 0x63
 8002854:	d905      	bls.n	8002862 <HAL_TIM_PeriodElapsedCallback+0xde>
    	{
    		_100msFlagScanStart = true;
 8002856:	4b35      	ldr	r3, [pc, #212]	; (800292c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
    		_100msCounter = 0;
 800285c:	4b32      	ldr	r3, [pc, #200]	; (8002928 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]

    	}

    	_250msCounter++;
 8002862:	4b33      	ldr	r3, [pc, #204]	; (8002930 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	b2da      	uxtb	r2, r3
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800286c:	701a      	strb	r2, [r3, #0]
    	if(_250msCounter>249)
 800286e:	4b30      	ldr	r3, [pc, #192]	; (8002930 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	2bf9      	cmp	r3, #249	; 0xf9
 8002874:	d905      	bls.n	8002882 <HAL_TIM_PeriodElapsedCallback+0xfe>
    	{
    		_250msFlagScanStart = true;
 8002876:	4b2f      	ldr	r3, [pc, #188]	; (8002934 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002878:	2201      	movs	r2, #1
 800287a:	701a      	strb	r2, [r3, #0]
    		_250msCounter = 0;
 800287c:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800287e:	2200      	movs	r2, #0
 8002880:	701a      	strb	r2, [r3, #0]
    	}

    	_500msCounter++;
 8002882:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002884:	881b      	ldrh	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	b29a      	uxth	r2, r3
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800288c:	801a      	strh	r2, [r3, #0]
    	if(_500msCounter>499)
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002896:	d305      	bcc.n	80028a4 <HAL_TIM_PeriodElapsedCallback+0x120>
    	{
    		_500msFlagScanStart = true;
 8002898:	4b28      	ldr	r3, [pc, #160]	; (800293c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800289a:	2201      	movs	r2, #1
 800289c:	701a      	strb	r2, [r3, #0]
    		_500msCounter = 0;
 800289e:	4b26      	ldr	r3, [pc, #152]	; (8002938 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	801a      	strh	r2, [r3, #0]
    	}

    	_1sCounter++;
 80028a4:	4b26      	ldr	r3, [pc, #152]	; (8002940 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	3301      	adds	r3, #1
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80028ae:	801a      	strh	r2, [r3, #0]
    	if(_1sCounter>999)
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b8:	d305      	bcc.n	80028c6 <HAL_TIM_PeriodElapsedCallback+0x142>
    	{
    		_1sFlagScanStart = true;
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80028bc:	2201      	movs	r2, #1
 80028be:	701a      	strb	r2, [r3, #0]
    		_1sCounter = 0;
 80028c0:	4b1f      	ldr	r3, [pc, #124]	; (8002940 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	801a      	strh	r2, [r3, #0]
    	}

    	_10sCounter++;
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80028c8:	881b      	ldrh	r3, [r3, #0]
 80028ca:	3301      	adds	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	4b1e      	ldr	r3, [pc, #120]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80028d0:	801a      	strh	r2, [r3, #0]
    	if(_10sCounter>9999)
 80028d2:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80028d4:	881b      	ldrh	r3, [r3, #0]
 80028d6:	f242 720f 	movw	r2, #9999	; 0x270f
 80028da:	4293      	cmp	r3, r2
 80028dc:	d905      	bls.n	80028ea <HAL_TIM_PeriodElapsedCallback+0x166>
    	{
    		_10sFlagScanStart = true;
 80028de:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
    		_10sCounter = 0;
 80028e4:	4b18      	ldr	r3, [pc, #96]	; (8002948 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40000800 	.word	0x40000800
 80028f8:	240006e4 	.word	0x240006e4
 80028fc:	2400077c 	.word	0x2400077c
 8002900:	24000008 	.word	0x24000008
 8002904:	2400078a 	.word	0x2400078a
 8002908:	2400077d 	.word	0x2400077d
 800290c:	2400078b 	.word	0x2400078b
 8002910:	2400077e 	.word	0x2400077e
 8002914:	2400078c 	.word	0x2400078c
 8002918:	2400077f 	.word	0x2400077f
 800291c:	2400078d 	.word	0x2400078d
 8002920:	24000780 	.word	0x24000780
 8002924:	2400078e 	.word	0x2400078e
 8002928:	24000781 	.word	0x24000781
 800292c:	2400078f 	.word	0x2400078f
 8002930:	24000782 	.word	0x24000782
 8002934:	24000790 	.word	0x24000790
 8002938:	24000784 	.word	0x24000784
 800293c:	24000791 	.word	0x24000791
 8002940:	24000786 	.word	0x24000786
 8002944:	24000792 	.word	0x24000792
 8002948:	24000788 	.word	0x24000788
 800294c:	24000793 	.word	0x24000793

08002950 <startTimeScanFlags>:

void startTimeScanFlags(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
	if(_configurableFlagScanStart)
 8002954:	4b34      	ldr	r3, [pc, #208]	; (8002a28 <startTimeScanFlags+0xd8>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <startTimeScanFlags+0x18>
	{
		_configurableFlag = true;
 800295c:	4b33      	ldr	r3, [pc, #204]	; (8002a2c <startTimeScanFlags+0xdc>)
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
		_configurableFlagScanStart = false;
 8002962:	4b31      	ldr	r3, [pc, #196]	; (8002a28 <startTimeScanFlags+0xd8>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
	}
	if(_1msFlagScanStart)
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <startTimeScanFlags+0xe0>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d005      	beq.n	800297c <startTimeScanFlags+0x2c>
	{
		_1msFlag = true;
 8002970:	4b30      	ldr	r3, [pc, #192]	; (8002a34 <startTimeScanFlags+0xe4>)
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
		_1msFlagScanStart = false;
 8002976:	4b2e      	ldr	r3, [pc, #184]	; (8002a30 <startTimeScanFlags+0xe0>)
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
	}
	if(_10msFlagScanStart)
 800297c:	4b2e      	ldr	r3, [pc, #184]	; (8002a38 <startTimeScanFlags+0xe8>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d005      	beq.n	8002990 <startTimeScanFlags+0x40>
	{
		_10msFlag = true;
 8002984:	4b2d      	ldr	r3, [pc, #180]	; (8002a3c <startTimeScanFlags+0xec>)
 8002986:	2201      	movs	r2, #1
 8002988:	701a      	strb	r2, [r3, #0]
		_10msFlagScanStart = false;
 800298a:	4b2b      	ldr	r3, [pc, #172]	; (8002a38 <startTimeScanFlags+0xe8>)
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
	}
	if(_25msFlagScanStart)
 8002990:	4b2b      	ldr	r3, [pc, #172]	; (8002a40 <startTimeScanFlags+0xf0>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <startTimeScanFlags+0x54>
	{
		_25msFlag = true;
 8002998:	4b2a      	ldr	r3, [pc, #168]	; (8002a44 <startTimeScanFlags+0xf4>)
 800299a:	2201      	movs	r2, #1
 800299c:	701a      	strb	r2, [r3, #0]
		_25msFlagScanStart = false;
 800299e:	4b28      	ldr	r3, [pc, #160]	; (8002a40 <startTimeScanFlags+0xf0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	701a      	strb	r2, [r3, #0]
	}
	if(_50msFlagScanStart)
 80029a4:	4b28      	ldr	r3, [pc, #160]	; (8002a48 <startTimeScanFlags+0xf8>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d005      	beq.n	80029b8 <startTimeScanFlags+0x68>
	{
		_50msFlag = true;
 80029ac:	4b27      	ldr	r3, [pc, #156]	; (8002a4c <startTimeScanFlags+0xfc>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
		_50msFlagScanStart = false;
 80029b2:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <startTimeScanFlags+0xf8>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
	}
	if(_100msFlagScanStart)
 80029b8:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <startTimeScanFlags+0x100>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <startTimeScanFlags+0x7c>
	{
		_100msFlag = true;
 80029c0:	4b24      	ldr	r3, [pc, #144]	; (8002a54 <startTimeScanFlags+0x104>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
		_100msFlagScanStart = false;
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <startTimeScanFlags+0x100>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
	}
	if(_250msFlagScanStart)
 80029cc:	4b22      	ldr	r3, [pc, #136]	; (8002a58 <startTimeScanFlags+0x108>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <startTimeScanFlags+0x90>
	{
		_250msFlag = true;
 80029d4:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <startTimeScanFlags+0x10c>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
		_250msFlagScanStart = false;
 80029da:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <startTimeScanFlags+0x108>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]
	}
	if(_500msFlagScanStart)
 80029e0:	4b1f      	ldr	r3, [pc, #124]	; (8002a60 <startTimeScanFlags+0x110>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <startTimeScanFlags+0xa4>
	{
		_500msFlag = true;
 80029e8:	4b1e      	ldr	r3, [pc, #120]	; (8002a64 <startTimeScanFlags+0x114>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]
		_500msFlagScanStart = false;
 80029ee:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <startTimeScanFlags+0x110>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
	}
	if(_1sFlagScanStart)
 80029f4:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <startTimeScanFlags+0x118>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <startTimeScanFlags+0xb8>
	{
		_1sFlag = true;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <startTimeScanFlags+0x11c>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
		_1sFlagScanStart = false;
 8002a02:	4b19      	ldr	r3, [pc, #100]	; (8002a68 <startTimeScanFlags+0x118>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
	}
	if(_10sFlagScanStart)
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <startTimeScanFlags+0x120>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d005      	beq.n	8002a1c <startTimeScanFlags+0xcc>
	{
		_10sFlag = true;
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <startTimeScanFlags+0x124>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
		_10sFlagScanStart = false;
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <startTimeScanFlags+0x120>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
	}
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	2400078a 	.word	0x2400078a
 8002a2c:	24000794 	.word	0x24000794
 8002a30:	2400078b 	.word	0x2400078b
 8002a34:	24000795 	.word	0x24000795
 8002a38:	2400078c 	.word	0x2400078c
 8002a3c:	24000796 	.word	0x24000796
 8002a40:	2400078d 	.word	0x2400078d
 8002a44:	24000797 	.word	0x24000797
 8002a48:	2400078e 	.word	0x2400078e
 8002a4c:	24000798 	.word	0x24000798
 8002a50:	2400078f 	.word	0x2400078f
 8002a54:	24000799 	.word	0x24000799
 8002a58:	24000790 	.word	0x24000790
 8002a5c:	2400079a 	.word	0x2400079a
 8002a60:	24000791 	.word	0x24000791
 8002a64:	2400079b 	.word	0x2400079b
 8002a68:	24000792 	.word	0x24000792
 8002a6c:	2400079c 	.word	0x2400079c
 8002a70:	24000793 	.word	0x24000793
 8002a74:	2400079d 	.word	0x2400079d

08002a78 <clearTimeScanFlags>:

void clearTimeScanFlags(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
	_configurableFlag 	= false;
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <clearTimeScanFlags+0x4c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
	_1msFlag 	= false;
 8002a82:	4b11      	ldr	r3, [pc, #68]	; (8002ac8 <clearTimeScanFlags+0x50>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
	_10msFlag 	= false;
 8002a88:	4b10      	ldr	r3, [pc, #64]	; (8002acc <clearTimeScanFlags+0x54>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
	_25msFlag 	= false;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <clearTimeScanFlags+0x58>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
	_50msFlag 	= false;
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <clearTimeScanFlags+0x5c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	701a      	strb	r2, [r3, #0]
	_100msFlag 	= false;
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <clearTimeScanFlags+0x60>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	701a      	strb	r2, [r3, #0]
	_250msFlag 	= false;
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	; (8002adc <clearTimeScanFlags+0x64>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	701a      	strb	r2, [r3, #0]
	_500msFlag 	= false;
 8002aa6:	4b0e      	ldr	r3, [pc, #56]	; (8002ae0 <clearTimeScanFlags+0x68>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
	_1sFlag 	= false;
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <clearTimeScanFlags+0x6c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	701a      	strb	r2, [r3, #0]
	_10sFlag 	= false;
 8002ab2:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <clearTimeScanFlags+0x70>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	24000794 	.word	0x24000794
 8002ac8:	24000795 	.word	0x24000795
 8002acc:	24000796 	.word	0x24000796
 8002ad0:	24000797 	.word	0x24000797
 8002ad4:	24000798 	.word	0x24000798
 8002ad8:	24000799 	.word	0x24000799
 8002adc:	2400079a 	.word	0x2400079a
 8002ae0:	2400079b 	.word	0x2400079b
 8002ae4:	2400079c 	.word	0x2400079c
 8002ae8:	2400079d 	.word	0x2400079d

08002aec <MX_UART4_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002af0:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <MX_UART4_Init+0x90>)
 8002af2:	4a23      	ldr	r2, [pc, #140]	; (8002b80 <MX_UART4_Init+0x94>)
 8002af4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <MX_UART4_Init+0x90>)
 8002af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002afc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002afe:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b10:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b12:	220c      	movs	r2, #12
 8002b14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b28:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2e:	4b13      	ldr	r3, [pc, #76]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002b34:	4811      	ldr	r0, [pc, #68]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b36:	f009 fd75 	bl	800c624 <HAL_UART_Init>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d001      	beq.n	8002b44 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002b40:	f7ff f9f8 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b44:	2100      	movs	r1, #0
 8002b46:	480d      	ldr	r0, [pc, #52]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b48:	f00a fd7d 	bl	800d646 <HAL_UARTEx_SetTxFifoThreshold>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002b52:	f7ff f9ef 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b56:	2100      	movs	r1, #0
 8002b58:	4808      	ldr	r0, [pc, #32]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b5a:	f00a fdb2 	bl	800d6c2 <HAL_UARTEx_SetRxFifoThreshold>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002b64:	f7ff f9e6 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <MX_UART4_Init+0x90>)
 8002b6a:	f00a fd33 	bl	800d5d4 <HAL_UARTEx_DisableFifoMode>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002b74:	f7ff f9de 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	240007a0 	.word	0x240007a0
 8002b80:	40004c00 	.word	0x40004c00

08002b84 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002b88:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <MX_UART7_Init+0x90>)
 8002b8a:	4a23      	ldr	r2, [pc, #140]	; (8002c18 <MX_UART7_Init+0x94>)
 8002b8c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002b8e:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <MX_UART7_Init+0x90>)
 8002b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b94:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002b96:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <MX_UART7_Init+0x90>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002b9c:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <MX_UART7_Init+0x90>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <MX_UART7_Init+0x90>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002ba8:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <MX_UART7_Init+0x90>)
 8002baa:	220c      	movs	r2, #12
 8002bac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bae:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <MX_UART7_Init+0x90>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <MX_UART7_Init+0x90>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <MX_UART7_Init+0x90>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bc0:	4b14      	ldr	r3, [pc, #80]	; (8002c14 <MX_UART7_Init+0x90>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bc6:	4b13      	ldr	r3, [pc, #76]	; (8002c14 <MX_UART7_Init+0x90>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002bcc:	4811      	ldr	r0, [pc, #68]	; (8002c14 <MX_UART7_Init+0x90>)
 8002bce:	f009 fd29 	bl	800c624 <HAL_UART_Init>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002bd8:	f7ff f9ac 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bdc:	2100      	movs	r1, #0
 8002bde:	480d      	ldr	r0, [pc, #52]	; (8002c14 <MX_UART7_Init+0x90>)
 8002be0:	f00a fd31 	bl	800d646 <HAL_UARTEx_SetTxFifoThreshold>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 8002bea:	f7ff f9a3 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bee:	2100      	movs	r1, #0
 8002bf0:	4808      	ldr	r0, [pc, #32]	; (8002c14 <MX_UART7_Init+0x90>)
 8002bf2:	f00a fd66 	bl	800d6c2 <HAL_UARTEx_SetRxFifoThreshold>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 8002bfc:	f7ff f99a 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002c00:	4804      	ldr	r0, [pc, #16]	; (8002c14 <MX_UART7_Init+0x90>)
 8002c02:	f00a fce7 	bl	800d5d4 <HAL_UARTEx_DisableFifoMode>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 8002c0c:	f7ff f992 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	24000834 	.word	0x24000834
 8002c18:	40007800 	.word	0x40007800

08002c1c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002c20:	4b22      	ldr	r3, [pc, #136]	; (8002cac <MX_UART8_Init+0x90>)
 8002c22:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <MX_UART8_Init+0x94>)
 8002c24:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002c26:	4b21      	ldr	r3, [pc, #132]	; (8002cac <MX_UART8_Init+0x90>)
 8002c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c2c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002c2e:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <MX_UART8_Init+0x90>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002c34:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <MX_UART8_Init+0x90>)
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002c3a:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <MX_UART8_Init+0x90>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <MX_UART8_Init+0x90>)
 8002c42:	220c      	movs	r2, #12
 8002c44:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c46:	4b19      	ldr	r3, [pc, #100]	; (8002cac <MX_UART8_Init+0x90>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c4c:	4b17      	ldr	r3, [pc, #92]	; (8002cac <MX_UART8_Init+0x90>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <MX_UART8_Init+0x90>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c58:	4b14      	ldr	r3, [pc, #80]	; (8002cac <MX_UART8_Init+0x90>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <MX_UART8_Init+0x90>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002c64:	4811      	ldr	r0, [pc, #68]	; (8002cac <MX_UART8_Init+0x90>)
 8002c66:	f009 fcdd 	bl	800c624 <HAL_UART_Init>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002c70:	f7ff f960 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c74:	2100      	movs	r1, #0
 8002c76:	480d      	ldr	r0, [pc, #52]	; (8002cac <MX_UART8_Init+0x90>)
 8002c78:	f00a fce5 	bl	800d646 <HAL_UARTEx_SetTxFifoThreshold>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002c82:	f7ff f957 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c86:	2100      	movs	r1, #0
 8002c88:	4808      	ldr	r0, [pc, #32]	; (8002cac <MX_UART8_Init+0x90>)
 8002c8a:	f00a fd1a 	bl	800d6c2 <HAL_UARTEx_SetRxFifoThreshold>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002c94:	f7ff f94e 	bl	8001f34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002c98:	4804      	ldr	r0, [pc, #16]	; (8002cac <MX_UART8_Init+0x90>)
 8002c9a:	f00a fc9b 	bl	800d5d4 <HAL_UARTEx_DisableFifoMode>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002ca4:	f7ff f946 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	240008c8 	.word	0x240008c8
 8002cb0:	40007c00 	.word	0x40007c00

08002cb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b0be      	sub	sp, #248	; 0xf8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cbc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ccc:	f107 0320 	add.w	r3, r7, #32
 8002cd0:	22c0      	movs	r2, #192	; 0xc0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f00a fd81 	bl	800d7dc <memset>
  if(uartHandle->Instance==UART4)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a73      	ldr	r2, [pc, #460]	; (8002eac <HAL_UART_MspInit+0x1f8>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d147      	bne.n	8002d74 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002ce4:	f04f 0202 	mov.w	r2, #2
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf6:	f107 0320 	add.w	r3, r7, #32
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f006 f952 	bl	8008fa4 <HAL_RCCEx_PeriphCLKConfig>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002d06:	f7ff f915 	bl	8001f34 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d0a:	4b69      	ldr	r3, [pc, #420]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d10:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002d12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002d16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d1a:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002d1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d28:	4b61      	ldr	r3, [pc, #388]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2e:	4a60      	ldr	r2, [pc, #384]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002d30:	f043 0304 	orr.w	r3, r3, #4
 8002d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d38:	4b5d      	ldr	r3, [pc, #372]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	61bb      	str	r3, [r7, #24]
 8002d44:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = RS422_TX_1_Pin|RS422_RX_1_Pin;
 8002d46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d60:	2308      	movs	r3, #8
 8002d62:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d66:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4851      	ldr	r0, [pc, #324]	; (8002eb4 <HAL_UART_MspInit+0x200>)
 8002d6e:	f004 fdfb 	bl	8007968 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 8002d72:	e097      	b.n	8002ea4 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==UART7)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a4f      	ldr	r2, [pc, #316]	; (8002eb8 <HAL_UART_MspInit+0x204>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d147      	bne.n	8002e0e <HAL_UART_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002d7e:	f04f 0202 	mov.w	r2, #2
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d90:	f107 0320 	add.w	r3, r7, #32
 8002d94:	4618      	mov	r0, r3
 8002d96:	f006 f905 	bl	8008fa4 <HAL_RCCEx_PeriphCLKConfig>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002da0:	f7ff f8c8 	bl	8001f34 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002da4:	4b42      	ldr	r3, [pc, #264]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002da6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002daa:	4a41      	ldr	r2, [pc, #260]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002dac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002db0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002db4:	4b3e      	ldr	r3, [pc, #248]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002db6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002dba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc8:	4a39      	ldr	r2, [pc, #228]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002dca:	f043 0310 	orr.w	r3, r3, #16
 8002dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dd2:	4b37      	ldr	r3, [pc, #220]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	613b      	str	r3, [r7, #16]
 8002dde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RS422_RX_2_Pin|RS422_TX_2_Pin;
 8002de0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002de4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002de8:	2302      	movs	r3, #2
 8002dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002dfa:	2307      	movs	r3, #7
 8002dfc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e00:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e04:	4619      	mov	r1, r3
 8002e06:	482d      	ldr	r0, [pc, #180]	; (8002ebc <HAL_UART_MspInit+0x208>)
 8002e08:	f004 fdae 	bl	8007968 <HAL_GPIO_Init>
}
 8002e0c:	e04a      	b.n	8002ea4 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==UART8)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2b      	ldr	r2, [pc, #172]	; (8002ec0 <HAL_UART_MspInit+0x20c>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d145      	bne.n	8002ea4 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002e18:	f04f 0202 	mov.w	r2, #2
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e2a:	f107 0320 	add.w	r3, r7, #32
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f006 f8b8 	bl	8008fa4 <HAL_RCCEx_PeriphCLKConfig>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d001      	beq.n	8002e3e <HAL_UART_MspInit+0x18a>
      Error_Handler();
 8002e3a:	f7ff f87b 	bl	8001f34 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002e40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e44:	4a1a      	ldr	r2, [pc, #104]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002e50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e62:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002e64:	f043 0310 	orr.w	r3, r3, #16
 8002e68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e6c:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <HAL_UART_MspInit+0x1fc>)
 8002e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e86:	2300      	movs	r3, #0
 8002e88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002e92:	2308      	movs	r3, #8
 8002e94:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4807      	ldr	r0, [pc, #28]	; (8002ebc <HAL_UART_MspInit+0x208>)
 8002ea0:	f004 fd62 	bl	8007968 <HAL_GPIO_Init>
}
 8002ea4:	bf00      	nop
 8002ea6:	37f8      	adds	r7, #248	; 0xf8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40004c00 	.word	0x40004c00
 8002eb0:	58024400 	.word	0x58024400
 8002eb4:	58020800 	.word	0x58020800
 8002eb8:	40007800 	.word	0x40007800
 8002ebc:	58021000 	.word	0x58021000
 8002ec0:	40007c00 	.word	0x40007c00

08002ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002efc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002ec8:	f7ff f9b8 	bl	800223c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ece:	490d      	ldr	r1, [pc, #52]	; (8002f04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ed0:	4a0d      	ldr	r2, [pc, #52]	; (8002f08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ed4:	e002      	b.n	8002edc <LoopCopyDataInit>

08002ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eda:	3304      	adds	r3, #4

08002edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ee0:	d3f9      	bcc.n	8002ed6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ee2:	4a0a      	ldr	r2, [pc, #40]	; (8002f0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ee4:	4c0a      	ldr	r4, [pc, #40]	; (8002f10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ee8:	e001      	b.n	8002eee <LoopFillZerobss>

08002eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eec:	3204      	adds	r2, #4

08002eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ef0:	d3fb      	bcc.n	8002eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ef2:	f00a fc7b 	bl	800d7ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ef6:	f7fe fdf1 	bl	8001adc <main>
  bx  lr
 8002efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002efc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002f00:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f04:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8002f08:	0800d904 	.word	0x0800d904
  ldr r2, =_sbss
 8002f0c:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8002f10:	24000960 	.word	0x24000960

08002f14 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f14:	e7fe      	b.n	8002f14 <ADC3_IRQHandler>
	...

08002f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f1e:	2003      	movs	r0, #3
 8002f20:	f001 fc72 	bl	8004808 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f24:	f005 fe68 	bl	8008bf8 <HAL_RCC_GetSysClockFreq>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <HAL_Init+0x68>)
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	0a1b      	lsrs	r3, r3, #8
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	4913      	ldr	r1, [pc, #76]	; (8002f84 <HAL_Init+0x6c>)
 8002f36:	5ccb      	ldrb	r3, [r1, r3]
 8002f38:	f003 031f 	and.w	r3, r3, #31
 8002f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f42:	4b0f      	ldr	r3, [pc, #60]	; (8002f80 <HAL_Init+0x68>)
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	f003 030f 	and.w	r3, r3, #15
 8002f4a:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <HAL_Init+0x6c>)
 8002f4c:	5cd3      	ldrb	r3, [r2, r3]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	4a0b      	ldr	r2, [pc, #44]	; (8002f88 <HAL_Init+0x70>)
 8002f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f5c:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <HAL_Init+0x74>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002f62:	200f      	movs	r0, #15
 8002f64:	f000 f814 	bl	8002f90 <HAL_InitTick>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e002      	b.n	8002f78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002f72:	f7ff f8e3 	bl	800213c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	58024400 	.word	0x58024400
 8002f84:	0800d8b4 	.word	0x0800d8b4
 8002f88:	24000004 	.word	0x24000004
 8002f8c:	24000000 	.word	0x24000000

08002f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f98:	4b15      	ldr	r3, [pc, #84]	; (8002ff0 <HAL_InitTick+0x60>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e021      	b.n	8002fe8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002fa4:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <HAL_InitTick+0x64>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_InitTick+0x60>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	4619      	mov	r1, r3
 8002fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 fc57 	bl	800486e <HAL_SYSTICK_Config>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e00e      	b.n	8002fe8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b0f      	cmp	r3, #15
 8002fce:	d80a      	bhi.n	8002fe6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	6879      	ldr	r1, [r7, #4]
 8002fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fd8:	f001 fc21 	bl	800481e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fdc:	4a06      	ldr	r2, [pc, #24]	; (8002ff8 <HAL_InitTick+0x68>)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	24000010 	.word	0x24000010
 8002ff4:	24000000 	.word	0x24000000
 8002ff8:	2400000c 	.word	0x2400000c

08002ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_IncTick+0x20>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	4b06      	ldr	r3, [pc, #24]	; (8003020 <HAL_IncTick+0x24>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4413      	add	r3, r2
 800300c:	4a04      	ldr	r2, [pc, #16]	; (8003020 <HAL_IncTick+0x24>)
 800300e:	6013      	str	r3, [r2, #0]
}
 8003010:	bf00      	nop
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	24000010 	.word	0x24000010
 8003020:	2400095c 	.word	0x2400095c

08003024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  return uwTick;
 8003028:	4b03      	ldr	r3, [pc, #12]	; (8003038 <HAL_GetTick+0x14>)
 800302a:	681b      	ldr	r3, [r3, #0]
}
 800302c:	4618      	mov	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	2400095c 	.word	0x2400095c

0800303c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <HAL_GetREVID+0x14>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	0c1b      	lsrs	r3, r3, #16
}
 8003046:	4618      	mov	r0, r3
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	5c001000 	.word	0x5c001000

08003054 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003064:	4904      	ldr	r1, [pc, #16]	; (8003078 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	58000400 	.word	0x58000400

0800307c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	609a      	str	r2, [r3, #8]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b087      	sub	sp, #28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	3360      	adds	r3, #96	; 0x60
 80030f6:	461a      	mov	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	430b      	orrs	r3, r1
 8003112:	431a      	orrs	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 031f 	and.w	r3, r3, #31
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	fa01 f303 	lsl.w	r3, r1, r3
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	611a      	str	r2, [r3, #16]
}
 800314a:	bf00      	nop
 800314c:	3714      	adds	r7, #20
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003156:	b480      	push	{r7}
 8003158:	b087      	sub	sp, #28
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	3360      	adds	r3, #96	; 0x60
 8003166:	461a      	mov	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4413      	add	r3, r2
 800316e:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	431a      	orrs	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	601a      	str	r2, [r3, #0]
  }
}
 8003180:	bf00      	nop
 8003182:	371c      	adds	r7, #28
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b087      	sub	sp, #28
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	3330      	adds	r3, #48	; 0x30
 80031c2:	461a      	mov	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	4413      	add	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	211f      	movs	r1, #31
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	401a      	ands	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	f003 011f 	and.w	r1, r3, #31
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	431a      	orrs	r2, r3
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 800320a:	b480      	push	{r7}
 800320c:	b083      	sub	sp, #12
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f023 0203 	bic.w	r2, r3, #3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	60da      	str	r2, [r3, #12]
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003230:	b480      	push	{r7}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3314      	adds	r3, #20
 8003240:	461a      	mov	r2, r3
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	0e5b      	lsrs	r3, r3, #25
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	4413      	add	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	0d1b      	lsrs	r3, r3, #20
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	2107      	movs	r1, #7
 800325e:	fa01 f303 	lsl.w	r3, r1, r3
 8003262:	43db      	mvns	r3, r3
 8003264:	401a      	ands	r2, r3
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	0d1b      	lsrs	r3, r3, #20
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	fa01 f303 	lsl.w	r3, r1, r3
 8003274:	431a      	orrs	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800327a:	bf00      	nop
 800327c:	371c      	adds	r7, #28
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032a0:	43db      	mvns	r3, r3
 80032a2:	401a      	ands	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f003 0318 	and.w	r3, r3, #24
 80032aa:	4908      	ldr	r1, [pc, #32]	; (80032cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80032ac:	40d9      	lsrs	r1, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	400b      	ands	r3, r1
 80032b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032b6:	431a      	orrs	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	000fffff 	.word	0x000fffff

080032d0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 031f 	and.w	r3, r3, #31
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689a      	ldr	r2, [r3, #8]
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <LL_ADC_DisableDeepPowerDown+0x20>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6093      	str	r3, [r2, #8]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	5fffffc0 	.word	0x5fffffc0

08003310 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003324:	d101      	bne.n	800332a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <LL_ADC_EnableInternalRegulator+0x24>)
 8003346:	4013      	ands	r3, r2
 8003348:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	6fffffc0 	.word	0x6fffffc0

08003360 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003374:	d101      	bne.n	800337a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003376:	2301      	movs	r3, #1
 8003378:	e000      	b.n	800337c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	4b05      	ldr	r3, [pc, #20]	; (80033ac <LL_ADC_Enable+0x24>)
 8003396:	4013      	ands	r3, r2
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	7fffffc0 	.word	0x7fffffc0

080033b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b083      	sub	sp, #12
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <LL_ADC_IsEnabled+0x18>
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <LL_ADC_IsEnabled+0x1a>
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
	...

080033d8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <LL_ADC_REG_StartConversion+0x24>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	f043 0204 	orr.w	r2, r3, #4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	7fffffc0 	.word	0x7fffffc0

08003400 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b04      	cmp	r3, #4
 8003412:	d101      	bne.n	8003418 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003414:	2301      	movs	r3, #1
 8003416:	e000      	b.n	800341a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003426:	b480      	push	{r7}
 8003428:	b083      	sub	sp, #12
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b08      	cmp	r3, #8
 8003438:	d101      	bne.n	800343e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800343a:	2301      	movs	r3, #1
 800343c:	e000      	b.n	8003440 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800344c:	b590      	push	{r4, r7, lr}
 800344e:	b089      	sub	sp, #36	; 0x24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003458:	2300      	movs	r3, #0
 800345a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e18f      	b.n	8003786 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd f9f1 	bl	800085c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff3f 	bl	8003310 <LL_ADC_IsDeepPowerDownEnabled>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d004      	beq.n	80034a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff25 	bl	80032ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff ff5a 	bl	8003360 <LL_ADC_IsInternalRegulatorEnabled>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d114      	bne.n	80034dc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ff3e 	bl	8003338 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034bc:	4b87      	ldr	r3, [pc, #540]	; (80036dc <HAL_ADC_Init+0x290>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	4a87      	ldr	r2, [pc, #540]	; (80036e0 <HAL_ADC_Init+0x294>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	3301      	adds	r3, #1
 80034cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034ce:	e002      	b.n	80034d6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f9      	bne.n	80034d0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff ff3d 	bl	8003360 <LL_ADC_IsInternalRegulatorEnabled>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10d      	bne.n	8003508 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f0:	f043 0210 	orr.w	r2, r3, #16
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	f043 0201 	orr.w	r2, r3, #1
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7ff ff77 	bl	8003400 <LL_ADC_REG_IsConversionOngoing>
 8003512:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 8129 	bne.w	8003774 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2b00      	cmp	r3, #0
 8003526:	f040 8125 	bne.w	8003774 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800352e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003532:	f043 0202 	orr.w	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff ff36 	bl	80033b0 <LL_ADC_IsEnabled>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d136      	bne.n	80035b8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a65      	ldr	r2, [pc, #404]	; (80036e4 <HAL_ADC_Init+0x298>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d004      	beq.n	800355e <HAL_ADC_Init+0x112>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <HAL_ADC_Init+0x29c>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d10e      	bne.n	800357c <HAL_ADC_Init+0x130>
 800355e:	4861      	ldr	r0, [pc, #388]	; (80036e4 <HAL_ADC_Init+0x298>)
 8003560:	f7ff ff26 	bl	80033b0 <LL_ADC_IsEnabled>
 8003564:	4604      	mov	r4, r0
 8003566:	4860      	ldr	r0, [pc, #384]	; (80036e8 <HAL_ADC_Init+0x29c>)
 8003568:	f7ff ff22 	bl	80033b0 <LL_ADC_IsEnabled>
 800356c:	4603      	mov	r3, r0
 800356e:	4323      	orrs	r3, r4
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	e008      	b.n	800358e <HAL_ADC_Init+0x142>
 800357c:	485b      	ldr	r0, [pc, #364]	; (80036ec <HAL_ADC_Init+0x2a0>)
 800357e:	f7ff ff17 	bl	80033b0 <LL_ADC_IsEnabled>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d012      	beq.n	80035b8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a53      	ldr	r2, [pc, #332]	; (80036e4 <HAL_ADC_Init+0x298>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <HAL_ADC_Init+0x15a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a51      	ldr	r2, [pc, #324]	; (80036e8 <HAL_ADC_Init+0x29c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d101      	bne.n	80035aa <HAL_ADC_Init+0x15e>
 80035a6:	4a52      	ldr	r2, [pc, #328]	; (80036f0 <HAL_ADC_Init+0x2a4>)
 80035a8:	e000      	b.n	80035ac <HAL_ADC_Init+0x160>
 80035aa:	4a52      	ldr	r2, [pc, #328]	; (80036f4 <HAL_ADC_Init+0x2a8>)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4619      	mov	r1, r3
 80035b2:	4610      	mov	r0, r2
 80035b4:	f7ff fd62 	bl	800307c <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80035b8:	f7ff fd40 	bl	800303c <HAL_GetREVID>
 80035bc:	4603      	mov	r3, r0
 80035be:	f241 0203 	movw	r2, #4099	; 0x1003
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d914      	bls.n	80035f0 <HAL_ADC_Init+0x1a4>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b10      	cmp	r3, #16
 80035cc:	d110      	bne.n	80035f0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7d5b      	ldrb	r3, [r3, #21]
 80035d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80035de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	7f1b      	ldrb	r3, [r3, #28]
 80035e4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80035e6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035e8:	f043 030c 	orr.w	r3, r3, #12
 80035ec:	61bb      	str	r3, [r7, #24]
 80035ee:	e00d      	b.n	800360c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	7d5b      	ldrb	r3, [r3, #21]
 80035f4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80035fa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003600:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7f1b      	ldrb	r3, [r3, #28]
 8003606:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	7f1b      	ldrb	r3, [r3, #28]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d106      	bne.n	8003622 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	3b01      	subs	r3, #1
 800361a:	045b      	lsls	r3, r3, #17
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d009      	beq.n	800363e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	4b2c      	ldr	r3, [pc, #176]	; (80036f8 <HAL_ADC_Init+0x2ac>)
 8003646:	4013      	ands	r3, r2
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6812      	ldr	r2, [r2, #0]
 800364c:	69b9      	ldr	r1, [r7, #24]
 800364e:	430b      	orrs	r3, r1
 8003650:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff fed2 	bl	8003400 <LL_ADC_REG_IsConversionOngoing>
 800365c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fedf 	bl	8003426 <LL_ADC_INJ_IsConversionOngoing>
 8003668:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d15f      	bne.n	8003730 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d15c      	bne.n	8003730 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7d1b      	ldrb	r3, [r3, #20]
 800367a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003680:	4313      	orrs	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	4b1c      	ldr	r3, [pc, #112]	; (80036fc <HAL_ADC_Init+0x2b0>)
 800368c:	4013      	ands	r3, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6812      	ldr	r2, [r2, #0]
 8003692:	69b9      	ldr	r1, [r7, #24]
 8003694:	430b      	orrs	r3, r1
 8003696:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d130      	bne.n	8003704 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	4b14      	ldr	r3, [pc, #80]	; (8003700 <HAL_ADC_Init+0x2b4>)
 80036b0:	4013      	ands	r3, r2
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036b6:	3a01      	subs	r2, #1
 80036b8:	0411      	lsls	r1, r2, #16
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80036be:	4311      	orrs	r1, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036c4:	4311      	orrs	r1, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80036ca:	430a      	orrs	r2, r1
 80036cc:	431a      	orrs	r2, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	611a      	str	r2, [r3, #16]
 80036d8:	e01c      	b.n	8003714 <HAL_ADC_Init+0x2c8>
 80036da:	bf00      	nop
 80036dc:	24000000 	.word	0x24000000
 80036e0:	053e2d63 	.word	0x053e2d63
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40022100 	.word	0x40022100
 80036ec:	58026000 	.word	0x58026000
 80036f0:	40022300 	.word	0x40022300
 80036f4:	58026300 	.word	0x58026300
 80036f8:	fff0c003 	.word	0xfff0c003
 80036fc:	ffffbffc 	.word	0xffffbffc
 8003700:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	691a      	ldr	r2, [r3, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	430a      	orrs	r2, r1
 8003728:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fd8c 	bl	8004248 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d10c      	bne.n	8003752 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f023 010f 	bic.w	r1, r3, #15
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	1e5a      	subs	r2, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
 8003750:	e007      	b.n	8003762 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 020f 	bic.w	r2, r2, #15
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	f043 0201 	orr.w	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	655a      	str	r2, [r3, #84]	; 0x54
 8003772:	e007      	b.n	8003784 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	f043 0210 	orr.w	r2, r3, #16
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003784:	7ffb      	ldrb	r3, [r7, #31]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd90      	pop	{r4, r7, pc}
 800378e:	bf00      	nop

08003790 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a55      	ldr	r2, [pc, #340]	; (80038f8 <HAL_ADC_Start_DMA+0x168>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d004      	beq.n	80037b0 <HAL_ADC_Start_DMA+0x20>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a54      	ldr	r2, [pc, #336]	; (80038fc <HAL_ADC_Start_DMA+0x16c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_ADC_Start_DMA+0x24>
 80037b0:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_ADC_Start_DMA+0x170>)
 80037b2:	e000      	b.n	80037b6 <HAL_ADC_Start_DMA+0x26>
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <HAL_ADC_Start_DMA+0x174>)
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fd8a 	bl	80032d0 <LL_ADC_GetMultimode>
 80037bc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fe1c 	bl	8003400 <LL_ADC_REG_IsConversionOngoing>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	f040 808c 	bne.w	80038e8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_ADC_Start_DMA+0x4e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e087      	b.n	80038ee <HAL_ADC_Start_DMA+0x15e>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d005      	beq.n	80037f8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d002      	beq.n	80037f8 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	2b09      	cmp	r3, #9
 80037f6:	d170      	bne.n	80038da <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fc07 	bl	800400c <ADC_Enable>
 80037fe:	4603      	mov	r3, r0
 8003800:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003802:	7dfb      	ldrb	r3, [r7, #23]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d163      	bne.n	80038d0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800380c:	4b3e      	ldr	r3, [pc, #248]	; (8003908 <HAL_ADC_Start_DMA+0x178>)
 800380e:	4013      	ands	r3, r2
 8003810:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a37      	ldr	r2, [pc, #220]	; (80038fc <HAL_ADC_Start_DMA+0x16c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d002      	beq.n	8003828 <HAL_ADC_Start_DMA+0x98>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	e000      	b.n	800382a <HAL_ADC_Start_DMA+0x9a>
 8003828:	4b33      	ldr	r3, [pc, #204]	; (80038f8 <HAL_ADC_Start_DMA+0x168>)
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	6812      	ldr	r2, [r2, #0]
 800382e:	4293      	cmp	r3, r2
 8003830:	d002      	beq.n	8003838 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003848:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d006      	beq.n	800385e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	f023 0206 	bic.w	r2, r3, #6
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	659a      	str	r2, [r3, #88]	; 0x58
 800385c:	e002      	b.n	8003864 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003868:	4a28      	ldr	r2, [pc, #160]	; (800390c <HAL_ADC_Start_DMA+0x17c>)
 800386a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003870:	4a27      	ldr	r2, [pc, #156]	; (8003910 <HAL_ADC_Start_DMA+0x180>)
 8003872:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003878:	4a26      	ldr	r2, [pc, #152]	; (8003914 <HAL_ADC_Start_DMA+0x184>)
 800387a:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	221c      	movs	r2, #28
 8003882:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0210 	orr.w	r2, r2, #16
 800389a:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	4619      	mov	r1, r3
 80038a6:	4610      	mov	r0, r2
 80038a8:	f7ff fcaf 	bl	800320a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3340      	adds	r3, #64	; 0x40
 80038b6:	4619      	mov	r1, r3
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f001 fb40 	bl	8004f40 <HAL_DMA_Start_IT>
 80038c0:	4603      	mov	r3, r0
 80038c2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7ff fd85 	bl	80033d8 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80038ce:	e00d      	b.n	80038ec <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80038d8:	e008      	b.n	80038ec <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80038e6:	e001      	b.n	80038ec <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
 80038ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	40022000 	.word	0x40022000
 80038fc:	40022100 	.word	0x40022100
 8003900:	40022300 	.word	0x40022300
 8003904:	58026300 	.word	0x58026300
 8003908:	fffff0fe 	.word	0xfffff0fe
 800390c:	08004121 	.word	0x08004121
 8003910:	080041f9 	.word	0x080041f9
 8003914:	08004215 	.word	0x08004215

08003918 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003954:	b590      	push	{r4, r7, lr}
 8003956:	b0a1      	sub	sp, #132	; 0x84
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800395e:	2300      	movs	r3, #0
 8003960:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	4a65      	ldr	r2, [pc, #404]	; (8003b04 <HAL_ADC_ConfigChannel+0x1b0>)
 800396e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_ADC_ConfigChannel+0x2a>
 800397a:	2302      	movs	r3, #2
 800397c:	e32e      	b.n	8003fdc <HAL_ADC_ConfigChannel+0x688>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff fd38 	bl	8003400 <LL_ADC_REG_IsConversionOngoing>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	f040 8313 	bne.w	8003fbe <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	db2c      	blt.n	80039fa <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d108      	bne.n	80039be <HAL_ADC_ConfigChannel+0x6a>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	0e9b      	lsrs	r3, r3, #26
 80039b2:	f003 031f 	and.w	r3, r3, #31
 80039b6:	2201      	movs	r2, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	e016      	b.n	80039ec <HAL_ADC_ConfigChannel+0x98>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039c6:	fa93 f3a3 	rbit	r3, r3
 80039ca:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80039cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80039ce:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80039d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80039d6:	2320      	movs	r3, #32
 80039d8:	e003      	b.n	80039e2 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80039da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039dc:	fab3 f383 	clz	r3, r3
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	f003 031f 	and.w	r3, r3, #31
 80039e6:	2201      	movs	r2, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	69d1      	ldr	r1, [r2, #28]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	6812      	ldr	r2, [r2, #0]
 80039f6:	430b      	orrs	r3, r1
 80039f8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6818      	ldr	r0, [r3, #0]
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6859      	ldr	r1, [r3, #4]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	461a      	mov	r2, r3
 8003a08:	f7ff fbd3 	bl	80031b2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fcf5 	bl	8003400 <LL_ADC_REG_IsConversionOngoing>
 8003a16:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fd02 	bl	8003426 <LL_ADC_INJ_IsConversionOngoing>
 8003a22:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f040 80b8 	bne.w	8003b9c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f040 80b4 	bne.w	8003b9c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6818      	ldr	r0, [r3, #0]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	6819      	ldr	r1, [r3, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	461a      	mov	r2, r3
 8003a42:	f7ff fbf5 	bl	8003230 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003a46:	4b30      	ldr	r3, [pc, #192]	; (8003b08 <HAL_ADC_ConfigChannel+0x1b4>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003a4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a52:	d10b      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x118>
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	695a      	ldr	r2, [r3, #20]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	e01d      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x154>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x13e>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	089b      	lsrs	r3, r3, #2
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	e00a      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x154>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	695a      	ldr	r2, [r3, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	f003 0304 	and.w	r3, r3, #4
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	d02c      	beq.n	8003b0c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6818      	ldr	r0, [r3, #0]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	6919      	ldr	r1, [r3, #16]
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ac0:	f7ff fb10 	bl	80030e4 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6818      	ldr	r0, [r3, #0]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	6919      	ldr	r1, [r3, #16]
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	7e5b      	ldrb	r3, [r3, #25]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d102      	bne.n	8003ada <HAL_ADC_ConfigChannel+0x186>
 8003ad4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ad8:	e000      	b.n	8003adc <HAL_ADC_ConfigChannel+0x188>
 8003ada:	2300      	movs	r3, #0
 8003adc:	461a      	mov	r2, r3
 8003ade:	f7ff fb3a 	bl	8003156 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6818      	ldr	r0, [r3, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	6919      	ldr	r1, [r3, #16]
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	7e1b      	ldrb	r3, [r3, #24]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d102      	bne.n	8003af8 <HAL_ADC_ConfigChannel+0x1a4>
 8003af2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003af6:	e000      	b.n	8003afa <HAL_ADC_ConfigChannel+0x1a6>
 8003af8:	2300      	movs	r3, #0
 8003afa:	461a      	mov	r2, r3
 8003afc:	f7ff fb12 	bl	8003124 <LL_ADC_SetDataRightShift>
 8003b00:	e04c      	b.n	8003b9c <HAL_ADC_ConfigChannel+0x248>
 8003b02:	bf00      	nop
 8003b04:	47ff0000 	.word	0x47ff0000
 8003b08:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	069b      	lsls	r3, r3, #26
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d107      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b2e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	069b      	lsls	r3, r3, #26
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d107      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b52:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	069b      	lsls	r3, r3, #26
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d107      	bne.n	8003b78 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b76:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	069b      	lsls	r3, r3, #26
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d107      	bne.n	8003b9c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003b9a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7ff fc05 	bl	80033b0 <LL_ADC_IsEnabled>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f040 8211 	bne.w	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6818      	ldr	r0, [r3, #0]
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6819      	ldr	r1, [r3, #0]
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f7ff fb64 	bl	8003288 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4aa1      	ldr	r2, [pc, #644]	; (8003e4c <HAL_ADC_ConfigChannel+0x4f8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	f040 812e 	bne.w	8003e28 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10b      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x2a0>
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	0e9b      	lsrs	r3, r3, #26
 8003be2:	3301      	adds	r3, #1
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	2b09      	cmp	r3, #9
 8003bea:	bf94      	ite	ls
 8003bec:	2301      	movls	r3, #1
 8003bee:	2300      	movhi	r3, #0
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	e019      	b.n	8003c28 <HAL_ADC_ConfigChannel+0x2d4>
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bfc:	fa93 f3a3 	rbit	r3, r3
 8003c00:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c04:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d101      	bne.n	8003c10 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003c0c:	2320      	movs	r3, #32
 8003c0e:	e003      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	3301      	adds	r3, #1
 8003c1a:	f003 031f 	and.w	r3, r3, #31
 8003c1e:	2b09      	cmp	r3, #9
 8003c20:	bf94      	ite	ls
 8003c22:	2301      	movls	r3, #1
 8003c24:	2300      	movhi	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d079      	beq.n	8003d20 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d107      	bne.n	8003c48 <HAL_ADC_ConfigChannel+0x2f4>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	0e9b      	lsrs	r3, r3, #26
 8003c3e:	3301      	adds	r3, #1
 8003c40:	069b      	lsls	r3, r3, #26
 8003c42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c46:	e015      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x320>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c50:	fa93 f3a3 	rbit	r3, r3
 8003c54:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c58:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003c5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003c60:	2320      	movs	r3, #32
 8003c62:	e003      	b.n	8003c6c <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	069b      	lsls	r3, r3, #26
 8003c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d109      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x340>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	0e9b      	lsrs	r3, r3, #26
 8003c86:	3301      	adds	r3, #1
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	e017      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x370>
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9c:	fa93 f3a3 	rbit	r3, r3
 8003ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ca4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003cac:	2320      	movs	r3, #32
 8003cae:	e003      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb2:	fab3 f383 	clz	r3, r3
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	3301      	adds	r3, #1
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	ea42 0103 	orr.w	r1, r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x396>
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	0e9b      	lsrs	r3, r3, #26
 8003cda:	3301      	adds	r3, #1
 8003cdc:	f003 021f 	and.w	r2, r3, #31
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	4413      	add	r3, r2
 8003ce6:	051b      	lsls	r3, r3, #20
 8003ce8:	e018      	b.n	8003d1c <HAL_ADC_ConfigChannel+0x3c8>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cf2:	fa93 f3a3 	rbit	r3, r3
 8003cf6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003d02:	2320      	movs	r3, #32
 8003d04:	e003      	b.n	8003d0e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d08:	fab3 f383 	clz	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	f003 021f 	and.w	r2, r3, #31
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	e07e      	b.n	8003e1e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d107      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0x3e8>
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	0e9b      	lsrs	r3, r3, #26
 8003d32:	3301      	adds	r3, #1
 8003d34:	069b      	lsls	r3, r3, #26
 8003d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d3a:	e015      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x414>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d44:	fa93 f3a3 	rbit	r3, r3
 8003d48:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003d54:	2320      	movs	r3, #32
 8003d56:	e003      	b.n	8003d60 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	3301      	adds	r3, #1
 8003d62:	069b      	lsls	r3, r3, #26
 8003d64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d109      	bne.n	8003d88 <HAL_ADC_ConfigChannel+0x434>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	0e9b      	lsrs	r3, r3, #26
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	2101      	movs	r1, #1
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	e017      	b.n	8003db8 <HAL_ADC_ConfigChannel+0x464>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	61bb      	str	r3, [r7, #24]
  return result;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d101      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003da0:	2320      	movs	r3, #32
 8003da2:	e003      	b.n	8003dac <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	fab3 f383 	clz	r3, r3
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	3301      	adds	r3, #1
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	2101      	movs	r1, #1
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	ea42 0103 	orr.w	r1, r2, r3
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10d      	bne.n	8003de4 <HAL_ADC_ConfigChannel+0x490>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	0e9b      	lsrs	r3, r3, #26
 8003dce:	3301      	adds	r3, #1
 8003dd0:	f003 021f 	and.w	r2, r3, #31
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4413      	add	r3, r2
 8003dda:	3b1e      	subs	r3, #30
 8003ddc:	051b      	lsls	r3, r3, #20
 8003dde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003de2:	e01b      	b.n	8003e1c <HAL_ADC_ConfigChannel+0x4c8>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	fa93 f3a3 	rbit	r3, r3
 8003df0:	60fb      	str	r3, [r7, #12]
  return result;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8003dfc:	2320      	movs	r3, #32
 8003dfe:	e003      	b.n	8003e08 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	fab3 f383 	clz	r3, r3
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	3301      	adds	r3, #1
 8003e0a:	f003 021f 	and.w	r2, r3, #31
 8003e0e:	4613      	mov	r3, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	4413      	add	r3, r2
 8003e14:	3b1e      	subs	r3, #30
 8003e16:	051b      	lsls	r3, r3, #20
 8003e18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e1c:	430b      	orrs	r3, r1
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	6892      	ldr	r2, [r2, #8]
 8003e22:	4619      	mov	r1, r3
 8003e24:	f7ff fa04 	bl	8003230 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f280 80cf 	bge.w	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a06      	ldr	r2, [pc, #24]	; (8003e50 <HAL_ADC_ConfigChannel+0x4fc>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d004      	beq.n	8003e46 <HAL_ADC_ConfigChannel+0x4f2>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a04      	ldr	r2, [pc, #16]	; (8003e54 <HAL_ADC_ConfigChannel+0x500>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d10a      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x508>
 8003e46:	4b04      	ldr	r3, [pc, #16]	; (8003e58 <HAL_ADC_ConfigChannel+0x504>)
 8003e48:	e009      	b.n	8003e5e <HAL_ADC_ConfigChannel+0x50a>
 8003e4a:	bf00      	nop
 8003e4c:	47ff0000 	.word	0x47ff0000
 8003e50:	40022000 	.word	0x40022000
 8003e54:	40022100 	.word	0x40022100
 8003e58:	40022300 	.word	0x40022300
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_ADC_ConfigChannel+0x690>)
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7ff f932 	bl	80030c8 <LL_ADC_GetCommonPathInternalCh>
 8003e64:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a5f      	ldr	r2, [pc, #380]	; (8003fe8 <HAL_ADC_ConfigChannel+0x694>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d004      	beq.n	8003e7a <HAL_ADC_ConfigChannel+0x526>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a5d      	ldr	r2, [pc, #372]	; (8003fec <HAL_ADC_ConfigChannel+0x698>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d10e      	bne.n	8003e98 <HAL_ADC_ConfigChannel+0x544>
 8003e7a:	485b      	ldr	r0, [pc, #364]	; (8003fe8 <HAL_ADC_ConfigChannel+0x694>)
 8003e7c:	f7ff fa98 	bl	80033b0 <LL_ADC_IsEnabled>
 8003e80:	4604      	mov	r4, r0
 8003e82:	485a      	ldr	r0, [pc, #360]	; (8003fec <HAL_ADC_ConfigChannel+0x698>)
 8003e84:	f7ff fa94 	bl	80033b0 <LL_ADC_IsEnabled>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4323      	orrs	r3, r4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	bf0c      	ite	eq
 8003e90:	2301      	moveq	r3, #1
 8003e92:	2300      	movne	r3, #0
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	e008      	b.n	8003eaa <HAL_ADC_ConfigChannel+0x556>
 8003e98:	4855      	ldr	r0, [pc, #340]	; (8003ff0 <HAL_ADC_ConfigChannel+0x69c>)
 8003e9a:	f7ff fa89 	bl	80033b0 <LL_ADC_IsEnabled>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d07d      	beq.n	8003faa <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a50      	ldr	r2, [pc, #320]	; (8003ff4 <HAL_ADC_ConfigChannel+0x6a0>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d130      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x5c6>
 8003eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d12b      	bne.n	8003f1a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a4a      	ldr	r2, [pc, #296]	; (8003ff0 <HAL_ADC_ConfigChannel+0x69c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	f040 8081 	bne.w	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a45      	ldr	r2, [pc, #276]	; (8003fe8 <HAL_ADC_ConfigChannel+0x694>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_ADC_ConfigChannel+0x58e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a43      	ldr	r2, [pc, #268]	; (8003fec <HAL_ADC_ConfigChannel+0x698>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x592>
 8003ee2:	4a45      	ldr	r2, [pc, #276]	; (8003ff8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003ee4:	e000      	b.n	8003ee8 <HAL_ADC_ConfigChannel+0x594>
 8003ee6:	4a3f      	ldr	r2, [pc, #252]	; (8003fe4 <HAL_ADC_ConfigChannel+0x690>)
 8003ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4610      	mov	r0, r2
 8003ef2:	f7ff f8d6 	bl	80030a2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ef6:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <HAL_ADC_ConfigChannel+0x6a8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	099b      	lsrs	r3, r3, #6
 8003efc:	4a40      	ldr	r2, [pc, #256]	; (8004000 <HAL_ADC_ConfigChannel+0x6ac>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	099b      	lsrs	r3, r3, #6
 8003f04:	3301      	adds	r3, #1
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003f0a:	e002      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f9      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f18:	e05a      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a39      	ldr	r2, [pc, #228]	; (8004004 <HAL_ADC_ConfigChannel+0x6b0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d11e      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x60e>
 8003f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d119      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2f      	ldr	r2, [pc, #188]	; (8003ff0 <HAL_ADC_ConfigChannel+0x69c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d14b      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2a      	ldr	r2, [pc, #168]	; (8003fe8 <HAL_ADC_ConfigChannel+0x694>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d004      	beq.n	8003f4c <HAL_ADC_ConfigChannel+0x5f8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a29      	ldr	r2, [pc, #164]	; (8003fec <HAL_ADC_ConfigChannel+0x698>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d101      	bne.n	8003f50 <HAL_ADC_ConfigChannel+0x5fc>
 8003f4c:	4a2a      	ldr	r2, [pc, #168]	; (8003ff8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003f4e:	e000      	b.n	8003f52 <HAL_ADC_ConfigChannel+0x5fe>
 8003f50:	4a24      	ldr	r2, [pc, #144]	; (8003fe4 <HAL_ADC_ConfigChannel+0x690>)
 8003f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f58:	4619      	mov	r1, r3
 8003f5a:	4610      	mov	r0, r2
 8003f5c:	f7ff f8a1 	bl	80030a2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f60:	e036      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a28      	ldr	r2, [pc, #160]	; (8004008 <HAL_ADC_ConfigChannel+0x6b4>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d131      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
 8003f6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d12c      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1d      	ldr	r2, [pc, #116]	; (8003ff0 <HAL_ADC_ConfigChannel+0x69c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d127      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_ADC_ConfigChannel+0x694>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d004      	beq.n	8003f94 <HAL_ADC_ConfigChannel+0x640>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a17      	ldr	r2, [pc, #92]	; (8003fec <HAL_ADC_ConfigChannel+0x698>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d101      	bne.n	8003f98 <HAL_ADC_ConfigChannel+0x644>
 8003f94:	4a18      	ldr	r2, [pc, #96]	; (8003ff8 <HAL_ADC_ConfigChannel+0x6a4>)
 8003f96:	e000      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x646>
 8003f98:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <HAL_ADC_ConfigChannel+0x690>)
 8003f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f7ff f87d 	bl	80030a2 <LL_ADC_SetCommonPathInternalCh>
 8003fa8:	e012      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fae:	f043 0220 	orr.w	r2, r3, #32
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003fbc:	e008      	b.n	8003fd0 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	f043 0220 	orr.w	r2, r3, #32
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fd8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3784      	adds	r7, #132	; 0x84
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd90      	pop	{r4, r7, pc}
 8003fe4:	58026300 	.word	0x58026300
 8003fe8:	40022000 	.word	0x40022000
 8003fec:	40022100 	.word	0x40022100
 8003ff0:	58026000 	.word	0x58026000
 8003ff4:	cb840000 	.word	0xcb840000
 8003ff8:	40022300 	.word	0x40022300
 8003ffc:	24000000 	.word	0x24000000
 8004000:	053e2d63 	.word	0x053e2d63
 8004004:	c7520000 	.word	0xc7520000
 8004008:	cfb80000 	.word	0xcfb80000

0800400c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff f9c9 	bl	80033b0 <LL_ADC_IsEnabled>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d16e      	bne.n	8004102 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	4b38      	ldr	r3, [pc, #224]	; (800410c <ADC_Enable+0x100>)
 800402c:	4013      	ands	r3, r2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004036:	f043 0210 	orr.w	r2, r3, #16
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004042:	f043 0201 	orr.w	r2, r3, #1
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e05a      	b.n	8004104 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff f998 	bl	8003388 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004058:	f7fe ffe4 	bl	8003024 <HAL_GetTick>
 800405c:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2b      	ldr	r2, [pc, #172]	; (8004110 <ADC_Enable+0x104>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <ADC_Enable+0x66>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a29      	ldr	r2, [pc, #164]	; (8004114 <ADC_Enable+0x108>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <ADC_Enable+0x6a>
 8004072:	4b29      	ldr	r3, [pc, #164]	; (8004118 <ADC_Enable+0x10c>)
 8004074:	e000      	b.n	8004078 <ADC_Enable+0x6c>
 8004076:	4b29      	ldr	r3, [pc, #164]	; (800411c <ADC_Enable+0x110>)
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff f929 	bl	80032d0 <LL_ADC_GetMultimode>
 800407e:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a23      	ldr	r2, [pc, #140]	; (8004114 <ADC_Enable+0x108>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d002      	beq.n	8004090 <ADC_Enable+0x84>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	e000      	b.n	8004092 <ADC_Enable+0x86>
 8004090:	4b1f      	ldr	r3, [pc, #124]	; (8004110 <ADC_Enable+0x104>)
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6812      	ldr	r2, [r2, #0]
 8004096:	4293      	cmp	r3, r2
 8004098:	d02c      	beq.n	80040f4 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d130      	bne.n	8004102 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040a0:	e028      	b.n	80040f4 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff f982 	bl	80033b0 <LL_ADC_IsEnabled>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d104      	bne.n	80040bc <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7ff f966 	bl	8003388 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040bc:	f7fe ffb2 	bl	8003024 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d914      	bls.n	80040f4 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d00d      	beq.n	80040f4 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040dc:	f043 0210 	orr.w	r2, r3, #16
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	f043 0201 	orr.w	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e007      	b.n	8004104 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0301 	and.w	r3, r3, #1
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d1cf      	bne.n	80040a2 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	8000003f 	.word	0x8000003f
 8004110:	40022000 	.word	0x40022000
 8004114:	40022100 	.word	0x40022100
 8004118:	40022300 	.word	0x40022300
 800411c:	58026300 	.word	0x58026300

08004120 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004132:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004136:	2b00      	cmp	r3, #0
 8004138:	d14b      	bne.n	80041d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d021      	beq.n	8004198 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f7ff f817 	bl	800318c <LL_ADC_REG_IsTriggerSourceSWStart>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d032      	beq.n	80041ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d12b      	bne.n	80041ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d11f      	bne.n	80041ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800418e:	f043 0201 	orr.w	r2, r3, #1
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	655a      	str	r2, [r3, #84]	; 0x54
 8004196:	e018      	b.n	80041ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d111      	bne.n	80041ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d105      	bne.n	80041ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff fba4 	bl	8003918 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041d0:	e00e      	b.n	80041f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d003      	beq.n	80041e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff fbae 	bl	8003940 <HAL_ADC_ErrorCallback>
}
 80041e4:	e004      	b.n	80041f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4798      	blx	r3
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff fb90 	bl	800392c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800420c:	bf00      	nop
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004226:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	f043 0204 	orr.w	r2, r3, #4
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f7ff fb80 	bl	8003940 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a7a      	ldr	r2, [pc, #488]	; (8004440 <ADC_ConfigureBoostMode+0x1f8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d004      	beq.n	8004264 <ADC_ConfigureBoostMode+0x1c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a79      	ldr	r2, [pc, #484]	; (8004444 <ADC_ConfigureBoostMode+0x1fc>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d109      	bne.n	8004278 <ADC_ConfigureBoostMode+0x30>
 8004264:	4b78      	ldr	r3, [pc, #480]	; (8004448 <ADC_ConfigureBoostMode+0x200>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf14      	ite	ne
 8004270:	2301      	movne	r3, #1
 8004272:	2300      	moveq	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e008      	b.n	800428a <ADC_ConfigureBoostMode+0x42>
 8004278:	4b74      	ldr	r3, [pc, #464]	; (800444c <ADC_ConfigureBoostMode+0x204>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf14      	ite	ne
 8004284:	2301      	movne	r3, #1
 8004286:	2300      	moveq	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d01c      	beq.n	80042c8 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800428e:	f004 fe2d 	bl	8008eec <HAL_RCC_GetHCLKFreq>
 8004292:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800429c:	d010      	beq.n	80042c0 <ADC_ConfigureBoostMode+0x78>
 800429e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80042a2:	d873      	bhi.n	800438c <ADC_ConfigureBoostMode+0x144>
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a8:	d002      	beq.n	80042b0 <ADC_ConfigureBoostMode+0x68>
 80042aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80042ae:	d16d      	bne.n	800438c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	0c1b      	lsrs	r3, r3, #16
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042bc:	60fb      	str	r3, [r7, #12]
        break;
 80042be:	e068      	b.n	8004392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	089b      	lsrs	r3, r3, #2
 80042c4:	60fb      	str	r3, [r7, #12]
        break;
 80042c6:	e064      	b.n	8004392 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80042c8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80042cc:	f04f 0100 	mov.w	r1, #0
 80042d0:	f006 f872 	bl	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq>
 80042d4:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80042de:	d051      	beq.n	8004384 <ADC_ConfigureBoostMode+0x13c>
 80042e0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80042e4:	d854      	bhi.n	8004390 <ADC_ConfigureBoostMode+0x148>
 80042e6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80042ea:	d047      	beq.n	800437c <ADC_ConfigureBoostMode+0x134>
 80042ec:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80042f0:	d84e      	bhi.n	8004390 <ADC_ConfigureBoostMode+0x148>
 80042f2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80042f6:	d03d      	beq.n	8004374 <ADC_ConfigureBoostMode+0x12c>
 80042f8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80042fc:	d848      	bhi.n	8004390 <ADC_ConfigureBoostMode+0x148>
 80042fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004302:	d033      	beq.n	800436c <ADC_ConfigureBoostMode+0x124>
 8004304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004308:	d842      	bhi.n	8004390 <ADC_ConfigureBoostMode+0x148>
 800430a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800430e:	d029      	beq.n	8004364 <ADC_ConfigureBoostMode+0x11c>
 8004310:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004314:	d83c      	bhi.n	8004390 <ADC_ConfigureBoostMode+0x148>
 8004316:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800431a:	d01a      	beq.n	8004352 <ADC_ConfigureBoostMode+0x10a>
 800431c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004320:	d836      	bhi.n	8004390 <ADC_ConfigureBoostMode+0x148>
 8004322:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004326:	d014      	beq.n	8004352 <ADC_ConfigureBoostMode+0x10a>
 8004328:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800432c:	d830      	bhi.n	8004390 <ADC_ConfigureBoostMode+0x148>
 800432e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004332:	d00e      	beq.n	8004352 <ADC_ConfigureBoostMode+0x10a>
 8004334:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004338:	d82a      	bhi.n	8004390 <ADC_ConfigureBoostMode+0x148>
 800433a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800433e:	d008      	beq.n	8004352 <ADC_ConfigureBoostMode+0x10a>
 8004340:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004344:	d824      	bhi.n	8004390 <ADC_ConfigureBoostMode+0x148>
 8004346:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800434a:	d002      	beq.n	8004352 <ADC_ConfigureBoostMode+0x10a>
 800434c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004350:	d11e      	bne.n	8004390 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	0c9b      	lsrs	r3, r3, #18
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	60fb      	str	r3, [r7, #12]
        break;
 8004362:	e016      	b.n	8004392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	60fb      	str	r3, [r7, #12]
        break;
 800436a:	e012      	b.n	8004392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	60fb      	str	r3, [r7, #12]
        break;
 8004372:	e00e      	b.n	8004392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	60fb      	str	r3, [r7, #12]
        break;
 800437a:	e00a      	b.n	8004392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	09db      	lsrs	r3, r3, #7
 8004380:	60fb      	str	r3, [r7, #12]
        break;
 8004382:	e006      	b.n	8004392 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	0a1b      	lsrs	r3, r3, #8
 8004388:	60fb      	str	r3, [r7, #12]
        break;
 800438a:	e002      	b.n	8004392 <ADC_ConfigureBoostMode+0x14a>
        break;
 800438c:	bf00      	nop
 800438e:	e000      	b.n	8004392 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004390:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004392:	f7fe fe53 	bl	800303c <HAL_GetREVID>
 8004396:	4603      	mov	r3, r0
 8004398:	f241 0203 	movw	r2, #4099	; 0x1003
 800439c:	4293      	cmp	r3, r2
 800439e:	d815      	bhi.n	80043cc <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a2b      	ldr	r2, [pc, #172]	; (8004450 <ADC_ConfigureBoostMode+0x208>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d908      	bls.n	80043ba <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80043b8:	e03e      	b.n	8004438 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	e035      	b.n	8004438 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	085b      	lsrs	r3, r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <ADC_ConfigureBoostMode+0x20c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d808      	bhi.n	80043ec <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80043e8:	609a      	str	r2, [r3, #8]
}
 80043ea:	e025      	b.n	8004438 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	4a1a      	ldr	r2, [pc, #104]	; (8004458 <ADC_ConfigureBoostMode+0x210>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d80a      	bhi.n	800440a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004406:	609a      	str	r2, [r3, #8]
}
 8004408:	e016      	b.n	8004438 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	4a13      	ldr	r2, [pc, #76]	; (800445c <ADC_ConfigureBoostMode+0x214>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d80a      	bhi.n	8004428 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004424:	609a      	str	r2, [r3, #8]
}
 8004426:	e007      	b.n	8004438 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004436:	609a      	str	r2, [r3, #8]
}
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40022000 	.word	0x40022000
 8004444:	40022100 	.word	0x40022100
 8004448:	40022300 	.word	0x40022300
 800444c:	58026300 	.word	0x58026300
 8004450:	01312d00 	.word	0x01312d00
 8004454:	005f5e10 	.word	0x005f5e10
 8004458:	00bebc20 	.word	0x00bebc20
 800445c:	017d7840 	.word	0x017d7840

08004460 <LL_ADC_IsEnabled>:
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <LL_ADC_IsEnabled+0x18>
 8004474:	2301      	movs	r3, #1
 8004476:	e000      	b.n	800447a <LL_ADC_IsEnabled+0x1a>
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <LL_ADC_REG_IsConversionOngoing>:
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	f003 0304 	and.w	r3, r3, #4
 8004496:	2b04      	cmp	r3, #4
 8004498:	d101      	bne.n	800449e <LL_ADC_REG_IsConversionOngoing+0x18>
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80044ac:	b590      	push	{r4, r7, lr}
 80044ae:	b09f      	sub	sp, #124	; 0x7c
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044c6:	2302      	movs	r3, #2
 80044c8:	e0be      	b.n	8004648 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80044d2:	2300      	movs	r3, #0
 80044d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80044d6:	2300      	movs	r3, #0
 80044d8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a5c      	ldr	r2, [pc, #368]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d102      	bne.n	80044ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044e4:	4b5b      	ldr	r3, [pc, #364]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	e001      	b.n	80044ee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f8:	f043 0220 	orr.w	r2, r3, #32
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e09d      	b.n	8004648 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff ffb9 	bl	8004486 <LL_ADC_REG_IsConversionOngoing>
 8004514:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ffb3 	bl	8004486 <LL_ADC_REG_IsConversionOngoing>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d17f      	bne.n	8004626 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004528:	2b00      	cmp	r3, #0
 800452a:	d17c      	bne.n	8004626 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a47      	ldr	r2, [pc, #284]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d004      	beq.n	8004540 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a46      	ldr	r2, [pc, #280]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d101      	bne.n	8004544 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004540:	4b45      	ldr	r3, [pc, #276]	; (8004658 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004542:	e000      	b.n	8004546 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004544:	4b45      	ldr	r3, [pc, #276]	; (800465c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004546:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d039      	beq.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	431a      	orrs	r2, r3
 800455e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004560:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a3a      	ldr	r2, [pc, #232]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d004      	beq.n	8004576 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a38      	ldr	r2, [pc, #224]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d10e      	bne.n	8004594 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004576:	4836      	ldr	r0, [pc, #216]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004578:	f7ff ff72 	bl	8004460 <LL_ADC_IsEnabled>
 800457c:	4604      	mov	r4, r0
 800457e:	4835      	ldr	r0, [pc, #212]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004580:	f7ff ff6e 	bl	8004460 <LL_ADC_IsEnabled>
 8004584:	4603      	mov	r3, r0
 8004586:	4323      	orrs	r3, r4
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	e008      	b.n	80045a6 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8004594:	4832      	ldr	r0, [pc, #200]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004596:	f7ff ff63 	bl	8004460 <LL_ADC_IsEnabled>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d047      	beq.n	800463a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	4b2d      	ldr	r3, [pc, #180]	; (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80045b0:	4013      	ands	r3, r2
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	6811      	ldr	r1, [r2, #0]
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	6892      	ldr	r2, [r2, #8]
 80045ba:	430a      	orrs	r2, r1
 80045bc:	431a      	orrs	r2, r3
 80045be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c0:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045c2:	e03a      	b.n	800463a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80045c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80045cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ce:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d10e      	bne.n	8004602 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80045e4:	481a      	ldr	r0, [pc, #104]	; (8004650 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80045e6:	f7ff ff3b 	bl	8004460 <LL_ADC_IsEnabled>
 80045ea:	4604      	mov	r4, r0
 80045ec:	4819      	ldr	r0, [pc, #100]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80045ee:	f7ff ff37 	bl	8004460 <LL_ADC_IsEnabled>
 80045f2:	4603      	mov	r3, r0
 80045f4:	4323      	orrs	r3, r4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf0c      	ite	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	2300      	movne	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	e008      	b.n	8004614 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004602:	4817      	ldr	r0, [pc, #92]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004604:	f7ff ff2c 	bl	8004460 <LL_ADC_IsEnabled>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	bf0c      	ite	eq
 800460e:	2301      	moveq	r3, #1
 8004610:	2300      	movne	r3, #0
 8004612:	b2db      	uxtb	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d010      	beq.n	800463a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	4b11      	ldr	r3, [pc, #68]	; (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800461e:	4013      	ands	r3, r2
 8004620:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004622:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004624:	e009      	b.n	800463a <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004638:	e000      	b.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800463a:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004644:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004648:	4618      	mov	r0, r3
 800464a:	377c      	adds	r7, #124	; 0x7c
 800464c:	46bd      	mov	sp, r7
 800464e:	bd90      	pop	{r4, r7, pc}
 8004650:	40022000 	.word	0x40022000
 8004654:	40022100 	.word	0x40022100
 8004658:	40022300 	.word	0x40022300
 800465c:	58026300 	.word	0x58026300
 8004660:	58026000 	.word	0x58026000
 8004664:	fffff0e0 	.word	0xfffff0e0

08004668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f003 0307 	and.w	r3, r3, #7
 8004676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004678:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <__NVIC_SetPriorityGrouping+0x40>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004684:	4013      	ands	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004690:	4b06      	ldr	r3, [pc, #24]	; (80046ac <__NVIC_SetPriorityGrouping+0x44>)
 8004692:	4313      	orrs	r3, r2
 8004694:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004696:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <__NVIC_SetPriorityGrouping+0x40>)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	60d3      	str	r3, [r2, #12]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	e000ed00 	.word	0xe000ed00
 80046ac:	05fa0000 	.word	0x05fa0000

080046b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b4:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <__NVIC_GetPriorityGrouping+0x18>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	0a1b      	lsrs	r3, r3, #8
 80046ba:	f003 0307 	and.w	r3, r3, #7
}
 80046be:	4618      	mov	r0, r3
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80046d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	db0b      	blt.n	80046f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	f003 021f 	and.w	r2, r3, #31
 80046e4:	4907      	ldr	r1, [pc, #28]	; (8004704 <__NVIC_EnableIRQ+0x38>)
 80046e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	2001      	movs	r0, #1
 80046ee:	fa00 f202 	lsl.w	r2, r0, r2
 80046f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	e000e100 	.word	0xe000e100

08004708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	6039      	str	r1, [r7, #0]
 8004712:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004714:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004718:	2b00      	cmp	r3, #0
 800471a:	db0a      	blt.n	8004732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	b2da      	uxtb	r2, r3
 8004720:	490c      	ldr	r1, [pc, #48]	; (8004754 <__NVIC_SetPriority+0x4c>)
 8004722:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004726:	0112      	lsls	r2, r2, #4
 8004728:	b2d2      	uxtb	r2, r2
 800472a:	440b      	add	r3, r1
 800472c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004730:	e00a      	b.n	8004748 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	b2da      	uxtb	r2, r3
 8004736:	4908      	ldr	r1, [pc, #32]	; (8004758 <__NVIC_SetPriority+0x50>)
 8004738:	88fb      	ldrh	r3, [r7, #6]
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	3b04      	subs	r3, #4
 8004740:	0112      	lsls	r2, r2, #4
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	440b      	add	r3, r1
 8004746:	761a      	strb	r2, [r3, #24]
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	e000e100 	.word	0xe000e100
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f003 0307 	and.w	r3, r3, #7
 800476e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f1c3 0307 	rsb	r3, r3, #7
 8004776:	2b04      	cmp	r3, #4
 8004778:	bf28      	it	cs
 800477a:	2304      	movcs	r3, #4
 800477c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3304      	adds	r3, #4
 8004782:	2b06      	cmp	r3, #6
 8004784:	d902      	bls.n	800478c <NVIC_EncodePriority+0x30>
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	3b03      	subs	r3, #3
 800478a:	e000      	b.n	800478e <NVIC_EncodePriority+0x32>
 800478c:	2300      	movs	r3, #0
 800478e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004790:	f04f 32ff 	mov.w	r2, #4294967295
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	fa02 f303 	lsl.w	r3, r2, r3
 800479a:	43da      	mvns	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	401a      	ands	r2, r3
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a4:	f04f 31ff 	mov.w	r1, #4294967295
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	fa01 f303 	lsl.w	r3, r1, r3
 80047ae:	43d9      	mvns	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b4:	4313      	orrs	r3, r2
         );
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3724      	adds	r7, #36	; 0x24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d4:	d301      	bcc.n	80047da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047d6:	2301      	movs	r3, #1
 80047d8:	e00f      	b.n	80047fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047da:	4a0a      	ldr	r2, [pc, #40]	; (8004804 <SysTick_Config+0x40>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3b01      	subs	r3, #1
 80047e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047e2:	210f      	movs	r1, #15
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	f7ff ff8e 	bl	8004708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047ec:	4b05      	ldr	r3, [pc, #20]	; (8004804 <SysTick_Config+0x40>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047f2:	4b04      	ldr	r3, [pc, #16]	; (8004804 <SysTick_Config+0x40>)
 80047f4:	2207      	movs	r2, #7
 80047f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	e000e010 	.word	0xe000e010

08004808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ff29 	bl	8004668 <__NVIC_SetPriorityGrouping>
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	4603      	mov	r3, r0
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
 800482a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800482c:	f7ff ff40 	bl	80046b0 <__NVIC_GetPriorityGrouping>
 8004830:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	68b9      	ldr	r1, [r7, #8]
 8004836:	6978      	ldr	r0, [r7, #20]
 8004838:	f7ff ff90 	bl	800475c <NVIC_EncodePriority>
 800483c:	4602      	mov	r2, r0
 800483e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004842:	4611      	mov	r1, r2
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff ff5f 	bl	8004708 <__NVIC_SetPriority>
}
 800484a:	bf00      	nop
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	4603      	mov	r3, r0
 800485a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800485c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff ff33 	bl	80046cc <__NVIC_EnableIRQ>
}
 8004866:	bf00      	nop
 8004868:	3708      	adds	r7, #8
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}

0800486e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800486e:	b580      	push	{r7, lr}
 8004870:	b082      	sub	sp, #8
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff ffa4 	bl	80047c4 <SysTick_Config>
 800487c:	4603      	mov	r3, r0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004890:	f7fe fbc8 	bl	8003024 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e316      	b.n	8004ece <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a66      	ldr	r2, [pc, #408]	; (8004a40 <HAL_DMA_Init+0x1b8>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d04a      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a65      	ldr	r2, [pc, #404]	; (8004a44 <HAL_DMA_Init+0x1bc>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d045      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a63      	ldr	r2, [pc, #396]	; (8004a48 <HAL_DMA_Init+0x1c0>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d040      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a62      	ldr	r2, [pc, #392]	; (8004a4c <HAL_DMA_Init+0x1c4>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d03b      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a60      	ldr	r2, [pc, #384]	; (8004a50 <HAL_DMA_Init+0x1c8>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d036      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a5f      	ldr	r2, [pc, #380]	; (8004a54 <HAL_DMA_Init+0x1cc>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d031      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a5d      	ldr	r2, [pc, #372]	; (8004a58 <HAL_DMA_Init+0x1d0>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d02c      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a5c      	ldr	r2, [pc, #368]	; (8004a5c <HAL_DMA_Init+0x1d4>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d027      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a5a      	ldr	r2, [pc, #360]	; (8004a60 <HAL_DMA_Init+0x1d8>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d022      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a59      	ldr	r2, [pc, #356]	; (8004a64 <HAL_DMA_Init+0x1dc>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d01d      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a57      	ldr	r2, [pc, #348]	; (8004a68 <HAL_DMA_Init+0x1e0>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d018      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a56      	ldr	r2, [pc, #344]	; (8004a6c <HAL_DMA_Init+0x1e4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a54      	ldr	r2, [pc, #336]	; (8004a70 <HAL_DMA_Init+0x1e8>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a53      	ldr	r2, [pc, #332]	; (8004a74 <HAL_DMA_Init+0x1ec>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a51      	ldr	r2, [pc, #324]	; (8004a78 <HAL_DMA_Init+0x1f0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_DMA_Init+0xb8>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a50      	ldr	r2, [pc, #320]	; (8004a7c <HAL_DMA_Init+0x1f4>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d101      	bne.n	8004944 <HAL_DMA_Init+0xbc>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <HAL_DMA_Init+0xbe>
 8004944:	2300      	movs	r3, #0
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 813b 	beq.w	8004bc2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a37      	ldr	r2, [pc, #220]	; (8004a40 <HAL_DMA_Init+0x1b8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d04a      	beq.n	80049fc <HAL_DMA_Init+0x174>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a36      	ldr	r2, [pc, #216]	; (8004a44 <HAL_DMA_Init+0x1bc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d045      	beq.n	80049fc <HAL_DMA_Init+0x174>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a34      	ldr	r2, [pc, #208]	; (8004a48 <HAL_DMA_Init+0x1c0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d040      	beq.n	80049fc <HAL_DMA_Init+0x174>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a33      	ldr	r2, [pc, #204]	; (8004a4c <HAL_DMA_Init+0x1c4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d03b      	beq.n	80049fc <HAL_DMA_Init+0x174>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a31      	ldr	r2, [pc, #196]	; (8004a50 <HAL_DMA_Init+0x1c8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d036      	beq.n	80049fc <HAL_DMA_Init+0x174>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a30      	ldr	r2, [pc, #192]	; (8004a54 <HAL_DMA_Init+0x1cc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d031      	beq.n	80049fc <HAL_DMA_Init+0x174>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a2e      	ldr	r2, [pc, #184]	; (8004a58 <HAL_DMA_Init+0x1d0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d02c      	beq.n	80049fc <HAL_DMA_Init+0x174>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a2d      	ldr	r2, [pc, #180]	; (8004a5c <HAL_DMA_Init+0x1d4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d027      	beq.n	80049fc <HAL_DMA_Init+0x174>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a2b      	ldr	r2, [pc, #172]	; (8004a60 <HAL_DMA_Init+0x1d8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d022      	beq.n	80049fc <HAL_DMA_Init+0x174>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2a      	ldr	r2, [pc, #168]	; (8004a64 <HAL_DMA_Init+0x1dc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d01d      	beq.n	80049fc <HAL_DMA_Init+0x174>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a28      	ldr	r2, [pc, #160]	; (8004a68 <HAL_DMA_Init+0x1e0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d018      	beq.n	80049fc <HAL_DMA_Init+0x174>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a27      	ldr	r2, [pc, #156]	; (8004a6c <HAL_DMA_Init+0x1e4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <HAL_DMA_Init+0x174>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a25      	ldr	r2, [pc, #148]	; (8004a70 <HAL_DMA_Init+0x1e8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <HAL_DMA_Init+0x174>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a24      	ldr	r2, [pc, #144]	; (8004a74 <HAL_DMA_Init+0x1ec>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_DMA_Init+0x174>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a22      	ldr	r2, [pc, #136]	; (8004a78 <HAL_DMA_Init+0x1f0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <HAL_DMA_Init+0x174>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a21      	ldr	r2, [pc, #132]	; (8004a7c <HAL_DMA_Init+0x1f4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d108      	bne.n	8004a0e <HAL_DMA_Init+0x186>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 0201 	bic.w	r2, r2, #1
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e007      	b.n	8004a1e <HAL_DMA_Init+0x196>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f022 0201 	bic.w	r2, r2, #1
 8004a1c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a1e:	e02f      	b.n	8004a80 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a20:	f7fe fb00 	bl	8003024 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d928      	bls.n	8004a80 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2203      	movs	r2, #3
 8004a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e246      	b.n	8004ece <HAL_DMA_Init+0x646>
 8004a40:	40020010 	.word	0x40020010
 8004a44:	40020028 	.word	0x40020028
 8004a48:	40020040 	.word	0x40020040
 8004a4c:	40020058 	.word	0x40020058
 8004a50:	40020070 	.word	0x40020070
 8004a54:	40020088 	.word	0x40020088
 8004a58:	400200a0 	.word	0x400200a0
 8004a5c:	400200b8 	.word	0x400200b8
 8004a60:	40020410 	.word	0x40020410
 8004a64:	40020428 	.word	0x40020428
 8004a68:	40020440 	.word	0x40020440
 8004a6c:	40020458 	.word	0x40020458
 8004a70:	40020470 	.word	0x40020470
 8004a74:	40020488 	.word	0x40020488
 8004a78:	400204a0 	.word	0x400204a0
 8004a7c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1c8      	bne.n	8004a20 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4b83      	ldr	r3, [pc, #524]	; (8004ca8 <HAL_DMA_Init+0x420>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004aa6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ab2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004abe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a1b      	ldr	r3, [r3, #32]
 8004ac4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	d107      	bne.n	8004ae4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004adc:	4313      	orrs	r3, r2
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004ae4:	4b71      	ldr	r3, [pc, #452]	; (8004cac <HAL_DMA_Init+0x424>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	4b71      	ldr	r3, [pc, #452]	; (8004cb0 <HAL_DMA_Init+0x428>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004af0:	d328      	bcc.n	8004b44 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b28      	cmp	r3, #40	; 0x28
 8004af8:	d903      	bls.n	8004b02 <HAL_DMA_Init+0x27a>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b2e      	cmp	r3, #46	; 0x2e
 8004b00:	d917      	bls.n	8004b32 <HAL_DMA_Init+0x2aa>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2b3e      	cmp	r3, #62	; 0x3e
 8004b08:	d903      	bls.n	8004b12 <HAL_DMA_Init+0x28a>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b42      	cmp	r3, #66	; 0x42
 8004b10:	d90f      	bls.n	8004b32 <HAL_DMA_Init+0x2aa>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b46      	cmp	r3, #70	; 0x46
 8004b18:	d903      	bls.n	8004b22 <HAL_DMA_Init+0x29a>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b48      	cmp	r3, #72	; 0x48
 8004b20:	d907      	bls.n	8004b32 <HAL_DMA_Init+0x2aa>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b4e      	cmp	r3, #78	; 0x4e
 8004b28:	d905      	bls.n	8004b36 <HAL_DMA_Init+0x2ae>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	2b52      	cmp	r3, #82	; 0x52
 8004b30:	d801      	bhi.n	8004b36 <HAL_DMA_Init+0x2ae>
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <HAL_DMA_Init+0x2b0>
 8004b36:	2300      	movs	r3, #0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d003      	beq.n	8004b44 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b42:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f023 0307 	bic.w	r3, r3, #7
 8004b5a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	2b04      	cmp	r3, #4
 8004b6c:	d117      	bne.n	8004b9e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00e      	beq.n	8004b9e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f001 fdcf 	bl	8006724 <DMA_CheckFifoParam>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2240      	movs	r2, #64	; 0x40
 8004b90:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e197      	b.n	8004ece <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f001 fd0a 	bl	80065c0 <DMA_CalcBaseAndBitshift>
 8004bac:	4603      	mov	r3, r0
 8004bae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	223f      	movs	r2, #63	; 0x3f
 8004bba:	409a      	lsls	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	e0cd      	b.n	8004d5e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a3b      	ldr	r2, [pc, #236]	; (8004cb4 <HAL_DMA_Init+0x42c>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d022      	beq.n	8004c12 <HAL_DMA_Init+0x38a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a39      	ldr	r2, [pc, #228]	; (8004cb8 <HAL_DMA_Init+0x430>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d01d      	beq.n	8004c12 <HAL_DMA_Init+0x38a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a38      	ldr	r2, [pc, #224]	; (8004cbc <HAL_DMA_Init+0x434>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d018      	beq.n	8004c12 <HAL_DMA_Init+0x38a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a36      	ldr	r2, [pc, #216]	; (8004cc0 <HAL_DMA_Init+0x438>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d013      	beq.n	8004c12 <HAL_DMA_Init+0x38a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a35      	ldr	r2, [pc, #212]	; (8004cc4 <HAL_DMA_Init+0x43c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00e      	beq.n	8004c12 <HAL_DMA_Init+0x38a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a33      	ldr	r2, [pc, #204]	; (8004cc8 <HAL_DMA_Init+0x440>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d009      	beq.n	8004c12 <HAL_DMA_Init+0x38a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a32      	ldr	r2, [pc, #200]	; (8004ccc <HAL_DMA_Init+0x444>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d004      	beq.n	8004c12 <HAL_DMA_Init+0x38a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a30      	ldr	r2, [pc, #192]	; (8004cd0 <HAL_DMA_Init+0x448>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d101      	bne.n	8004c16 <HAL_DMA_Init+0x38e>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e000      	b.n	8004c18 <HAL_DMA_Init+0x390>
 8004c16:	2300      	movs	r3, #0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 8097 	beq.w	8004d4c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a24      	ldr	r2, [pc, #144]	; (8004cb4 <HAL_DMA_Init+0x42c>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d021      	beq.n	8004c6c <HAL_DMA_Init+0x3e4>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a22      	ldr	r2, [pc, #136]	; (8004cb8 <HAL_DMA_Init+0x430>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d01c      	beq.n	8004c6c <HAL_DMA_Init+0x3e4>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a21      	ldr	r2, [pc, #132]	; (8004cbc <HAL_DMA_Init+0x434>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d017      	beq.n	8004c6c <HAL_DMA_Init+0x3e4>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1f      	ldr	r2, [pc, #124]	; (8004cc0 <HAL_DMA_Init+0x438>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d012      	beq.n	8004c6c <HAL_DMA_Init+0x3e4>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1e      	ldr	r2, [pc, #120]	; (8004cc4 <HAL_DMA_Init+0x43c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d00d      	beq.n	8004c6c <HAL_DMA_Init+0x3e4>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_DMA_Init+0x440>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d008      	beq.n	8004c6c <HAL_DMA_Init+0x3e4>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1b      	ldr	r2, [pc, #108]	; (8004ccc <HAL_DMA_Init+0x444>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <HAL_DMA_Init+0x3e4>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_DMA_Init+0x448>)
 8004c6a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	4b13      	ldr	r3, [pc, #76]	; (8004cd4 <HAL_DMA_Init+0x44c>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d021      	beq.n	8004cd8 <HAL_DMA_Init+0x450>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	2b80      	cmp	r3, #128	; 0x80
 8004c9a:	d102      	bne.n	8004ca2 <HAL_DMA_Init+0x41a>
 8004c9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004ca0:	e01b      	b.n	8004cda <HAL_DMA_Init+0x452>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e019      	b.n	8004cda <HAL_DMA_Init+0x452>
 8004ca6:	bf00      	nop
 8004ca8:	fe10803f 	.word	0xfe10803f
 8004cac:	5c001000 	.word	0x5c001000
 8004cb0:	ffff0000 	.word	0xffff0000
 8004cb4:	58025408 	.word	0x58025408
 8004cb8:	5802541c 	.word	0x5802541c
 8004cbc:	58025430 	.word	0x58025430
 8004cc0:	58025444 	.word	0x58025444
 8004cc4:	58025458 	.word	0x58025458
 8004cc8:	5802546c 	.word	0x5802546c
 8004ccc:	58025480 	.word	0x58025480
 8004cd0:	58025494 	.word	0x58025494
 8004cd4:	fffe000f 	.word	0xfffe000f
 8004cd8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68d2      	ldr	r2, [r2, #12]
 8004cde:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ce0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004ce8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004cf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004cf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004d00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004d08:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4b6e      	ldr	r3, [pc, #440]	; (8004ed8 <HAL_DMA_Init+0x650>)
 8004d20:	4413      	add	r3, r2
 8004d22:	4a6e      	ldr	r2, [pc, #440]	; (8004edc <HAL_DMA_Init+0x654>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	091b      	lsrs	r3, r3, #4
 8004d2a:	009a      	lsls	r2, r3, #2
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f001 fc45 	bl	80065c0 <DMA_CalcBaseAndBitshift>
 8004d36:	4603      	mov	r3, r0
 8004d38:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3e:	f003 031f 	and.w	r3, r3, #31
 8004d42:	2201      	movs	r2, #1
 8004d44:	409a      	lsls	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	e008      	b.n	8004d5e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2240      	movs	r2, #64	; 0x40
 8004d50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2203      	movs	r2, #3
 8004d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e0b7      	b.n	8004ece <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a5f      	ldr	r2, [pc, #380]	; (8004ee0 <HAL_DMA_Init+0x658>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d072      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a5d      	ldr	r2, [pc, #372]	; (8004ee4 <HAL_DMA_Init+0x65c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d06d      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a5c      	ldr	r2, [pc, #368]	; (8004ee8 <HAL_DMA_Init+0x660>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d068      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a5a      	ldr	r2, [pc, #360]	; (8004eec <HAL_DMA_Init+0x664>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d063      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a59      	ldr	r2, [pc, #356]	; (8004ef0 <HAL_DMA_Init+0x668>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d05e      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a57      	ldr	r2, [pc, #348]	; (8004ef4 <HAL_DMA_Init+0x66c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d059      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a56      	ldr	r2, [pc, #344]	; (8004ef8 <HAL_DMA_Init+0x670>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d054      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a54      	ldr	r2, [pc, #336]	; (8004efc <HAL_DMA_Init+0x674>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d04f      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a53      	ldr	r2, [pc, #332]	; (8004f00 <HAL_DMA_Init+0x678>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d04a      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a51      	ldr	r2, [pc, #324]	; (8004f04 <HAL_DMA_Init+0x67c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d045      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a50      	ldr	r2, [pc, #320]	; (8004f08 <HAL_DMA_Init+0x680>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d040      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a4e      	ldr	r2, [pc, #312]	; (8004f0c <HAL_DMA_Init+0x684>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d03b      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a4d      	ldr	r2, [pc, #308]	; (8004f10 <HAL_DMA_Init+0x688>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d036      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a4b      	ldr	r2, [pc, #300]	; (8004f14 <HAL_DMA_Init+0x68c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d031      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a4a      	ldr	r2, [pc, #296]	; (8004f18 <HAL_DMA_Init+0x690>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d02c      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a48      	ldr	r2, [pc, #288]	; (8004f1c <HAL_DMA_Init+0x694>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d027      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a47      	ldr	r2, [pc, #284]	; (8004f20 <HAL_DMA_Init+0x698>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d022      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a45      	ldr	r2, [pc, #276]	; (8004f24 <HAL_DMA_Init+0x69c>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01d      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a44      	ldr	r2, [pc, #272]	; (8004f28 <HAL_DMA_Init+0x6a0>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d018      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a42      	ldr	r2, [pc, #264]	; (8004f2c <HAL_DMA_Init+0x6a4>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a41      	ldr	r2, [pc, #260]	; (8004f30 <HAL_DMA_Init+0x6a8>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a3f      	ldr	r2, [pc, #252]	; (8004f34 <HAL_DMA_Init+0x6ac>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a3e      	ldr	r2, [pc, #248]	; (8004f38 <HAL_DMA_Init+0x6b0>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_Init+0x5c6>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a3c      	ldr	r2, [pc, #240]	; (8004f3c <HAL_DMA_Init+0x6b4>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d101      	bne.n	8004e52 <HAL_DMA_Init+0x5ca>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e000      	b.n	8004e54 <HAL_DMA_Init+0x5cc>
 8004e52:	2300      	movs	r3, #0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d032      	beq.n	8004ebe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 fcdf 	bl	800681c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b80      	cmp	r3, #128	; 0x80
 8004e64:	d102      	bne.n	8004e6c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e80:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d010      	beq.n	8004eac <HAL_DMA_Init+0x624>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	2b08      	cmp	r3, #8
 8004e90:	d80c      	bhi.n	8004eac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f001 fd5c 	bl	8006950 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	e008      	b.n	8004ebe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	a7fdabf8 	.word	0xa7fdabf8
 8004edc:	cccccccd 	.word	0xcccccccd
 8004ee0:	40020010 	.word	0x40020010
 8004ee4:	40020028 	.word	0x40020028
 8004ee8:	40020040 	.word	0x40020040
 8004eec:	40020058 	.word	0x40020058
 8004ef0:	40020070 	.word	0x40020070
 8004ef4:	40020088 	.word	0x40020088
 8004ef8:	400200a0 	.word	0x400200a0
 8004efc:	400200b8 	.word	0x400200b8
 8004f00:	40020410 	.word	0x40020410
 8004f04:	40020428 	.word	0x40020428
 8004f08:	40020440 	.word	0x40020440
 8004f0c:	40020458 	.word	0x40020458
 8004f10:	40020470 	.word	0x40020470
 8004f14:	40020488 	.word	0x40020488
 8004f18:	400204a0 	.word	0x400204a0
 8004f1c:	400204b8 	.word	0x400204b8
 8004f20:	58025408 	.word	0x58025408
 8004f24:	5802541c 	.word	0x5802541c
 8004f28:	58025430 	.word	0x58025430
 8004f2c:	58025444 	.word	0x58025444
 8004f30:	58025458 	.word	0x58025458
 8004f34:	5802546c 	.word	0x5802546c
 8004f38:	58025480 	.word	0x58025480
 8004f3c:	58025494 	.word	0x58025494

08004f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b086      	sub	sp, #24
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e226      	b.n	80053aa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d101      	bne.n	8004f6a <HAL_DMA_Start_IT+0x2a>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e21f      	b.n	80053aa <HAL_DMA_Start_IT+0x46a>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	f040 820a 	bne.w	8005394 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a68      	ldr	r2, [pc, #416]	; (8005134 <HAL_DMA_Start_IT+0x1f4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d04a      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a66      	ldr	r2, [pc, #408]	; (8005138 <HAL_DMA_Start_IT+0x1f8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d045      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a65      	ldr	r2, [pc, #404]	; (800513c <HAL_DMA_Start_IT+0x1fc>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d040      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a63      	ldr	r2, [pc, #396]	; (8005140 <HAL_DMA_Start_IT+0x200>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d03b      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a62      	ldr	r2, [pc, #392]	; (8005144 <HAL_DMA_Start_IT+0x204>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d036      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a60      	ldr	r2, [pc, #384]	; (8005148 <HAL_DMA_Start_IT+0x208>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d031      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a5f      	ldr	r2, [pc, #380]	; (800514c <HAL_DMA_Start_IT+0x20c>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d02c      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a5d      	ldr	r2, [pc, #372]	; (8005150 <HAL_DMA_Start_IT+0x210>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d027      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a5c      	ldr	r2, [pc, #368]	; (8005154 <HAL_DMA_Start_IT+0x214>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d022      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a5a      	ldr	r2, [pc, #360]	; (8005158 <HAL_DMA_Start_IT+0x218>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01d      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a59      	ldr	r2, [pc, #356]	; (800515c <HAL_DMA_Start_IT+0x21c>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d018      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a57      	ldr	r2, [pc, #348]	; (8005160 <HAL_DMA_Start_IT+0x220>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a56      	ldr	r2, [pc, #344]	; (8005164 <HAL_DMA_Start_IT+0x224>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d00e      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a54      	ldr	r2, [pc, #336]	; (8005168 <HAL_DMA_Start_IT+0x228>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d009      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a53      	ldr	r2, [pc, #332]	; (800516c <HAL_DMA_Start_IT+0x22c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d004      	beq.n	800502e <HAL_DMA_Start_IT+0xee>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a51      	ldr	r2, [pc, #324]	; (8005170 <HAL_DMA_Start_IT+0x230>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d108      	bne.n	8005040 <HAL_DMA_Start_IT+0x100>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0201 	bic.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e007      	b.n	8005050 <HAL_DMA_Start_IT+0x110>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681a      	ldr	r2, [r3, #0]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f001 f906 	bl	8006268 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a34      	ldr	r2, [pc, #208]	; (8005134 <HAL_DMA_Start_IT+0x1f4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d04a      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a33      	ldr	r2, [pc, #204]	; (8005138 <HAL_DMA_Start_IT+0x1f8>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d045      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a31      	ldr	r2, [pc, #196]	; (800513c <HAL_DMA_Start_IT+0x1fc>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d040      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a30      	ldr	r2, [pc, #192]	; (8005140 <HAL_DMA_Start_IT+0x200>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d03b      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a2e      	ldr	r2, [pc, #184]	; (8005144 <HAL_DMA_Start_IT+0x204>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d036      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a2d      	ldr	r2, [pc, #180]	; (8005148 <HAL_DMA_Start_IT+0x208>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d031      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a2b      	ldr	r2, [pc, #172]	; (800514c <HAL_DMA_Start_IT+0x20c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d02c      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <HAL_DMA_Start_IT+0x210>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d027      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a28      	ldr	r2, [pc, #160]	; (8005154 <HAL_DMA_Start_IT+0x214>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d022      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a27      	ldr	r2, [pc, #156]	; (8005158 <HAL_DMA_Start_IT+0x218>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d01d      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a25      	ldr	r2, [pc, #148]	; (800515c <HAL_DMA_Start_IT+0x21c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d018      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a24      	ldr	r2, [pc, #144]	; (8005160 <HAL_DMA_Start_IT+0x220>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d013      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a22      	ldr	r2, [pc, #136]	; (8005164 <HAL_DMA_Start_IT+0x224>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d00e      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a21      	ldr	r2, [pc, #132]	; (8005168 <HAL_DMA_Start_IT+0x228>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d009      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <HAL_DMA_Start_IT+0x22c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d004      	beq.n	80050fc <HAL_DMA_Start_IT+0x1bc>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1e      	ldr	r2, [pc, #120]	; (8005170 <HAL_DMA_Start_IT+0x230>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d101      	bne.n	8005100 <HAL_DMA_Start_IT+0x1c0>
 80050fc:	2301      	movs	r3, #1
 80050fe:	e000      	b.n	8005102 <HAL_DMA_Start_IT+0x1c2>
 8005100:	2300      	movs	r3, #0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d036      	beq.n	8005174 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f023 021e 	bic.w	r2, r3, #30
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0216 	orr.w	r2, r2, #22
 8005118:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	2b00      	cmp	r3, #0
 8005120:	d03e      	beq.n	80051a0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f042 0208 	orr.w	r2, r2, #8
 8005130:	601a      	str	r2, [r3, #0]
 8005132:	e035      	b.n	80051a0 <HAL_DMA_Start_IT+0x260>
 8005134:	40020010 	.word	0x40020010
 8005138:	40020028 	.word	0x40020028
 800513c:	40020040 	.word	0x40020040
 8005140:	40020058 	.word	0x40020058
 8005144:	40020070 	.word	0x40020070
 8005148:	40020088 	.word	0x40020088
 800514c:	400200a0 	.word	0x400200a0
 8005150:	400200b8 	.word	0x400200b8
 8005154:	40020410 	.word	0x40020410
 8005158:	40020428 	.word	0x40020428
 800515c:	40020440 	.word	0x40020440
 8005160:	40020458 	.word	0x40020458
 8005164:	40020470 	.word	0x40020470
 8005168:	40020488 	.word	0x40020488
 800516c:	400204a0 	.word	0x400204a0
 8005170:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f023 020e 	bic.w	r2, r3, #14
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 020a 	orr.w	r2, r2, #10
 8005186:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0204 	orr.w	r2, r2, #4
 800519e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a83      	ldr	r2, [pc, #524]	; (80053b4 <HAL_DMA_Start_IT+0x474>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d072      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a82      	ldr	r2, [pc, #520]	; (80053b8 <HAL_DMA_Start_IT+0x478>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d06d      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a80      	ldr	r2, [pc, #512]	; (80053bc <HAL_DMA_Start_IT+0x47c>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d068      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a7f      	ldr	r2, [pc, #508]	; (80053c0 <HAL_DMA_Start_IT+0x480>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d063      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a7d      	ldr	r2, [pc, #500]	; (80053c4 <HAL_DMA_Start_IT+0x484>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d05e      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a7c      	ldr	r2, [pc, #496]	; (80053c8 <HAL_DMA_Start_IT+0x488>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d059      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a7a      	ldr	r2, [pc, #488]	; (80053cc <HAL_DMA_Start_IT+0x48c>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d054      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a79      	ldr	r2, [pc, #484]	; (80053d0 <HAL_DMA_Start_IT+0x490>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d04f      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a77      	ldr	r2, [pc, #476]	; (80053d4 <HAL_DMA_Start_IT+0x494>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d04a      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a76      	ldr	r2, [pc, #472]	; (80053d8 <HAL_DMA_Start_IT+0x498>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d045      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a74      	ldr	r2, [pc, #464]	; (80053dc <HAL_DMA_Start_IT+0x49c>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d040      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a73      	ldr	r2, [pc, #460]	; (80053e0 <HAL_DMA_Start_IT+0x4a0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d03b      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a71      	ldr	r2, [pc, #452]	; (80053e4 <HAL_DMA_Start_IT+0x4a4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d036      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a70      	ldr	r2, [pc, #448]	; (80053e8 <HAL_DMA_Start_IT+0x4a8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d031      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a6e      	ldr	r2, [pc, #440]	; (80053ec <HAL_DMA_Start_IT+0x4ac>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d02c      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a6d      	ldr	r2, [pc, #436]	; (80053f0 <HAL_DMA_Start_IT+0x4b0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d027      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a6b      	ldr	r2, [pc, #428]	; (80053f4 <HAL_DMA_Start_IT+0x4b4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d022      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a6a      	ldr	r2, [pc, #424]	; (80053f8 <HAL_DMA_Start_IT+0x4b8>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d01d      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a68      	ldr	r2, [pc, #416]	; (80053fc <HAL_DMA_Start_IT+0x4bc>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d018      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a67      	ldr	r2, [pc, #412]	; (8005400 <HAL_DMA_Start_IT+0x4c0>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a65      	ldr	r2, [pc, #404]	; (8005404 <HAL_DMA_Start_IT+0x4c4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00e      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a64      	ldr	r2, [pc, #400]	; (8005408 <HAL_DMA_Start_IT+0x4c8>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d009      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a62      	ldr	r2, [pc, #392]	; (800540c <HAL_DMA_Start_IT+0x4cc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d004      	beq.n	8005290 <HAL_DMA_Start_IT+0x350>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a61      	ldr	r2, [pc, #388]	; (8005410 <HAL_DMA_Start_IT+0x4d0>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d101      	bne.n	8005294 <HAL_DMA_Start_IT+0x354>
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <HAL_DMA_Start_IT+0x356>
 8005294:	2300      	movs	r3, #0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d01a      	beq.n	80052d0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052b6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d007      	beq.n	80052d0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052ce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a37      	ldr	r2, [pc, #220]	; (80053b4 <HAL_DMA_Start_IT+0x474>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d04a      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a36      	ldr	r2, [pc, #216]	; (80053b8 <HAL_DMA_Start_IT+0x478>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d045      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a34      	ldr	r2, [pc, #208]	; (80053bc <HAL_DMA_Start_IT+0x47c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d040      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a33      	ldr	r2, [pc, #204]	; (80053c0 <HAL_DMA_Start_IT+0x480>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d03b      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a31      	ldr	r2, [pc, #196]	; (80053c4 <HAL_DMA_Start_IT+0x484>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d036      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a30      	ldr	r2, [pc, #192]	; (80053c8 <HAL_DMA_Start_IT+0x488>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d031      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a2e      	ldr	r2, [pc, #184]	; (80053cc <HAL_DMA_Start_IT+0x48c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d02c      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a2d      	ldr	r2, [pc, #180]	; (80053d0 <HAL_DMA_Start_IT+0x490>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d027      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a2b      	ldr	r2, [pc, #172]	; (80053d4 <HAL_DMA_Start_IT+0x494>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d022      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a2a      	ldr	r2, [pc, #168]	; (80053d8 <HAL_DMA_Start_IT+0x498>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d01d      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a28      	ldr	r2, [pc, #160]	; (80053dc <HAL_DMA_Start_IT+0x49c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d018      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a27      	ldr	r2, [pc, #156]	; (80053e0 <HAL_DMA_Start_IT+0x4a0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d013      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a25      	ldr	r2, [pc, #148]	; (80053e4 <HAL_DMA_Start_IT+0x4a4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00e      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a24      	ldr	r2, [pc, #144]	; (80053e8 <HAL_DMA_Start_IT+0x4a8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d009      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a22      	ldr	r2, [pc, #136]	; (80053ec <HAL_DMA_Start_IT+0x4ac>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d004      	beq.n	8005370 <HAL_DMA_Start_IT+0x430>
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a21      	ldr	r2, [pc, #132]	; (80053f0 <HAL_DMA_Start_IT+0x4b0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d108      	bne.n	8005382 <HAL_DMA_Start_IT+0x442>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e012      	b.n	80053a8 <HAL_DMA_Start_IT+0x468>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f042 0201 	orr.w	r2, r2, #1
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	e009      	b.n	80053a8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800539a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80053a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3718      	adds	r7, #24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40020010 	.word	0x40020010
 80053b8:	40020028 	.word	0x40020028
 80053bc:	40020040 	.word	0x40020040
 80053c0:	40020058 	.word	0x40020058
 80053c4:	40020070 	.word	0x40020070
 80053c8:	40020088 	.word	0x40020088
 80053cc:	400200a0 	.word	0x400200a0
 80053d0:	400200b8 	.word	0x400200b8
 80053d4:	40020410 	.word	0x40020410
 80053d8:	40020428 	.word	0x40020428
 80053dc:	40020440 	.word	0x40020440
 80053e0:	40020458 	.word	0x40020458
 80053e4:	40020470 	.word	0x40020470
 80053e8:	40020488 	.word	0x40020488
 80053ec:	400204a0 	.word	0x400204a0
 80053f0:	400204b8 	.word	0x400204b8
 80053f4:	58025408 	.word	0x58025408
 80053f8:	5802541c 	.word	0x5802541c
 80053fc:	58025430 	.word	0x58025430
 8005400:	58025444 	.word	0x58025444
 8005404:	58025458 	.word	0x58025458
 8005408:	5802546c 	.word	0x5802546c
 800540c:	58025480 	.word	0x58025480
 8005410:	58025494 	.word	0x58025494

08005414 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005420:	4b67      	ldr	r3, [pc, #412]	; (80055c0 <HAL_DMA_IRQHandler+0x1ac>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a67      	ldr	r2, [pc, #412]	; (80055c4 <HAL_DMA_IRQHandler+0x1b0>)
 8005426:	fba2 2303 	umull	r2, r3, r2, r3
 800542a:	0a9b      	lsrs	r3, r3, #10
 800542c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005432:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005438:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a5f      	ldr	r2, [pc, #380]	; (80055c8 <HAL_DMA_IRQHandler+0x1b4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d04a      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a5d      	ldr	r2, [pc, #372]	; (80055cc <HAL_DMA_IRQHandler+0x1b8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d045      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a5c      	ldr	r2, [pc, #368]	; (80055d0 <HAL_DMA_IRQHandler+0x1bc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d040      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a5a      	ldr	r2, [pc, #360]	; (80055d4 <HAL_DMA_IRQHandler+0x1c0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d03b      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a59      	ldr	r2, [pc, #356]	; (80055d8 <HAL_DMA_IRQHandler+0x1c4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d036      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a57      	ldr	r2, [pc, #348]	; (80055dc <HAL_DMA_IRQHandler+0x1c8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d031      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a56      	ldr	r2, [pc, #344]	; (80055e0 <HAL_DMA_IRQHandler+0x1cc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d02c      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a54      	ldr	r2, [pc, #336]	; (80055e4 <HAL_DMA_IRQHandler+0x1d0>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d027      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a53      	ldr	r2, [pc, #332]	; (80055e8 <HAL_DMA_IRQHandler+0x1d4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d022      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a51      	ldr	r2, [pc, #324]	; (80055ec <HAL_DMA_IRQHandler+0x1d8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01d      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a50      	ldr	r2, [pc, #320]	; (80055f0 <HAL_DMA_IRQHandler+0x1dc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d018      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a4e      	ldr	r2, [pc, #312]	; (80055f4 <HAL_DMA_IRQHandler+0x1e0>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a4d      	ldr	r2, [pc, #308]	; (80055f8 <HAL_DMA_IRQHandler+0x1e4>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00e      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a4b      	ldr	r2, [pc, #300]	; (80055fc <HAL_DMA_IRQHandler+0x1e8>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d009      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a4a      	ldr	r2, [pc, #296]	; (8005600 <HAL_DMA_IRQHandler+0x1ec>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xd2>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a48      	ldr	r2, [pc, #288]	; (8005604 <HAL_DMA_IRQHandler+0x1f0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d101      	bne.n	80054ea <HAL_DMA_IRQHandler+0xd6>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <HAL_DMA_IRQHandler+0xd8>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 842b 	beq.w	8005d48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2208      	movs	r2, #8
 80054fc:	409a      	lsls	r2, r3
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80a2 	beq.w	800564c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a2e      	ldr	r2, [pc, #184]	; (80055c8 <HAL_DMA_IRQHandler+0x1b4>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d04a      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a2d      	ldr	r2, [pc, #180]	; (80055cc <HAL_DMA_IRQHandler+0x1b8>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d045      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a2b      	ldr	r2, [pc, #172]	; (80055d0 <HAL_DMA_IRQHandler+0x1bc>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d040      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a2a      	ldr	r2, [pc, #168]	; (80055d4 <HAL_DMA_IRQHandler+0x1c0>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d03b      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a28      	ldr	r2, [pc, #160]	; (80055d8 <HAL_DMA_IRQHandler+0x1c4>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d036      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a27      	ldr	r2, [pc, #156]	; (80055dc <HAL_DMA_IRQHandler+0x1c8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d031      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a25      	ldr	r2, [pc, #148]	; (80055e0 <HAL_DMA_IRQHandler+0x1cc>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d02c      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4a24      	ldr	r2, [pc, #144]	; (80055e4 <HAL_DMA_IRQHandler+0x1d0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d027      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a22      	ldr	r2, [pc, #136]	; (80055e8 <HAL_DMA_IRQHandler+0x1d4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d022      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a21      	ldr	r2, [pc, #132]	; (80055ec <HAL_DMA_IRQHandler+0x1d8>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d01d      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1f      	ldr	r2, [pc, #124]	; (80055f0 <HAL_DMA_IRQHandler+0x1dc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d018      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <HAL_DMA_IRQHandler+0x1e0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d013      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <HAL_DMA_IRQHandler+0x1e4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00e      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a1b      	ldr	r2, [pc, #108]	; (80055fc <HAL_DMA_IRQHandler+0x1e8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d009      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a19      	ldr	r2, [pc, #100]	; (8005600 <HAL_DMA_IRQHandler+0x1ec>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d004      	beq.n	80055a8 <HAL_DMA_IRQHandler+0x194>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a18      	ldr	r2, [pc, #96]	; (8005604 <HAL_DMA_IRQHandler+0x1f0>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d12f      	bne.n	8005608 <HAL_DMA_IRQHandler+0x1f4>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	bf14      	ite	ne
 80055b6:	2301      	movne	r3, #1
 80055b8:	2300      	moveq	r3, #0
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	e02e      	b.n	800561c <HAL_DMA_IRQHandler+0x208>
 80055be:	bf00      	nop
 80055c0:	24000000 	.word	0x24000000
 80055c4:	1b4e81b5 	.word	0x1b4e81b5
 80055c8:	40020010 	.word	0x40020010
 80055cc:	40020028 	.word	0x40020028
 80055d0:	40020040 	.word	0x40020040
 80055d4:	40020058 	.word	0x40020058
 80055d8:	40020070 	.word	0x40020070
 80055dc:	40020088 	.word	0x40020088
 80055e0:	400200a0 	.word	0x400200a0
 80055e4:	400200b8 	.word	0x400200b8
 80055e8:	40020410 	.word	0x40020410
 80055ec:	40020428 	.word	0x40020428
 80055f0:	40020440 	.word	0x40020440
 80055f4:	40020458 	.word	0x40020458
 80055f8:	40020470 	.word	0x40020470
 80055fc:	40020488 	.word	0x40020488
 8005600:	400204a0 	.word	0x400204a0
 8005604:	400204b8 	.word	0x400204b8
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 0308 	and.w	r3, r3, #8
 8005612:	2b00      	cmp	r3, #0
 8005614:	bf14      	ite	ne
 8005616:	2301      	movne	r3, #1
 8005618:	2300      	moveq	r3, #0
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d015      	beq.n	800564c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0204 	bic.w	r2, r2, #4
 800562e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	2208      	movs	r2, #8
 800563a:	409a      	lsls	r2, r3
 800563c:	6a3b      	ldr	r3, [r7, #32]
 800563e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005644:	f043 0201 	orr.w	r2, r3, #1
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005650:	f003 031f 	and.w	r3, r3, #31
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	fa22 f303 	lsr.w	r3, r2, r3
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d06e      	beq.n	8005740 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a69      	ldr	r2, [pc, #420]	; (800580c <HAL_DMA_IRQHandler+0x3f8>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d04a      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a67      	ldr	r2, [pc, #412]	; (8005810 <HAL_DMA_IRQHandler+0x3fc>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d045      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a66      	ldr	r2, [pc, #408]	; (8005814 <HAL_DMA_IRQHandler+0x400>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d040      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a64      	ldr	r2, [pc, #400]	; (8005818 <HAL_DMA_IRQHandler+0x404>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d03b      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a63      	ldr	r2, [pc, #396]	; (800581c <HAL_DMA_IRQHandler+0x408>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d036      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a61      	ldr	r2, [pc, #388]	; (8005820 <HAL_DMA_IRQHandler+0x40c>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d031      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a60      	ldr	r2, [pc, #384]	; (8005824 <HAL_DMA_IRQHandler+0x410>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d02c      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a5e      	ldr	r2, [pc, #376]	; (8005828 <HAL_DMA_IRQHandler+0x414>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d027      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a5d      	ldr	r2, [pc, #372]	; (800582c <HAL_DMA_IRQHandler+0x418>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d022      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a5b      	ldr	r2, [pc, #364]	; (8005830 <HAL_DMA_IRQHandler+0x41c>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d01d      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a5a      	ldr	r2, [pc, #360]	; (8005834 <HAL_DMA_IRQHandler+0x420>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d018      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a58      	ldr	r2, [pc, #352]	; (8005838 <HAL_DMA_IRQHandler+0x424>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d013      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a57      	ldr	r2, [pc, #348]	; (800583c <HAL_DMA_IRQHandler+0x428>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d00e      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a55      	ldr	r2, [pc, #340]	; (8005840 <HAL_DMA_IRQHandler+0x42c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d009      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a54      	ldr	r2, [pc, #336]	; (8005844 <HAL_DMA_IRQHandler+0x430>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d004      	beq.n	8005702 <HAL_DMA_IRQHandler+0x2ee>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a52      	ldr	r2, [pc, #328]	; (8005848 <HAL_DMA_IRQHandler+0x434>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d10a      	bne.n	8005718 <HAL_DMA_IRQHandler+0x304>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	695b      	ldr	r3, [r3, #20]
 8005708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570c:	2b00      	cmp	r3, #0
 800570e:	bf14      	ite	ne
 8005710:	2301      	movne	r3, #1
 8005712:	2300      	moveq	r3, #0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	e003      	b.n	8005720 <HAL_DMA_IRQHandler+0x30c>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2300      	movs	r3, #0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00d      	beq.n	8005740 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005728:	f003 031f 	and.w	r3, r3, #31
 800572c:	2201      	movs	r2, #1
 800572e:	409a      	lsls	r2, r3
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005738:	f043 0202 	orr.w	r2, r3, #2
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005744:	f003 031f 	and.w	r3, r3, #31
 8005748:	2204      	movs	r2, #4
 800574a:	409a      	lsls	r2, r3
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	4013      	ands	r3, r2
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 808f 	beq.w	8005874 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a2c      	ldr	r2, [pc, #176]	; (800580c <HAL_DMA_IRQHandler+0x3f8>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d04a      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a2a      	ldr	r2, [pc, #168]	; (8005810 <HAL_DMA_IRQHandler+0x3fc>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d045      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a29      	ldr	r2, [pc, #164]	; (8005814 <HAL_DMA_IRQHandler+0x400>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d040      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a27      	ldr	r2, [pc, #156]	; (8005818 <HAL_DMA_IRQHandler+0x404>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d03b      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a26      	ldr	r2, [pc, #152]	; (800581c <HAL_DMA_IRQHandler+0x408>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d036      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a24      	ldr	r2, [pc, #144]	; (8005820 <HAL_DMA_IRQHandler+0x40c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d031      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a23      	ldr	r2, [pc, #140]	; (8005824 <HAL_DMA_IRQHandler+0x410>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d02c      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a21      	ldr	r2, [pc, #132]	; (8005828 <HAL_DMA_IRQHandler+0x414>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d027      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a20      	ldr	r2, [pc, #128]	; (800582c <HAL_DMA_IRQHandler+0x418>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d022      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1e      	ldr	r2, [pc, #120]	; (8005830 <HAL_DMA_IRQHandler+0x41c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d01d      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <HAL_DMA_IRQHandler+0x420>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d018      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a1b      	ldr	r2, [pc, #108]	; (8005838 <HAL_DMA_IRQHandler+0x424>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d013      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a1a      	ldr	r2, [pc, #104]	; (800583c <HAL_DMA_IRQHandler+0x428>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d00e      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a18      	ldr	r2, [pc, #96]	; (8005840 <HAL_DMA_IRQHandler+0x42c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d009      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a17      	ldr	r2, [pc, #92]	; (8005844 <HAL_DMA_IRQHandler+0x430>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d004      	beq.n	80057f6 <HAL_DMA_IRQHandler+0x3e2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a15      	ldr	r2, [pc, #84]	; (8005848 <HAL_DMA_IRQHandler+0x434>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d12a      	bne.n	800584c <HAL_DMA_IRQHandler+0x438>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	bf14      	ite	ne
 8005804:	2301      	movne	r3, #1
 8005806:	2300      	moveq	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	e023      	b.n	8005854 <HAL_DMA_IRQHandler+0x440>
 800580c:	40020010 	.word	0x40020010
 8005810:	40020028 	.word	0x40020028
 8005814:	40020040 	.word	0x40020040
 8005818:	40020058 	.word	0x40020058
 800581c:	40020070 	.word	0x40020070
 8005820:	40020088 	.word	0x40020088
 8005824:	400200a0 	.word	0x400200a0
 8005828:	400200b8 	.word	0x400200b8
 800582c:	40020410 	.word	0x40020410
 8005830:	40020428 	.word	0x40020428
 8005834:	40020440 	.word	0x40020440
 8005838:	40020458 	.word	0x40020458
 800583c:	40020470 	.word	0x40020470
 8005840:	40020488 	.word	0x40020488
 8005844:	400204a0 	.word	0x400204a0
 8005848:	400204b8 	.word	0x400204b8
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2300      	movs	r3, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00d      	beq.n	8005874 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800585c:	f003 031f 	and.w	r3, r3, #31
 8005860:	2204      	movs	r2, #4
 8005862:	409a      	lsls	r2, r3
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586c:	f043 0204 	orr.w	r2, r3, #4
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2210      	movs	r2, #16
 800587e:	409a      	lsls	r2, r3
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	4013      	ands	r3, r2
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80a6 	beq.w	80059d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a85      	ldr	r2, [pc, #532]	; (8005aa4 <HAL_DMA_IRQHandler+0x690>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d04a      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a83      	ldr	r2, [pc, #524]	; (8005aa8 <HAL_DMA_IRQHandler+0x694>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d045      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a82      	ldr	r2, [pc, #520]	; (8005aac <HAL_DMA_IRQHandler+0x698>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d040      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a80      	ldr	r2, [pc, #512]	; (8005ab0 <HAL_DMA_IRQHandler+0x69c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d03b      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a7f      	ldr	r2, [pc, #508]	; (8005ab4 <HAL_DMA_IRQHandler+0x6a0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d036      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a7d      	ldr	r2, [pc, #500]	; (8005ab8 <HAL_DMA_IRQHandler+0x6a4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d031      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a7c      	ldr	r2, [pc, #496]	; (8005abc <HAL_DMA_IRQHandler+0x6a8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d02c      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a7a      	ldr	r2, [pc, #488]	; (8005ac0 <HAL_DMA_IRQHandler+0x6ac>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d027      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a79      	ldr	r2, [pc, #484]	; (8005ac4 <HAL_DMA_IRQHandler+0x6b0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d022      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a77      	ldr	r2, [pc, #476]	; (8005ac8 <HAL_DMA_IRQHandler+0x6b4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d01d      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a76      	ldr	r2, [pc, #472]	; (8005acc <HAL_DMA_IRQHandler+0x6b8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d018      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a74      	ldr	r2, [pc, #464]	; (8005ad0 <HAL_DMA_IRQHandler+0x6bc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d013      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a73      	ldr	r2, [pc, #460]	; (8005ad4 <HAL_DMA_IRQHandler+0x6c0>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00e      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a71      	ldr	r2, [pc, #452]	; (8005ad8 <HAL_DMA_IRQHandler+0x6c4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d009      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a70      	ldr	r2, [pc, #448]	; (8005adc <HAL_DMA_IRQHandler+0x6c8>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d004      	beq.n	800592a <HAL_DMA_IRQHandler+0x516>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a6e      	ldr	r2, [pc, #440]	; (8005ae0 <HAL_DMA_IRQHandler+0x6cc>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d10a      	bne.n	8005940 <HAL_DMA_IRQHandler+0x52c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b00      	cmp	r3, #0
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	e009      	b.n	8005954 <HAL_DMA_IRQHandler+0x540>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0304 	and.w	r3, r3, #4
 800594a:	2b00      	cmp	r3, #0
 800594c:	bf14      	ite	ne
 800594e:	2301      	movne	r3, #1
 8005950:	2300      	moveq	r3, #0
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d03e      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	2210      	movs	r2, #16
 8005962:	409a      	lsls	r2, r3
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005972:	2b00      	cmp	r3, #0
 8005974:	d018      	beq.n	80059a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d108      	bne.n	8005996 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	2b00      	cmp	r3, #0
 800598a:	d024      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	4798      	blx	r3
 8005994:	e01f      	b.n	80059d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800599a:	2b00      	cmp	r3, #0
 800599c:	d01b      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	4798      	blx	r3
 80059a6:	e016      	b.n	80059d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d107      	bne.n	80059c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 0208 	bic.w	r2, r2, #8
 80059c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d003      	beq.n	80059d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2220      	movs	r2, #32
 80059e0:	409a      	lsls	r2, r3
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	4013      	ands	r3, r2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 8110 	beq.w	8005c0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a2c      	ldr	r2, [pc, #176]	; (8005aa4 <HAL_DMA_IRQHandler+0x690>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d04a      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a2b      	ldr	r2, [pc, #172]	; (8005aa8 <HAL_DMA_IRQHandler+0x694>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d045      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a29      	ldr	r2, [pc, #164]	; (8005aac <HAL_DMA_IRQHandler+0x698>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d040      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a28      	ldr	r2, [pc, #160]	; (8005ab0 <HAL_DMA_IRQHandler+0x69c>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d03b      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a26      	ldr	r2, [pc, #152]	; (8005ab4 <HAL_DMA_IRQHandler+0x6a0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d036      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a25      	ldr	r2, [pc, #148]	; (8005ab8 <HAL_DMA_IRQHandler+0x6a4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d031      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a23      	ldr	r2, [pc, #140]	; (8005abc <HAL_DMA_IRQHandler+0x6a8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d02c      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <HAL_DMA_IRQHandler+0x6ac>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d027      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a20      	ldr	r2, [pc, #128]	; (8005ac4 <HAL_DMA_IRQHandler+0x6b0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d022      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1f      	ldr	r2, [pc, #124]	; (8005ac8 <HAL_DMA_IRQHandler+0x6b4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d01d      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a1d      	ldr	r2, [pc, #116]	; (8005acc <HAL_DMA_IRQHandler+0x6b8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d018      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	; (8005ad0 <HAL_DMA_IRQHandler+0x6bc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d013      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <HAL_DMA_IRQHandler+0x6c0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00e      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a19      	ldr	r2, [pc, #100]	; (8005ad8 <HAL_DMA_IRQHandler+0x6c4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d009      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a17      	ldr	r2, [pc, #92]	; (8005adc <HAL_DMA_IRQHandler+0x6c8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d004      	beq.n	8005a8c <HAL_DMA_IRQHandler+0x678>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a16      	ldr	r2, [pc, #88]	; (8005ae0 <HAL_DMA_IRQHandler+0x6cc>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d12b      	bne.n	8005ae4 <HAL_DMA_IRQHandler+0x6d0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bf14      	ite	ne
 8005a9a:	2301      	movne	r3, #1
 8005a9c:	2300      	moveq	r3, #0
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	e02a      	b.n	8005af8 <HAL_DMA_IRQHandler+0x6e4>
 8005aa2:	bf00      	nop
 8005aa4:	40020010 	.word	0x40020010
 8005aa8:	40020028 	.word	0x40020028
 8005aac:	40020040 	.word	0x40020040
 8005ab0:	40020058 	.word	0x40020058
 8005ab4:	40020070 	.word	0x40020070
 8005ab8:	40020088 	.word	0x40020088
 8005abc:	400200a0 	.word	0x400200a0
 8005ac0:	400200b8 	.word	0x400200b8
 8005ac4:	40020410 	.word	0x40020410
 8005ac8:	40020428 	.word	0x40020428
 8005acc:	40020440 	.word	0x40020440
 8005ad0:	40020458 	.word	0x40020458
 8005ad4:	40020470 	.word	0x40020470
 8005ad8:	40020488 	.word	0x40020488
 8005adc:	400204a0 	.word	0x400204a0
 8005ae0:	400204b8 	.word	0x400204b8
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	bf14      	ite	ne
 8005af2:	2301      	movne	r3, #1
 8005af4:	2300      	moveq	r3, #0
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8087 	beq.w	8005c0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	2220      	movs	r2, #32
 8005b08:	409a      	lsls	r2, r3
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d139      	bne.n	8005b8e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 0216 	bic.w	r2, r2, #22
 8005b28:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	695a      	ldr	r2, [r3, #20]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b38:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <HAL_DMA_IRQHandler+0x736>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0208 	bic.w	r2, r2, #8
 8005b58:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5e:	f003 031f 	and.w	r3, r3, #31
 8005b62:	223f      	movs	r2, #63	; 0x3f
 8005b64:	409a      	lsls	r2, r3
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	f000 834a 	beq.w	8006218 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	4798      	blx	r3
          }
          return;
 8005b8c:	e344      	b.n	8006218 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d018      	beq.n	8005bce <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d02c      	beq.n	8005c0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	4798      	blx	r3
 8005bba:	e027      	b.n	8005c0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d023      	beq.n	8005c0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	4798      	blx	r3
 8005bcc:	e01e      	b.n	8005c0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10f      	bne.n	8005bfc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0210 	bic.w	r2, r2, #16
 8005bea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8306 	beq.w	8006222 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 8088 	beq.w	8005d34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2204      	movs	r2, #4
 8005c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a7a      	ldr	r2, [pc, #488]	; (8005e1c <HAL_DMA_IRQHandler+0xa08>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d04a      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a79      	ldr	r2, [pc, #484]	; (8005e20 <HAL_DMA_IRQHandler+0xa0c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d045      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a77      	ldr	r2, [pc, #476]	; (8005e24 <HAL_DMA_IRQHandler+0xa10>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d040      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a76      	ldr	r2, [pc, #472]	; (8005e28 <HAL_DMA_IRQHandler+0xa14>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d03b      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a74      	ldr	r2, [pc, #464]	; (8005e2c <HAL_DMA_IRQHandler+0xa18>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d036      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a73      	ldr	r2, [pc, #460]	; (8005e30 <HAL_DMA_IRQHandler+0xa1c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d031      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a71      	ldr	r2, [pc, #452]	; (8005e34 <HAL_DMA_IRQHandler+0xa20>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d02c      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a70      	ldr	r2, [pc, #448]	; (8005e38 <HAL_DMA_IRQHandler+0xa24>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d027      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a6e      	ldr	r2, [pc, #440]	; (8005e3c <HAL_DMA_IRQHandler+0xa28>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d022      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a6d      	ldr	r2, [pc, #436]	; (8005e40 <HAL_DMA_IRQHandler+0xa2c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d01d      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a6b      	ldr	r2, [pc, #428]	; (8005e44 <HAL_DMA_IRQHandler+0xa30>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d018      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a6a      	ldr	r2, [pc, #424]	; (8005e48 <HAL_DMA_IRQHandler+0xa34>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d013      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a68      	ldr	r2, [pc, #416]	; (8005e4c <HAL_DMA_IRQHandler+0xa38>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d00e      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a67      	ldr	r2, [pc, #412]	; (8005e50 <HAL_DMA_IRQHandler+0xa3c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d009      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a65      	ldr	r2, [pc, #404]	; (8005e54 <HAL_DMA_IRQHandler+0xa40>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d004      	beq.n	8005ccc <HAL_DMA_IRQHandler+0x8b8>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a64      	ldr	r2, [pc, #400]	; (8005e58 <HAL_DMA_IRQHandler+0xa44>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d108      	bne.n	8005cde <HAL_DMA_IRQHandler+0x8ca>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0201 	bic.w	r2, r2, #1
 8005cda:	601a      	str	r2, [r3, #0]
 8005cdc:	e007      	b.n	8005cee <HAL_DMA_IRQHandler+0x8da>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0201 	bic.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3301      	adds	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
 8005cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d307      	bcc.n	8005d0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d1f2      	bne.n	8005cee <HAL_DMA_IRQHandler+0x8da>
 8005d08:	e000      	b.n	8005d0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005d0a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0301 	and.w	r3, r3, #1
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d004      	beq.n	8005d24 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005d22:	e003      	b.n	8005d2c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8272 	beq.w	8006222 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	4798      	blx	r3
 8005d46:	e26c      	b.n	8006222 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a43      	ldr	r2, [pc, #268]	; (8005e5c <HAL_DMA_IRQHandler+0xa48>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d022      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x984>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a42      	ldr	r2, [pc, #264]	; (8005e60 <HAL_DMA_IRQHandler+0xa4c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d01d      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x984>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a40      	ldr	r2, [pc, #256]	; (8005e64 <HAL_DMA_IRQHandler+0xa50>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d018      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x984>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a3f      	ldr	r2, [pc, #252]	; (8005e68 <HAL_DMA_IRQHandler+0xa54>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d013      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x984>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a3d      	ldr	r2, [pc, #244]	; (8005e6c <HAL_DMA_IRQHandler+0xa58>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00e      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x984>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a3c      	ldr	r2, [pc, #240]	; (8005e70 <HAL_DMA_IRQHandler+0xa5c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d009      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x984>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a3a      	ldr	r2, [pc, #232]	; (8005e74 <HAL_DMA_IRQHandler+0xa60>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <HAL_DMA_IRQHandler+0x984>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a39      	ldr	r2, [pc, #228]	; (8005e78 <HAL_DMA_IRQHandler+0xa64>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d101      	bne.n	8005d9c <HAL_DMA_IRQHandler+0x988>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e000      	b.n	8005d9e <HAL_DMA_IRQHandler+0x98a>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 823f 	beq.w	8006222 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	2204      	movs	r2, #4
 8005db6:	409a      	lsls	r2, r3
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	4013      	ands	r3, r2
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	f000 80cd 	beq.w	8005f5c <HAL_DMA_IRQHandler+0xb48>
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f003 0304 	and.w	r3, r3, #4
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	f000 80c7 	beq.w	8005f5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	2204      	movs	r2, #4
 8005dd8:	409a      	lsls	r2, r3
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d049      	beq.n	8005e7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d109      	bne.n	8005e06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f000 8210 	beq.w	800621c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e04:	e20a      	b.n	800621c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8206 	beq.w	800621c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005e18:	e200      	b.n	800621c <HAL_DMA_IRQHandler+0xe08>
 8005e1a:	bf00      	nop
 8005e1c:	40020010 	.word	0x40020010
 8005e20:	40020028 	.word	0x40020028
 8005e24:	40020040 	.word	0x40020040
 8005e28:	40020058 	.word	0x40020058
 8005e2c:	40020070 	.word	0x40020070
 8005e30:	40020088 	.word	0x40020088
 8005e34:	400200a0 	.word	0x400200a0
 8005e38:	400200b8 	.word	0x400200b8
 8005e3c:	40020410 	.word	0x40020410
 8005e40:	40020428 	.word	0x40020428
 8005e44:	40020440 	.word	0x40020440
 8005e48:	40020458 	.word	0x40020458
 8005e4c:	40020470 	.word	0x40020470
 8005e50:	40020488 	.word	0x40020488
 8005e54:	400204a0 	.word	0x400204a0
 8005e58:	400204b8 	.word	0x400204b8
 8005e5c:	58025408 	.word	0x58025408
 8005e60:	5802541c 	.word	0x5802541c
 8005e64:	58025430 	.word	0x58025430
 8005e68:	58025444 	.word	0x58025444
 8005e6c:	58025458 	.word	0x58025458
 8005e70:	5802546c 	.word	0x5802546c
 8005e74:	58025480 	.word	0x58025480
 8005e78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d160      	bne.n	8005f48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a7f      	ldr	r2, [pc, #508]	; (8006088 <HAL_DMA_IRQHandler+0xc74>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d04a      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a7d      	ldr	r2, [pc, #500]	; (800608c <HAL_DMA_IRQHandler+0xc78>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d045      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a7c      	ldr	r2, [pc, #496]	; (8006090 <HAL_DMA_IRQHandler+0xc7c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d040      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a7a      	ldr	r2, [pc, #488]	; (8006094 <HAL_DMA_IRQHandler+0xc80>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d03b      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a79      	ldr	r2, [pc, #484]	; (8006098 <HAL_DMA_IRQHandler+0xc84>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d036      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a77      	ldr	r2, [pc, #476]	; (800609c <HAL_DMA_IRQHandler+0xc88>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d031      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a76      	ldr	r2, [pc, #472]	; (80060a0 <HAL_DMA_IRQHandler+0xc8c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d02c      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a74      	ldr	r2, [pc, #464]	; (80060a4 <HAL_DMA_IRQHandler+0xc90>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d027      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a73      	ldr	r2, [pc, #460]	; (80060a8 <HAL_DMA_IRQHandler+0xc94>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d022      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a71      	ldr	r2, [pc, #452]	; (80060ac <HAL_DMA_IRQHandler+0xc98>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d01d      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a70      	ldr	r2, [pc, #448]	; (80060b0 <HAL_DMA_IRQHandler+0xc9c>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d018      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a6e      	ldr	r2, [pc, #440]	; (80060b4 <HAL_DMA_IRQHandler+0xca0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d013      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a6d      	ldr	r2, [pc, #436]	; (80060b8 <HAL_DMA_IRQHandler+0xca4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00e      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a6b      	ldr	r2, [pc, #428]	; (80060bc <HAL_DMA_IRQHandler+0xca8>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d009      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a6a      	ldr	r2, [pc, #424]	; (80060c0 <HAL_DMA_IRQHandler+0xcac>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d004      	beq.n	8005f26 <HAL_DMA_IRQHandler+0xb12>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a68      	ldr	r2, [pc, #416]	; (80060c4 <HAL_DMA_IRQHandler+0xcb0>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d108      	bne.n	8005f38 <HAL_DMA_IRQHandler+0xb24>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0208 	bic.w	r2, r2, #8
 8005f34:	601a      	str	r2, [r3, #0]
 8005f36:	e007      	b.n	8005f48 <HAL_DMA_IRQHandler+0xb34>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 0204 	bic.w	r2, r2, #4
 8005f46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f000 8165 	beq.w	800621c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f5a:	e15f      	b.n	800621c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f60:	f003 031f 	and.w	r3, r3, #31
 8005f64:	2202      	movs	r2, #2
 8005f66:	409a      	lsls	r2, r3
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f000 80c5 	beq.w	80060fc <HAL_DMA_IRQHandler+0xce8>
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80bf 	beq.w	80060fc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	2202      	movs	r2, #2
 8005f88:	409a      	lsls	r2, r3
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f8e:	693b      	ldr	r3, [r7, #16]
 8005f90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d018      	beq.n	8005fca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 813a 	beq.w	8006220 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fb4:	e134      	b.n	8006220 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 8130 	beq.w	8006220 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005fc8:	e12a      	b.n	8006220 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	f003 0320 	and.w	r3, r3, #32
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f040 8089 	bne.w	80060e8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a2b      	ldr	r2, [pc, #172]	; (8006088 <HAL_DMA_IRQHandler+0xc74>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d04a      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a29      	ldr	r2, [pc, #164]	; (800608c <HAL_DMA_IRQHandler+0xc78>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d045      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a28      	ldr	r2, [pc, #160]	; (8006090 <HAL_DMA_IRQHandler+0xc7c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d040      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a26      	ldr	r2, [pc, #152]	; (8006094 <HAL_DMA_IRQHandler+0xc80>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d03b      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a25      	ldr	r2, [pc, #148]	; (8006098 <HAL_DMA_IRQHandler+0xc84>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d036      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a23      	ldr	r2, [pc, #140]	; (800609c <HAL_DMA_IRQHandler+0xc88>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d031      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a22      	ldr	r2, [pc, #136]	; (80060a0 <HAL_DMA_IRQHandler+0xc8c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d02c      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a20      	ldr	r2, [pc, #128]	; (80060a4 <HAL_DMA_IRQHandler+0xc90>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d027      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1f      	ldr	r2, [pc, #124]	; (80060a8 <HAL_DMA_IRQHandler+0xc94>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d022      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_DMA_IRQHandler+0xc98>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01d      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1c      	ldr	r2, [pc, #112]	; (80060b0 <HAL_DMA_IRQHandler+0xc9c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d018      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1a      	ldr	r2, [pc, #104]	; (80060b4 <HAL_DMA_IRQHandler+0xca0>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d013      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a19      	ldr	r2, [pc, #100]	; (80060b8 <HAL_DMA_IRQHandler+0xca4>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00e      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a17      	ldr	r2, [pc, #92]	; (80060bc <HAL_DMA_IRQHandler+0xca8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d009      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <HAL_DMA_IRQHandler+0xcac>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d004      	beq.n	8006076 <HAL_DMA_IRQHandler+0xc62>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a14      	ldr	r2, [pc, #80]	; (80060c4 <HAL_DMA_IRQHandler+0xcb0>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d128      	bne.n	80060c8 <HAL_DMA_IRQHandler+0xcb4>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0214 	bic.w	r2, r2, #20
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	e027      	b.n	80060d8 <HAL_DMA_IRQHandler+0xcc4>
 8006088:	40020010 	.word	0x40020010
 800608c:	40020028 	.word	0x40020028
 8006090:	40020040 	.word	0x40020040
 8006094:	40020058 	.word	0x40020058
 8006098:	40020070 	.word	0x40020070
 800609c:	40020088 	.word	0x40020088
 80060a0:	400200a0 	.word	0x400200a0
 80060a4:	400200b8 	.word	0x400200b8
 80060a8:	40020410 	.word	0x40020410
 80060ac:	40020428 	.word	0x40020428
 80060b0:	40020440 	.word	0x40020440
 80060b4:	40020458 	.word	0x40020458
 80060b8:	40020470 	.word	0x40020470
 80060bc:	40020488 	.word	0x40020488
 80060c0:	400204a0 	.word	0x400204a0
 80060c4:	400204b8 	.word	0x400204b8
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f022 020a 	bic.w	r2, r2, #10
 80060d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 8097 	beq.w	8006220 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060fa:	e091      	b.n	8006220 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006100:	f003 031f 	and.w	r3, r3, #31
 8006104:	2208      	movs	r2, #8
 8006106:	409a      	lsls	r2, r3
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	f000 8088 	beq.w	8006222 <HAL_DMA_IRQHandler+0xe0e>
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f003 0308 	and.w	r3, r3, #8
 8006118:	2b00      	cmp	r3, #0
 800611a:	f000 8082 	beq.w	8006222 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a41      	ldr	r2, [pc, #260]	; (8006228 <HAL_DMA_IRQHandler+0xe14>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d04a      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a3f      	ldr	r2, [pc, #252]	; (800622c <HAL_DMA_IRQHandler+0xe18>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d045      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a3e      	ldr	r2, [pc, #248]	; (8006230 <HAL_DMA_IRQHandler+0xe1c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d040      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a3c      	ldr	r2, [pc, #240]	; (8006234 <HAL_DMA_IRQHandler+0xe20>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d03b      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a3b      	ldr	r2, [pc, #236]	; (8006238 <HAL_DMA_IRQHandler+0xe24>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d036      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a39      	ldr	r2, [pc, #228]	; (800623c <HAL_DMA_IRQHandler+0xe28>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d031      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a38      	ldr	r2, [pc, #224]	; (8006240 <HAL_DMA_IRQHandler+0xe2c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d02c      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a36      	ldr	r2, [pc, #216]	; (8006244 <HAL_DMA_IRQHandler+0xe30>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d027      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a35      	ldr	r2, [pc, #212]	; (8006248 <HAL_DMA_IRQHandler+0xe34>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d022      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a33      	ldr	r2, [pc, #204]	; (800624c <HAL_DMA_IRQHandler+0xe38>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d01d      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a32      	ldr	r2, [pc, #200]	; (8006250 <HAL_DMA_IRQHandler+0xe3c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d018      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a30      	ldr	r2, [pc, #192]	; (8006254 <HAL_DMA_IRQHandler+0xe40>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2f      	ldr	r2, [pc, #188]	; (8006258 <HAL_DMA_IRQHandler+0xe44>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a2d      	ldr	r2, [pc, #180]	; (800625c <HAL_DMA_IRQHandler+0xe48>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2c      	ldr	r2, [pc, #176]	; (8006260 <HAL_DMA_IRQHandler+0xe4c>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_DMA_IRQHandler+0xdaa>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2a      	ldr	r2, [pc, #168]	; (8006264 <HAL_DMA_IRQHandler+0xe50>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d108      	bne.n	80061d0 <HAL_DMA_IRQHandler+0xdbc>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 021c 	bic.w	r2, r2, #28
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e007      	b.n	80061e0 <HAL_DMA_IRQHandler+0xdcc>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 020e 	bic.w	r2, r2, #14
 80061de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	2201      	movs	r2, #1
 80061ea:	409a      	lsls	r2, r3
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d009      	beq.n	8006222 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	4798      	blx	r3
 8006216:	e004      	b.n	8006222 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006218:	bf00      	nop
 800621a:	e002      	b.n	8006222 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800621c:	bf00      	nop
 800621e:	e000      	b.n	8006222 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006220:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006222:	3728      	adds	r7, #40	; 0x28
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}
 8006228:	40020010 	.word	0x40020010
 800622c:	40020028 	.word	0x40020028
 8006230:	40020040 	.word	0x40020040
 8006234:	40020058 	.word	0x40020058
 8006238:	40020070 	.word	0x40020070
 800623c:	40020088 	.word	0x40020088
 8006240:	400200a0 	.word	0x400200a0
 8006244:	400200b8 	.word	0x400200b8
 8006248:	40020410 	.word	0x40020410
 800624c:	40020428 	.word	0x40020428
 8006250:	40020440 	.word	0x40020440
 8006254:	40020458 	.word	0x40020458
 8006258:	40020470 	.word	0x40020470
 800625c:	40020488 	.word	0x40020488
 8006260:	400204a0 	.word	0x400204a0
 8006264:	400204b8 	.word	0x400204b8

08006268 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800627a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006280:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a7f      	ldr	r2, [pc, #508]	; (8006484 <DMA_SetConfig+0x21c>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d072      	beq.n	8006372 <DMA_SetConfig+0x10a>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a7d      	ldr	r2, [pc, #500]	; (8006488 <DMA_SetConfig+0x220>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d06d      	beq.n	8006372 <DMA_SetConfig+0x10a>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a7c      	ldr	r2, [pc, #496]	; (800648c <DMA_SetConfig+0x224>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d068      	beq.n	8006372 <DMA_SetConfig+0x10a>
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a7a      	ldr	r2, [pc, #488]	; (8006490 <DMA_SetConfig+0x228>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d063      	beq.n	8006372 <DMA_SetConfig+0x10a>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a79      	ldr	r2, [pc, #484]	; (8006494 <DMA_SetConfig+0x22c>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d05e      	beq.n	8006372 <DMA_SetConfig+0x10a>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a77      	ldr	r2, [pc, #476]	; (8006498 <DMA_SetConfig+0x230>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d059      	beq.n	8006372 <DMA_SetConfig+0x10a>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a76      	ldr	r2, [pc, #472]	; (800649c <DMA_SetConfig+0x234>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d054      	beq.n	8006372 <DMA_SetConfig+0x10a>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a74      	ldr	r2, [pc, #464]	; (80064a0 <DMA_SetConfig+0x238>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d04f      	beq.n	8006372 <DMA_SetConfig+0x10a>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a73      	ldr	r2, [pc, #460]	; (80064a4 <DMA_SetConfig+0x23c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d04a      	beq.n	8006372 <DMA_SetConfig+0x10a>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a71      	ldr	r2, [pc, #452]	; (80064a8 <DMA_SetConfig+0x240>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d045      	beq.n	8006372 <DMA_SetConfig+0x10a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a70      	ldr	r2, [pc, #448]	; (80064ac <DMA_SetConfig+0x244>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d040      	beq.n	8006372 <DMA_SetConfig+0x10a>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a6e      	ldr	r2, [pc, #440]	; (80064b0 <DMA_SetConfig+0x248>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d03b      	beq.n	8006372 <DMA_SetConfig+0x10a>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a6d      	ldr	r2, [pc, #436]	; (80064b4 <DMA_SetConfig+0x24c>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d036      	beq.n	8006372 <DMA_SetConfig+0x10a>
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a6b      	ldr	r2, [pc, #428]	; (80064b8 <DMA_SetConfig+0x250>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d031      	beq.n	8006372 <DMA_SetConfig+0x10a>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a6a      	ldr	r2, [pc, #424]	; (80064bc <DMA_SetConfig+0x254>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d02c      	beq.n	8006372 <DMA_SetConfig+0x10a>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a68      	ldr	r2, [pc, #416]	; (80064c0 <DMA_SetConfig+0x258>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d027      	beq.n	8006372 <DMA_SetConfig+0x10a>
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a67      	ldr	r2, [pc, #412]	; (80064c4 <DMA_SetConfig+0x25c>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d022      	beq.n	8006372 <DMA_SetConfig+0x10a>
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a65      	ldr	r2, [pc, #404]	; (80064c8 <DMA_SetConfig+0x260>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01d      	beq.n	8006372 <DMA_SetConfig+0x10a>
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a64      	ldr	r2, [pc, #400]	; (80064cc <DMA_SetConfig+0x264>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d018      	beq.n	8006372 <DMA_SetConfig+0x10a>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a62      	ldr	r2, [pc, #392]	; (80064d0 <DMA_SetConfig+0x268>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <DMA_SetConfig+0x10a>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a61      	ldr	r2, [pc, #388]	; (80064d4 <DMA_SetConfig+0x26c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00e      	beq.n	8006372 <DMA_SetConfig+0x10a>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a5f      	ldr	r2, [pc, #380]	; (80064d8 <DMA_SetConfig+0x270>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <DMA_SetConfig+0x10a>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a5e      	ldr	r2, [pc, #376]	; (80064dc <DMA_SetConfig+0x274>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <DMA_SetConfig+0x10a>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a5c      	ldr	r2, [pc, #368]	; (80064e0 <DMA_SetConfig+0x278>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d101      	bne.n	8006376 <DMA_SetConfig+0x10e>
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <DMA_SetConfig+0x110>
 8006376:	2300      	movs	r3, #0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00d      	beq.n	8006398 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006384:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006396:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a39      	ldr	r2, [pc, #228]	; (8006484 <DMA_SetConfig+0x21c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d04a      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a38      	ldr	r2, [pc, #224]	; (8006488 <DMA_SetConfig+0x220>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d045      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a36      	ldr	r2, [pc, #216]	; (800648c <DMA_SetConfig+0x224>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d040      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a35      	ldr	r2, [pc, #212]	; (8006490 <DMA_SetConfig+0x228>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d03b      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a33      	ldr	r2, [pc, #204]	; (8006494 <DMA_SetConfig+0x22c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d036      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a32      	ldr	r2, [pc, #200]	; (8006498 <DMA_SetConfig+0x230>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d031      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a30      	ldr	r2, [pc, #192]	; (800649c <DMA_SetConfig+0x234>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d02c      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a2f      	ldr	r2, [pc, #188]	; (80064a0 <DMA_SetConfig+0x238>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d027      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a2d      	ldr	r2, [pc, #180]	; (80064a4 <DMA_SetConfig+0x23c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d022      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a2c      	ldr	r2, [pc, #176]	; (80064a8 <DMA_SetConfig+0x240>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d01d      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a2a      	ldr	r2, [pc, #168]	; (80064ac <DMA_SetConfig+0x244>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d018      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a29      	ldr	r2, [pc, #164]	; (80064b0 <DMA_SetConfig+0x248>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d013      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a27      	ldr	r2, [pc, #156]	; (80064b4 <DMA_SetConfig+0x24c>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d00e      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a26      	ldr	r2, [pc, #152]	; (80064b8 <DMA_SetConfig+0x250>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d009      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a24      	ldr	r2, [pc, #144]	; (80064bc <DMA_SetConfig+0x254>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <DMA_SetConfig+0x1d0>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a23      	ldr	r2, [pc, #140]	; (80064c0 <DMA_SetConfig+0x258>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d101      	bne.n	800643c <DMA_SetConfig+0x1d4>
 8006438:	2301      	movs	r3, #1
 800643a:	e000      	b.n	800643e <DMA_SetConfig+0x1d6>
 800643c:	2300      	movs	r3, #0
 800643e:	2b00      	cmp	r3, #0
 8006440:	d059      	beq.n	80064f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	223f      	movs	r2, #63	; 0x3f
 800644c:	409a      	lsls	r2, r3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006460:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	2b40      	cmp	r3, #64	; 0x40
 8006470:	d138      	bne.n	80064e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006482:	e086      	b.n	8006592 <DMA_SetConfig+0x32a>
 8006484:	40020010 	.word	0x40020010
 8006488:	40020028 	.word	0x40020028
 800648c:	40020040 	.word	0x40020040
 8006490:	40020058 	.word	0x40020058
 8006494:	40020070 	.word	0x40020070
 8006498:	40020088 	.word	0x40020088
 800649c:	400200a0 	.word	0x400200a0
 80064a0:	400200b8 	.word	0x400200b8
 80064a4:	40020410 	.word	0x40020410
 80064a8:	40020428 	.word	0x40020428
 80064ac:	40020440 	.word	0x40020440
 80064b0:	40020458 	.word	0x40020458
 80064b4:	40020470 	.word	0x40020470
 80064b8:	40020488 	.word	0x40020488
 80064bc:	400204a0 	.word	0x400204a0
 80064c0:	400204b8 	.word	0x400204b8
 80064c4:	58025408 	.word	0x58025408
 80064c8:	5802541c 	.word	0x5802541c
 80064cc:	58025430 	.word	0x58025430
 80064d0:	58025444 	.word	0x58025444
 80064d4:	58025458 	.word	0x58025458
 80064d8:	5802546c 	.word	0x5802546c
 80064dc:	58025480 	.word	0x58025480
 80064e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	60da      	str	r2, [r3, #12]
}
 80064f4:	e04d      	b.n	8006592 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a29      	ldr	r2, [pc, #164]	; (80065a0 <DMA_SetConfig+0x338>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d022      	beq.n	8006546 <DMA_SetConfig+0x2de>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a27      	ldr	r2, [pc, #156]	; (80065a4 <DMA_SetConfig+0x33c>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d01d      	beq.n	8006546 <DMA_SetConfig+0x2de>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	4a26      	ldr	r2, [pc, #152]	; (80065a8 <DMA_SetConfig+0x340>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d018      	beq.n	8006546 <DMA_SetConfig+0x2de>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4a24      	ldr	r2, [pc, #144]	; (80065ac <DMA_SetConfig+0x344>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d013      	beq.n	8006546 <DMA_SetConfig+0x2de>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a23      	ldr	r2, [pc, #140]	; (80065b0 <DMA_SetConfig+0x348>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d00e      	beq.n	8006546 <DMA_SetConfig+0x2de>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a21      	ldr	r2, [pc, #132]	; (80065b4 <DMA_SetConfig+0x34c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d009      	beq.n	8006546 <DMA_SetConfig+0x2de>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a20      	ldr	r2, [pc, #128]	; (80065b8 <DMA_SetConfig+0x350>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <DMA_SetConfig+0x2de>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a1e      	ldr	r2, [pc, #120]	; (80065bc <DMA_SetConfig+0x354>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d101      	bne.n	800654a <DMA_SetConfig+0x2e2>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <DMA_SetConfig+0x2e4>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d020      	beq.n	8006592 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006554:	f003 031f 	and.w	r3, r3, #31
 8006558:	2201      	movs	r2, #1
 800655a:	409a      	lsls	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	683a      	ldr	r2, [r7, #0]
 8006566:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	2b40      	cmp	r3, #64	; 0x40
 800656e:	d108      	bne.n	8006582 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68ba      	ldr	r2, [r7, #8]
 800657e:	60da      	str	r2, [r3, #12]
}
 8006580:	e007      	b.n	8006592 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	60da      	str	r2, [r3, #12]
}
 8006592:	bf00      	nop
 8006594:	371c      	adds	r7, #28
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr
 800659e:	bf00      	nop
 80065a0:	58025408 	.word	0x58025408
 80065a4:	5802541c 	.word	0x5802541c
 80065a8:	58025430 	.word	0x58025430
 80065ac:	58025444 	.word	0x58025444
 80065b0:	58025458 	.word	0x58025458
 80065b4:	5802546c 	.word	0x5802546c
 80065b8:	58025480 	.word	0x58025480
 80065bc:	58025494 	.word	0x58025494

080065c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a42      	ldr	r2, [pc, #264]	; (80066d8 <DMA_CalcBaseAndBitshift+0x118>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d04a      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a41      	ldr	r2, [pc, #260]	; (80066dc <DMA_CalcBaseAndBitshift+0x11c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d045      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a3f      	ldr	r2, [pc, #252]	; (80066e0 <DMA_CalcBaseAndBitshift+0x120>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d040      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a3e      	ldr	r2, [pc, #248]	; (80066e4 <DMA_CalcBaseAndBitshift+0x124>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d03b      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a3c      	ldr	r2, [pc, #240]	; (80066e8 <DMA_CalcBaseAndBitshift+0x128>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d036      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a3b      	ldr	r2, [pc, #236]	; (80066ec <DMA_CalcBaseAndBitshift+0x12c>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d031      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a39      	ldr	r2, [pc, #228]	; (80066f0 <DMA_CalcBaseAndBitshift+0x130>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d02c      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a38      	ldr	r2, [pc, #224]	; (80066f4 <DMA_CalcBaseAndBitshift+0x134>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d027      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a36      	ldr	r2, [pc, #216]	; (80066f8 <DMA_CalcBaseAndBitshift+0x138>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d022      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a35      	ldr	r2, [pc, #212]	; (80066fc <DMA_CalcBaseAndBitshift+0x13c>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d01d      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a33      	ldr	r2, [pc, #204]	; (8006700 <DMA_CalcBaseAndBitshift+0x140>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d018      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a32      	ldr	r2, [pc, #200]	; (8006704 <DMA_CalcBaseAndBitshift+0x144>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d013      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a30      	ldr	r2, [pc, #192]	; (8006708 <DMA_CalcBaseAndBitshift+0x148>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d00e      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a2f      	ldr	r2, [pc, #188]	; (800670c <DMA_CalcBaseAndBitshift+0x14c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d009      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a2d      	ldr	r2, [pc, #180]	; (8006710 <DMA_CalcBaseAndBitshift+0x150>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <DMA_CalcBaseAndBitshift+0xa8>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a2c      	ldr	r2, [pc, #176]	; (8006714 <DMA_CalcBaseAndBitshift+0x154>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d101      	bne.n	800666c <DMA_CalcBaseAndBitshift+0xac>
 8006668:	2301      	movs	r3, #1
 800666a:	e000      	b.n	800666e <DMA_CalcBaseAndBitshift+0xae>
 800666c:	2300      	movs	r3, #0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d024      	beq.n	80066bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	3b10      	subs	r3, #16
 800667a:	4a27      	ldr	r2, [pc, #156]	; (8006718 <DMA_CalcBaseAndBitshift+0x158>)
 800667c:	fba2 2303 	umull	r2, r3, r2, r3
 8006680:	091b      	lsrs	r3, r3, #4
 8006682:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	4a24      	ldr	r2, [pc, #144]	; (800671c <DMA_CalcBaseAndBitshift+0x15c>)
 800668c:	5cd3      	ldrb	r3, [r2, r3]
 800668e:	461a      	mov	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2b03      	cmp	r3, #3
 8006698:	d908      	bls.n	80066ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	4b1f      	ldr	r3, [pc, #124]	; (8006720 <DMA_CalcBaseAndBitshift+0x160>)
 80066a2:	4013      	ands	r3, r2
 80066a4:	1d1a      	adds	r2, r3, #4
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	659a      	str	r2, [r3, #88]	; 0x58
 80066aa:	e00d      	b.n	80066c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	4b1b      	ldr	r3, [pc, #108]	; (8006720 <DMA_CalcBaseAndBitshift+0x160>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6593      	str	r3, [r2, #88]	; 0x58
 80066ba:	e005      	b.n	80066c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40020010 	.word	0x40020010
 80066dc:	40020028 	.word	0x40020028
 80066e0:	40020040 	.word	0x40020040
 80066e4:	40020058 	.word	0x40020058
 80066e8:	40020070 	.word	0x40020070
 80066ec:	40020088 	.word	0x40020088
 80066f0:	400200a0 	.word	0x400200a0
 80066f4:	400200b8 	.word	0x400200b8
 80066f8:	40020410 	.word	0x40020410
 80066fc:	40020428 	.word	0x40020428
 8006700:	40020440 	.word	0x40020440
 8006704:	40020458 	.word	0x40020458
 8006708:	40020470 	.word	0x40020470
 800670c:	40020488 	.word	0x40020488
 8006710:	400204a0 	.word	0x400204a0
 8006714:	400204b8 	.word	0x400204b8
 8006718:	aaaaaaab 	.word	0xaaaaaaab
 800671c:	0800d8c4 	.word	0x0800d8c4
 8006720:	fffffc00 	.word	0xfffffc00

08006724 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006724:	b480      	push	{r7}
 8006726:	b085      	sub	sp, #20
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	699b      	ldr	r3, [r3, #24]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d120      	bne.n	800677a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	2b03      	cmp	r3, #3
 800673e:	d858      	bhi.n	80067f2 <DMA_CheckFifoParam+0xce>
 8006740:	a201      	add	r2, pc, #4	; (adr r2, 8006748 <DMA_CheckFifoParam+0x24>)
 8006742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006746:	bf00      	nop
 8006748:	08006759 	.word	0x08006759
 800674c:	0800676b 	.word	0x0800676b
 8006750:	08006759 	.word	0x08006759
 8006754:	080067f3 	.word	0x080067f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d048      	beq.n	80067f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006768:	e045      	b.n	80067f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006772:	d142      	bne.n	80067fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006778:	e03f      	b.n	80067fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006782:	d123      	bne.n	80067cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006788:	2b03      	cmp	r3, #3
 800678a:	d838      	bhi.n	80067fe <DMA_CheckFifoParam+0xda>
 800678c:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <DMA_CheckFifoParam+0x70>)
 800678e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006792:	bf00      	nop
 8006794:	080067a5 	.word	0x080067a5
 8006798:	080067ab 	.word	0x080067ab
 800679c:	080067a5 	.word	0x080067a5
 80067a0:	080067bd 	.word	0x080067bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	73fb      	strb	r3, [r7, #15]
        break;
 80067a8:	e030      	b.n	800680c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d025      	beq.n	8006802 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ba:	e022      	b.n	8006802 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067c4:	d11f      	bne.n	8006806 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80067ca:	e01c      	b.n	8006806 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d902      	bls.n	80067da <DMA_CheckFifoParam+0xb6>
 80067d4:	2b03      	cmp	r3, #3
 80067d6:	d003      	beq.n	80067e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80067d8:	e018      	b.n	800680c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	73fb      	strb	r3, [r7, #15]
        break;
 80067de:	e015      	b.n	800680c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00e      	beq.n	800680a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
    break;
 80067f0:	e00b      	b.n	800680a <DMA_CheckFifoParam+0xe6>
        break;
 80067f2:	bf00      	nop
 80067f4:	e00a      	b.n	800680c <DMA_CheckFifoParam+0xe8>
        break;
 80067f6:	bf00      	nop
 80067f8:	e008      	b.n	800680c <DMA_CheckFifoParam+0xe8>
        break;
 80067fa:	bf00      	nop
 80067fc:	e006      	b.n	800680c <DMA_CheckFifoParam+0xe8>
        break;
 80067fe:	bf00      	nop
 8006800:	e004      	b.n	800680c <DMA_CheckFifoParam+0xe8>
        break;
 8006802:	bf00      	nop
 8006804:	e002      	b.n	800680c <DMA_CheckFifoParam+0xe8>
        break;
 8006806:	bf00      	nop
 8006808:	e000      	b.n	800680c <DMA_CheckFifoParam+0xe8>
    break;
 800680a:	bf00      	nop
    }
  }

  return status;
 800680c:	7bfb      	ldrb	r3, [r7, #15]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop

0800681c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a38      	ldr	r2, [pc, #224]	; (8006910 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a36      	ldr	r2, [pc, #216]	; (8006914 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01d      	beq.n	800687a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a35      	ldr	r2, [pc, #212]	; (8006918 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a33      	ldr	r2, [pc, #204]	; (800691c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a32      	ldr	r2, [pc, #200]	; (8006920 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a30      	ldr	r2, [pc, #192]	; (8006924 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a2f      	ldr	r2, [pc, #188]	; (8006928 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a2d      	ldr	r2, [pc, #180]	; (800692c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d101      	bne.n	800687e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800687e:	2300      	movs	r3, #0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01a      	beq.n	80068ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	3b08      	subs	r3, #8
 800688c:	4a28      	ldr	r2, [pc, #160]	; (8006930 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800688e:	fba2 2303 	umull	r2, r3, r2, r3
 8006892:	091b      	lsrs	r3, r3, #4
 8006894:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	4b26      	ldr	r3, [pc, #152]	; (8006934 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800689a:	4413      	add	r3, r2
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	461a      	mov	r2, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a24      	ldr	r2, [pc, #144]	; (8006938 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80068a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	2201      	movs	r2, #1
 80068b2:	409a      	lsls	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80068b8:	e024      	b.n	8006904 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	3b10      	subs	r3, #16
 80068c2:	4a1e      	ldr	r2, [pc, #120]	; (800693c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80068c4:	fba2 2303 	umull	r2, r3, r2, r3
 80068c8:	091b      	lsrs	r3, r3, #4
 80068ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	4a1c      	ldr	r2, [pc, #112]	; (8006940 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d806      	bhi.n	80068e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	4a1b      	ldr	r2, [pc, #108]	; (8006944 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d902      	bls.n	80068e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3308      	adds	r3, #8
 80068e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	4b18      	ldr	r3, [pc, #96]	; (8006948 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	461a      	mov	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a16      	ldr	r2, [pc, #88]	; (800694c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80068f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f003 031f 	and.w	r3, r3, #31
 80068fc:	2201      	movs	r2, #1
 80068fe:	409a      	lsls	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006904:	bf00      	nop
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	58025408 	.word	0x58025408
 8006914:	5802541c 	.word	0x5802541c
 8006918:	58025430 	.word	0x58025430
 800691c:	58025444 	.word	0x58025444
 8006920:	58025458 	.word	0x58025458
 8006924:	5802546c 	.word	0x5802546c
 8006928:	58025480 	.word	0x58025480
 800692c:	58025494 	.word	0x58025494
 8006930:	cccccccd 	.word	0xcccccccd
 8006934:	16009600 	.word	0x16009600
 8006938:	58025880 	.word	0x58025880
 800693c:	aaaaaaab 	.word	0xaaaaaaab
 8006940:	400204b8 	.word	0x400204b8
 8006944:	4002040f 	.word	0x4002040f
 8006948:	10008200 	.word	0x10008200
 800694c:	40020880 	.word	0x40020880

08006950 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	b2db      	uxtb	r3, r3
 800695e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d04a      	beq.n	80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2b08      	cmp	r3, #8
 800696a:	d847      	bhi.n	80069fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a25      	ldr	r2, [pc, #148]	; (8006a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d022      	beq.n	80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a24      	ldr	r2, [pc, #144]	; (8006a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d01d      	beq.n	80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a22      	ldr	r2, [pc, #136]	; (8006a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d018      	beq.n	80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a21      	ldr	r2, [pc, #132]	; (8006a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d013      	beq.n	80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a1f      	ldr	r2, [pc, #124]	; (8006a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00e      	beq.n	80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a1e      	ldr	r2, [pc, #120]	; (8006a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d009      	beq.n	80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d004      	beq.n	80069bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a1b      	ldr	r2, [pc, #108]	; (8006a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d101      	bne.n	80069c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80069bc:	2301      	movs	r3, #1
 80069be:	e000      	b.n	80069c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80069c0:	2300      	movs	r3, #0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00a      	beq.n	80069dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80069ca:	4413      	add	r3, r2
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	461a      	mov	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4a15      	ldr	r2, [pc, #84]	; (8006a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80069d8:	671a      	str	r2, [r3, #112]	; 0x70
 80069da:	e009      	b.n	80069f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4b14      	ldr	r3, [pc, #80]	; (8006a30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	461a      	mov	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a11      	ldr	r2, [pc, #68]	; (8006a34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80069ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	2201      	movs	r2, #1
 80069f6:	409a      	lsls	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80069fc:	bf00      	nop
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	58025408 	.word	0x58025408
 8006a0c:	5802541c 	.word	0x5802541c
 8006a10:	58025430 	.word	0x58025430
 8006a14:	58025444 	.word	0x58025444
 8006a18:	58025458 	.word	0x58025458
 8006a1c:	5802546c 	.word	0x5802546c
 8006a20:	58025480 	.word	0x58025480
 8006a24:	58025494 	.word	0x58025494
 8006a28:	1600963f 	.word	0x1600963f
 8006a2c:	58025940 	.word	0x58025940
 8006a30:	1000823f 	.word	0x1000823f
 8006a34:	40020940 	.word	0x40020940

08006a38 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e0e3      	b.n	8006c12 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d106      	bne.n	8006a62 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2223      	movs	r2, #35	; 0x23
 8006a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7fa fb49 	bl	80010f4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a62:	4b6e      	ldr	r3, [pc, #440]	; (8006c1c <HAL_ETH_Init+0x1e4>)
 8006a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a68:	4a6c      	ldr	r2, [pc, #432]	; (8006c1c <HAL_ETH_Init+0x1e4>)
 8006a6a:	f043 0302 	orr.w	r3, r3, #2
 8006a6e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006a72:	4b6a      	ldr	r3, [pc, #424]	; (8006c1c <HAL_ETH_Init+0x1e4>)
 8006a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	60bb      	str	r3, [r7, #8]
 8006a7e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	7a1b      	ldrb	r3, [r3, #8]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d103      	bne.n	8006a90 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f7fc fae3 	bl	8003054 <HAL_SYSCFG_ETHInterfaceSelect>
 8006a8e:	e003      	b.n	8006a98 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006a90:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006a94:	f7fc fade 	bl	8003054 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006a98:	4b61      	ldr	r3, [pc, #388]	; (8006c20 <HAL_ETH_Init+0x1e8>)
 8006a9a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	6812      	ldr	r2, [r2, #0]
 8006aaa:	f043 0301 	orr.w	r3, r3, #1
 8006aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ab2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ab4:	f7fc fab6 	bl	8003024 <HAL_GetTick>
 8006ab8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006aba:	e011      	b.n	8006ae0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006abc:	f7fc fab2 	bl	8003024 <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006aca:	d909      	bls.n	8006ae0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2204      	movs	r2, #4
 8006ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	22e0      	movs	r2, #224	; 0xe0
 8006ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e098      	b.n	8006c12 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1e4      	bne.n	8006abc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f89e 	bl	8006c34 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006af8:	f002 f9f8 	bl	8008eec <HAL_RCC_GetHCLKFreq>
 8006afc:	4603      	mov	r3, r0
 8006afe:	4a49      	ldr	r2, [pc, #292]	; (8006c24 <HAL_ETH_Init+0x1ec>)
 8006b00:	fba2 2303 	umull	r2, r3, r2, r3
 8006b04:	0c9a      	lsrs	r2, r3, #18
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3a01      	subs	r2, #1
 8006b0c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f000 fa81 	bl	8007018 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b1e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006b22:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6812      	ldr	r2, [r2, #0]
 8006b2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b32:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	f003 0303 	and.w	r3, r3, #3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d009      	beq.n	8006b56 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	22e0      	movs	r2, #224	; 0xe0
 8006b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e05d      	b.n	8006c12 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b5e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006b62:	4b31      	ldr	r3, [pc, #196]	; (8006c28 <HAL_ETH_Init+0x1f0>)
 8006b64:	4013      	ands	r3, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6952      	ldr	r2, [r2, #20]
 8006b6a:	0051      	lsls	r1, r2, #1
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	6812      	ldr	r2, [r2, #0]
 8006b70:	430b      	orrs	r3, r1
 8006b72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b76:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fae9 	bl	8007152 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fb2f 	bl	80071e4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	3305      	adds	r3, #5
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	021a      	lsls	r2, r3, #8
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	3304      	adds	r3, #4
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	3303      	adds	r3, #3
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	061a      	lsls	r2, r3, #24
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	3302      	adds	r3, #2
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	041b      	lsls	r3, r3, #16
 8006bb8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006bc4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	781b      	ldrb	r3, [r3, #0]
 8006bcc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006bd2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006bd4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	4b11      	ldr	r3, [pc, #68]	; (8006c2c <HAL_ETH_Init+0x1f4>)
 8006be6:	430b      	orrs	r3, r1
 8006be8:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	4b0d      	ldr	r3, [pc, #52]	; (8006c30 <HAL_ETH_Init+0x1f8>)
 8006bfa:	430b      	orrs	r3, r1
 8006bfc:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2210      	movs	r2, #16
 8006c0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	58024400 	.word	0x58024400
 8006c20:	58000400 	.word	0x58000400
 8006c24:	431bde83 	.word	0x431bde83
 8006c28:	ffff8001 	.word	0xffff8001
 8006c2c:	0c020060 	.word	0x0c020060
 8006c30:	0c20c000 	.word	0x0c20c000

08006c34 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006c4e:	f002 f94d 	bl	8008eec <HAL_RCC_GetHCLKFreq>
 8006c52:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4a1a      	ldr	r2, [pc, #104]	; (8006cc0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d804      	bhi.n	8006c66 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	e022      	b.n	8006cac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4a16      	ldr	r2, [pc, #88]	; (8006cc4 <HAL_ETH_SetMDIOClockRange+0x90>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d204      	bcs.n	8006c78 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006c74:	60fb      	str	r3, [r7, #12]
 8006c76:	e019      	b.n	8006cac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	4a13      	ldr	r2, [pc, #76]	; (8006cc8 <HAL_ETH_SetMDIOClockRange+0x94>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d915      	bls.n	8006cac <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4a12      	ldr	r2, [pc, #72]	; (8006ccc <HAL_ETH_SetMDIOClockRange+0x98>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d804      	bhi.n	8006c92 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	e00c      	b.n	8006cac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	4a0e      	ldr	r2, [pc, #56]	; (8006cd0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d804      	bhi.n	8006ca4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ca0:	60fb      	str	r3, [r7, #12]
 8006ca2:	e003      	b.n	8006cac <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8006caa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006cb6:	bf00      	nop
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	02160ebf 	.word	0x02160ebf
 8006cc4:	03938700 	.word	0x03938700
 8006cc8:	05f5e0ff 	.word	0x05f5e0ff
 8006ccc:	08f0d17f 	.word	0x08f0d17f
 8006cd0:	0ee6b27f 	.word	0x0ee6b27f

08006cd4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006ce6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	791b      	ldrb	r3, [r3, #4]
 8006cec:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006cee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	7b1b      	ldrb	r3, [r3, #12]
 8006cf4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006cf6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	7b5b      	ldrb	r3, [r3, #13]
 8006cfc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006cfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	7b9b      	ldrb	r3, [r3, #14]
 8006d04:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006d06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	7bdb      	ldrb	r3, [r3, #15]
 8006d0c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006d0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	7c12      	ldrb	r2, [r2, #16]
 8006d14:	2a00      	cmp	r2, #0
 8006d16:	d102      	bne.n	8006d1e <ETH_SetMACConfig+0x4a>
 8006d18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006d1c:	e000      	b.n	8006d20 <ETH_SetMACConfig+0x4c>
 8006d1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006d20:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	7c52      	ldrb	r2, [r2, #17]
 8006d26:	2a00      	cmp	r2, #0
 8006d28:	d102      	bne.n	8006d30 <ETH_SetMACConfig+0x5c>
 8006d2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006d2e:	e000      	b.n	8006d32 <ETH_SetMACConfig+0x5e>
 8006d30:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006d32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	7c9b      	ldrb	r3, [r3, #18]
 8006d38:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006d3a:	431a      	orrs	r2, r3
               macconf->Speed |
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006d40:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006d46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	7f1b      	ldrb	r3, [r3, #28]
 8006d4c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006d4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	7f5b      	ldrb	r3, [r3, #29]
 8006d54:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006d56:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006d58:	683a      	ldr	r2, [r7, #0]
 8006d5a:	7f92      	ldrb	r2, [r2, #30]
 8006d5c:	2a00      	cmp	r2, #0
 8006d5e:	d102      	bne.n	8006d66 <ETH_SetMACConfig+0x92>
 8006d60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d64:	e000      	b.n	8006d68 <ETH_SetMACConfig+0x94>
 8006d66:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006d68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	7fdb      	ldrb	r3, [r3, #31]
 8006d6e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006d70:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006d78:	2a00      	cmp	r2, #0
 8006d7a:	d102      	bne.n	8006d82 <ETH_SetMACConfig+0xae>
 8006d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d80:	e000      	b.n	8006d84 <ETH_SetMACConfig+0xb0>
 8006d82:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006d84:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006d8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d92:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006d94:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	4b56      	ldr	r3, [pc, #344]	; (8006f00 <ETH_SetMACConfig+0x22c>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	687a      	ldr	r2, [r7, #4]
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	68f9      	ldr	r1, [r7, #12]
 8006dae:	430b      	orrs	r3, r1
 8006db0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006db6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006dbe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006dc0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dc8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006dca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006dd2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006dd4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006dd6:	683a      	ldr	r2, [r7, #0]
 8006dd8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006ddc:	2a00      	cmp	r2, #0
 8006dde:	d102      	bne.n	8006de6 <ETH_SetMACConfig+0x112>
 8006de0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006de4:	e000      	b.n	8006de8 <ETH_SetMACConfig+0x114>
 8006de6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006de8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006dee:	4313      	orrs	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685a      	ldr	r2, [r3, #4]
 8006df8:	4b42      	ldr	r3, [pc, #264]	; (8006f04 <ETH_SetMACConfig+0x230>)
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6812      	ldr	r2, [r2, #0]
 8006e00:	68f9      	ldr	r1, [r7, #12]
 8006e02:	430b      	orrs	r3, r1
 8006e04:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e0c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006e12:	4313      	orrs	r3, r2
 8006e14:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	4b3a      	ldr	r3, [pc, #232]	; (8006f08 <ETH_SetMACConfig+0x234>)
 8006e1e:	4013      	ands	r3, r2
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	6812      	ldr	r2, [r2, #0]
 8006e24:	68f9      	ldr	r1, [r7, #12]
 8006e26:	430b      	orrs	r3, r1
 8006e28:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006e30:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006e36:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006e38:	683a      	ldr	r2, [r7, #0]
 8006e3a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	d101      	bne.n	8006e46 <ETH_SetMACConfig+0x172>
 8006e42:	2280      	movs	r2, #128	; 0x80
 8006e44:	e000      	b.n	8006e48 <ETH_SetMACConfig+0x174>
 8006e46:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006e48:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006e50:	4313      	orrs	r3, r2
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e5a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006e5e:	4013      	ands	r3, r2
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	6812      	ldr	r2, [r2, #0]
 8006e64:	68f9      	ldr	r1, [r7, #12]
 8006e66:	430b      	orrs	r3, r1
 8006e68:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006e70:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006e78:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e86:	f023 0103 	bic.w	r1, r3, #3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006e9e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006eba:	2a00      	cmp	r2, #0
 8006ebc:	d101      	bne.n	8006ec2 <ETH_SetMACConfig+0x1ee>
 8006ebe:	2240      	movs	r2, #64	; 0x40
 8006ec0:	e000      	b.n	8006ec4 <ETH_SetMACConfig+0x1f0>
 8006ec2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006ec4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006ecc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006ece:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006ed6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006ee4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006ef4:	bf00      	nop
 8006ef6:	3714      	adds	r7, #20
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr
 8006f00:	00048083 	.word	0x00048083
 8006f04:	c0f88000 	.word	0xc0f88000
 8006f08:	fffffef0 	.word	0xfffffef0

08006f0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	4b38      	ldr	r3, [pc, #224]	; (8007004 <ETH_SetDMAConfig+0xf8>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	6811      	ldr	r1, [r2, #0]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6812      	ldr	r2, [r2, #0]
 8006f2c:	430b      	orrs	r3, r1
 8006f2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f32:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	791b      	ldrb	r3, [r3, #4]
 8006f38:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006f3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	7b1b      	ldrb	r3, [r3, #12]
 8006f44:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006f46:	4313      	orrs	r3, r2
 8006f48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	4b2c      	ldr	r3, [pc, #176]	; (8007008 <ETH_SetDMAConfig+0xfc>)
 8006f56:	4013      	ands	r3, r2
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	6812      	ldr	r2, [r2, #0]
 8006f5c:	68f9      	ldr	r1, [r7, #12]
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f64:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	7b5b      	ldrb	r3, [r3, #13]
 8006f6a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006f70:	4313      	orrs	r3, r2
 8006f72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f7c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006f80:	4b22      	ldr	r3, [pc, #136]	; (800700c <ETH_SetDMAConfig+0x100>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	68f9      	ldr	r1, [r7, #12]
 8006f8a:	430b      	orrs	r3, r1
 8006f8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006f90:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	7d1b      	ldrb	r3, [r3, #20]
 8006f9c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006f9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	7f5b      	ldrb	r3, [r3, #29]
 8006fa4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006fb6:	4b16      	ldr	r3, [pc, #88]	; (8007010 <ETH_SetDMAConfig+0x104>)
 8006fb8:	4013      	ands	r3, r2
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	68f9      	ldr	r1, [r7, #12]
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006fc6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	7f1b      	ldrb	r3, [r3, #28]
 8006fce:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fe0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006fe4:	4b0b      	ldr	r3, [pc, #44]	; (8007014 <ETH_SetDMAConfig+0x108>)
 8006fe6:	4013      	ands	r3, r2
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	6812      	ldr	r2, [r2, #0]
 8006fec:	68f9      	ldr	r1, [r7, #12]
 8006fee:	430b      	orrs	r3, r1
 8006ff0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ff4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr
 8007004:	ffff87fd 	.word	0xffff87fd
 8007008:	ffff2ffe 	.word	0xffff2ffe
 800700c:	fffec000 	.word	0xfffec000
 8007010:	ffc0efef 	.word	0xffc0efef
 8007014:	7fc0ffff 	.word	0x7fc0ffff

08007018 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b0a4      	sub	sp, #144	; 0x90
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007020:	2301      	movs	r3, #1
 8007022:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007026:	2300      	movs	r3, #0
 8007028:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800702a:	2300      	movs	r3, #0
 800702c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007030:	2300      	movs	r3, #0
 8007032:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007036:	2301      	movs	r3, #1
 8007038:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800703c:	2301      	movs	r3, #1
 800703e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007042:	2301      	movs	r3, #1
 8007044:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007048:	2300      	movs	r3, #0
 800704a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007054:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007058:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800705a:	2300      	movs	r3, #0
 800705c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8007060:	2300      	movs	r3, #0
 8007062:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007064:	2300      	movs	r3, #0
 8007066:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800706a:	2300      	movs	r3, #0
 800706c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8007070:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007074:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007076:	2300      	movs	r3, #0
 8007078:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800707c:	2300      	movs	r3, #0
 800707e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8007080:	2301      	movs	r3, #1
 8007082:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007086:	2300      	movs	r3, #0
 8007088:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800708c:	2300      	movs	r3, #0
 800708e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8007092:	2300      	movs	r3, #0
 8007094:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8007096:	2300      	movs	r3, #0
 8007098:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800709a:	2300      	movs	r3, #0
 800709c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800709e:	2300      	movs	r3, #0
 80070a0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80070a4:	2300      	movs	r3, #0
 80070a6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80070b0:	2320      	movs	r3, #32
 80070b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80070c2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80070c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80070c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070cc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80070d4:	2302      	movs	r3, #2
 80070d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80070da:	2300      	movs	r3, #0
 80070dc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80070e0:	2300      	movs	r3, #0
 80070e2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80070ec:	2301      	movs	r3, #1
 80070ee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80070f2:	2300      	movs	r3, #0
 80070f4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80070f6:	2301      	movs	r3, #1
 80070f8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80070fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007100:	4619      	mov	r1, r3
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff fde6 	bl	8006cd4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007108:	2301      	movs	r3, #1
 800710a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800710c:	2301      	movs	r3, #1
 800710e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007110:	2300      	movs	r3, #0
 8007112:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007114:	2300      	movs	r3, #0
 8007116:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800711a:	2300      	movs	r3, #0
 800711c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800711e:	2300      	movs	r3, #0
 8007120:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007122:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007126:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007128:	2300      	movs	r3, #0
 800712a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800712c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007130:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007132:	2300      	movs	r3, #0
 8007134:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007138:	f44f 7306 	mov.w	r3, #536	; 0x218
 800713c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800713e:	f107 0308 	add.w	r3, r7, #8
 8007142:	4619      	mov	r1, r3
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f7ff fee1 	bl	8006f0c <ETH_SetDMAConfig>
}
 800714a:	bf00      	nop
 800714c:	3790      	adds	r7, #144	; 0x90
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}

08007152 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8007152:	b480      	push	{r7}
 8007154:	b085      	sub	sp, #20
 8007156:	af00      	add	r7, sp, #0
 8007158:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800715a:	2300      	movs	r3, #0
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	e01d      	b.n	800719c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68d9      	ldr	r1, [r3, #12]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	4613      	mov	r3, r2
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	4413      	add	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	440b      	add	r3, r1
 8007170:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	2200      	movs	r2, #0
 800717c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	3206      	adds	r2, #6
 8007192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b03      	cmp	r3, #3
 80071a0:	d9de      	bls.n	8007160 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071b0:	461a      	mov	r2, r3
 80071b2:	2303      	movs	r3, #3
 80071b4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68da      	ldr	r2, [r3, #12]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071c4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071d4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80071d8:	bf00      	nop
 80071da:	3714      	adds	r7, #20
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	e023      	b.n	800723a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6919      	ldr	r1, [r3, #16]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4613      	mov	r3, r2
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	4413      	add	r3, r2
 80071fe:	00db      	lsls	r3, r3, #3
 8007200:	440b      	add	r3, r1
 8007202:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	2200      	movs	r2, #0
 8007208:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2200      	movs	r2, #0
 800720e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2200      	movs	r2, #0
 8007214:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2200      	movs	r2, #0
 800721a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	2200      	movs	r2, #0
 8007220:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	2200      	movs	r2, #0
 8007226:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	3212      	adds	r2, #18
 8007230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3301      	adds	r3, #1
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b03      	cmp	r3, #3
 800723e:	d9d8      	bls.n	80071f2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007266:	461a      	mov	r2, r3
 8007268:	2303      	movs	r3, #3
 800726a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	691a      	ldr	r2, [r3, #16]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800727a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800728e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8007292:	bf00      	nop
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
	...

080072a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b098      	sub	sp, #96	; 0x60
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80072a8:	4a84      	ldr	r2, [pc, #528]	; (80074bc <HAL_FDCAN_Init+0x21c>)
 80072aa:	f107 030c 	add.w	r3, r7, #12
 80072ae:	4611      	mov	r1, r2
 80072b0:	224c      	movs	r2, #76	; 0x4c
 80072b2:	4618      	mov	r0, r3
 80072b4:	f006 fabe 	bl	800d834 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	e1c6      	b.n	8007650 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a7e      	ldr	r2, [pc, #504]	; (80074c0 <HAL_FDCAN_Init+0x220>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d106      	bne.n	80072da <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80072d4:	461a      	mov	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d106      	bne.n	80072f4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7fa f810 	bl	8001314 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f022 0210 	bic.w	r2, r2, #16
 8007302:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007304:	f7fb fe8e 	bl	8003024 <HAL_GetTick>
 8007308:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800730a:	e014      	b.n	8007336 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800730c:	f7fb fe8a 	bl	8003024 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b0a      	cmp	r3, #10
 8007318:	d90d      	bls.n	8007336 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007320:	f043 0201 	orr.w	r2, r3, #1
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2203      	movs	r2, #3
 800732e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e18c      	b.n	8007650 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	2b08      	cmp	r3, #8
 8007342:	d0e3      	beq.n	800730c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699a      	ldr	r2, [r3, #24]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f042 0201 	orr.w	r2, r2, #1
 8007352:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007354:	f7fb fe66 	bl	8003024 <HAL_GetTick>
 8007358:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800735a:	e014      	b.n	8007386 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800735c:	f7fb fe62 	bl	8003024 <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	2b0a      	cmp	r3, #10
 8007368:	d90d      	bls.n	8007386 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007370:	f043 0201 	orr.w	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2203      	movs	r2, #3
 800737e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e164      	b.n	8007650 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f003 0301 	and.w	r3, r3, #1
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0e3      	beq.n	800735c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f042 0202 	orr.w	r2, r2, #2
 80073a2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7c1b      	ldrb	r3, [r3, #16]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d108      	bne.n	80073be <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ba:	619a      	str	r2, [r3, #24]
 80073bc:	e007      	b.n	80073ce <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699a      	ldr	r2, [r3, #24]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	7c5b      	ldrb	r3, [r3, #17]
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d108      	bne.n	80073e8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073e4:	619a      	str	r2, [r3, #24]
 80073e6:	e007      	b.n	80073f8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	699a      	ldr	r2, [r3, #24]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80073f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	7c9b      	ldrb	r3, [r3, #18]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d108      	bne.n	8007412 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	699a      	ldr	r2, [r3, #24]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800740e:	619a      	str	r2, [r3, #24]
 8007410:	e007      	b.n	8007422 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	699a      	ldr	r2, [r3, #24]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007420:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	430a      	orrs	r2, r1
 8007436:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	699a      	ldr	r2, [r3, #24]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007446:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691a      	ldr	r2, [r3, #16]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f022 0210 	bic.w	r2, r2, #16
 8007456:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	2b01      	cmp	r3, #1
 800745e:	d108      	bne.n	8007472 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0204 	orr.w	r2, r2, #4
 800746e:	619a      	str	r2, [r3, #24]
 8007470:	e030      	b.n	80074d4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d02c      	beq.n	80074d4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d020      	beq.n	80074c4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	699a      	ldr	r2, [r3, #24]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007490:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	691a      	ldr	r2, [r3, #16]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f042 0210 	orr.w	r2, r2, #16
 80074a0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d114      	bne.n	80074d4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699a      	ldr	r2, [r3, #24]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 0220 	orr.w	r2, r2, #32
 80074b8:	619a      	str	r2, [r3, #24]
 80074ba:	e00b      	b.n	80074d4 <HAL_FDCAN_Init+0x234>
 80074bc:	0800d868 	.word	0x0800d868
 80074c0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	699a      	ldr	r2, [r3, #24]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0220 	orr.w	r2, r2, #32
 80074d2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	699b      	ldr	r3, [r3, #24]
 80074d8:	3b01      	subs	r3, #1
 80074da:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	3b01      	subs	r3, #1
 80074e2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074e4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a1b      	ldr	r3, [r3, #32]
 80074ea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80074ec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	3b01      	subs	r3, #1
 80074f6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80074fc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80074fe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007508:	d115      	bne.n	8007536 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007514:	3b01      	subs	r3, #1
 8007516:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007518:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800751e:	3b01      	subs	r3, #1
 8007520:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007522:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752a:	3b01      	subs	r3, #1
 800752c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007532:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007534:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	430a      	orrs	r2, r1
 8007550:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755c:	4413      	add	r3, r2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d011      	beq.n	8007586 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800756a:	f023 0107 	bic.w	r1, r3, #7
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	3360      	adds	r3, #96	; 0x60
 8007576:	443b      	add	r3, r7
 8007578:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	430a      	orrs	r2, r1
 8007582:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758a:	2b00      	cmp	r3, #0
 800758c:	d011      	beq.n	80075b2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007596:	f023 0107 	bic.w	r1, r3, #7
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	3360      	adds	r3, #96	; 0x60
 80075a2:	443b      	add	r3, r7
 80075a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d012      	beq.n	80075e0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075c2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	3360      	adds	r3, #96	; 0x60
 80075ce:	443b      	add	r3, r7
 80075d0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80075d4:	011a      	lsls	r2, r3, #4
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d012      	beq.n	800760e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075f0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	3360      	adds	r3, #96	; 0x60
 80075fc:	443b      	add	r3, r7
 80075fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007602:	021a      	lsls	r2, r3, #8
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	430a      	orrs	r2, r1
 800760a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a11      	ldr	r2, [pc, #68]	; (8007658 <HAL_FDCAN_Init+0x3b8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d107      	bne.n	8007628 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	689a      	ldr	r2, [r3, #8]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f022 0203 	bic.w	r2, r2, #3
 8007626:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 f80b 	bl	800765c <FDCAN_CalcultateRamBlockAddresses>
 8007646:	4603      	mov	r3, r0
 8007648:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800764c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007650:	4618      	mov	r0, r3
 8007652:	3760      	adds	r7, #96	; 0x60
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	4000a000 	.word	0x4000a000

0800765c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007668:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007672:	4ba7      	ldr	r3, [pc, #668]	; (8007910 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007674:	4013      	ands	r3, r2
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	0091      	lsls	r1, r2, #2
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	430b      	orrs	r3, r1
 8007680:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800768c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	041a      	lsls	r2, r3, #16
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	4413      	add	r3, r2
 80076a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80076b2:	4b97      	ldr	r3, [pc, #604]	; (8007910 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	68ba      	ldr	r2, [r7, #8]
 80076b8:	0091      	lsls	r1, r2, #2
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	430b      	orrs	r3, r1
 80076c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076cc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076d4:	041a      	lsls	r2, r3, #16
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	430a      	orrs	r2, r1
 80076dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	4413      	add	r3, r2
 80076ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80076f4:	4b86      	ldr	r3, [pc, #536]	; (8007910 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80076f6:	4013      	ands	r3, r2
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	0091      	lsls	r1, r2, #2
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	430b      	orrs	r3, r1
 8007702:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800770e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	041a      	lsls	r2, r3, #16
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	430a      	orrs	r2, r1
 800771e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800772a:	fb02 f303 	mul.w	r3, r2, r3
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	4413      	add	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800773c:	4b74      	ldr	r3, [pc, #464]	; (8007910 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800773e:	4013      	ands	r3, r2
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	0091      	lsls	r1, r2, #2
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	6812      	ldr	r2, [r2, #0]
 8007748:	430b      	orrs	r3, r1
 800774a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007756:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800775e:	041a      	lsls	r2, r3, #16
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007772:	fb02 f303 	mul.w	r3, r2, r3
 8007776:	68ba      	ldr	r2, [r7, #8]
 8007778:	4413      	add	r3, r2
 800777a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007784:	4b62      	ldr	r3, [pc, #392]	; (8007910 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007786:	4013      	ands	r3, r2
 8007788:	68ba      	ldr	r2, [r7, #8]
 800778a:	0091      	lsls	r1, r2, #2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6812      	ldr	r2, [r2, #0]
 8007790:	430b      	orrs	r3, r1
 8007792:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800779e:	fb02 f303 	mul.w	r3, r2, r3
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	4413      	add	r3, r2
 80077a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80077b0:	4b57      	ldr	r3, [pc, #348]	; (8007910 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80077b2:	4013      	ands	r3, r2
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	0091      	lsls	r1, r2, #2
 80077b8:	687a      	ldr	r2, [r7, #4]
 80077ba:	6812      	ldr	r2, [r2, #0]
 80077bc:	430b      	orrs	r3, r1
 80077be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077ca:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077d2:	041a      	lsls	r2, r3, #16
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	430a      	orrs	r2, r1
 80077da:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	4413      	add	r3, r2
 80077e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80077f2:	4b47      	ldr	r3, [pc, #284]	; (8007910 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80077f4:	4013      	ands	r3, r2
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	0091      	lsls	r1, r2, #2
 80077fa:	687a      	ldr	r2, [r7, #4]
 80077fc:	6812      	ldr	r2, [r2, #0]
 80077fe:	430b      	orrs	r3, r1
 8007800:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800780c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007814:	041a      	lsls	r2, r3, #16
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	430a      	orrs	r2, r1
 800781c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007828:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007830:	061a      	lsls	r2, r3, #24
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007840:	4b34      	ldr	r3, [pc, #208]	; (8007914 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007842:	4413      	add	r3, r2
 8007844:	009a      	lsls	r2, r3, #2
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	441a      	add	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	441a      	add	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	6879      	ldr	r1, [r7, #4]
 8007874:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007876:	fb01 f303 	mul.w	r3, r1, r3
 800787a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800787c:	441a      	add	r2, r3
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800788e:	fb01 f303 	mul.w	r3, r1, r3
 8007892:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8007894:	441a      	add	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a2:	6879      	ldr	r1, [r7, #4]
 80078a4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80078a6:	fb01 f303 	mul.w	r3, r1, r3
 80078aa:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 80078ac:	441a      	add	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078be:	00db      	lsls	r3, r3, #3
 80078c0:	441a      	add	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80078d6:	fb01 f303 	mul.w	r3, r1, r3
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	441a      	add	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80078f8:	441a      	add	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007906:	4a04      	ldr	r2, [pc, #16]	; (8007918 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d915      	bls.n	8007938 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800790c:	e006      	b.n	800791c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800790e:	bf00      	nop
 8007910:	ffff0003 	.word	0xffff0003
 8007914:	10002b00 	.word	0x10002b00
 8007918:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007922:	f043 0220 	orr.w	r2, r3, #32
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2203      	movs	r2, #3
 8007930:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e010      	b.n	800795a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800793c:	60fb      	str	r3, [r7, #12]
 800793e:	e005      	b.n	800794c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	3304      	adds	r3, #4
 800794a:	60fb      	str	r3, [r7, #12]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007952:	68fa      	ldr	r2, [r7, #12]
 8007954:	429a      	cmp	r2, r3
 8007956:	d3f3      	bcc.n	8007940 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3714      	adds	r7, #20
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop

08007968 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007968:	b480      	push	{r7}
 800796a:	b089      	sub	sp, #36	; 0x24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007972:	2300      	movs	r3, #0
 8007974:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007976:	4b89      	ldr	r3, [pc, #548]	; (8007b9c <HAL_GPIO_Init+0x234>)
 8007978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800797a:	e194      	b.n	8007ca6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	2101      	movs	r1, #1
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	fa01 f303 	lsl.w	r3, r1, r3
 8007988:	4013      	ands	r3, r2
 800798a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	f000 8186 	beq.w	8007ca0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f003 0303 	and.w	r3, r3, #3
 800799c:	2b01      	cmp	r3, #1
 800799e:	d005      	beq.n	80079ac <HAL_GPIO_Init+0x44>
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f003 0303 	and.w	r3, r3, #3
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d130      	bne.n	8007a0e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	2203      	movs	r2, #3
 80079b8:	fa02 f303 	lsl.w	r3, r2, r3
 80079bc:	43db      	mvns	r3, r3
 80079be:	69ba      	ldr	r2, [r7, #24]
 80079c0:	4013      	ands	r3, r2
 80079c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	68da      	ldr	r2, [r3, #12]
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	fa02 f303 	lsl.w	r3, r2, r3
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80079e2:	2201      	movs	r2, #1
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ea:	43db      	mvns	r3, r3
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	4013      	ands	r3, r2
 80079f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	091b      	lsrs	r3, r3, #4
 80079f8:	f003 0201 	and.w	r2, r3, #1
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	69ba      	ldr	r2, [r7, #24]
 8007a0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f003 0303 	and.w	r3, r3, #3
 8007a16:	2b03      	cmp	r3, #3
 8007a18:	d017      	beq.n	8007a4a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	005b      	lsls	r3, r3, #1
 8007a24:	2203      	movs	r2, #3
 8007a26:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2a:	43db      	mvns	r3, r3
 8007a2c:	69ba      	ldr	r2, [r7, #24]
 8007a2e:	4013      	ands	r3, r2
 8007a30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	689a      	ldr	r2, [r3, #8]
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	005b      	lsls	r3, r3, #1
 8007a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a3e:	69ba      	ldr	r2, [r7, #24]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f003 0303 	and.w	r3, r3, #3
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d123      	bne.n	8007a9e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	08da      	lsrs	r2, r3, #3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3208      	adds	r2, #8
 8007a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	220f      	movs	r2, #15
 8007a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a72:	43db      	mvns	r3, r3
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	4013      	ands	r3, r2
 8007a78:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	691a      	ldr	r2, [r3, #16]
 8007a7e:	69fb      	ldr	r3, [r7, #28]
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8a:	69ba      	ldr	r2, [r7, #24]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	08da      	lsrs	r2, r3, #3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	3208      	adds	r2, #8
 8007a98:	69b9      	ldr	r1, [r7, #24]
 8007a9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007aa4:	69fb      	ldr	r3, [r7, #28]
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	2203      	movs	r2, #3
 8007aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8007aae:	43db      	mvns	r3, r3
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	f003 0203 	and.w	r2, r3, #3
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac6:	69ba      	ldr	r2, [r7, #24]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 80e0 	beq.w	8007ca0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ae0:	4b2f      	ldr	r3, [pc, #188]	; (8007ba0 <HAL_GPIO_Init+0x238>)
 8007ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ae6:	4a2e      	ldr	r2, [pc, #184]	; (8007ba0 <HAL_GPIO_Init+0x238>)
 8007ae8:	f043 0302 	orr.w	r3, r3, #2
 8007aec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007af0:	4b2b      	ldr	r3, [pc, #172]	; (8007ba0 <HAL_GPIO_Init+0x238>)
 8007af2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007afe:	4a29      	ldr	r2, [pc, #164]	; (8007ba4 <HAL_GPIO_Init+0x23c>)
 8007b00:	69fb      	ldr	r3, [r7, #28]
 8007b02:	089b      	lsrs	r3, r3, #2
 8007b04:	3302      	adds	r3, #2
 8007b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	f003 0303 	and.w	r3, r3, #3
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	220f      	movs	r2, #15
 8007b16:	fa02 f303 	lsl.w	r3, r2, r3
 8007b1a:	43db      	mvns	r3, r3
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a20      	ldr	r2, [pc, #128]	; (8007ba8 <HAL_GPIO_Init+0x240>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d052      	beq.n	8007bd0 <HAL_GPIO_Init+0x268>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a1f      	ldr	r2, [pc, #124]	; (8007bac <HAL_GPIO_Init+0x244>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d031      	beq.n	8007b96 <HAL_GPIO_Init+0x22e>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a1e      	ldr	r2, [pc, #120]	; (8007bb0 <HAL_GPIO_Init+0x248>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d02b      	beq.n	8007b92 <HAL_GPIO_Init+0x22a>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <HAL_GPIO_Init+0x24c>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d025      	beq.n	8007b8e <HAL_GPIO_Init+0x226>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a1c      	ldr	r2, [pc, #112]	; (8007bb8 <HAL_GPIO_Init+0x250>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d01f      	beq.n	8007b8a <HAL_GPIO_Init+0x222>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a1b      	ldr	r2, [pc, #108]	; (8007bbc <HAL_GPIO_Init+0x254>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d019      	beq.n	8007b86 <HAL_GPIO_Init+0x21e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a1a      	ldr	r2, [pc, #104]	; (8007bc0 <HAL_GPIO_Init+0x258>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d013      	beq.n	8007b82 <HAL_GPIO_Init+0x21a>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a19      	ldr	r2, [pc, #100]	; (8007bc4 <HAL_GPIO_Init+0x25c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d00d      	beq.n	8007b7e <HAL_GPIO_Init+0x216>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a18      	ldr	r2, [pc, #96]	; (8007bc8 <HAL_GPIO_Init+0x260>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d007      	beq.n	8007b7a <HAL_GPIO_Init+0x212>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a17      	ldr	r2, [pc, #92]	; (8007bcc <HAL_GPIO_Init+0x264>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d101      	bne.n	8007b76 <HAL_GPIO_Init+0x20e>
 8007b72:	2309      	movs	r3, #9
 8007b74:	e02d      	b.n	8007bd2 <HAL_GPIO_Init+0x26a>
 8007b76:	230a      	movs	r3, #10
 8007b78:	e02b      	b.n	8007bd2 <HAL_GPIO_Init+0x26a>
 8007b7a:	2308      	movs	r3, #8
 8007b7c:	e029      	b.n	8007bd2 <HAL_GPIO_Init+0x26a>
 8007b7e:	2307      	movs	r3, #7
 8007b80:	e027      	b.n	8007bd2 <HAL_GPIO_Init+0x26a>
 8007b82:	2306      	movs	r3, #6
 8007b84:	e025      	b.n	8007bd2 <HAL_GPIO_Init+0x26a>
 8007b86:	2305      	movs	r3, #5
 8007b88:	e023      	b.n	8007bd2 <HAL_GPIO_Init+0x26a>
 8007b8a:	2304      	movs	r3, #4
 8007b8c:	e021      	b.n	8007bd2 <HAL_GPIO_Init+0x26a>
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e01f      	b.n	8007bd2 <HAL_GPIO_Init+0x26a>
 8007b92:	2302      	movs	r3, #2
 8007b94:	e01d      	b.n	8007bd2 <HAL_GPIO_Init+0x26a>
 8007b96:	2301      	movs	r3, #1
 8007b98:	e01b      	b.n	8007bd2 <HAL_GPIO_Init+0x26a>
 8007b9a:	bf00      	nop
 8007b9c:	58000080 	.word	0x58000080
 8007ba0:	58024400 	.word	0x58024400
 8007ba4:	58000400 	.word	0x58000400
 8007ba8:	58020000 	.word	0x58020000
 8007bac:	58020400 	.word	0x58020400
 8007bb0:	58020800 	.word	0x58020800
 8007bb4:	58020c00 	.word	0x58020c00
 8007bb8:	58021000 	.word	0x58021000
 8007bbc:	58021400 	.word	0x58021400
 8007bc0:	58021800 	.word	0x58021800
 8007bc4:	58021c00 	.word	0x58021c00
 8007bc8:	58022000 	.word	0x58022000
 8007bcc:	58022400 	.word	0x58022400
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	f002 0203 	and.w	r2, r2, #3
 8007bd8:	0092      	lsls	r2, r2, #2
 8007bda:	4093      	lsls	r3, r2
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007be2:	4938      	ldr	r1, [pc, #224]	; (8007cc4 <HAL_GPIO_Init+0x35c>)
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	089b      	lsrs	r3, r3, #2
 8007be8:	3302      	adds	r3, #2
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	43db      	mvns	r3, r3
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c0e:	69ba      	ldr	r2, [r7, #24]
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c3c:	69ba      	ldr	r2, [r7, #24]
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	43db      	mvns	r3, r3
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	4013      	ands	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d003      	beq.n	8007c70 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007c68:	69ba      	ldr	r2, [r7, #24]
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	43db      	mvns	r3, r3
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	4013      	ands	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d003      	beq.n	8007c9a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	4313      	orrs	r3, r2
 8007c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	69ba      	ldr	r2, [r7, #24]
 8007c9e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	fa22 f303 	lsr.w	r3, r2, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f47f ae63 	bne.w	800797c <HAL_GPIO_Init+0x14>
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	3724      	adds	r7, #36	; 0x24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	58000400 	.word	0x58000400

08007cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	807b      	strh	r3, [r7, #2]
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cd8:	787b      	ldrb	r3, [r7, #1]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cde:	887a      	ldrh	r2, [r7, #2]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007ce4:	e003      	b.n	8007cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ce6:	887b      	ldrh	r3, [r7, #2]
 8007ce8:	041a      	lsls	r2, r3, #16
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	619a      	str	r2, [r3, #24]
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
	...

08007cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e08b      	b.n	8007e26 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d106      	bne.n	8007d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7f9 fe70 	bl	8001a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2224      	movs	r2, #36	; 0x24
 8007d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f022 0201 	bic.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007d4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689a      	ldr	r2, [r3, #8]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007d5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d107      	bne.n	8007d76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	689a      	ldr	r2, [r3, #8]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d72:	609a      	str	r2, [r3, #8]
 8007d74:	e006      	b.n	8007d84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007d82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d108      	bne.n	8007d9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d9a:	605a      	str	r2, [r3, #4]
 8007d9c:	e007      	b.n	8007dae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	685a      	ldr	r2, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007dac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6859      	ldr	r1, [r3, #4]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	4b1d      	ldr	r3, [pc, #116]	; (8007e30 <HAL_I2C_Init+0x134>)
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68da      	ldr	r2, [r3, #12]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007dcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691a      	ldr	r2, [r3, #16]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	699b      	ldr	r3, [r3, #24]
 8007dde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	69d9      	ldr	r1, [r3, #28]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1a      	ldr	r2, [r3, #32]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	430a      	orrs	r2, r1
 8007df6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2220      	movs	r2, #32
 8007e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	02008000 	.word	0x02008000

08007e34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b20      	cmp	r3, #32
 8007e48:	d138      	bne.n	8007ebc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e54:	2302      	movs	r3, #2
 8007e56:	e032      	b.n	8007ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2224      	movs	r2, #36	; 0x24
 8007e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f022 0201 	bic.w	r2, r2, #1
 8007e76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	6819      	ldr	r1, [r3, #0]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	683a      	ldr	r2, [r7, #0]
 8007e94:	430a      	orrs	r2, r1
 8007e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2220      	movs	r2, #32
 8007eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	e000      	b.n	8007ebe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ebc:	2302      	movs	r3, #2
  }
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
 8007ed2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2b20      	cmp	r3, #32
 8007ede:	d139      	bne.n	8007f54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e033      	b.n	8007f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2224      	movs	r2, #36	; 0x24
 8007efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0201 	bic.w	r2, r2, #1
 8007f0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	021b      	lsls	r3, r3, #8
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f042 0201 	orr.w	r2, r2, #1
 8007f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	e000      	b.n	8007f56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f54:	2302      	movs	r3, #2
  }
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3714      	adds	r7, #20
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
	...

08007f64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007f6c:	4b19      	ldr	r3, [pc, #100]	; (8007fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	d00a      	beq.n	8007f8e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007f78:	4b16      	ldr	r3, [pc, #88]	; (8007fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	f003 0307 	and.w	r3, r3, #7
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d001      	beq.n	8007f8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e01f      	b.n	8007fca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	e01d      	b.n	8007fca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007f8e:	4b11      	ldr	r3, [pc, #68]	; (8007fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	f023 0207 	bic.w	r2, r3, #7
 8007f96:	490f      	ldr	r1, [pc, #60]	; (8007fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007f9e:	f7fb f841 	bl	8003024 <HAL_GetTick>
 8007fa2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fa4:	e009      	b.n	8007fba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007fa6:	f7fb f83d 	bl	8003024 <HAL_GetTick>
 8007faa:	4602      	mov	r2, r0
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	1ad3      	subs	r3, r2, r3
 8007fb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fb4:	d901      	bls.n	8007fba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e007      	b.n	8007fca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007fba:	4b06      	ldr	r3, [pc, #24]	; (8007fd4 <HAL_PWREx_ConfigSupply+0x70>)
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fc6:	d1ee      	bne.n	8007fa6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	58024800 	.word	0x58024800

08007fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08c      	sub	sp, #48	; 0x30
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d102      	bne.n	8007fec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	f000 bc48 	b.w	800887c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f000 8088 	beq.w	800810a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ffa:	4b99      	ldr	r3, [pc, #612]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008002:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008004:	4b96      	ldr	r3, [pc, #600]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008008:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800800a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800800c:	2b10      	cmp	r3, #16
 800800e:	d007      	beq.n	8008020 <HAL_RCC_OscConfig+0x48>
 8008010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008012:	2b18      	cmp	r3, #24
 8008014:	d111      	bne.n	800803a <HAL_RCC_OscConfig+0x62>
 8008016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d10c      	bne.n	800803a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008020:	4b8f      	ldr	r3, [pc, #572]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d06d      	beq.n	8008108 <HAL_RCC_OscConfig+0x130>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d169      	bne.n	8008108 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	f000 bc21 	b.w	800887c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008042:	d106      	bne.n	8008052 <HAL_RCC_OscConfig+0x7a>
 8008044:	4b86      	ldr	r3, [pc, #536]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a85      	ldr	r2, [pc, #532]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 800804a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800804e:	6013      	str	r3, [r2, #0]
 8008050:	e02e      	b.n	80080b0 <HAL_RCC_OscConfig+0xd8>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10c      	bne.n	8008074 <HAL_RCC_OscConfig+0x9c>
 800805a:	4b81      	ldr	r3, [pc, #516]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a80      	ldr	r2, [pc, #512]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008064:	6013      	str	r3, [r2, #0]
 8008066:	4b7e      	ldr	r3, [pc, #504]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a7d      	ldr	r2, [pc, #500]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 800806c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	e01d      	b.n	80080b0 <HAL_RCC_OscConfig+0xd8>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800807c:	d10c      	bne.n	8008098 <HAL_RCC_OscConfig+0xc0>
 800807e:	4b78      	ldr	r3, [pc, #480]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a77      	ldr	r2, [pc, #476]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	4b75      	ldr	r3, [pc, #468]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a74      	ldr	r2, [pc, #464]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	e00b      	b.n	80080b0 <HAL_RCC_OscConfig+0xd8>
 8008098:	4b71      	ldr	r3, [pc, #452]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a70      	ldr	r2, [pc, #448]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 800809e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	4b6e      	ldr	r3, [pc, #440]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a6d      	ldr	r2, [pc, #436]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80080aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80080ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d013      	beq.n	80080e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080b8:	f7fa ffb4 	bl	8003024 <HAL_GetTick>
 80080bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080c0:	f7fa ffb0 	bl	8003024 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b64      	cmp	r3, #100	; 0x64
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e3d4      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080d2:	4b63      	ldr	r3, [pc, #396]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0f0      	beq.n	80080c0 <HAL_RCC_OscConfig+0xe8>
 80080de:	e014      	b.n	800810a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080e0:	f7fa ffa0 	bl	8003024 <HAL_GetTick>
 80080e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080e8:	f7fa ff9c 	bl	8003024 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b64      	cmp	r3, #100	; 0x64
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e3c0      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80080fa:	4b59      	ldr	r3, [pc, #356]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1f0      	bne.n	80080e8 <HAL_RCC_OscConfig+0x110>
 8008106:	e000      	b.n	800810a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 80ca 	beq.w	80082ac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008118:	4b51      	ldr	r3, [pc, #324]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008120:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008122:	4b4f      	ldr	r3, [pc, #316]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008126:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d007      	beq.n	800813e <HAL_RCC_OscConfig+0x166>
 800812e:	6a3b      	ldr	r3, [r7, #32]
 8008130:	2b18      	cmp	r3, #24
 8008132:	d156      	bne.n	80081e2 <HAL_RCC_OscConfig+0x20a>
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f003 0303 	and.w	r3, r3, #3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d151      	bne.n	80081e2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800813e:	4b48      	ldr	r3, [pc, #288]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f003 0304 	and.w	r3, r3, #4
 8008146:	2b00      	cmp	r3, #0
 8008148:	d005      	beq.n	8008156 <HAL_RCC_OscConfig+0x17e>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e392      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008156:	4b42      	ldr	r3, [pc, #264]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f023 0219 	bic.w	r2, r3, #25
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	68db      	ldr	r3, [r3, #12]
 8008162:	493f      	ldr	r1, [pc, #252]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008164:	4313      	orrs	r3, r2
 8008166:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008168:	f7fa ff5c 	bl	8003024 <HAL_GetTick>
 800816c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800816e:	e008      	b.n	8008182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008170:	f7fa ff58 	bl	8003024 <HAL_GetTick>
 8008174:	4602      	mov	r2, r0
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	2b02      	cmp	r3, #2
 800817c:	d901      	bls.n	8008182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800817e:	2303      	movs	r3, #3
 8008180:	e37c      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008182:	4b37      	ldr	r3, [pc, #220]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d0f0      	beq.n	8008170 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800818e:	f7fa ff55 	bl	800303c <HAL_GetREVID>
 8008192:	4603      	mov	r3, r0
 8008194:	f241 0203 	movw	r2, #4099	; 0x1003
 8008198:	4293      	cmp	r3, r2
 800819a:	d817      	bhi.n	80081cc <HAL_RCC_OscConfig+0x1f4>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	691b      	ldr	r3, [r3, #16]
 80081a0:	2b40      	cmp	r3, #64	; 0x40
 80081a2:	d108      	bne.n	80081b6 <HAL_RCC_OscConfig+0x1de>
 80081a4:	4b2e      	ldr	r3, [pc, #184]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80081ac:	4a2c      	ldr	r2, [pc, #176]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80081ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081b2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081b4:	e07a      	b.n	80082ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081b6:	4b2a      	ldr	r3, [pc, #168]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	031b      	lsls	r3, r3, #12
 80081c4:	4926      	ldr	r1, [pc, #152]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081ca:	e06f      	b.n	80082ac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081cc:	4b24      	ldr	r3, [pc, #144]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	061b      	lsls	r3, r3, #24
 80081da:	4921      	ldr	r1, [pc, #132]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081e0:	e064      	b.n	80082ac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d047      	beq.n	800827a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80081ea:	4b1d      	ldr	r3, [pc, #116]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f023 0219 	bic.w	r2, r3, #25
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	491a      	ldr	r1, [pc, #104]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fc:	f7fa ff12 	bl	8003024 <HAL_GetTick>
 8008200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008202:	e008      	b.n	8008216 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008204:	f7fa ff0e 	bl	8003024 <HAL_GetTick>
 8008208:	4602      	mov	r2, r0
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	1ad3      	subs	r3, r2, r3
 800820e:	2b02      	cmp	r3, #2
 8008210:	d901      	bls.n	8008216 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008212:	2303      	movs	r3, #3
 8008214:	e332      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008216:	4b12      	ldr	r3, [pc, #72]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f003 0304 	and.w	r3, r3, #4
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0f0      	beq.n	8008204 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008222:	f7fa ff0b 	bl	800303c <HAL_GetREVID>
 8008226:	4603      	mov	r3, r0
 8008228:	f241 0203 	movw	r2, #4099	; 0x1003
 800822c:	4293      	cmp	r3, r2
 800822e:	d819      	bhi.n	8008264 <HAL_RCC_OscConfig+0x28c>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	2b40      	cmp	r3, #64	; 0x40
 8008236:	d108      	bne.n	800824a <HAL_RCC_OscConfig+0x272>
 8008238:	4b09      	ldr	r3, [pc, #36]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008240:	4a07      	ldr	r2, [pc, #28]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 8008242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008246:	6053      	str	r3, [r2, #4]
 8008248:	e030      	b.n	80082ac <HAL_RCC_OscConfig+0x2d4>
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	031b      	lsls	r3, r3, #12
 8008258:	4901      	ldr	r1, [pc, #4]	; (8008260 <HAL_RCC_OscConfig+0x288>)
 800825a:	4313      	orrs	r3, r2
 800825c:	604b      	str	r3, [r1, #4]
 800825e:	e025      	b.n	80082ac <HAL_RCC_OscConfig+0x2d4>
 8008260:	58024400 	.word	0x58024400
 8008264:	4b9a      	ldr	r3, [pc, #616]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	061b      	lsls	r3, r3, #24
 8008272:	4997      	ldr	r1, [pc, #604]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008274:	4313      	orrs	r3, r2
 8008276:	604b      	str	r3, [r1, #4]
 8008278:	e018      	b.n	80082ac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800827a:	4b95      	ldr	r3, [pc, #596]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a94      	ldr	r2, [pc, #592]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008280:	f023 0301 	bic.w	r3, r3, #1
 8008284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008286:	f7fa fecd 	bl	8003024 <HAL_GetTick>
 800828a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800828c:	e008      	b.n	80082a0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800828e:	f7fa fec9 	bl	8003024 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e2ed      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80082a0:	4b8b      	ldr	r3, [pc, #556]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f003 0304 	and.w	r3, r3, #4
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1f0      	bne.n	800828e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	f000 80a9 	beq.w	800840c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082ba:	4b85      	ldr	r3, [pc, #532]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082c2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80082c4:	4b82      	ldr	r3, [pc, #520]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80082c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082c8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2b08      	cmp	r3, #8
 80082ce:	d007      	beq.n	80082e0 <HAL_RCC_OscConfig+0x308>
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	2b18      	cmp	r3, #24
 80082d4:	d13a      	bne.n	800834c <HAL_RCC_OscConfig+0x374>
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f003 0303 	and.w	r3, r3, #3
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d135      	bne.n	800834c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082e0:	4b7b      	ldr	r3, [pc, #492]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <HAL_RCC_OscConfig+0x320>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	69db      	ldr	r3, [r3, #28]
 80082f0:	2b80      	cmp	r3, #128	; 0x80
 80082f2:	d001      	beq.n	80082f8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e2c1      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082f8:	f7fa fea0 	bl	800303c <HAL_GetREVID>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f241 0203 	movw	r2, #4099	; 0x1003
 8008302:	4293      	cmp	r3, r2
 8008304:	d817      	bhi.n	8008336 <HAL_RCC_OscConfig+0x35e>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	2b20      	cmp	r3, #32
 800830c:	d108      	bne.n	8008320 <HAL_RCC_OscConfig+0x348>
 800830e:	4b70      	ldr	r3, [pc, #448]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008316:	4a6e      	ldr	r2, [pc, #440]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800831c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800831e:	e075      	b.n	800840c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008320:	4b6b      	ldr	r3, [pc, #428]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6a1b      	ldr	r3, [r3, #32]
 800832c:	069b      	lsls	r3, r3, #26
 800832e:	4968      	ldr	r1, [pc, #416]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008330:	4313      	orrs	r3, r2
 8008332:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008334:	e06a      	b.n	800840c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008336:	4b66      	ldr	r3, [pc, #408]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	061b      	lsls	r3, r3, #24
 8008344:	4962      	ldr	r1, [pc, #392]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008346:	4313      	orrs	r3, r2
 8008348:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800834a:	e05f      	b.n	800840c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	69db      	ldr	r3, [r3, #28]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d042      	beq.n	80083da <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008354:	4b5e      	ldr	r3, [pc, #376]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a5d      	ldr	r2, [pc, #372]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 800835a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800835e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008360:	f7fa fe60 	bl	8003024 <HAL_GetTick>
 8008364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008366:	e008      	b.n	800837a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008368:	f7fa fe5c 	bl	8003024 <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	2b02      	cmp	r3, #2
 8008374:	d901      	bls.n	800837a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008376:	2303      	movs	r3, #3
 8008378:	e280      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800837a:	4b55      	ldr	r3, [pc, #340]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008382:	2b00      	cmp	r3, #0
 8008384:	d0f0      	beq.n	8008368 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008386:	f7fa fe59 	bl	800303c <HAL_GetREVID>
 800838a:	4603      	mov	r3, r0
 800838c:	f241 0203 	movw	r2, #4099	; 0x1003
 8008390:	4293      	cmp	r3, r2
 8008392:	d817      	bhi.n	80083c4 <HAL_RCC_OscConfig+0x3ec>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a1b      	ldr	r3, [r3, #32]
 8008398:	2b20      	cmp	r3, #32
 800839a:	d108      	bne.n	80083ae <HAL_RCC_OscConfig+0x3d6>
 800839c:	4b4c      	ldr	r3, [pc, #304]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80083a4:	4a4a      	ldr	r2, [pc, #296]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80083a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083aa:	6053      	str	r3, [r2, #4]
 80083ac:	e02e      	b.n	800840c <HAL_RCC_OscConfig+0x434>
 80083ae:	4b48      	ldr	r3, [pc, #288]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	069b      	lsls	r3, r3, #26
 80083bc:	4944      	ldr	r1, [pc, #272]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	604b      	str	r3, [r1, #4]
 80083c2:	e023      	b.n	800840c <HAL_RCC_OscConfig+0x434>
 80083c4:	4b42      	ldr	r3, [pc, #264]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80083c6:	68db      	ldr	r3, [r3, #12]
 80083c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	061b      	lsls	r3, r3, #24
 80083d2:	493f      	ldr	r1, [pc, #252]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60cb      	str	r3, [r1, #12]
 80083d8:	e018      	b.n	800840c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80083da:	4b3d      	ldr	r3, [pc, #244]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a3c      	ldr	r2, [pc, #240]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80083e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e6:	f7fa fe1d 	bl	8003024 <HAL_GetTick>
 80083ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80083ec:	e008      	b.n	8008400 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80083ee:	f7fa fe19 	bl	8003024 <HAL_GetTick>
 80083f2:	4602      	mov	r2, r0
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	2b02      	cmp	r3, #2
 80083fa:	d901      	bls.n	8008400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e23d      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008400:	4b33      	ldr	r3, [pc, #204]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1f0      	bne.n	80083ee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b00      	cmp	r3, #0
 8008416:	d036      	beq.n	8008486 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d019      	beq.n	8008454 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008420:	4b2b      	ldr	r3, [pc, #172]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008424:	4a2a      	ldr	r2, [pc, #168]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008426:	f043 0301 	orr.w	r3, r3, #1
 800842a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800842c:	f7fa fdfa 	bl	8003024 <HAL_GetTick>
 8008430:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008432:	e008      	b.n	8008446 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008434:	f7fa fdf6 	bl	8003024 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b02      	cmp	r3, #2
 8008440:	d901      	bls.n	8008446 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e21a      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008446:	4b22      	ldr	r3, [pc, #136]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0f0      	beq.n	8008434 <HAL_RCC_OscConfig+0x45c>
 8008452:	e018      	b.n	8008486 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008454:	4b1e      	ldr	r3, [pc, #120]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 8008456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008458:	4a1d      	ldr	r2, [pc, #116]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 800845a:	f023 0301 	bic.w	r3, r3, #1
 800845e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008460:	f7fa fde0 	bl	8003024 <HAL_GetTick>
 8008464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008466:	e008      	b.n	800847a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008468:	f7fa fddc 	bl	8003024 <HAL_GetTick>
 800846c:	4602      	mov	r2, r0
 800846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008470:	1ad3      	subs	r3, r2, r3
 8008472:	2b02      	cmp	r3, #2
 8008474:	d901      	bls.n	800847a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008476:	2303      	movs	r3, #3
 8008478:	e200      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800847a:	4b15      	ldr	r3, [pc, #84]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 800847c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800847e:	f003 0302 	and.w	r3, r3, #2
 8008482:	2b00      	cmp	r3, #0
 8008484:	d1f0      	bne.n	8008468 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f003 0320 	and.w	r3, r3, #32
 800848e:	2b00      	cmp	r3, #0
 8008490:	d039      	beq.n	8008506 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d01c      	beq.n	80084d4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800849a:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a0c      	ldr	r2, [pc, #48]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80084a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80084a4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084a6:	f7fa fdbd 	bl	8003024 <HAL_GetTick>
 80084aa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084ac:	e008      	b.n	80084c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084ae:	f7fa fdb9 	bl	8003024 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d901      	bls.n	80084c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80084bc:	2303      	movs	r3, #3
 80084be:	e1dd      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80084c0:	4b03      	ldr	r3, [pc, #12]	; (80084d0 <HAL_RCC_OscConfig+0x4f8>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d0f0      	beq.n	80084ae <HAL_RCC_OscConfig+0x4d6>
 80084cc:	e01b      	b.n	8008506 <HAL_RCC_OscConfig+0x52e>
 80084ce:	bf00      	nop
 80084d0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80084d4:	4b9b      	ldr	r3, [pc, #620]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a9a      	ldr	r2, [pc, #616]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80084da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80084e0:	f7fa fda0 	bl	8003024 <HAL_GetTick>
 80084e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084e6:	e008      	b.n	80084fa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80084e8:	f7fa fd9c 	bl	8003024 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b02      	cmp	r3, #2
 80084f4:	d901      	bls.n	80084fa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e1c0      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80084fa:	4b92      	ldr	r3, [pc, #584]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1f0      	bne.n	80084e8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 8081 	beq.w	8008616 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008514:	4b8c      	ldr	r3, [pc, #560]	; (8008748 <HAL_RCC_OscConfig+0x770>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a8b      	ldr	r2, [pc, #556]	; (8008748 <HAL_RCC_OscConfig+0x770>)
 800851a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800851e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008520:	f7fa fd80 	bl	8003024 <HAL_GetTick>
 8008524:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008526:	e008      	b.n	800853a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008528:	f7fa fd7c 	bl	8003024 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	2b64      	cmp	r3, #100	; 0x64
 8008534:	d901      	bls.n	800853a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e1a0      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800853a:	4b83      	ldr	r3, [pc, #524]	; (8008748 <HAL_RCC_OscConfig+0x770>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0f0      	beq.n	8008528 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	2b01      	cmp	r3, #1
 800854c:	d106      	bne.n	800855c <HAL_RCC_OscConfig+0x584>
 800854e:	4b7d      	ldr	r3, [pc, #500]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	4a7c      	ldr	r2, [pc, #496]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008554:	f043 0301 	orr.w	r3, r3, #1
 8008558:	6713      	str	r3, [r2, #112]	; 0x70
 800855a:	e02d      	b.n	80085b8 <HAL_RCC_OscConfig+0x5e0>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10c      	bne.n	800857e <HAL_RCC_OscConfig+0x5a6>
 8008564:	4b77      	ldr	r3, [pc, #476]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008568:	4a76      	ldr	r2, [pc, #472]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 800856a:	f023 0301 	bic.w	r3, r3, #1
 800856e:	6713      	str	r3, [r2, #112]	; 0x70
 8008570:	4b74      	ldr	r3, [pc, #464]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008574:	4a73      	ldr	r2, [pc, #460]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008576:	f023 0304 	bic.w	r3, r3, #4
 800857a:	6713      	str	r3, [r2, #112]	; 0x70
 800857c:	e01c      	b.n	80085b8 <HAL_RCC_OscConfig+0x5e0>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2b05      	cmp	r3, #5
 8008584:	d10c      	bne.n	80085a0 <HAL_RCC_OscConfig+0x5c8>
 8008586:	4b6f      	ldr	r3, [pc, #444]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858a:	4a6e      	ldr	r2, [pc, #440]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 800858c:	f043 0304 	orr.w	r3, r3, #4
 8008590:	6713      	str	r3, [r2, #112]	; 0x70
 8008592:	4b6c      	ldr	r3, [pc, #432]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008596:	4a6b      	ldr	r2, [pc, #428]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008598:	f043 0301 	orr.w	r3, r3, #1
 800859c:	6713      	str	r3, [r2, #112]	; 0x70
 800859e:	e00b      	b.n	80085b8 <HAL_RCC_OscConfig+0x5e0>
 80085a0:	4b68      	ldr	r3, [pc, #416]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80085a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085a4:	4a67      	ldr	r2, [pc, #412]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80085a6:	f023 0301 	bic.w	r3, r3, #1
 80085aa:	6713      	str	r3, [r2, #112]	; 0x70
 80085ac:	4b65      	ldr	r3, [pc, #404]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80085ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085b0:	4a64      	ldr	r2, [pc, #400]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80085b2:	f023 0304 	bic.w	r3, r3, #4
 80085b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d015      	beq.n	80085ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085c0:	f7fa fd30 	bl	8003024 <HAL_GetTick>
 80085c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085c6:	e00a      	b.n	80085de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085c8:	f7fa fd2c 	bl	8003024 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d901      	bls.n	80085de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e14e      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80085de:	4b59      	ldr	r3, [pc, #356]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80085e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0ee      	beq.n	80085c8 <HAL_RCC_OscConfig+0x5f0>
 80085ea:	e014      	b.n	8008616 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085ec:	f7fa fd1a 	bl	8003024 <HAL_GetTick>
 80085f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80085f2:	e00a      	b.n	800860a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085f4:	f7fa fd16 	bl	8003024 <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008602:	4293      	cmp	r3, r2
 8008604:	d901      	bls.n	800860a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008606:	2303      	movs	r3, #3
 8008608:	e138      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800860a:	4b4e      	ldr	r3, [pc, #312]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 800860c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860e:	f003 0302 	and.w	r3, r3, #2
 8008612:	2b00      	cmp	r3, #0
 8008614:	d1ee      	bne.n	80085f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 812d 	beq.w	800887a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008620:	4b48      	ldr	r3, [pc, #288]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008622:	691b      	ldr	r3, [r3, #16]
 8008624:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008628:	2b18      	cmp	r3, #24
 800862a:	f000 80bd 	beq.w	80087a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008632:	2b02      	cmp	r3, #2
 8008634:	f040 809e 	bne.w	8008774 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008638:	4b42      	ldr	r3, [pc, #264]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a41      	ldr	r2, [pc, #260]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 800863e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008644:	f7fa fcee 	bl	8003024 <HAL_GetTick>
 8008648:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800864a:	e008      	b.n	800865e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800864c:	f7fa fcea 	bl	8003024 <HAL_GetTick>
 8008650:	4602      	mov	r2, r0
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d901      	bls.n	800865e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e10e      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800865e:	4b39      	ldr	r3, [pc, #228]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008666:	2b00      	cmp	r3, #0
 8008668:	d1f0      	bne.n	800864c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800866a:	4b36      	ldr	r3, [pc, #216]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 800866c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800866e:	4b37      	ldr	r3, [pc, #220]	; (800874c <HAL_RCC_OscConfig+0x774>)
 8008670:	4013      	ands	r3, r2
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800867a:	0112      	lsls	r2, r2, #4
 800867c:	430a      	orrs	r2, r1
 800867e:	4931      	ldr	r1, [pc, #196]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008680:	4313      	orrs	r3, r2
 8008682:	628b      	str	r3, [r1, #40]	; 0x28
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008688:	3b01      	subs	r3, #1
 800868a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008692:	3b01      	subs	r3, #1
 8008694:	025b      	lsls	r3, r3, #9
 8008696:	b29b      	uxth	r3, r3
 8008698:	431a      	orrs	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869e:	3b01      	subs	r3, #1
 80086a0:	041b      	lsls	r3, r3, #16
 80086a2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80086a6:	431a      	orrs	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ac:	3b01      	subs	r3, #1
 80086ae:	061b      	lsls	r3, r3, #24
 80086b0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80086b4:	4923      	ldr	r1, [pc, #140]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80086ba:	4b22      	ldr	r3, [pc, #136]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80086bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086be:	4a21      	ldr	r2, [pc, #132]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80086c0:	f023 0301 	bic.w	r3, r3, #1
 80086c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80086c6:	4b1f      	ldr	r3, [pc, #124]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80086c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ca:	4b21      	ldr	r3, [pc, #132]	; (8008750 <HAL_RCC_OscConfig+0x778>)
 80086cc:	4013      	ands	r3, r2
 80086ce:	687a      	ldr	r2, [r7, #4]
 80086d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80086d2:	00d2      	lsls	r2, r2, #3
 80086d4:	491b      	ldr	r1, [pc, #108]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80086d6:	4313      	orrs	r3, r2
 80086d8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80086da:	4b1a      	ldr	r3, [pc, #104]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80086dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086de:	f023 020c 	bic.w	r2, r3, #12
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	4917      	ldr	r1, [pc, #92]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80086e8:	4313      	orrs	r3, r2
 80086ea:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80086ec:	4b15      	ldr	r3, [pc, #84]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80086ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f0:	f023 0202 	bic.w	r2, r3, #2
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f8:	4912      	ldr	r1, [pc, #72]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 80086fa:	4313      	orrs	r3, r2
 80086fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80086fe:	4b11      	ldr	r3, [pc, #68]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	4a10      	ldr	r2, [pc, #64]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008708:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800870a:	4b0e      	ldr	r3, [pc, #56]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 800870c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800870e:	4a0d      	ldr	r2, [pc, #52]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008714:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008716:	4b0b      	ldr	r3, [pc, #44]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871a:	4a0a      	ldr	r2, [pc, #40]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 800871c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008720:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008722:	4b08      	ldr	r3, [pc, #32]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008726:	4a07      	ldr	r2, [pc, #28]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008728:	f043 0301 	orr.w	r3, r3, #1
 800872c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800872e:	4b05      	ldr	r3, [pc, #20]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a04      	ldr	r2, [pc, #16]	; (8008744 <HAL_RCC_OscConfig+0x76c>)
 8008734:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873a:	f7fa fc73 	bl	8003024 <HAL_GetTick>
 800873e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008740:	e011      	b.n	8008766 <HAL_RCC_OscConfig+0x78e>
 8008742:	bf00      	nop
 8008744:	58024400 	.word	0x58024400
 8008748:	58024800 	.word	0x58024800
 800874c:	fffffc0c 	.word	0xfffffc0c
 8008750:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008754:	f7fa fc66 	bl	8003024 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d901      	bls.n	8008766 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e08a      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008766:	4b47      	ldr	r3, [pc, #284]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800876e:	2b00      	cmp	r3, #0
 8008770:	d0f0      	beq.n	8008754 <HAL_RCC_OscConfig+0x77c>
 8008772:	e082      	b.n	800887a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008774:	4b43      	ldr	r3, [pc, #268]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a42      	ldr	r2, [pc, #264]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 800877a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800877e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008780:	f7fa fc50 	bl	8003024 <HAL_GetTick>
 8008784:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008786:	e008      	b.n	800879a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008788:	f7fa fc4c 	bl	8003024 <HAL_GetTick>
 800878c:	4602      	mov	r2, r0
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	2b02      	cmp	r3, #2
 8008794:	d901      	bls.n	800879a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e070      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800879a:	4b3a      	ldr	r3, [pc, #232]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1f0      	bne.n	8008788 <HAL_RCC_OscConfig+0x7b0>
 80087a6:	e068      	b.n	800887a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80087a8:	4b36      	ldr	r3, [pc, #216]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 80087aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80087ae:	4b35      	ldr	r3, [pc, #212]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 80087b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d031      	beq.n	8008820 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	f003 0203 	and.w	r2, r3, #3
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d12a      	bne.n	8008820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	091b      	lsrs	r3, r3, #4
 80087ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d122      	bne.n	8008820 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d11a      	bne.n	8008820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	0a5b      	lsrs	r3, r3, #9
 80087ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d111      	bne.n	8008820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008808:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800880a:	429a      	cmp	r2, r3
 800880c:	d108      	bne.n	8008820 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	0e1b      	lsrs	r3, r3, #24
 8008812:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800881c:	429a      	cmp	r2, r3
 800881e:	d001      	beq.n	8008824 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e02b      	b.n	800887c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008824:	4b17      	ldr	r3, [pc, #92]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 8008826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008828:	08db      	lsrs	r3, r3, #3
 800882a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800882e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008834:	693a      	ldr	r2, [r7, #16]
 8008836:	429a      	cmp	r2, r3
 8008838:	d01f      	beq.n	800887a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800883a:	4b12      	ldr	r3, [pc, #72]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 800883c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883e:	4a11      	ldr	r2, [pc, #68]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 8008840:	f023 0301 	bic.w	r3, r3, #1
 8008844:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008846:	f7fa fbed 	bl	8003024 <HAL_GetTick>
 800884a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800884c:	bf00      	nop
 800884e:	f7fa fbe9 	bl	8003024 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	4293      	cmp	r3, r2
 8008858:	d0f9      	beq.n	800884e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800885a:	4b0a      	ldr	r3, [pc, #40]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 800885c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800885e:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <HAL_RCC_OscConfig+0x8b0>)
 8008860:	4013      	ands	r3, r2
 8008862:	687a      	ldr	r2, [r7, #4]
 8008864:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008866:	00d2      	lsls	r2, r2, #3
 8008868:	4906      	ldr	r1, [pc, #24]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 800886a:	4313      	orrs	r3, r2
 800886c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800886e:	4b05      	ldr	r3, [pc, #20]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 8008870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008872:	4a04      	ldr	r2, [pc, #16]	; (8008884 <HAL_RCC_OscConfig+0x8ac>)
 8008874:	f043 0301 	orr.w	r3, r3, #1
 8008878:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3730      	adds	r7, #48	; 0x30
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}
 8008884:	58024400 	.word	0x58024400
 8008888:	ffff0007 	.word	0xffff0007

0800888c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e19c      	b.n	8008bda <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088a0:	4b8a      	ldr	r3, [pc, #552]	; (8008acc <HAL_RCC_ClockConfig+0x240>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 030f 	and.w	r3, r3, #15
 80088a8:	683a      	ldr	r2, [r7, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d910      	bls.n	80088d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088ae:	4b87      	ldr	r3, [pc, #540]	; (8008acc <HAL_RCC_ClockConfig+0x240>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f023 020f 	bic.w	r2, r3, #15
 80088b6:	4985      	ldr	r1, [pc, #532]	; (8008acc <HAL_RCC_ClockConfig+0x240>)
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088be:	4b83      	ldr	r3, [pc, #524]	; (8008acc <HAL_RCC_ClockConfig+0x240>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 030f 	and.w	r3, r3, #15
 80088c6:	683a      	ldr	r2, [r7, #0]
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d001      	beq.n	80088d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e184      	b.n	8008bda <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 0304 	and.w	r3, r3, #4
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d010      	beq.n	80088fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	691a      	ldr	r2, [r3, #16]
 80088e0:	4b7b      	ldr	r3, [pc, #492]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d908      	bls.n	80088fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80088ec:	4b78      	ldr	r3, [pc, #480]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	4975      	ldr	r1, [pc, #468]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f003 0308 	and.w	r3, r3, #8
 8008906:	2b00      	cmp	r3, #0
 8008908:	d010      	beq.n	800892c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	695a      	ldr	r2, [r3, #20]
 800890e:	4b70      	ldr	r3, [pc, #448]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008910:	69db      	ldr	r3, [r3, #28]
 8008912:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008916:	429a      	cmp	r2, r3
 8008918:	d908      	bls.n	800892c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800891a:	4b6d      	ldr	r3, [pc, #436]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 800891c:	69db      	ldr	r3, [r3, #28]
 800891e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	496a      	ldr	r1, [pc, #424]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008928:	4313      	orrs	r3, r2
 800892a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0310 	and.w	r3, r3, #16
 8008934:	2b00      	cmp	r3, #0
 8008936:	d010      	beq.n	800895a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	699a      	ldr	r2, [r3, #24]
 800893c:	4b64      	ldr	r3, [pc, #400]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008944:	429a      	cmp	r2, r3
 8008946:	d908      	bls.n	800895a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008948:	4b61      	ldr	r3, [pc, #388]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 800894a:	69db      	ldr	r3, [r3, #28]
 800894c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	495e      	ldr	r1, [pc, #376]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008956:	4313      	orrs	r3, r2
 8008958:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b00      	cmp	r3, #0
 8008964:	d010      	beq.n	8008988 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	69da      	ldr	r2, [r3, #28]
 800896a:	4b59      	ldr	r3, [pc, #356]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 800896c:	6a1b      	ldr	r3, [r3, #32]
 800896e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008972:	429a      	cmp	r2, r3
 8008974:	d908      	bls.n	8008988 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008976:	4b56      	ldr	r3, [pc, #344]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	4953      	ldr	r1, [pc, #332]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008984:	4313      	orrs	r3, r2
 8008986:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f003 0302 	and.w	r3, r3, #2
 8008990:	2b00      	cmp	r3, #0
 8008992:	d010      	beq.n	80089b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	4b4d      	ldr	r3, [pc, #308]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 800899a:	699b      	ldr	r3, [r3, #24]
 800899c:	f003 030f 	and.w	r3, r3, #15
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d908      	bls.n	80089b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089a4:	4b4a      	ldr	r3, [pc, #296]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	f023 020f 	bic.w	r2, r3, #15
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	4947      	ldr	r1, [pc, #284]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d055      	beq.n	8008a6e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80089c2:	4b43      	ldr	r3, [pc, #268]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	4940      	ldr	r1, [pc, #256]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	2b02      	cmp	r3, #2
 80089da:	d107      	bne.n	80089ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80089dc:	4b3c      	ldr	r3, [pc, #240]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d121      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e0f6      	b.n	8008bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2b03      	cmp	r3, #3
 80089f2:	d107      	bne.n	8008a04 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80089f4:	4b36      	ldr	r3, [pc, #216]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d115      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	e0ea      	b.n	8008bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d107      	bne.n	8008a1c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008a0c:	4b30      	ldr	r3, [pc, #192]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d109      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e0de      	b.n	8008bda <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a1c:	4b2c      	ldr	r3, [pc, #176]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0304 	and.w	r3, r3, #4
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e0d6      	b.n	8008bda <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008a2c:	4b28      	ldr	r3, [pc, #160]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	f023 0207 	bic.w	r2, r3, #7
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	4925      	ldr	r1, [pc, #148]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a3e:	f7fa faf1 	bl	8003024 <HAL_GetTick>
 8008a42:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a44:	e00a      	b.n	8008a5c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a46:	f7fa faed 	bl	8003024 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d901      	bls.n	8008a5c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e0be      	b.n	8008bda <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a5c:	4b1c      	ldr	r3, [pc, #112]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	685b      	ldr	r3, [r3, #4]
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d1eb      	bne.n	8008a46 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 0302 	and.w	r3, r3, #2
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d010      	beq.n	8008a9c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	68da      	ldr	r2, [r3, #12]
 8008a7e:	4b14      	ldr	r3, [pc, #80]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	f003 030f 	and.w	r3, r3, #15
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d208      	bcs.n	8008a9c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a8a:	4b11      	ldr	r3, [pc, #68]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	f023 020f 	bic.w	r2, r3, #15
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	490e      	ldr	r1, [pc, #56]	; (8008ad0 <HAL_RCC_ClockConfig+0x244>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a9c:	4b0b      	ldr	r3, [pc, #44]	; (8008acc <HAL_RCC_ClockConfig+0x240>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 030f 	and.w	r3, r3, #15
 8008aa4:	683a      	ldr	r2, [r7, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d214      	bcs.n	8008ad4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008aaa:	4b08      	ldr	r3, [pc, #32]	; (8008acc <HAL_RCC_ClockConfig+0x240>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f023 020f 	bic.w	r2, r3, #15
 8008ab2:	4906      	ldr	r1, [pc, #24]	; (8008acc <HAL_RCC_ClockConfig+0x240>)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aba:	4b04      	ldr	r3, [pc, #16]	; (8008acc <HAL_RCC_ClockConfig+0x240>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d005      	beq.n	8008ad4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008ac8:	2301      	movs	r3, #1
 8008aca:	e086      	b.n	8008bda <HAL_RCC_ClockConfig+0x34e>
 8008acc:	52002000 	.word	0x52002000
 8008ad0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0304 	and.w	r3, r3, #4
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d010      	beq.n	8008b02 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	691a      	ldr	r2, [r3, #16]
 8008ae4:	4b3f      	ldr	r3, [pc, #252]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d208      	bcs.n	8008b02 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008af0:	4b3c      	ldr	r3, [pc, #240]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	4939      	ldr	r1, [pc, #228]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008afe:	4313      	orrs	r3, r2
 8008b00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f003 0308 	and.w	r3, r3, #8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d010      	beq.n	8008b30 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	695a      	ldr	r2, [r3, #20]
 8008b12:	4b34      	ldr	r3, [pc, #208]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d208      	bcs.n	8008b30 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008b1e:	4b31      	ldr	r3, [pc, #196]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008b20:	69db      	ldr	r3, [r3, #28]
 8008b22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	492e      	ldr	r1, [pc, #184]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0310 	and.w	r3, r3, #16
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d010      	beq.n	8008b5e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	4b28      	ldr	r3, [pc, #160]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d208      	bcs.n	8008b5e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008b4c:	4b25      	ldr	r3, [pc, #148]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008b4e:	69db      	ldr	r3, [r3, #28]
 8008b50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	699b      	ldr	r3, [r3, #24]
 8008b58:	4922      	ldr	r1, [pc, #136]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0320 	and.w	r3, r3, #32
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d010      	beq.n	8008b8c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	69da      	ldr	r2, [r3, #28]
 8008b6e:	4b1d      	ldr	r3, [pc, #116]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d208      	bcs.n	8008b8c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008b7a:	4b1a      	ldr	r3, [pc, #104]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	4917      	ldr	r1, [pc, #92]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008b8c:	f000 f834 	bl	8008bf8 <HAL_RCC_GetSysClockFreq>
 8008b90:	4602      	mov	r2, r0
 8008b92:	4b14      	ldr	r3, [pc, #80]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	0a1b      	lsrs	r3, r3, #8
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	4912      	ldr	r1, [pc, #72]	; (8008be8 <HAL_RCC_ClockConfig+0x35c>)
 8008b9e:	5ccb      	ldrb	r3, [r1, r3]
 8008ba0:	f003 031f 	and.w	r3, r3, #31
 8008ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008baa:	4b0e      	ldr	r3, [pc, #56]	; (8008be4 <HAL_RCC_ClockConfig+0x358>)
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	f003 030f 	and.w	r3, r3, #15
 8008bb2:	4a0d      	ldr	r2, [pc, #52]	; (8008be8 <HAL_RCC_ClockConfig+0x35c>)
 8008bb4:	5cd3      	ldrb	r3, [r2, r3]
 8008bb6:	f003 031f 	and.w	r3, r3, #31
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8008bc0:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <HAL_RCC_ClockConfig+0x360>)
 8008bc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008bc4:	4a0a      	ldr	r2, [pc, #40]	; (8008bf0 <HAL_RCC_ClockConfig+0x364>)
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008bca:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <HAL_RCC_ClockConfig+0x368>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fa f9de 	bl	8002f90 <HAL_InitTick>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	58024400 	.word	0x58024400
 8008be8:	0800d8b4 	.word	0x0800d8b4
 8008bec:	24000004 	.word	0x24000004
 8008bf0:	24000000 	.word	0x24000000
 8008bf4:	2400000c 	.word	0x2400000c

08008bf8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b089      	sub	sp, #36	; 0x24
 8008bfc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bfe:	4bb3      	ldr	r3, [pc, #716]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c00:	691b      	ldr	r3, [r3, #16]
 8008c02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c06:	2b18      	cmp	r3, #24
 8008c08:	f200 8155 	bhi.w	8008eb6 <HAL_RCC_GetSysClockFreq+0x2be>
 8008c0c:	a201      	add	r2, pc, #4	; (adr r2, 8008c14 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c12:	bf00      	nop
 8008c14:	08008c79 	.word	0x08008c79
 8008c18:	08008eb7 	.word	0x08008eb7
 8008c1c:	08008eb7 	.word	0x08008eb7
 8008c20:	08008eb7 	.word	0x08008eb7
 8008c24:	08008eb7 	.word	0x08008eb7
 8008c28:	08008eb7 	.word	0x08008eb7
 8008c2c:	08008eb7 	.word	0x08008eb7
 8008c30:	08008eb7 	.word	0x08008eb7
 8008c34:	08008c9f 	.word	0x08008c9f
 8008c38:	08008eb7 	.word	0x08008eb7
 8008c3c:	08008eb7 	.word	0x08008eb7
 8008c40:	08008eb7 	.word	0x08008eb7
 8008c44:	08008eb7 	.word	0x08008eb7
 8008c48:	08008eb7 	.word	0x08008eb7
 8008c4c:	08008eb7 	.word	0x08008eb7
 8008c50:	08008eb7 	.word	0x08008eb7
 8008c54:	08008ca5 	.word	0x08008ca5
 8008c58:	08008eb7 	.word	0x08008eb7
 8008c5c:	08008eb7 	.word	0x08008eb7
 8008c60:	08008eb7 	.word	0x08008eb7
 8008c64:	08008eb7 	.word	0x08008eb7
 8008c68:	08008eb7 	.word	0x08008eb7
 8008c6c:	08008eb7 	.word	0x08008eb7
 8008c70:	08008eb7 	.word	0x08008eb7
 8008c74:	08008cab 	.word	0x08008cab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c78:	4b94      	ldr	r3, [pc, #592]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f003 0320 	and.w	r3, r3, #32
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d009      	beq.n	8008c98 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c84:	4b91      	ldr	r3, [pc, #580]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	08db      	lsrs	r3, r3, #3
 8008c8a:	f003 0303 	and.w	r3, r3, #3
 8008c8e:	4a90      	ldr	r2, [pc, #576]	; (8008ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c90:	fa22 f303 	lsr.w	r3, r2, r3
 8008c94:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008c96:	e111      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008c98:	4b8d      	ldr	r3, [pc, #564]	; (8008ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c9a:	61bb      	str	r3, [r7, #24]
      break;
 8008c9c:	e10e      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008c9e:	4b8d      	ldr	r3, [pc, #564]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008ca0:	61bb      	str	r3, [r7, #24]
      break;
 8008ca2:	e10b      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008ca4:	4b8c      	ldr	r3, [pc, #560]	; (8008ed8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008ca6:	61bb      	str	r3, [r7, #24]
      break;
 8008ca8:	e108      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008caa:	4b88      	ldr	r3, [pc, #544]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008cb4:	4b85      	ldr	r3, [pc, #532]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb8:	091b      	lsrs	r3, r3, #4
 8008cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cbe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008cc0:	4b82      	ldr	r3, [pc, #520]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc4:	f003 0301 	and.w	r3, r3, #1
 8008cc8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008cca:	4b80      	ldr	r3, [pc, #512]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cce:	08db      	lsrs	r3, r3, #3
 8008cd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	fb02 f303 	mul.w	r3, r2, r3
 8008cda:	ee07 3a90 	vmov	s15, r3
 8008cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ce2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 80e1 	beq.w	8008eb0 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	f000 8083 	beq.w	8008dfc <HAL_RCC_GetSysClockFreq+0x204>
 8008cf6:	697b      	ldr	r3, [r7, #20]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	f200 80a1 	bhi.w	8008e40 <HAL_RCC_GetSysClockFreq+0x248>
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <HAL_RCC_GetSysClockFreq+0x114>
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d056      	beq.n	8008db8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008d0a:	e099      	b.n	8008e40 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d0c:	4b6f      	ldr	r3, [pc, #444]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f003 0320 	and.w	r3, r3, #32
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d02d      	beq.n	8008d74 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d18:	4b6c      	ldr	r3, [pc, #432]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	08db      	lsrs	r3, r3, #3
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	4a6b      	ldr	r2, [pc, #428]	; (8008ed0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008d24:	fa22 f303 	lsr.w	r3, r2, r3
 8008d28:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	ee07 3a90 	vmov	s15, r3
 8008d30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	ee07 3a90 	vmov	s15, r3
 8008d3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d42:	4b62      	ldr	r3, [pc, #392]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d4a:	ee07 3a90 	vmov	s15, r3
 8008d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d52:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d56:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d6e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008d72:	e087      	b.n	8008e84 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d7e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008ee0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d86:	4b51      	ldr	r3, [pc, #324]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d8e:	ee07 3a90 	vmov	s15, r3
 8008d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d9a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008db2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008db6:	e065      	b.n	8008e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008dc2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dca:	4b40      	ldr	r3, [pc, #256]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dda:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dde:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008df6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008dfa:	e043      	b.n	8008e84 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	ee07 3a90 	vmov	s15, r3
 8008e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e06:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008ee8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e0e:	4b2f      	ldr	r3, [pc, #188]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e22:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e3e:	e021      	b.n	8008e84 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	ee07 3a90 	vmov	s15, r3
 8008e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008ee4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e52:	4b1e      	ldr	r3, [pc, #120]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e5a:	ee07 3a90 	vmov	s15, r3
 8008e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e66:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008edc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008e82:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008e84:	4b11      	ldr	r3, [pc, #68]	; (8008ecc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e88:	0a5b      	lsrs	r3, r3, #9
 8008e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e8e:	3301      	adds	r3, #1
 8008e90:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	ee07 3a90 	vmov	s15, r3
 8008e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ea8:	ee17 3a90 	vmov	r3, s15
 8008eac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008eae:	e005      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	61bb      	str	r3, [r7, #24]
      break;
 8008eb4:	e002      	b.n	8008ebc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008eb6:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008eb8:	61bb      	str	r3, [r7, #24]
      break;
 8008eba:	bf00      	nop
  }

  return sysclockfreq;
 8008ebc:	69bb      	ldr	r3, [r7, #24]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3724      	adds	r7, #36	; 0x24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	58024400 	.word	0x58024400
 8008ed0:	03d09000 	.word	0x03d09000
 8008ed4:	003d0900 	.word	0x003d0900
 8008ed8:	016e3600 	.word	0x016e3600
 8008edc:	46000000 	.word	0x46000000
 8008ee0:	4c742400 	.word	0x4c742400
 8008ee4:	4a742400 	.word	0x4a742400
 8008ee8:	4bb71b00 	.word	0x4bb71b00

08008eec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008ef2:	f7ff fe81 	bl	8008bf8 <HAL_RCC_GetSysClockFreq>
 8008ef6:	4602      	mov	r2, r0
 8008ef8:	4b10      	ldr	r3, [pc, #64]	; (8008f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8008efa:	699b      	ldr	r3, [r3, #24]
 8008efc:	0a1b      	lsrs	r3, r3, #8
 8008efe:	f003 030f 	and.w	r3, r3, #15
 8008f02:	490f      	ldr	r1, [pc, #60]	; (8008f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f04:	5ccb      	ldrb	r3, [r1, r3]
 8008f06:	f003 031f 	and.w	r3, r3, #31
 8008f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008f0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f10:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <HAL_RCC_GetHCLKFreq+0x50>)
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	f003 030f 	and.w	r3, r3, #15
 8008f18:	4a09      	ldr	r2, [pc, #36]	; (8008f40 <HAL_RCC_GetHCLKFreq+0x54>)
 8008f1a:	5cd3      	ldrb	r3, [r2, r3]
 8008f1c:	f003 031f 	and.w	r3, r3, #31
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	fa22 f303 	lsr.w	r3, r2, r3
 8008f26:	4a07      	ldr	r2, [pc, #28]	; (8008f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8008f28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f2a:	4a07      	ldr	r2, [pc, #28]	; (8008f48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008f30:	4b04      	ldr	r3, [pc, #16]	; (8008f44 <HAL_RCC_GetHCLKFreq+0x58>)
 8008f32:	681b      	ldr	r3, [r3, #0]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3708      	adds	r7, #8
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}
 8008f3c:	58024400 	.word	0x58024400
 8008f40:	0800d8b4 	.word	0x0800d8b4
 8008f44:	24000004 	.word	0x24000004
 8008f48:	24000000 	.word	0x24000000

08008f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008f50:	f7ff ffcc 	bl	8008eec <HAL_RCC_GetHCLKFreq>
 8008f54:	4602      	mov	r2, r0
 8008f56:	4b06      	ldr	r3, [pc, #24]	; (8008f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	091b      	lsrs	r3, r3, #4
 8008f5c:	f003 0307 	and.w	r3, r3, #7
 8008f60:	4904      	ldr	r1, [pc, #16]	; (8008f74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008f62:	5ccb      	ldrb	r3, [r1, r3]
 8008f64:	f003 031f 	and.w	r3, r3, #31
 8008f68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	bd80      	pop	{r7, pc}
 8008f70:	58024400 	.word	0x58024400
 8008f74:	0800d8b4 	.word	0x0800d8b4

08008f78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008f7c:	f7ff ffb6 	bl	8008eec <HAL_RCC_GetHCLKFreq>
 8008f80:	4602      	mov	r2, r0
 8008f82:	4b06      	ldr	r3, [pc, #24]	; (8008f9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f84:	69db      	ldr	r3, [r3, #28]
 8008f86:	0a1b      	lsrs	r3, r3, #8
 8008f88:	f003 0307 	and.w	r3, r3, #7
 8008f8c:	4904      	ldr	r1, [pc, #16]	; (8008fa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008f8e:	5ccb      	ldrb	r3, [r1, r3]
 8008f90:	f003 031f 	and.w	r3, r3, #31
 8008f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	58024400 	.word	0x58024400
 8008fa0:	0800d8b4 	.word	0x0800d8b4

08008fa4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008fa8:	b0ca      	sub	sp, #296	; 0x128
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008fc8:	2500      	movs	r5, #0
 8008fca:	ea54 0305 	orrs.w	r3, r4, r5
 8008fce:	d049      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fda:	d02f      	beq.n	800903c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008fdc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008fe0:	d828      	bhi.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008fe2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fe6:	d01a      	beq.n	800901e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008fe8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008fec:	d822      	bhi.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ff6:	d007      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ff8:	e01c      	b.n	8009034 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ffa:	4bb8      	ldr	r3, [pc, #736]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ffe:	4ab7      	ldr	r2, [pc, #732]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009004:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009006:	e01a      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009008:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800900c:	3308      	adds	r3, #8
 800900e:	2102      	movs	r1, #2
 8009010:	4618      	mov	r0, r3
 8009012:	f002 fb61 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009016:	4603      	mov	r3, r0
 8009018:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800901c:	e00f      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800901e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009022:	3328      	adds	r3, #40	; 0x28
 8009024:	2102      	movs	r1, #2
 8009026:	4618      	mov	r0, r3
 8009028:	f002 fc08 	bl	800b83c <RCCEx_PLL3_Config>
 800902c:	4603      	mov	r3, r0
 800902e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009032:	e004      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800903a:	e000      	b.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800903c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800903e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10a      	bne.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009046:	4ba5      	ldr	r3, [pc, #660]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800904a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800904e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009054:	4aa1      	ldr	r2, [pc, #644]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009056:	430b      	orrs	r3, r1
 8009058:	6513      	str	r3, [r2, #80]	; 0x50
 800905a:	e003      	b.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800905c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009060:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009064:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009070:	f04f 0900 	mov.w	r9, #0
 8009074:	ea58 0309 	orrs.w	r3, r8, r9
 8009078:	d047      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800907a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800907e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009080:	2b04      	cmp	r3, #4
 8009082:	d82a      	bhi.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009084:	a201      	add	r2, pc, #4	; (adr r2, 800908c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908a:	bf00      	nop
 800908c:	080090a1 	.word	0x080090a1
 8009090:	080090af 	.word	0x080090af
 8009094:	080090c5 	.word	0x080090c5
 8009098:	080090e3 	.word	0x080090e3
 800909c:	080090e3 	.word	0x080090e3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090a0:	4b8e      	ldr	r3, [pc, #568]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a4:	4a8d      	ldr	r2, [pc, #564]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090ac:	e01a      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090b2:	3308      	adds	r3, #8
 80090b4:	2100      	movs	r1, #0
 80090b6:	4618      	mov	r0, r3
 80090b8:	f002 fb0e 	bl	800b6d8 <RCCEx_PLL2_Config>
 80090bc:	4603      	mov	r3, r0
 80090be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090c2:	e00f      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c8:	3328      	adds	r3, #40	; 0x28
 80090ca:	2100      	movs	r1, #0
 80090cc:	4618      	mov	r0, r3
 80090ce:	f002 fbb5 	bl	800b83c <RCCEx_PLL3_Config>
 80090d2:	4603      	mov	r3, r0
 80090d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090d8:	e004      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090da:	2301      	movs	r3, #1
 80090dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090e0:	e000      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80090e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10a      	bne.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090ec:	4b7b      	ldr	r3, [pc, #492]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f0:	f023 0107 	bic.w	r1, r3, #7
 80090f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090fa:	4a78      	ldr	r2, [pc, #480]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090fc:	430b      	orrs	r3, r1
 80090fe:	6513      	str	r3, [r2, #80]	; 0x50
 8009100:	e003      	b.n	800910a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009102:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009106:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800910a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009116:	f04f 0b00 	mov.w	fp, #0
 800911a:	ea5a 030b 	orrs.w	r3, sl, fp
 800911e:	d04c      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800912a:	d030      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800912c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009130:	d829      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009132:	2bc0      	cmp	r3, #192	; 0xc0
 8009134:	d02d      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009136:	2bc0      	cmp	r3, #192	; 0xc0
 8009138:	d825      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800913a:	2b80      	cmp	r3, #128	; 0x80
 800913c:	d018      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800913e:	2b80      	cmp	r3, #128	; 0x80
 8009140:	d821      	bhi.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d002      	beq.n	800914c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8009146:	2b40      	cmp	r3, #64	; 0x40
 8009148:	d007      	beq.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800914a:	e01c      	b.n	8009186 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800914c:	4b63      	ldr	r3, [pc, #396]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800914e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009150:	4a62      	ldr	r2, [pc, #392]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009156:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009158:	e01c      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800915a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800915e:	3308      	adds	r3, #8
 8009160:	2100      	movs	r1, #0
 8009162:	4618      	mov	r0, r3
 8009164:	f002 fab8 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009168:	4603      	mov	r3, r0
 800916a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800916e:	e011      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009174:	3328      	adds	r3, #40	; 0x28
 8009176:	2100      	movs	r1, #0
 8009178:	4618      	mov	r0, r3
 800917a:	f002 fb5f 	bl	800b83c <RCCEx_PLL3_Config>
 800917e:	4603      	mov	r3, r0
 8009180:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009184:	e006      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009186:	2301      	movs	r3, #1
 8009188:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800918c:	e002      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800918e:	bf00      	nop
 8009190:	e000      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009192:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10a      	bne.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800919c:	4b4f      	ldr	r3, [pc, #316]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800919e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091a0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80091a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091aa:	4a4c      	ldr	r2, [pc, #304]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091ac:	430b      	orrs	r3, r1
 80091ae:	6513      	str	r3, [r2, #80]	; 0x50
 80091b0:	e003      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80091ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80091c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80091ca:	2300      	movs	r3, #0
 80091cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80091d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80091d4:	460b      	mov	r3, r1
 80091d6:	4313      	orrs	r3, r2
 80091d8:	d053      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80091da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80091e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091e6:	d035      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80091e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80091ec:	d82e      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091ee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091f2:	d031      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80091f4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80091f8:	d828      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80091fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091fe:	d01a      	beq.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009204:	d822      	bhi.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800920a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800920e:	d007      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009210:	e01c      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009212:	4b32      	ldr	r3, [pc, #200]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009216:	4a31      	ldr	r2, [pc, #196]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800921c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800921e:	e01c      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009224:	3308      	adds	r3, #8
 8009226:	2100      	movs	r1, #0
 8009228:	4618      	mov	r0, r3
 800922a:	f002 fa55 	bl	800b6d8 <RCCEx_PLL2_Config>
 800922e:	4603      	mov	r3, r0
 8009230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009234:	e011      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800923a:	3328      	adds	r3, #40	; 0x28
 800923c:	2100      	movs	r1, #0
 800923e:	4618      	mov	r0, r3
 8009240:	f002 fafc 	bl	800b83c <RCCEx_PLL3_Config>
 8009244:	4603      	mov	r3, r0
 8009246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800924a:	e006      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009252:	e002      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009254:	bf00      	nop
 8009256:	e000      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800925a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10b      	bne.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009262:	4b1e      	ldr	r3, [pc, #120]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009266:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800926a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800926e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009272:	4a1a      	ldr	r2, [pc, #104]	; (80092dc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009274:	430b      	orrs	r3, r1
 8009276:	6593      	str	r3, [r2, #88]	; 0x58
 8009278:	e003      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800927e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800928e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009292:	2300      	movs	r3, #0
 8009294:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009298:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800929c:	460b      	mov	r3, r1
 800929e:	4313      	orrs	r3, r2
 80092a0:	d056      	beq.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80092a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80092aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092ae:	d038      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80092b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092b4:	d831      	bhi.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092ba:	d034      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80092bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80092c0:	d82b      	bhi.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092c6:	d01d      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80092c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092cc:	d825      	bhi.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d006      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80092d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092d6:	d00a      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80092d8:	e01f      	b.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80092da:	bf00      	nop
 80092dc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092e0:	4ba2      	ldr	r3, [pc, #648]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	4aa1      	ldr	r2, [pc, #644]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80092ec:	e01c      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092f2:	3308      	adds	r3, #8
 80092f4:	2100      	movs	r1, #0
 80092f6:	4618      	mov	r0, r3
 80092f8:	f002 f9ee 	bl	800b6d8 <RCCEx_PLL2_Config>
 80092fc:	4603      	mov	r3, r0
 80092fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009302:	e011      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009304:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009308:	3328      	adds	r3, #40	; 0x28
 800930a:	2100      	movs	r1, #0
 800930c:	4618      	mov	r0, r3
 800930e:	f002 fa95 	bl	800b83c <RCCEx_PLL3_Config>
 8009312:	4603      	mov	r3, r0
 8009314:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009318:	e006      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009320:	e002      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009322:	bf00      	nop
 8009324:	e000      	b.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10b      	bne.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009330:	4b8e      	ldr	r3, [pc, #568]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009334:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009340:	4a8a      	ldr	r2, [pc, #552]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009342:	430b      	orrs	r3, r1
 8009344:	6593      	str	r3, [r2, #88]	; 0x58
 8009346:	e003      	b.n	8009350 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009348:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800934c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009350:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800935c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009360:	2300      	movs	r3, #0
 8009362:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009366:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800936a:	460b      	mov	r3, r1
 800936c:	4313      	orrs	r3, r2
 800936e:	d03a      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009370:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009376:	2b30      	cmp	r3, #48	; 0x30
 8009378:	d01f      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 800937a:	2b30      	cmp	r3, #48	; 0x30
 800937c:	d819      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800937e:	2b20      	cmp	r3, #32
 8009380:	d00c      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009382:	2b20      	cmp	r3, #32
 8009384:	d815      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009386:	2b00      	cmp	r3, #0
 8009388:	d019      	beq.n	80093be <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800938a:	2b10      	cmp	r3, #16
 800938c:	d111      	bne.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800938e:	4b77      	ldr	r3, [pc, #476]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	4a76      	ldr	r2, [pc, #472]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009398:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800939a:	e011      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800939c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a0:	3308      	adds	r3, #8
 80093a2:	2102      	movs	r1, #2
 80093a4:	4618      	mov	r0, r3
 80093a6:	f002 f997 	bl	800b6d8 <RCCEx_PLL2_Config>
 80093aa:	4603      	mov	r3, r0
 80093ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80093b0:	e006      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093b8:	e002      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80093ba:	bf00      	nop
 80093bc:	e000      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80093be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80093c8:	4b68      	ldr	r3, [pc, #416]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093cc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80093d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093d6:	4a65      	ldr	r2, [pc, #404]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093d8:	430b      	orrs	r3, r1
 80093da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093dc:	e003      	b.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80093e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ee:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80093f2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80093f6:	2300      	movs	r3, #0
 80093f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80093fc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009400:	460b      	mov	r3, r1
 8009402:	4313      	orrs	r3, r2
 8009404:	d051      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009406:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800940a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800940c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009410:	d035      	beq.n	800947e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009416:	d82e      	bhi.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009418:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800941c:	d031      	beq.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800941e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009422:	d828      	bhi.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009428:	d01a      	beq.n	8009460 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800942a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800942e:	d822      	bhi.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009430:	2b00      	cmp	r3, #0
 8009432:	d003      	beq.n	800943c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009438:	d007      	beq.n	800944a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800943a:	e01c      	b.n	8009476 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800943c:	4b4b      	ldr	r3, [pc, #300]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800943e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009440:	4a4a      	ldr	r2, [pc, #296]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009446:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009448:	e01c      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800944a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800944e:	3308      	adds	r3, #8
 8009450:	2100      	movs	r1, #0
 8009452:	4618      	mov	r0, r3
 8009454:	f002 f940 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009458:	4603      	mov	r3, r0
 800945a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800945e:	e011      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009460:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009464:	3328      	adds	r3, #40	; 0x28
 8009466:	2100      	movs	r1, #0
 8009468:	4618      	mov	r0, r3
 800946a:	f002 f9e7 	bl	800b83c <RCCEx_PLL3_Config>
 800946e:	4603      	mov	r3, r0
 8009470:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009474:	e006      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800947c:	e002      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800947e:	bf00      	nop
 8009480:	e000      	b.n	8009484 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009482:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009484:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009488:	2b00      	cmp	r3, #0
 800948a:	d10a      	bne.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800948c:	4b37      	ldr	r3, [pc, #220]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800948e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009490:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800949a:	4a34      	ldr	r2, [pc, #208]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800949c:	430b      	orrs	r3, r1
 800949e:	6513      	str	r3, [r2, #80]	; 0x50
 80094a0:	e003      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80094aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80094b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80094ba:	2300      	movs	r3, #0
 80094bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094c0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80094c4:	460b      	mov	r3, r1
 80094c6:	4313      	orrs	r3, r2
 80094c8:	d056      	beq.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80094ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094d4:	d033      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80094d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80094da:	d82c      	bhi.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094e0:	d02f      	beq.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80094e2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80094e6:	d826      	bhi.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094ec:	d02b      	beq.n	8009546 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80094ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80094f2:	d820      	bhi.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80094f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094f8:	d012      	beq.n	8009520 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80094fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80094fe:	d81a      	bhi.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009500:	2b00      	cmp	r3, #0
 8009502:	d022      	beq.n	800954a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009508:	d115      	bne.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800950a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800950e:	3308      	adds	r3, #8
 8009510:	2101      	movs	r1, #1
 8009512:	4618      	mov	r0, r3
 8009514:	f002 f8e0 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009518:	4603      	mov	r3, r0
 800951a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800951e:	e015      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009524:	3328      	adds	r3, #40	; 0x28
 8009526:	2101      	movs	r1, #1
 8009528:	4618      	mov	r0, r3
 800952a:	f002 f987 	bl	800b83c <RCCEx_PLL3_Config>
 800952e:	4603      	mov	r3, r0
 8009530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009534:	e00a      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800953c:	e006      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800953e:	bf00      	nop
 8009540:	e004      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009542:	bf00      	nop
 8009544:	e002      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009546:	bf00      	nop
 8009548:	e000      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800954a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800954c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10d      	bne.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009554:	4b05      	ldr	r3, [pc, #20]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009558:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800955c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009560:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009562:	4a02      	ldr	r2, [pc, #8]	; (800956c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009564:	430b      	orrs	r3, r1
 8009566:	6513      	str	r3, [r2, #80]	; 0x50
 8009568:	e006      	b.n	8009578 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800956a:	bf00      	nop
 800956c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009574:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009578:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800957c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009580:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009588:	2300      	movs	r3, #0
 800958a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800958e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009592:	460b      	mov	r3, r1
 8009594:	4313      	orrs	r3, r2
 8009596:	d055      	beq.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009598:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800959c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80095a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095a4:	d033      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80095a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095aa:	d82c      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b0:	d02f      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80095b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095b6:	d826      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095bc:	d02b      	beq.n	8009616 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80095be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80095c2:	d820      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095c8:	d012      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80095ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095ce:	d81a      	bhi.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d022      	beq.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80095d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095d8:	d115      	bne.n	8009606 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095de:	3308      	adds	r3, #8
 80095e0:	2101      	movs	r1, #1
 80095e2:	4618      	mov	r0, r3
 80095e4:	f002 f878 	bl	800b6d8 <RCCEx_PLL2_Config>
 80095e8:	4603      	mov	r3, r0
 80095ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80095ee:	e015      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095f4:	3328      	adds	r3, #40	; 0x28
 80095f6:	2101      	movs	r1, #1
 80095f8:	4618      	mov	r0, r3
 80095fa:	f002 f91f 	bl	800b83c <RCCEx_PLL3_Config>
 80095fe:	4603      	mov	r3, r0
 8009600:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009604:	e00a      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800960c:	e006      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800960e:	bf00      	nop
 8009610:	e004      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009612:	bf00      	nop
 8009614:	e002      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009616:	bf00      	nop
 8009618:	e000      	b.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800961a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800961c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10b      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009624:	4ba3      	ldr	r3, [pc, #652]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009628:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800962c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009630:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009634:	4a9f      	ldr	r2, [pc, #636]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009636:	430b      	orrs	r3, r1
 8009638:	6593      	str	r3, [r2, #88]	; 0x58
 800963a:	e003      	b.n	8009644 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800963c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009640:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800964c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009650:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009654:	2300      	movs	r3, #0
 8009656:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800965a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800965e:	460b      	mov	r3, r1
 8009660:	4313      	orrs	r3, r2
 8009662:	d037      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009664:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800966a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800966e:	d00e      	beq.n	800968e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009674:	d816      	bhi.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009676:	2b00      	cmp	r3, #0
 8009678:	d018      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800967a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800967e:	d111      	bne.n	80096a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009680:	4b8c      	ldr	r3, [pc, #560]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009684:	4a8b      	ldr	r2, [pc, #556]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800968a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800968c:	e00f      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800968e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009692:	3308      	adds	r3, #8
 8009694:	2101      	movs	r1, #1
 8009696:	4618      	mov	r0, r3
 8009698:	f002 f81e 	bl	800b6d8 <RCCEx_PLL2_Config>
 800969c:	4603      	mov	r3, r0
 800969e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80096a2:	e004      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096aa:	e000      	b.n	80096ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80096ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d10a      	bne.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80096b6:	4b7f      	ldr	r3, [pc, #508]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ba:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80096be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c4:	4a7b      	ldr	r2, [pc, #492]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096c6:	430b      	orrs	r3, r1
 80096c8:	6513      	str	r3, [r2, #80]	; 0x50
 80096ca:	e003      	b.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096dc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80096e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096e4:	2300      	movs	r3, #0
 80096e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80096ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80096ee:	460b      	mov	r3, r1
 80096f0:	4313      	orrs	r3, r2
 80096f2:	d039      	beq.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80096f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096fa:	2b03      	cmp	r3, #3
 80096fc:	d81c      	bhi.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80096fe:	a201      	add	r2, pc, #4	; (adr r2, 8009704 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009704:	08009741 	.word	0x08009741
 8009708:	08009715 	.word	0x08009715
 800970c:	08009723 	.word	0x08009723
 8009710:	08009741 	.word	0x08009741
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009714:	4b67      	ldr	r3, [pc, #412]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009718:	4a66      	ldr	r2, [pc, #408]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800971a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800971e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009720:	e00f      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009726:	3308      	adds	r3, #8
 8009728:	2102      	movs	r1, #2
 800972a:	4618      	mov	r0, r3
 800972c:	f001 ffd4 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009730:	4603      	mov	r3, r0
 8009732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009736:	e004      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800973e:	e000      	b.n	8009742 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009740:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009742:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800974a:	4b5a      	ldr	r3, [pc, #360]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800974c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800974e:	f023 0103 	bic.w	r1, r3, #3
 8009752:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009758:	4a56      	ldr	r2, [pc, #344]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800975a:	430b      	orrs	r3, r1
 800975c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800975e:	e003      	b.n	8009768 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009760:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009764:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009768:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800976c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009770:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009774:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009778:	2300      	movs	r3, #0
 800977a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800977e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8009782:	460b      	mov	r3, r1
 8009784:	4313      	orrs	r3, r2
 8009786:	f000 809f 	beq.w	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800978a:	4b4b      	ldr	r3, [pc, #300]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a4a      	ldr	r2, [pc, #296]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009794:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009796:	f7f9 fc45 	bl	8003024 <HAL_GetTick>
 800979a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800979e:	e00b      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80097a0:	f7f9 fc40 	bl	8003024 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80097aa:	1ad3      	subs	r3, r2, r3
 80097ac:	2b64      	cmp	r3, #100	; 0x64
 80097ae:	d903      	bls.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80097b0:	2303      	movs	r3, #3
 80097b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80097b6:	e005      	b.n	80097c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80097b8:	4b3f      	ldr	r3, [pc, #252]	; (80098b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d0ed      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80097c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d179      	bne.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80097cc:	4b39      	ldr	r3, [pc, #228]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80097d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80097d8:	4053      	eors	r3, r2
 80097da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d015      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80097e2:	4b34      	ldr	r3, [pc, #208]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097ea:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80097ee:	4b31      	ldr	r3, [pc, #196]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f2:	4a30      	ldr	r2, [pc, #192]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097f8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80097fa:	4b2e      	ldr	r3, [pc, #184]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fe:	4a2d      	ldr	r2, [pc, #180]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009804:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009806:	4a2b      	ldr	r2, [pc, #172]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009808:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800980c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800980e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009812:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009816:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800981a:	d118      	bne.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800981c:	f7f9 fc02 	bl	8003024 <HAL_GetTick>
 8009820:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009824:	e00d      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009826:	f7f9 fbfd 	bl	8003024 <HAL_GetTick>
 800982a:	4602      	mov	r2, r0
 800982c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009830:	1ad2      	subs	r2, r2, r3
 8009832:	f241 3388 	movw	r3, #5000	; 0x1388
 8009836:	429a      	cmp	r2, r3
 8009838:	d903      	bls.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800983a:	2303      	movs	r3, #3
 800983c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009840:	e005      	b.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009842:	4b1c      	ldr	r3, [pc, #112]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009846:	f003 0302 	and.w	r3, r3, #2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0eb      	beq.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800984e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009852:	2b00      	cmp	r3, #0
 8009854:	d129      	bne.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009856:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800985e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009866:	d10e      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009868:	4b12      	ldr	r3, [pc, #72]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800986a:	691b      	ldr	r3, [r3, #16]
 800986c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009874:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009878:	091a      	lsrs	r2, r3, #4
 800987a:	4b10      	ldr	r3, [pc, #64]	; (80098bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800987c:	4013      	ands	r3, r2
 800987e:	4a0d      	ldr	r2, [pc, #52]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009880:	430b      	orrs	r3, r1
 8009882:	6113      	str	r3, [r2, #16]
 8009884:	e005      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009886:	4b0b      	ldr	r3, [pc, #44]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	4a0a      	ldr	r2, [pc, #40]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800988c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009890:	6113      	str	r3, [r2, #16]
 8009892:	4b08      	ldr	r3, [pc, #32]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009894:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800989e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80098a2:	4a04      	ldr	r2, [pc, #16]	; (80098b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80098a4:	430b      	orrs	r3, r1
 80098a6:	6713      	str	r3, [r2, #112]	; 0x70
 80098a8:	e00e      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80098aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098ae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80098b2:	e009      	b.n	80098c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80098b4:	58024400 	.word	0x58024400
 80098b8:	58024800 	.word	0x58024800
 80098bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80098c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f002 0301 	and.w	r3, r2, #1
 80098d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80098d8:	2300      	movs	r3, #0
 80098da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4313      	orrs	r3, r2
 80098e6:	f000 8089 	beq.w	80099fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80098ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f0:	2b28      	cmp	r3, #40	; 0x28
 80098f2:	d86b      	bhi.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80098f4:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80098f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fa:	bf00      	nop
 80098fc:	080099d5 	.word	0x080099d5
 8009900:	080099cd 	.word	0x080099cd
 8009904:	080099cd 	.word	0x080099cd
 8009908:	080099cd 	.word	0x080099cd
 800990c:	080099cd 	.word	0x080099cd
 8009910:	080099cd 	.word	0x080099cd
 8009914:	080099cd 	.word	0x080099cd
 8009918:	080099cd 	.word	0x080099cd
 800991c:	080099a1 	.word	0x080099a1
 8009920:	080099cd 	.word	0x080099cd
 8009924:	080099cd 	.word	0x080099cd
 8009928:	080099cd 	.word	0x080099cd
 800992c:	080099cd 	.word	0x080099cd
 8009930:	080099cd 	.word	0x080099cd
 8009934:	080099cd 	.word	0x080099cd
 8009938:	080099cd 	.word	0x080099cd
 800993c:	080099b7 	.word	0x080099b7
 8009940:	080099cd 	.word	0x080099cd
 8009944:	080099cd 	.word	0x080099cd
 8009948:	080099cd 	.word	0x080099cd
 800994c:	080099cd 	.word	0x080099cd
 8009950:	080099cd 	.word	0x080099cd
 8009954:	080099cd 	.word	0x080099cd
 8009958:	080099cd 	.word	0x080099cd
 800995c:	080099d5 	.word	0x080099d5
 8009960:	080099cd 	.word	0x080099cd
 8009964:	080099cd 	.word	0x080099cd
 8009968:	080099cd 	.word	0x080099cd
 800996c:	080099cd 	.word	0x080099cd
 8009970:	080099cd 	.word	0x080099cd
 8009974:	080099cd 	.word	0x080099cd
 8009978:	080099cd 	.word	0x080099cd
 800997c:	080099d5 	.word	0x080099d5
 8009980:	080099cd 	.word	0x080099cd
 8009984:	080099cd 	.word	0x080099cd
 8009988:	080099cd 	.word	0x080099cd
 800998c:	080099cd 	.word	0x080099cd
 8009990:	080099cd 	.word	0x080099cd
 8009994:	080099cd 	.word	0x080099cd
 8009998:	080099cd 	.word	0x080099cd
 800999c:	080099d5 	.word	0x080099d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a4:	3308      	adds	r3, #8
 80099a6:	2101      	movs	r1, #1
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 fe95 	bl	800b6d8 <RCCEx_PLL2_Config>
 80099ae:	4603      	mov	r3, r0
 80099b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80099b4:	e00f      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ba:	3328      	adds	r3, #40	; 0x28
 80099bc:	2101      	movs	r1, #1
 80099be:	4618      	mov	r0, r3
 80099c0:	f001 ff3c 	bl	800b83c <RCCEx_PLL3_Config>
 80099c4:	4603      	mov	r3, r0
 80099c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80099ca:	e004      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099d2:	e000      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80099d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d10a      	bne.n	80099f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80099de:	4bbf      	ldr	r3, [pc, #764]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099e2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80099e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099ec:	4abb      	ldr	r2, [pc, #748]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099ee:	430b      	orrs	r3, r1
 80099f0:	6553      	str	r3, [r2, #84]	; 0x54
 80099f2:	e003      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80099fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f002 0302 	and.w	r3, r2, #2
 8009a08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009a12:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8009a16:	460b      	mov	r3, r1
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	d041      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a22:	2b05      	cmp	r3, #5
 8009a24:	d824      	bhi.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009a26:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2c:	08009a79 	.word	0x08009a79
 8009a30:	08009a45 	.word	0x08009a45
 8009a34:	08009a5b 	.word	0x08009a5b
 8009a38:	08009a79 	.word	0x08009a79
 8009a3c:	08009a79 	.word	0x08009a79
 8009a40:	08009a79 	.word	0x08009a79
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a48:	3308      	adds	r3, #8
 8009a4a:	2101      	movs	r1, #1
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f001 fe43 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009a52:	4603      	mov	r3, r0
 8009a54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009a58:	e00f      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a5e:	3328      	adds	r3, #40	; 0x28
 8009a60:	2101      	movs	r1, #1
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 feea 	bl	800b83c <RCCEx_PLL3_Config>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009a6e:	e004      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a76:	e000      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10a      	bne.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009a82:	4b96      	ldr	r3, [pc, #600]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a86:	f023 0107 	bic.w	r1, r3, #7
 8009a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009a90:	4a92      	ldr	r2, [pc, #584]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a92:	430b      	orrs	r3, r1
 8009a94:	6553      	str	r3, [r2, #84]	; 0x54
 8009a96:	e003      	b.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a9c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa8:	f002 0304 	and.w	r3, r2, #4
 8009aac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ab6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009aba:	460b      	mov	r3, r1
 8009abc:	4313      	orrs	r3, r2
 8009abe:	d044      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009ac8:	2b05      	cmp	r3, #5
 8009aca:	d825      	bhi.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009acc:	a201      	add	r2, pc, #4	; (adr r2, 8009ad4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ad2:	bf00      	nop
 8009ad4:	08009b21 	.word	0x08009b21
 8009ad8:	08009aed 	.word	0x08009aed
 8009adc:	08009b03 	.word	0x08009b03
 8009ae0:	08009b21 	.word	0x08009b21
 8009ae4:	08009b21 	.word	0x08009b21
 8009ae8:	08009b21 	.word	0x08009b21
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af0:	3308      	adds	r3, #8
 8009af2:	2101      	movs	r1, #1
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 fdef 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009afa:	4603      	mov	r3, r0
 8009afc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b00:	e00f      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b06:	3328      	adds	r3, #40	; 0x28
 8009b08:	2101      	movs	r1, #1
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f001 fe96 	bl	800b83c <RCCEx_PLL3_Config>
 8009b10:	4603      	mov	r3, r0
 8009b12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009b16:	e004      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b1e:	e000      	b.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009b20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10b      	bne.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009b2a:	4b6c      	ldr	r3, [pc, #432]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b2e:	f023 0107 	bic.w	r1, r3, #7
 8009b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b3a:	4a68      	ldr	r2, [pc, #416]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b3c:	430b      	orrs	r3, r1
 8009b3e:	6593      	str	r3, [r2, #88]	; 0x58
 8009b40:	e003      	b.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b52:	f002 0320 	and.w	r3, r2, #32
 8009b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009b64:	460b      	mov	r3, r1
 8009b66:	4313      	orrs	r3, r2
 8009b68:	d055      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b76:	d033      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009b78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b7c:	d82c      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b82:	d02f      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b88:	d826      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b8e:	d02b      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009b90:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009b94:	d820      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b9a:	d012      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ba0:	d81a      	bhi.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d022      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009ba6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009baa:	d115      	bne.n	8009bd8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb0:	3308      	adds	r3, #8
 8009bb2:	2100      	movs	r1, #0
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	f001 fd8f 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009bc0:	e015      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc6:	3328      	adds	r3, #40	; 0x28
 8009bc8:	2102      	movs	r1, #2
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f001 fe36 	bl	800b83c <RCCEx_PLL3_Config>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009bd6:	e00a      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009bde:	e006      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009be0:	bf00      	nop
 8009be2:	e004      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009be4:	bf00      	nop
 8009be6:	e002      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009be8:	bf00      	nop
 8009bea:	e000      	b.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d10b      	bne.n	8009c0e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009bf6:	4b39      	ldr	r3, [pc, #228]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bfa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c06:	4a35      	ldr	r2, [pc, #212]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c08:	430b      	orrs	r3, r1
 8009c0a:	6553      	str	r3, [r2, #84]	; 0x54
 8009c0c:	e003      	b.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8009c22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c26:	2300      	movs	r3, #0
 8009c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c2c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009c30:	460b      	mov	r3, r1
 8009c32:	4313      	orrs	r3, r2
 8009c34:	d058      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009c42:	d033      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009c44:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009c48:	d82c      	bhi.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c4e:	d02f      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c54:	d826      	bhi.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c5a:	d02b      	beq.n	8009cb4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009c5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009c60:	d820      	bhi.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c66:	d012      	beq.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c6c:	d81a      	bhi.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d022      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c76:	d115      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	2100      	movs	r1, #0
 8009c80:	4618      	mov	r0, r3
 8009c82:	f001 fd29 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009c86:	4603      	mov	r3, r0
 8009c88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009c8c:	e015      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c92:	3328      	adds	r3, #40	; 0x28
 8009c94:	2102      	movs	r1, #2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f001 fdd0 	bl	800b83c <RCCEx_PLL3_Config>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009ca2:	e00a      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009caa:	e006      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009cac:	bf00      	nop
 8009cae:	e004      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009cb0:	bf00      	nop
 8009cb2:	e002      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009cb4:	bf00      	nop
 8009cb6:	e000      	b.n	8009cba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10e      	bne.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009cc2:	4b06      	ldr	r3, [pc, #24]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cc6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cd2:	4a02      	ldr	r2, [pc, #8]	; (8009cdc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009cd4:	430b      	orrs	r3, r1
 8009cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8009cd8:	e006      	b.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009cda:	bf00      	nop
 8009cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ce4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8009cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cfe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8009d02:	460b      	mov	r3, r1
 8009d04:	4313      	orrs	r3, r2
 8009d06:	d055      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d10:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d14:	d033      	beq.n	8009d7e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009d16:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009d1a:	d82c      	bhi.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d20:	d02f      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d26:	d826      	bhi.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d28:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d2c:	d02b      	beq.n	8009d86 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009d2e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009d32:	d820      	bhi.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d38:	d012      	beq.n	8009d60 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009d3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d3e:	d81a      	bhi.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d022      	beq.n	8009d8a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009d44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d48:	d115      	bne.n	8009d76 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4e:	3308      	adds	r3, #8
 8009d50:	2100      	movs	r1, #0
 8009d52:	4618      	mov	r0, r3
 8009d54:	f001 fcc0 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009d5e:	e015      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d64:	3328      	adds	r3, #40	; 0x28
 8009d66:	2102      	movs	r1, #2
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f001 fd67 	bl	800b83c <RCCEx_PLL3_Config>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009d74:	e00a      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009d7c:	e006      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d7e:	bf00      	nop
 8009d80:	e004      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d82:	bf00      	nop
 8009d84:	e002      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d86:	bf00      	nop
 8009d88:	e000      	b.n	8009d8c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10b      	bne.n	8009dac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009d94:	4ba1      	ldr	r3, [pc, #644]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d98:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009da4:	4a9d      	ldr	r2, [pc, #628]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009da6:	430b      	orrs	r3, r1
 8009da8:	6593      	str	r3, [r2, #88]	; 0x58
 8009daa:	e003      	b.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009db0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	f002 0308 	and.w	r3, r2, #8
 8009dc0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009dca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	d01e      	beq.n	8009e12 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009de0:	d10c      	bne.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de6:	3328      	adds	r3, #40	; 0x28
 8009de8:	2102      	movs	r1, #2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f001 fd26 	bl	800b83c <RCCEx_PLL3_Config>
 8009df0:	4603      	mov	r3, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d002      	beq.n	8009dfc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009dfc:	4b87      	ldr	r3, [pc, #540]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009e0c:	4a83      	ldr	r2, [pc, #524]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f002 0310 	and.w	r3, r2, #16
 8009e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009e22:	2300      	movs	r3, #0
 8009e24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009e28:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009e2c:	460b      	mov	r3, r1
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	d01e      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e3e:	d10c      	bne.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e44:	3328      	adds	r3, #40	; 0x28
 8009e46:	2102      	movs	r1, #2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f001 fcf7 	bl	800b83c <RCCEx_PLL3_Config>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009e5a:	4b70      	ldr	r3, [pc, #448]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e6a:	4a6c      	ldr	r2, [pc, #432]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e6c:	430b      	orrs	r3, r1
 8009e6e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009e80:	2300      	movs	r3, #0
 8009e82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009e86:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	d03e      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e94:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009e98:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009e9c:	d022      	beq.n	8009ee4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009e9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009ea2:	d81b      	bhi.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d003      	beq.n	8009eb0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eac:	d00b      	beq.n	8009ec6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009eae:	e015      	b.n	8009edc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	2100      	movs	r1, #0
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f001 fc0d 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009ec4:	e00f      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eca:	3328      	adds	r3, #40	; 0x28
 8009ecc:	2102      	movs	r1, #2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f001 fcb4 	bl	800b83c <RCCEx_PLL3_Config>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009eda:	e004      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ee2:	e000      	b.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10b      	bne.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009eee:	4b4b      	ldr	r3, [pc, #300]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ef2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8009ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009efa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009efe:	4a47      	ldr	r2, [pc, #284]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f00:	430b      	orrs	r3, r1
 8009f02:	6593      	str	r3, [r2, #88]	; 0x58
 8009f04:	e003      	b.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f16:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009f1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8009f24:	460b      	mov	r3, r1
 8009f26:	4313      	orrs	r3, r2
 8009f28:	d03b      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f32:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f36:	d01f      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009f38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f3c:	d818      	bhi.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f42:	d003      	beq.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009f44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f48:	d007      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009f4a:	e011      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f4c:	4b33      	ldr	r3, [pc, #204]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f50:	4a32      	ldr	r2, [pc, #200]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009f58:	e00f      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f5e:	3328      	adds	r3, #40	; 0x28
 8009f60:	2101      	movs	r1, #1
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 fc6a 	bl	800b83c <RCCEx_PLL3_Config>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009f6e:	e004      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f76:	e000      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10b      	bne.n	8009f9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009f82:	4b26      	ldr	r3, [pc, #152]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f92:	4a22      	ldr	r2, [pc, #136]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f94:	430b      	orrs	r3, r1
 8009f96:	6553      	str	r3, [r2, #84]	; 0x54
 8009f98:	e003      	b.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009fae:	673b      	str	r3, [r7, #112]	; 0x70
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	677b      	str	r3, [r7, #116]	; 0x74
 8009fb4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	d034      	beq.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d003      	beq.n	8009fd0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fcc:	d007      	beq.n	8009fde <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009fce:	e011      	b.n	8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fd0:	4b12      	ldr	r3, [pc, #72]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	4a11      	ldr	r2, [pc, #68]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009fdc:	e00e      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fe2:	3308      	adds	r3, #8
 8009fe4:	2102      	movs	r1, #2
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f001 fb76 	bl	800b6d8 <RCCEx_PLL2_Config>
 8009fec:	4603      	mov	r3, r0
 8009fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009ff2:	e003      	b.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ffa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10d      	bne.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a004:	4b05      	ldr	r3, [pc, #20]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a008:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a00c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a012:	4a02      	ldr	r2, [pc, #8]	; (800a01c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a014:	430b      	orrs	r3, r1
 800a016:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a018:	e006      	b.n	800a028 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a01a:	bf00      	nop
 800a01c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a020:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a024:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a030:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a034:	66bb      	str	r3, [r7, #104]	; 0x68
 800a036:	2300      	movs	r3, #0
 800a038:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a03a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a03e:	460b      	mov	r3, r1
 800a040:	4313      	orrs	r3, r2
 800a042:	d00c      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a048:	3328      	adds	r3, #40	; 0x28
 800a04a:	2102      	movs	r1, #2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f001 fbf5 	bl	800b83c <RCCEx_PLL3_Config>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d002      	beq.n	800a05e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a05e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a066:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a06a:	663b      	str	r3, [r7, #96]	; 0x60
 800a06c:	2300      	movs	r3, #0
 800a06e:	667b      	str	r3, [r7, #100]	; 0x64
 800a070:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a074:	460b      	mov	r3, r1
 800a076:	4313      	orrs	r3, r2
 800a078:	d038      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a07a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a07e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a086:	d018      	beq.n	800a0ba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a08c:	d811      	bhi.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a08e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a092:	d014      	beq.n	800a0be <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a098:	d80b      	bhi.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d011      	beq.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a09e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0a2:	d106      	bne.n	800a0b2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a4:	4bc3      	ldr	r3, [pc, #780]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a8:	4ac2      	ldr	r2, [pc, #776]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a0b0:	e008      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a0b8:	e004      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a0ba:	bf00      	nop
 800a0bc:	e002      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a0be:	bf00      	nop
 800a0c0:	e000      	b.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a0c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10b      	bne.n	800a0e4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a0cc:	4bb9      	ldr	r3, [pc, #740]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0d0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0dc:	4ab5      	ldr	r2, [pc, #724]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0de:	430b      	orrs	r3, r1
 800a0e0:	6553      	str	r3, [r2, #84]	; 0x54
 800a0e2:	e003      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a0f8:	65bb      	str	r3, [r7, #88]	; 0x58
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0fe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a102:	460b      	mov	r3, r1
 800a104:	4313      	orrs	r3, r2
 800a106:	d009      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a108:	4baa      	ldr	r3, [pc, #680]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a10a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a10c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a116:	4aa7      	ldr	r2, [pc, #668]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a118:	430b      	orrs	r3, r1
 800a11a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a124:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a128:	653b      	str	r3, [r7, #80]	; 0x50
 800a12a:	2300      	movs	r3, #0
 800a12c:	657b      	str	r3, [r7, #84]	; 0x54
 800a12e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a132:	460b      	mov	r3, r1
 800a134:	4313      	orrs	r3, r2
 800a136:	d00a      	beq.n	800a14e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a138:	4b9e      	ldr	r3, [pc, #632]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a140:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a144:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a148:	4a9a      	ldr	r2, [pc, #616]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a14a:	430b      	orrs	r3, r1
 800a14c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a14e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a156:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a15a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a15c:	2300      	movs	r3, #0
 800a15e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a160:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a164:	460b      	mov	r3, r1
 800a166:	4313      	orrs	r3, r2
 800a168:	d009      	beq.n	800a17e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a16a:	4b92      	ldr	r3, [pc, #584]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a16e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a178:	4a8e      	ldr	r2, [pc, #568]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a17a:	430b      	orrs	r3, r1
 800a17c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a17e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a186:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800a18a:	643b      	str	r3, [r7, #64]	; 0x40
 800a18c:	2300      	movs	r3, #0
 800a18e:	647b      	str	r3, [r7, #68]	; 0x44
 800a190:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800a194:	460b      	mov	r3, r1
 800a196:	4313      	orrs	r3, r2
 800a198:	d00e      	beq.n	800a1b8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a19a:	4b86      	ldr	r3, [pc, #536]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	4a85      	ldr	r2, [pc, #532]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a1a4:	6113      	str	r3, [r2, #16]
 800a1a6:	4b83      	ldr	r3, [pc, #524]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1a8:	6919      	ldr	r1, [r3, #16]
 800a1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800a1b2:	4a80      	ldr	r2, [pc, #512]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1b4:	430b      	orrs	r3, r1
 800a1b6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a1b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800a1c4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a1ca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800a1ce:	460b      	mov	r3, r1
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	d009      	beq.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a1d4:	4b77      	ldr	r3, [pc, #476]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1d8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a1dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e2:	4a74      	ldr	r2, [pc, #464]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a1e4:	430b      	orrs	r3, r1
 800a1e6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a1e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800a1f4:	633b      	str	r3, [r7, #48]	; 0x30
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a1fa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800a1fe:	460b      	mov	r3, r1
 800a200:	4313      	orrs	r3, r2
 800a202:	d00a      	beq.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a204:	4b6b      	ldr	r3, [pc, #428]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a208:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800a20c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a210:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a214:	4a67      	ldr	r2, [pc, #412]	; (800a3b4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a216:	430b      	orrs	r3, r1
 800a218:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	2100      	movs	r1, #0
 800a224:	62b9      	str	r1, [r7, #40]	; 0x28
 800a226:	f003 0301 	and.w	r3, r3, #1
 800a22a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a22c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800a230:	460b      	mov	r3, r1
 800a232:	4313      	orrs	r3, r2
 800a234:	d011      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23a:	3308      	adds	r3, #8
 800a23c:	2100      	movs	r1, #0
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 fa4a 	bl	800b6d8 <RCCEx_PLL2_Config>
 800a244:	4603      	mov	r3, r0
 800a246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a252:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a256:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	2100      	movs	r1, #0
 800a264:	6239      	str	r1, [r7, #32]
 800a266:	f003 0302 	and.w	r3, r3, #2
 800a26a:	627b      	str	r3, [r7, #36]	; 0x24
 800a26c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a270:	460b      	mov	r3, r1
 800a272:	4313      	orrs	r3, r2
 800a274:	d011      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a276:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a27a:	3308      	adds	r3, #8
 800a27c:	2101      	movs	r1, #1
 800a27e:	4618      	mov	r0, r3
 800a280:	f001 fa2a 	bl	800b6d8 <RCCEx_PLL2_Config>
 800a284:	4603      	mov	r3, r0
 800a286:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a28a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	61b9      	str	r1, [r7, #24]
 800a2a6:	f003 0304 	and.w	r3, r3, #4
 800a2aa:	61fb      	str	r3, [r7, #28]
 800a2ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	d011      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a2b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2ba:	3308      	adds	r3, #8
 800a2bc:	2102      	movs	r1, #2
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f001 fa0a 	bl	800b6d8 <RCCEx_PLL2_Config>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a2ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d003      	beq.n	800a2da <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	6139      	str	r1, [r7, #16]
 800a2e6:	f003 0308 	and.w	r3, r3, #8
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	d011      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a2f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2fa:	3328      	adds	r3, #40	; 0x28
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	4618      	mov	r0, r3
 800a300:	f001 fa9c 	bl	800b83c <RCCEx_PLL3_Config>
 800a304:	4603      	mov	r3, r0
 800a306:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800a30a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a312:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a316:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a31a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	2100      	movs	r1, #0
 800a324:	60b9      	str	r1, [r7, #8]
 800a326:	f003 0310 	and.w	r3, r3, #16
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a330:	460b      	mov	r3, r1
 800a332:	4313      	orrs	r3, r2
 800a334:	d011      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a336:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a33a:	3328      	adds	r3, #40	; 0x28
 800a33c:	2101      	movs	r1, #1
 800a33e:	4618      	mov	r0, r3
 800a340:	f001 fa7c 	bl	800b83c <RCCEx_PLL3_Config>
 800a344:	4603      	mov	r3, r0
 800a346:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a34a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a35a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a362:	2100      	movs	r1, #0
 800a364:	6039      	str	r1, [r7, #0]
 800a366:	f003 0320 	and.w	r3, r3, #32
 800a36a:	607b      	str	r3, [r7, #4]
 800a36c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a370:	460b      	mov	r3, r1
 800a372:	4313      	orrs	r3, r2
 800a374:	d011      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a376:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a37a:	3328      	adds	r3, #40	; 0x28
 800a37c:	2102      	movs	r1, #2
 800a37e:	4618      	mov	r0, r3
 800a380:	f001 fa5c 	bl	800b83c <RCCEx_PLL3_Config>
 800a384:	4603      	mov	r3, r0
 800a386:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800a38a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d003      	beq.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a392:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a396:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800a39a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d101      	bne.n	800a3a6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e000      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3b4:	58024400 	.word	0x58024400

0800a3b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b090      	sub	sp, #64	; 0x40
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a3c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3c6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800a3ca:	430b      	orrs	r3, r1
 800a3cc:	f040 8094 	bne.w	800a4f8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a3d0:	4b9e      	ldr	r3, [pc, #632]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3d4:	f003 0307 	and.w	r3, r3, #7
 800a3d8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3dc:	2b04      	cmp	r3, #4
 800a3de:	f200 8087 	bhi.w	800a4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a3e2:	a201      	add	r2, pc, #4	; (adr r2, 800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a3e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e8:	0800a3fd 	.word	0x0800a3fd
 800a3ec:	0800a425 	.word	0x0800a425
 800a3f0:	0800a44d 	.word	0x0800a44d
 800a3f4:	0800a4e9 	.word	0x0800a4e9
 800a3f8:	0800a475 	.word	0x0800a475
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3fc:	4b93      	ldr	r3, [pc, #588]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a404:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a408:	d108      	bne.n	800a41c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a40a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a40e:	4618      	mov	r0, r3
 800a410:	f001 f810 	bl	800b434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a416:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a418:	f000 bd45 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a420:	f000 bd41 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a424:	4b89      	ldr	r3, [pc, #548]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a42c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a430:	d108      	bne.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a432:	f107 0318 	add.w	r3, r7, #24
 800a436:	4618      	mov	r0, r3
 800a438:	f000 fd54 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a440:	f000 bd31 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a444:	2300      	movs	r3, #0
 800a446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a448:	f000 bd2d 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a44c:	4b7f      	ldr	r3, [pc, #508]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a458:	d108      	bne.n	800a46c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45a:	f107 030c 	add.w	r3, r7, #12
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 fe94 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a468:	f000 bd1d 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a46c:	2300      	movs	r3, #0
 800a46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a470:	f000 bd19 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a474:	4b75      	ldr	r3, [pc, #468]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a476:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a47c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a47e:	4b73      	ldr	r3, [pc, #460]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	f003 0304 	and.w	r3, r3, #4
 800a486:	2b04      	cmp	r3, #4
 800a488:	d10c      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d109      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a490:	4b6e      	ldr	r3, [pc, #440]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	08db      	lsrs	r3, r3, #3
 800a496:	f003 0303 	and.w	r3, r3, #3
 800a49a:	4a6d      	ldr	r2, [pc, #436]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a49c:	fa22 f303 	lsr.w	r3, r2, r3
 800a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4a2:	e01f      	b.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4a4:	4b69      	ldr	r3, [pc, #420]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4b0:	d106      	bne.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a4b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4b8:	d102      	bne.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4ba:	4b66      	ldr	r3, [pc, #408]	; (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4be:	e011      	b.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4c0:	4b62      	ldr	r3, [pc, #392]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4cc:	d106      	bne.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a4ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4d4:	d102      	bne.n	800a4dc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4d6:	4b60      	ldr	r3, [pc, #384]	; (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a4d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4da:	e003      	b.n	800a4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a4e0:	f000 bce1 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4e4:	f000 bcdf 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4e8:	4b5c      	ldr	r3, [pc, #368]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4ec:	f000 bcdb 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4f4:	f000 bcd7 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a4f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4fc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800a500:	430b      	orrs	r3, r1
 800a502:	f040 80ad 	bne.w	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a506:	4b51      	ldr	r3, [pc, #324]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a50a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a50e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a512:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a516:	d056      	beq.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a51e:	f200 8090 	bhi.w	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	2bc0      	cmp	r3, #192	; 0xc0
 800a526:	f000 8088 	beq.w	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a52c:	2bc0      	cmp	r3, #192	; 0xc0
 800a52e:	f200 8088 	bhi.w	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a534:	2b80      	cmp	r3, #128	; 0x80
 800a536:	d032      	beq.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53a:	2b80      	cmp	r3, #128	; 0x80
 800a53c:	f200 8081 	bhi.w	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a542:	2b00      	cmp	r3, #0
 800a544:	d003      	beq.n	800a54e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	2b40      	cmp	r3, #64	; 0x40
 800a54a:	d014      	beq.n	800a576 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a54c:	e079      	b.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a54e:	4b3f      	ldr	r3, [pc, #252]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a556:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a55a:	d108      	bne.n	800a56e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a55c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a560:	4618      	mov	r0, r3
 800a562:	f000 ff67 	bl	800b434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a568:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a56a:	f000 bc9c 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a572:	f000 bc98 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a576:	4b35      	ldr	r3, [pc, #212]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a57e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a582:	d108      	bne.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a584:	f107 0318 	add.w	r3, r7, #24
 800a588:	4618      	mov	r0, r3
 800a58a:	f000 fcab 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a58e:	69bb      	ldr	r3, [r7, #24]
 800a590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a592:	f000 bc88 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a596:	2300      	movs	r3, #0
 800a598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a59a:	f000 bc84 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a59e:	4b2b      	ldr	r3, [pc, #172]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5aa:	d108      	bne.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ac:	f107 030c 	add.w	r3, r7, #12
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f000 fdeb 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5ba:	f000 bc74 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5c2:	f000 bc70 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5c6:	4b21      	ldr	r3, [pc, #132]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a5ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5d0:	4b1e      	ldr	r3, [pc, #120]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	f003 0304 	and.w	r3, r3, #4
 800a5d8:	2b04      	cmp	r3, #4
 800a5da:	d10c      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a5dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d109      	bne.n	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5e2:	4b1a      	ldr	r3, [pc, #104]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	08db      	lsrs	r3, r3, #3
 800a5e8:	f003 0303 	and.w	r3, r3, #3
 800a5ec:	4a18      	ldr	r2, [pc, #96]	; (800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a5ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a5f4:	e01f      	b.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a5f6:	4b15      	ldr	r3, [pc, #84]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a602:	d106      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a60a:	d102      	bne.n	800a612 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a60c:	4b11      	ldr	r3, [pc, #68]	; (800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a60e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a610:	e011      	b.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a612:	4b0e      	ldr	r3, [pc, #56]	; (800a64c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a61a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a61e:	d106      	bne.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a626:	d102      	bne.n	800a62e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a628:	4b0b      	ldr	r3, [pc, #44]	; (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a62c:	e003      	b.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a62e:	2300      	movs	r3, #0
 800a630:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a632:	f000 bc38 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a636:	f000 bc36 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a63a:	4b08      	ldr	r3, [pc, #32]	; (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a63e:	f000 bc32 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a642:	2300      	movs	r3, #0
 800a644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a646:	f000 bc2e 	b.w	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a64a:	bf00      	nop
 800a64c:	58024400 	.word	0x58024400
 800a650:	03d09000 	.word	0x03d09000
 800a654:	003d0900 	.word	0x003d0900
 800a658:	016e3600 	.word	0x016e3600
 800a65c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a660:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a664:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a668:	430b      	orrs	r3, r1
 800a66a:	f040 809c 	bne.w	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a66e:	4b9e      	ldr	r3, [pc, #632]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a672:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a676:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a67e:	d054      	beq.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a682:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a686:	f200 808b 	bhi.w	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a68a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a690:	f000 8083 	beq.w	800a79a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a696:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a69a:	f200 8081 	bhi.w	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6a4:	d02f      	beq.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6ac:	d878      	bhi.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a6ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d004      	beq.n	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6ba:	d012      	beq.n	800a6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a6bc:	e070      	b.n	800a7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6be:	4b8a      	ldr	r3, [pc, #552]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a6ca:	d107      	bne.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f000 feaf 	bl	800b434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6da:	e3e4      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6dc:	2300      	movs	r3, #0
 800a6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6e0:	e3e1      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6e2:	4b81      	ldr	r3, [pc, #516]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a6ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a6ee:	d107      	bne.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6f0:	f107 0318 	add.w	r3, r7, #24
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 fbf5 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6fe:	e3d2      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a704:	e3cf      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a706:	4b78      	ldr	r3, [pc, #480]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a70e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a712:	d107      	bne.n	800a724 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a714:	f107 030c 	add.w	r3, r7, #12
 800a718:	4618      	mov	r0, r3
 800a71a:	f000 fd37 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a722:	e3c0      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a724:	2300      	movs	r3, #0
 800a726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a728:	e3bd      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a72a:	4b6f      	ldr	r3, [pc, #444]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a72c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a72e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a732:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a734:	4b6c      	ldr	r3, [pc, #432]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0304 	and.w	r3, r3, #4
 800a73c:	2b04      	cmp	r3, #4
 800a73e:	d10c      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a742:	2b00      	cmp	r3, #0
 800a744:	d109      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a746:	4b68      	ldr	r3, [pc, #416]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	08db      	lsrs	r3, r3, #3
 800a74c:	f003 0303 	and.w	r3, r3, #3
 800a750:	4a66      	ldr	r2, [pc, #408]	; (800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a752:	fa22 f303 	lsr.w	r3, r2, r3
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a758:	e01e      	b.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a75a:	4b63      	ldr	r3, [pc, #396]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a766:	d106      	bne.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a76a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a76e:	d102      	bne.n	800a776 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a770:	4b5f      	ldr	r3, [pc, #380]	; (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a772:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a774:	e010      	b.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a776:	4b5c      	ldr	r3, [pc, #368]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a77e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a782:	d106      	bne.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a78a:	d102      	bne.n	800a792 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a78c:	4b59      	ldr	r3, [pc, #356]	; (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a78e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a790:	e002      	b.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a796:	e386      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a798:	e385      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a79a:	4b57      	ldr	r3, [pc, #348]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a79e:	e382      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a4:	e37f      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a7a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7aa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a7ae:	430b      	orrs	r3, r1
 800a7b0:	f040 80a7 	bne.w	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a7b4:	4b4c      	ldr	r3, [pc, #304]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a7bc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7c4:	d055      	beq.n	800a872 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a7cc:	f200 8096 	bhi.w	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7d6:	f000 8084 	beq.w	800a8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a7e0:	f200 808c 	bhi.w	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7ea:	d030      	beq.n	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a7f2:	f200 8083 	bhi.w	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d004      	beq.n	800a806 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a802:	d012      	beq.n	800a82a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a804:	e07a      	b.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a806:	4b38      	ldr	r3, [pc, #224]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a80e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a812:	d107      	bne.n	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a814:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fe0b 	bl	800b434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a822:	e340      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a828:	e33d      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a82a:	4b2f      	ldr	r3, [pc, #188]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a836:	d107      	bne.n	800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a838:	f107 0318 	add.w	r3, r7, #24
 800a83c:	4618      	mov	r0, r3
 800a83e:	f000 fb51 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a846:	e32e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a84c:	e32b      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a84e:	4b26      	ldr	r3, [pc, #152]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a856:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a85a:	d107      	bne.n	800a86c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a85c:	f107 030c 	add.w	r3, r7, #12
 800a860:	4618      	mov	r0, r3
 800a862:	f000 fc93 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a86a:	e31c      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a86c:	2300      	movs	r3, #0
 800a86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a870:	e319      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a872:	4b1d      	ldr	r3, [pc, #116]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a876:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a87a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a87c:	4b1a      	ldr	r3, [pc, #104]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 0304 	and.w	r3, r3, #4
 800a884:	2b04      	cmp	r3, #4
 800a886:	d10c      	bne.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d109      	bne.n	800a8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a88e:	4b16      	ldr	r3, [pc, #88]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	08db      	lsrs	r3, r3, #3
 800a894:	f003 0303 	and.w	r3, r3, #3
 800a898:	4a14      	ldr	r2, [pc, #80]	; (800a8ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a89a:	fa22 f303 	lsr.w	r3, r2, r3
 800a89e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8a0:	e01e      	b.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8a2:	4b11      	ldr	r3, [pc, #68]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8ae:	d106      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8b6:	d102      	bne.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a8b8:	4b0d      	ldr	r3, [pc, #52]	; (800a8f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8bc:	e010      	b.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8be:	4b0a      	ldr	r3, [pc, #40]	; (800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8ca:	d106      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a8cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8d2:	d102      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a8d4:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8d8:	e002      	b.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a8de:	e2e2      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8e0:	e2e1      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e6:	e2de      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8e8:	58024400 	.word	0x58024400
 800a8ec:	03d09000 	.word	0x03d09000
 800a8f0:	003d0900 	.word	0x003d0900
 800a8f4:	016e3600 	.word	0x016e3600
 800a8f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a900:	e2d1      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a902:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a906:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a90a:	430b      	orrs	r3, r1
 800a90c:	f040 809c 	bne.w	800aa48 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a910:	4b93      	ldr	r3, [pc, #588]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a914:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a918:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a91c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a920:	d054      	beq.n	800a9cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a928:	f200 808b 	bhi.w	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a932:	f000 8083 	beq.w	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a938:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a93c:	f200 8081 	bhi.w	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a946:	d02f      	beq.n	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a94e:	d878      	bhi.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a952:	2b00      	cmp	r3, #0
 800a954:	d004      	beq.n	800a960 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95c:	d012      	beq.n	800a984 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a95e:	e070      	b.n	800aa42 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a960:	4b7f      	ldr	r3, [pc, #508]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a96c:	d107      	bne.n	800a97e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a96e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a972:	4618      	mov	r0, r3
 800a974:	f000 fd5e 	bl	800b434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a97c:	e293      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a97e:	2300      	movs	r3, #0
 800a980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a982:	e290      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a984:	4b76      	ldr	r3, [pc, #472]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a98c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a990:	d107      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a992:	f107 0318 	add.w	r3, r7, #24
 800a996:	4618      	mov	r0, r3
 800a998:	f000 faa4 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a99c:	69bb      	ldr	r3, [r7, #24]
 800a99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9a0:	e281      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9a6:	e27e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9a8:	4b6d      	ldr	r3, [pc, #436]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9b4:	d107      	bne.n	800a9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9b6:	f107 030c 	add.w	r3, r7, #12
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 fbe6 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a9c4:	e26f      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a9ca:	e26c      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a9cc:	4b64      	ldr	r3, [pc, #400]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9d4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9d6:	4b62      	ldr	r3, [pc, #392]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 0304 	and.w	r3, r3, #4
 800a9de:	2b04      	cmp	r3, #4
 800a9e0:	d10c      	bne.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a9e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d109      	bne.n	800a9fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9e8:	4b5d      	ldr	r3, [pc, #372]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	08db      	lsrs	r3, r3, #3
 800a9ee:	f003 0303 	and.w	r3, r3, #3
 800a9f2:	4a5c      	ldr	r2, [pc, #368]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9fa:	e01e      	b.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a9fc:	4b58      	ldr	r3, [pc, #352]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa08:	d106      	bne.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800aa0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa10:	d102      	bne.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aa12:	4b55      	ldr	r3, [pc, #340]	; (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa14:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa16:	e010      	b.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa18:	4b51      	ldr	r3, [pc, #324]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa24:	d106      	bne.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800aa26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa2c:	d102      	bne.n	800aa34 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aa2e:	4b4f      	ldr	r3, [pc, #316]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aa30:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa32:	e002      	b.n	800aa3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aa34:	2300      	movs	r3, #0
 800aa36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aa38:	e235      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aa3a:	e234      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aa3c:	4b4c      	ldr	r3, [pc, #304]	; (800ab70 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800aa3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa40:	e231      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aa42:	2300      	movs	r3, #0
 800aa44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aa46:	e22e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800aa48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa4c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800aa50:	430b      	orrs	r3, r1
 800aa52:	f040 808f 	bne.w	800ab74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800aa56:	4b42      	ldr	r3, [pc, #264]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa5a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800aa5e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800aa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa66:	d06b      	beq.n	800ab40 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800aa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa6e:	d874      	bhi.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa76:	d056      	beq.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800aa78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa7e:	d86c      	bhi.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa82:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa86:	d03b      	beq.n	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800aa88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa8a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa8e:	d864      	bhi.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa96:	d021      	beq.n	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800aa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa9e:	d85c      	bhi.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d004      	beq.n	800aab0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800aaa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aaac:	d004      	beq.n	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800aaae:	e054      	b.n	800ab5a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aab0:	f7fe fa4c 	bl	8008f4c <HAL_RCC_GetPCLK1Freq>
 800aab4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800aab6:	e1f6      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aab8:	4b29      	ldr	r3, [pc, #164]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aac0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aac4:	d107      	bne.n	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aac6:	f107 0318 	add.w	r3, r7, #24
 800aaca:	4618      	mov	r0, r3
 800aacc:	f000 fa0a 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aad4:	e1e7      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aad6:	2300      	movs	r3, #0
 800aad8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aada:	e1e4      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aadc:	4b20      	ldr	r3, [pc, #128]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800aae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aae8:	d107      	bne.n	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aaea:	f107 030c 	add.w	r3, r7, #12
 800aaee:	4618      	mov	r0, r3
 800aaf0:	f000 fb4c 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aaf8:	e1d5      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aafa:	2300      	movs	r3, #0
 800aafc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aafe:	e1d2      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ab00:	4b17      	ldr	r3, [pc, #92]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f003 0304 	and.w	r3, r3, #4
 800ab08:	2b04      	cmp	r3, #4
 800ab0a:	d109      	bne.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab0c:	4b14      	ldr	r3, [pc, #80]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	08db      	lsrs	r3, r3, #3
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	4a13      	ldr	r2, [pc, #76]	; (800ab64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ab18:	fa22 f303 	lsr.w	r3, r2, r3
 800ab1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab1e:	e1c2      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab24:	e1bf      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ab26:	4b0e      	ldr	r3, [pc, #56]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab32:	d102      	bne.n	800ab3a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800ab34:	4b0c      	ldr	r3, [pc, #48]	; (800ab68 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ab36:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab38:	e1b5      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab3e:	e1b2      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ab40:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab4c:	d102      	bne.n	800ab54 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800ab4e:	4b07      	ldr	r3, [pc, #28]	; (800ab6c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ab50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab52:	e1a8      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab54:	2300      	movs	r3, #0
 800ab56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab58:	e1a5      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ab5e:	e1a2      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ab60:	58024400 	.word	0x58024400
 800ab64:	03d09000 	.word	0x03d09000
 800ab68:	003d0900 	.word	0x003d0900
 800ab6c:	016e3600 	.word	0x016e3600
 800ab70:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ab74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab78:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800ab7c:	430b      	orrs	r3, r1
 800ab7e:	d173      	bne.n	800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ab80:	4b9c      	ldr	r3, [pc, #624]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ab88:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ab8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab90:	d02f      	beq.n	800abf2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ab92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab98:	d863      	bhi.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ab9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d004      	beq.n	800abaa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800aba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aba6:	d012      	beq.n	800abce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800aba8:	e05b      	b.n	800ac62 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800abaa:	4b92      	ldr	r3, [pc, #584]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800abb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abb6:	d107      	bne.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abb8:	f107 0318 	add.w	r3, r7, #24
 800abbc:	4618      	mov	r0, r3
 800abbe:	f000 f991 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abc6:	e16e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abc8:	2300      	movs	r3, #0
 800abca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abcc:	e16b      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800abce:	4b89      	ldr	r3, [pc, #548]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800abd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800abda:	d107      	bne.n	800abec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abdc:	f107 030c 	add.w	r3, r7, #12
 800abe0:	4618      	mov	r0, r3
 800abe2:	f000 fad3 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800abea:	e15c      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800abf0:	e159      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800abf2:	4b80      	ldr	r3, [pc, #512]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abf6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800abfa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800abfc:	4b7d      	ldr	r3, [pc, #500]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f003 0304 	and.w	r3, r3, #4
 800ac04:	2b04      	cmp	r3, #4
 800ac06:	d10c      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ac08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d109      	bne.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac0e:	4b79      	ldr	r3, [pc, #484]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	08db      	lsrs	r3, r3, #3
 800ac14:	f003 0303 	and.w	r3, r3, #3
 800ac18:	4a77      	ldr	r2, [pc, #476]	; (800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ac1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac20:	e01e      	b.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac22:	4b74      	ldr	r3, [pc, #464]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac2e:	d106      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ac30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac36:	d102      	bne.n	800ac3e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ac38:	4b70      	ldr	r3, [pc, #448]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ac3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac3c:	e010      	b.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ac3e:	4b6d      	ldr	r3, [pc, #436]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac4a:	d106      	bne.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ac4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac52:	d102      	bne.n	800ac5a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ac54:	4b6a      	ldr	r3, [pc, #424]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ac56:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac58:	e002      	b.n	800ac60 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ac5e:	e122      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ac60:	e121      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ac66:	e11e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ac68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac6c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800ac70:	430b      	orrs	r3, r1
 800ac72:	d133      	bne.n	800acdc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ac74:	4b5f      	ldr	r3, [pc, #380]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ac7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d004      	beq.n	800ac8e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800ac84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac8a:	d012      	beq.n	800acb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ac8c:	e023      	b.n	800acd6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac8e:	4b59      	ldr	r3, [pc, #356]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac9a:	d107      	bne.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aca0:	4618      	mov	r0, r3
 800aca2:	f000 fbc7 	bl	800b434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acaa:	e0fc      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acac:	2300      	movs	r3, #0
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acb0:	e0f9      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acb2:	4b50      	ldr	r3, [pc, #320]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acbe:	d107      	bne.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acc0:	f107 0318 	add.w	r3, r7, #24
 800acc4:	4618      	mov	r0, r3
 800acc6:	f000 f90d 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acce:	e0ea      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acd4:	e0e7      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acda:	e0e4      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800acdc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ace0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ace4:	430b      	orrs	r3, r1
 800ace6:	f040 808d 	bne.w	800ae04 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800acea:	4b42      	ldr	r3, [pc, #264]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acee:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800acf2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800acf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acfa:	d06b      	beq.n	800add4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800acfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ad02:	d874      	bhi.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad0a:	d056      	beq.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ad0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad12:	d86c      	bhi.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad16:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad1a:	d03b      	beq.n	800ad94 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ad1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad1e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ad22:	d864      	bhi.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad2a:	d021      	beq.n	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ad2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad32:	d85c      	bhi.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d004      	beq.n	800ad44 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ad3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad40:	d004      	beq.n	800ad4c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ad42:	e054      	b.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ad44:	f000 f8b8 	bl	800aeb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800ad48:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ad4a:	e0ac      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad4c:	4b29      	ldr	r3, [pc, #164]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad58:	d107      	bne.n	800ad6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad5a:	f107 0318 	add.w	r3, r7, #24
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f000 f8c0 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ad64:	69fb      	ldr	r3, [r7, #28]
 800ad66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad68:	e09d      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad6e:	e09a      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad70:	4b20      	ldr	r3, [pc, #128]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ad78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad7c:	d107      	bne.n	800ad8e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ad7e:	f107 030c 	add.w	r3, r7, #12
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 fa02 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad8c:	e08b      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad8e:	2300      	movs	r3, #0
 800ad90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad92:	e088      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800ad94:	4b17      	ldr	r3, [pc, #92]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0304 	and.w	r3, r3, #4
 800ad9c:	2b04      	cmp	r3, #4
 800ad9e:	d109      	bne.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ada0:	4b14      	ldr	r3, [pc, #80]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	08db      	lsrs	r3, r3, #3
 800ada6:	f003 0303 	and.w	r3, r3, #3
 800adaa:	4a13      	ldr	r2, [pc, #76]	; (800adf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800adac:	fa22 f303 	lsr.w	r3, r2, r3
 800adb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adb2:	e078      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adb8:	e075      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800adba:	4b0e      	ldr	r3, [pc, #56]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adc6:	d102      	bne.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800adc8:	4b0c      	ldr	r3, [pc, #48]	; (800adfc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800adca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adcc:	e06b      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800add2:	e068      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800add4:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800addc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ade0:	d102      	bne.n	800ade8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ade2:	4b07      	ldr	r3, [pc, #28]	; (800ae00 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ade4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ade6:	e05e      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adec:	e05b      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800adee:	2300      	movs	r3, #0
 800adf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adf2:	e058      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800adf4:	58024400 	.word	0x58024400
 800adf8:	03d09000 	.word	0x03d09000
 800adfc:	003d0900 	.word	0x003d0900
 800ae00:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ae04:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae08:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800ae0c:	430b      	orrs	r3, r1
 800ae0e:	d148      	bne.n	800aea2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ae10:	4b27      	ldr	r3, [pc, #156]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae18:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ae1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae20:	d02a      	beq.n	800ae78 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ae22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae28:	d838      	bhi.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d004      	beq.n	800ae3a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae36:	d00d      	beq.n	800ae54 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ae38:	e030      	b.n	800ae9c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ae3a:	4b1d      	ldr	r3, [pc, #116]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae46:	d102      	bne.n	800ae4e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ae48:	4b1a      	ldr	r3, [pc, #104]	; (800aeb4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ae4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae4c:	e02b      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae52:	e028      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ae54:	4b16      	ldr	r3, [pc, #88]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae60:	d107      	bne.n	800ae72 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ae62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ae66:	4618      	mov	r0, r3
 800ae68:	f000 fae4 	bl	800b434 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ae6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae70:	e019      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae76:	e016      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae78:	4b0d      	ldr	r3, [pc, #52]	; (800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae84:	d107      	bne.n	800ae96 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae86:	f107 0318 	add.w	r3, r7, #24
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f82a 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae94:	e007      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae96:	2300      	movs	r3, #0
 800ae98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae9a:	e004      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aea0:	e001      	b.n	800aea6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800aea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3740      	adds	r7, #64	; 0x40
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}
 800aeb0:	58024400 	.word	0x58024400
 800aeb4:	016e3600 	.word	0x016e3600

0800aeb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800aebc:	f7fe f816 	bl	8008eec <HAL_RCC_GetHCLKFreq>
 800aec0:	4602      	mov	r2, r0
 800aec2:	4b06      	ldr	r3, [pc, #24]	; (800aedc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800aec4:	6a1b      	ldr	r3, [r3, #32]
 800aec6:	091b      	lsrs	r3, r3, #4
 800aec8:	f003 0307 	and.w	r3, r3, #7
 800aecc:	4904      	ldr	r1, [pc, #16]	; (800aee0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800aece:	5ccb      	ldrb	r3, [r1, r3]
 800aed0:	f003 031f 	and.w	r3, r3, #31
 800aed4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	58024400 	.word	0x58024400
 800aee0:	0800d8b4 	.word	0x0800d8b4

0800aee4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b089      	sub	sp, #36	; 0x24
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aeec:	4ba1      	ldr	r3, [pc, #644]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aef0:	f003 0303 	and.w	r3, r3, #3
 800aef4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800aef6:	4b9f      	ldr	r3, [pc, #636]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aefa:	0b1b      	lsrs	r3, r3, #12
 800aefc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800af02:	4b9c      	ldr	r3, [pc, #624]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af06:	091b      	lsrs	r3, r3, #4
 800af08:	f003 0301 	and.w	r3, r3, #1
 800af0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800af0e:	4b99      	ldr	r3, [pc, #612]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af12:	08db      	lsrs	r3, r3, #3
 800af14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af18:	693a      	ldr	r2, [r7, #16]
 800af1a:	fb02 f303 	mul.w	r3, r2, r3
 800af1e:	ee07 3a90 	vmov	s15, r3
 800af22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	f000 8111 	beq.w	800b154 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	2b02      	cmp	r3, #2
 800af36:	f000 8083 	beq.w	800b040 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	f200 80a1 	bhi.w	800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800af42:	69bb      	ldr	r3, [r7, #24]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d003      	beq.n	800af50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d056      	beq.n	800affc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800af4e:	e099      	b.n	800b084 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af50:	4b88      	ldr	r3, [pc, #544]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f003 0320 	and.w	r3, r3, #32
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d02d      	beq.n	800afb8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af5c:	4b85      	ldr	r3, [pc, #532]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	08db      	lsrs	r3, r3, #3
 800af62:	f003 0303 	and.w	r3, r3, #3
 800af66:	4a84      	ldr	r2, [pc, #528]	; (800b178 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800af68:	fa22 f303 	lsr.w	r3, r2, r3
 800af6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	ee07 3a90 	vmov	s15, r3
 800af74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	ee07 3a90 	vmov	s15, r3
 800af7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af86:	4b7b      	ldr	r3, [pc, #492]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af8e:	ee07 3a90 	vmov	s15, r3
 800af92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af96:	ed97 6a03 	vldr	s12, [r7, #12]
 800af9a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afb6:	e087      	b.n	800b0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afb8:	697b      	ldr	r3, [r7, #20]
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afc2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b180 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800afc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afca:	4b6a      	ldr	r3, [pc, #424]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afd2:	ee07 3a90 	vmov	s15, r3
 800afd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afda:	ed97 6a03 	vldr	s12, [r7, #12]
 800afde:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800affa:	e065      	b.n	800b0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b006:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b00a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b00e:	4b59      	ldr	r3, [pc, #356]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b016:	ee07 3a90 	vmov	s15, r3
 800b01a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b01e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b022:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b02a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b02e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b03a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b03e:	e043      	b.n	800b0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	ee07 3a90 	vmov	s15, r3
 800b046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b04a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b188 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b04e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b052:	4b48      	ldr	r3, [pc, #288]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05a:	ee07 3a90 	vmov	s15, r3
 800b05e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b062:	ed97 6a03 	vldr	s12, [r7, #12]
 800b066:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b06a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b06e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b07a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b07e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b082:	e021      	b.n	800b0c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b084:	697b      	ldr	r3, [r7, #20]
 800b086:	ee07 3a90 	vmov	s15, r3
 800b08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b08e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b184 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b096:	4b37      	ldr	r3, [pc, #220]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b09a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b09e:	ee07 3a90 	vmov	s15, r3
 800b0a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b17c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b0ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b0c8:	4b2a      	ldr	r3, [pc, #168]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0cc:	0a5b      	lsrs	r3, r3, #9
 800b0ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0d2:	ee07 3a90 	vmov	s15, r3
 800b0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0ee:	ee17 2a90 	vmov	r2, s15
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b0f6:	4b1f      	ldr	r3, [pc, #124]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b0f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0fa:	0c1b      	lsrs	r3, r3, #16
 800b0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b100:	ee07 3a90 	vmov	s15, r3
 800b104:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b108:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b10c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b110:	edd7 6a07 	vldr	s13, [r7, #28]
 800b114:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b118:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b11c:	ee17 2a90 	vmov	r2, s15
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b124:	4b13      	ldr	r3, [pc, #76]	; (800b174 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b128:	0e1b      	lsrs	r3, r3, #24
 800b12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b12e:	ee07 3a90 	vmov	s15, r3
 800b132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b13a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b13e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b14a:	ee17 2a90 	vmov	r2, s15
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b152:	e008      	b.n	800b166 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2200      	movs	r2, #0
 800b158:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	609a      	str	r2, [r3, #8]
}
 800b166:	bf00      	nop
 800b168:	3724      	adds	r7, #36	; 0x24
 800b16a:	46bd      	mov	sp, r7
 800b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b170:	4770      	bx	lr
 800b172:	bf00      	nop
 800b174:	58024400 	.word	0x58024400
 800b178:	03d09000 	.word	0x03d09000
 800b17c:	46000000 	.word	0x46000000
 800b180:	4c742400 	.word	0x4c742400
 800b184:	4a742400 	.word	0x4a742400
 800b188:	4bb71b00 	.word	0x4bb71b00

0800b18c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b089      	sub	sp, #36	; 0x24
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b194:	4ba1      	ldr	r3, [pc, #644]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b198:	f003 0303 	and.w	r3, r3, #3
 800b19c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b19e:	4b9f      	ldr	r3, [pc, #636]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1a2:	0d1b      	lsrs	r3, r3, #20
 800b1a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b1aa:	4b9c      	ldr	r3, [pc, #624]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ae:	0a1b      	lsrs	r3, r3, #8
 800b1b0:	f003 0301 	and.w	r3, r3, #1
 800b1b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b1b6:	4b99      	ldr	r3, [pc, #612]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ba:	08db      	lsrs	r3, r3, #3
 800b1bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	fb02 f303 	mul.w	r3, r2, r3
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 8111 	beq.w	800b3fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	f000 8083 	beq.w	800b2e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	f200 80a1 	bhi.w	800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b1ea:	69bb      	ldr	r3, [r7, #24]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d003      	beq.n	800b1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b1f0:	69bb      	ldr	r3, [r7, #24]
 800b1f2:	2b01      	cmp	r3, #1
 800b1f4:	d056      	beq.n	800b2a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b1f6:	e099      	b.n	800b32c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b1f8:	4b88      	ldr	r3, [pc, #544]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	f003 0320 	and.w	r3, r3, #32
 800b200:	2b00      	cmp	r3, #0
 800b202:	d02d      	beq.n	800b260 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b204:	4b85      	ldr	r3, [pc, #532]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	08db      	lsrs	r3, r3, #3
 800b20a:	f003 0303 	and.w	r3, r3, #3
 800b20e:	4a84      	ldr	r2, [pc, #528]	; (800b420 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b210:	fa22 f303 	lsr.w	r3, r2, r3
 800b214:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	ee07 3a90 	vmov	s15, r3
 800b21c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	ee07 3a90 	vmov	s15, r3
 800b226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b22e:	4b7b      	ldr	r3, [pc, #492]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b236:	ee07 3a90 	vmov	s15, r3
 800b23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b23e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b242:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b24e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b25a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b25e:	e087      	b.n	800b370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	ee07 3a90 	vmov	s15, r3
 800b266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b26a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b428 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b272:	4b6a      	ldr	r3, [pc, #424]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b27a:	ee07 3a90 	vmov	s15, r3
 800b27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b282:	ed97 6a03 	vldr	s12, [r7, #12]
 800b286:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b29e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2a2:	e065      	b.n	800b370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	ee07 3a90 	vmov	s15, r3
 800b2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b2b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2b6:	4b59      	ldr	r3, [pc, #356]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2be:	ee07 3a90 	vmov	s15, r3
 800b2c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2e6:	e043      	b.n	800b370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	ee07 3a90 	vmov	s15, r3
 800b2ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b430 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b2f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2fa:	4b48      	ldr	r3, [pc, #288]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b302:	ee07 3a90 	vmov	s15, r3
 800b306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b30a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b30e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b31a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b31e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b322:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b32a:	e021      	b.n	800b370 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	ee07 3a90 	vmov	s15, r3
 800b332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b336:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b42c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b33a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b33e:	4b37      	ldr	r3, [pc, #220]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b346:	ee07 3a90 	vmov	s15, r3
 800b34a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b34e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b352:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b424 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b35a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b35e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b36a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b36e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b370:	4b2a      	ldr	r3, [pc, #168]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b374:	0a5b      	lsrs	r3, r3, #9
 800b376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b37a:	ee07 3a90 	vmov	s15, r3
 800b37e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b382:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b38a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b38e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b396:	ee17 2a90 	vmov	r2, s15
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b39e:	4b1f      	ldr	r3, [pc, #124]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a2:	0c1b      	lsrs	r3, r3, #16
 800b3a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3a8:	ee07 3a90 	vmov	s15, r3
 800b3ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3c4:	ee17 2a90 	vmov	r2, s15
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b3cc:	4b13      	ldr	r3, [pc, #76]	; (800b41c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b3ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3d0:	0e1b      	lsrs	r3, r3, #24
 800b3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3d6:	ee07 3a90 	vmov	s15, r3
 800b3da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3f2:	ee17 2a90 	vmov	r2, s15
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b3fa:	e008      	b.n	800b40e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	609a      	str	r2, [r3, #8]
}
 800b40e:	bf00      	nop
 800b410:	3724      	adds	r7, #36	; 0x24
 800b412:	46bd      	mov	sp, r7
 800b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b418:	4770      	bx	lr
 800b41a:	bf00      	nop
 800b41c:	58024400 	.word	0x58024400
 800b420:	03d09000 	.word	0x03d09000
 800b424:	46000000 	.word	0x46000000
 800b428:	4c742400 	.word	0x4c742400
 800b42c:	4a742400 	.word	0x4a742400
 800b430:	4bb71b00 	.word	0x4bb71b00

0800b434 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b434:	b480      	push	{r7}
 800b436:	b089      	sub	sp, #36	; 0x24
 800b438:	af00      	add	r7, sp, #0
 800b43a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b43c:	4ba0      	ldr	r3, [pc, #640]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b440:	f003 0303 	and.w	r3, r3, #3
 800b444:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b446:	4b9e      	ldr	r3, [pc, #632]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b44a:	091b      	lsrs	r3, r3, #4
 800b44c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b450:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b452:	4b9b      	ldr	r3, [pc, #620]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b456:	f003 0301 	and.w	r3, r3, #1
 800b45a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b45c:	4b98      	ldr	r3, [pc, #608]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b460:	08db      	lsrs	r3, r3, #3
 800b462:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	fb02 f303 	mul.w	r3, r2, r3
 800b46c:	ee07 3a90 	vmov	s15, r3
 800b470:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b474:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 8111 	beq.w	800b6a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	2b02      	cmp	r3, #2
 800b484:	f000 8083 	beq.w	800b58e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	2b02      	cmp	r3, #2
 800b48c:	f200 80a1 	bhi.w	800b5d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d003      	beq.n	800b49e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d056      	beq.n	800b54a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b49c:	e099      	b.n	800b5d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b49e:	4b88      	ldr	r3, [pc, #544]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f003 0320 	and.w	r3, r3, #32
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d02d      	beq.n	800b506 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4aa:	4b85      	ldr	r3, [pc, #532]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	08db      	lsrs	r3, r3, #3
 800b4b0:	f003 0303 	and.w	r3, r3, #3
 800b4b4:	4a83      	ldr	r2, [pc, #524]	; (800b6c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800b4ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	ee07 3a90 	vmov	s15, r3
 800b4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4c6:	697b      	ldr	r3, [r7, #20]
 800b4c8:	ee07 3a90 	vmov	s15, r3
 800b4cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4d4:	4b7a      	ldr	r3, [pc, #488]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4dc:	ee07 3a90 	vmov	s15, r3
 800b4e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4e8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b4f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b500:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b504:	e087      	b.n	800b616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	ee07 3a90 	vmov	s15, r3
 800b50c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b510:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b6cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b514:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b518:	4b69      	ldr	r3, [pc, #420]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b520:	ee07 3a90 	vmov	s15, r3
 800b524:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b528:	ed97 6a03 	vldr	s12, [r7, #12]
 800b52c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b530:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b534:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b53c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b540:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b544:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b548:	e065      	b.n	800b616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	ee07 3a90 	vmov	s15, r3
 800b550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b554:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b6d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b55c:	4b58      	ldr	r3, [pc, #352]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b55e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b560:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b564:	ee07 3a90 	vmov	s15, r3
 800b568:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b56c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b570:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b574:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b578:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b57c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b580:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b584:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b588:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b58c:	e043      	b.n	800b616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	ee07 3a90 	vmov	s15, r3
 800b594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b598:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b6d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b59c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5a0:	4b47      	ldr	r3, [pc, #284]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5a8:	ee07 3a90 	vmov	s15, r3
 800b5ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5b4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b5d0:	e021      	b.n	800b616 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	ee07 3a90 	vmov	s15, r3
 800b5d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5dc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b6cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b5e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5e4:	4b36      	ldr	r3, [pc, #216]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ec:	ee07 3a90 	vmov	s15, r3
 800b5f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5f8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b6c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b5fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b600:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b604:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b608:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b60c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b610:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b614:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b616:	4b2a      	ldr	r3, [pc, #168]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b61a:	0a5b      	lsrs	r3, r3, #9
 800b61c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b620:	ee07 3a90 	vmov	s15, r3
 800b624:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b62c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b630:	edd7 6a07 	vldr	s13, [r7, #28]
 800b634:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b63c:	ee17 2a90 	vmov	r2, s15
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b644:	4b1e      	ldr	r3, [pc, #120]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b648:	0c1b      	lsrs	r3, r3, #16
 800b64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b64e:	ee07 3a90 	vmov	s15, r3
 800b652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b65a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b65e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b66a:	ee17 2a90 	vmov	r2, s15
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b672:	4b13      	ldr	r3, [pc, #76]	; (800b6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b676:	0e1b      	lsrs	r3, r3, #24
 800b678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b67c:	ee07 3a90 	vmov	s15, r3
 800b680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b68c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b698:	ee17 2a90 	vmov	r2, s15
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b6a0:	e008      	b.n	800b6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	609a      	str	r2, [r3, #8]
}
 800b6b4:	bf00      	nop
 800b6b6:	3724      	adds	r7, #36	; 0x24
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	58024400 	.word	0x58024400
 800b6c4:	03d09000 	.word	0x03d09000
 800b6c8:	46000000 	.word	0x46000000
 800b6cc:	4c742400 	.word	0x4c742400
 800b6d0:	4a742400 	.word	0x4a742400
 800b6d4:	4bb71b00 	.word	0x4bb71b00

0800b6d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b6e6:	4b53      	ldr	r3, [pc, #332]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6ea:	f003 0303 	and.w	r3, r3, #3
 800b6ee:	2b03      	cmp	r3, #3
 800b6f0:	d101      	bne.n	800b6f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e099      	b.n	800b82a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b6f6:	4b4f      	ldr	r3, [pc, #316]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a4e      	ldr	r2, [pc, #312]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b6fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b700:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b702:	f7f7 fc8f 	bl	8003024 <HAL_GetTick>
 800b706:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b708:	e008      	b.n	800b71c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b70a:	f7f7 fc8b 	bl	8003024 <HAL_GetTick>
 800b70e:	4602      	mov	r2, r0
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	2b02      	cmp	r3, #2
 800b716:	d901      	bls.n	800b71c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e086      	b.n	800b82a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b71c:	4b45      	ldr	r3, [pc, #276]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1f0      	bne.n	800b70a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b728:	4b42      	ldr	r3, [pc, #264]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b72a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b72c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	031b      	lsls	r3, r3, #12
 800b736:	493f      	ldr	r1, [pc, #252]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b738:	4313      	orrs	r3, r2
 800b73a:	628b      	str	r3, [r1, #40]	; 0x28
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	3b01      	subs	r3, #1
 800b742:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	689b      	ldr	r3, [r3, #8]
 800b74a:	3b01      	subs	r3, #1
 800b74c:	025b      	lsls	r3, r3, #9
 800b74e:	b29b      	uxth	r3, r3
 800b750:	431a      	orrs	r2, r3
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	3b01      	subs	r3, #1
 800b758:	041b      	lsls	r3, r3, #16
 800b75a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b75e:	431a      	orrs	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	3b01      	subs	r3, #1
 800b766:	061b      	lsls	r3, r3, #24
 800b768:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b76c:	4931      	ldr	r1, [pc, #196]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b76e:	4313      	orrs	r3, r2
 800b770:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b772:	4b30      	ldr	r3, [pc, #192]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b776:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	492d      	ldr	r1, [pc, #180]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b780:	4313      	orrs	r3, r2
 800b782:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b784:	4b2b      	ldr	r3, [pc, #172]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b788:	f023 0220 	bic.w	r2, r3, #32
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	699b      	ldr	r3, [r3, #24]
 800b790:	4928      	ldr	r1, [pc, #160]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b792:	4313      	orrs	r3, r2
 800b794:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b796:	4b27      	ldr	r3, [pc, #156]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b79a:	4a26      	ldr	r2, [pc, #152]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b79c:	f023 0310 	bic.w	r3, r3, #16
 800b7a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b7a2:	4b24      	ldr	r3, [pc, #144]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7a6:	4b24      	ldr	r3, [pc, #144]	; (800b838 <RCCEx_PLL2_Config+0x160>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	687a      	ldr	r2, [r7, #4]
 800b7ac:	69d2      	ldr	r2, [r2, #28]
 800b7ae:	00d2      	lsls	r2, r2, #3
 800b7b0:	4920      	ldr	r1, [pc, #128]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b7b6:	4b1f      	ldr	r3, [pc, #124]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ba:	4a1e      	ldr	r2, [pc, #120]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7bc:	f043 0310 	orr.w	r3, r3, #16
 800b7c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b7c8:	4b1a      	ldr	r3, [pc, #104]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7cc:	4a19      	ldr	r2, [pc, #100]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7d4:	e00f      	b.n	800b7f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d106      	bne.n	800b7ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b7dc:	4b15      	ldr	r3, [pc, #84]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e0:	4a14      	ldr	r2, [pc, #80]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b7e8:	e005      	b.n	800b7f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b7ea:	4b12      	ldr	r3, [pc, #72]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ee:	4a11      	ldr	r2, [pc, #68]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b7f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b7f6:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a0e      	ldr	r2, [pc, #56]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b7fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b802:	f7f7 fc0f 	bl	8003024 <HAL_GetTick>
 800b806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b808:	e008      	b.n	800b81c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b80a:	f7f7 fc0b 	bl	8003024 <HAL_GetTick>
 800b80e:	4602      	mov	r2, r0
 800b810:	68bb      	ldr	r3, [r7, #8]
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	2b02      	cmp	r3, #2
 800b816:	d901      	bls.n	800b81c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b818:	2303      	movs	r3, #3
 800b81a:	e006      	b.n	800b82a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b81c:	4b05      	ldr	r3, [pc, #20]	; (800b834 <RCCEx_PLL2_Config+0x15c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b824:	2b00      	cmp	r3, #0
 800b826:	d0f0      	beq.n	800b80a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b828:	7bfb      	ldrb	r3, [r7, #15]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	58024400 	.word	0x58024400
 800b838:	ffff0007 	.word	0xffff0007

0800b83c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b846:	2300      	movs	r3, #0
 800b848:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b84a:	4b53      	ldr	r3, [pc, #332]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b84e:	f003 0303 	and.w	r3, r3, #3
 800b852:	2b03      	cmp	r3, #3
 800b854:	d101      	bne.n	800b85a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b856:	2301      	movs	r3, #1
 800b858:	e099      	b.n	800b98e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b85a:	4b4f      	ldr	r3, [pc, #316]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4a4e      	ldr	r2, [pc, #312]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b864:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b866:	f7f7 fbdd 	bl	8003024 <HAL_GetTick>
 800b86a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b86c:	e008      	b.n	800b880 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b86e:	f7f7 fbd9 	bl	8003024 <HAL_GetTick>
 800b872:	4602      	mov	r2, r0
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	1ad3      	subs	r3, r2, r3
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d901      	bls.n	800b880 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b87c:	2303      	movs	r3, #3
 800b87e:	e086      	b.n	800b98e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b880:	4b45      	ldr	r3, [pc, #276]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1f0      	bne.n	800b86e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b88c:	4b42      	ldr	r3, [pc, #264]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b88e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b890:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	051b      	lsls	r3, r3, #20
 800b89a:	493f      	ldr	r1, [pc, #252]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b89c:	4313      	orrs	r3, r2
 800b89e:	628b      	str	r3, [r1, #40]	; 0x28
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	3b01      	subs	r3, #1
 800b8a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	3b01      	subs	r3, #1
 800b8b0:	025b      	lsls	r3, r3, #9
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	431a      	orrs	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	3b01      	subs	r3, #1
 800b8bc:	041b      	lsls	r3, r3, #16
 800b8be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b8c2:	431a      	orrs	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	3b01      	subs	r3, #1
 800b8ca:	061b      	lsls	r3, r3, #24
 800b8cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b8d0:	4931      	ldr	r1, [pc, #196]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b8d6:	4b30      	ldr	r3, [pc, #192]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b8d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	695b      	ldr	r3, [r3, #20]
 800b8e2:	492d      	ldr	r1, [pc, #180]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b8e8:	4b2b      	ldr	r3, [pc, #172]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	4928      	ldr	r1, [pc, #160]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b8f6:	4313      	orrs	r3, r2
 800b8f8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b8fa:	4b27      	ldr	r3, [pc, #156]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b8fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8fe:	4a26      	ldr	r2, [pc, #152]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b904:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b906:	4b24      	ldr	r3, [pc, #144]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b90a:	4b24      	ldr	r3, [pc, #144]	; (800b99c <RCCEx_PLL3_Config+0x160>)
 800b90c:	4013      	ands	r3, r2
 800b90e:	687a      	ldr	r2, [r7, #4]
 800b910:	69d2      	ldr	r2, [r2, #28]
 800b912:	00d2      	lsls	r2, r2, #3
 800b914:	4920      	ldr	r1, [pc, #128]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b916:	4313      	orrs	r3, r2
 800b918:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b91a:	4b1f      	ldr	r3, [pc, #124]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b91c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b91e:	4a1e      	ldr	r2, [pc, #120]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b924:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b92c:	4b1a      	ldr	r3, [pc, #104]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b92e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b930:	4a19      	ldr	r2, [pc, #100]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b936:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b938:	e00f      	b.n	800b95a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b01      	cmp	r3, #1
 800b93e:	d106      	bne.n	800b94e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b940:	4b15      	ldr	r3, [pc, #84]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b944:	4a14      	ldr	r2, [pc, #80]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b946:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b94a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b94c:	e005      	b.n	800b95a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b94e:	4b12      	ldr	r3, [pc, #72]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b952:	4a11      	ldr	r2, [pc, #68]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b954:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b958:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b95a:	4b0f      	ldr	r3, [pc, #60]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	4a0e      	ldr	r2, [pc, #56]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b966:	f7f7 fb5d 	bl	8003024 <HAL_GetTick>
 800b96a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b96c:	e008      	b.n	800b980 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b96e:	f7f7 fb59 	bl	8003024 <HAL_GetTick>
 800b972:	4602      	mov	r2, r0
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	2b02      	cmp	r3, #2
 800b97a:	d901      	bls.n	800b980 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b97c:	2303      	movs	r3, #3
 800b97e:	e006      	b.n	800b98e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b980:	4b05      	ldr	r3, [pc, #20]	; (800b998 <RCCEx_PLL3_Config+0x15c>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d0f0      	beq.n	800b96e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	58024400 	.word	0x58024400
 800b99c:	ffff0007 	.word	0xffff0007

0800b9a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d101      	bne.n	800b9b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b9ae:	2301      	movs	r3, #1
 800b9b0:	e049      	b.n	800ba46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d106      	bne.n	800b9cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f7f6 fe96 	bl	80026f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	3304      	adds	r3, #4
 800b9dc:	4619      	mov	r1, r3
 800b9de:	4610      	mov	r0, r2
 800b9e0:	f000 fc0a 	bl	800c1f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2201      	movs	r2, #1
 800b9e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2201      	movs	r2, #1
 800b9f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2201      	movs	r2, #1
 800ba08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2201      	movs	r2, #1
 800ba20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2201      	movs	r2, #1
 800ba40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3708      	adds	r7, #8
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
	...

0800ba50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba5e:	b2db      	uxtb	r3, r3
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d001      	beq.n	800ba68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba64:	2301      	movs	r3, #1
 800ba66:	e054      	b.n	800bb12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68da      	ldr	r2, [r3, #12]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f042 0201 	orr.w	r2, r2, #1
 800ba7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a26      	ldr	r2, [pc, #152]	; (800bb20 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba86:	4293      	cmp	r3, r2
 800ba88:	d022      	beq.n	800bad0 <HAL_TIM_Base_Start_IT+0x80>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba92:	d01d      	beq.n	800bad0 <HAL_TIM_Base_Start_IT+0x80>
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	4a22      	ldr	r2, [pc, #136]	; (800bb24 <HAL_TIM_Base_Start_IT+0xd4>)
 800ba9a:	4293      	cmp	r3, r2
 800ba9c:	d018      	beq.n	800bad0 <HAL_TIM_Base_Start_IT+0x80>
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a21      	ldr	r2, [pc, #132]	; (800bb28 <HAL_TIM_Base_Start_IT+0xd8>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d013      	beq.n	800bad0 <HAL_TIM_Base_Start_IT+0x80>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	4a1f      	ldr	r2, [pc, #124]	; (800bb2c <HAL_TIM_Base_Start_IT+0xdc>)
 800baae:	4293      	cmp	r3, r2
 800bab0:	d00e      	beq.n	800bad0 <HAL_TIM_Base_Start_IT+0x80>
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	4a1e      	ldr	r2, [pc, #120]	; (800bb30 <HAL_TIM_Base_Start_IT+0xe0>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d009      	beq.n	800bad0 <HAL_TIM_Base_Start_IT+0x80>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4a1c      	ldr	r2, [pc, #112]	; (800bb34 <HAL_TIM_Base_Start_IT+0xe4>)
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d004      	beq.n	800bad0 <HAL_TIM_Base_Start_IT+0x80>
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a1b      	ldr	r2, [pc, #108]	; (800bb38 <HAL_TIM_Base_Start_IT+0xe8>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d115      	bne.n	800bafc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	689a      	ldr	r2, [r3, #8]
 800bad6:	4b19      	ldr	r3, [pc, #100]	; (800bb3c <HAL_TIM_Base_Start_IT+0xec>)
 800bad8:	4013      	ands	r3, r2
 800bada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b06      	cmp	r3, #6
 800bae0:	d015      	beq.n	800bb0e <HAL_TIM_Base_Start_IT+0xbe>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bae8:	d011      	beq.n	800bb0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	f042 0201 	orr.w	r2, r2, #1
 800baf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bafa:	e008      	b.n	800bb0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f042 0201 	orr.w	r2, r2, #1
 800bb0a:	601a      	str	r2, [r3, #0]
 800bb0c:	e000      	b.n	800bb10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bb0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	40010000 	.word	0x40010000
 800bb24:	40000400 	.word	0x40000400
 800bb28:	40000800 	.word	0x40000800
 800bb2c:	40000c00 	.word	0x40000c00
 800bb30:	40010400 	.word	0x40010400
 800bb34:	40001800 	.word	0x40001800
 800bb38:	40014000 	.word	0x40014000
 800bb3c:	00010007 	.word	0x00010007

0800bb40 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b086      	sub	sp, #24
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e08f      	b.n	800bc74 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb5a:	b2db      	uxtb	r3, r3
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d106      	bne.n	800bb6e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	2200      	movs	r2, #0
 800bb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7f6 fd3b 	bl	80025e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2202      	movs	r2, #2
 800bb72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	6899      	ldr	r1, [r3, #8]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681a      	ldr	r2, [r3, #0]
 800bb80:	4b3e      	ldr	r3, [pc, #248]	; (800bc7c <HAL_TIM_Encoder_Init+0x13c>)
 800bb82:	400b      	ands	r3, r1
 800bb84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681a      	ldr	r2, [r3, #0]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	4619      	mov	r1, r3
 800bb90:	4610      	mov	r0, r2
 800bb92:	f000 fb31 	bl	800c1f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	699b      	ldr	r3, [r3, #24]
 800bba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	6a1b      	ldr	r3, [r3, #32]
 800bbac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	697a      	ldr	r2, [r7, #20]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bbb8:	693a      	ldr	r2, [r7, #16]
 800bbba:	4b31      	ldr	r3, [pc, #196]	; (800bc80 <HAL_TIM_Encoder_Init+0x140>)
 800bbbc:	4013      	ands	r3, r2
 800bbbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	689a      	ldr	r2, [r3, #8]
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	699b      	ldr	r3, [r3, #24]
 800bbc8:	021b      	lsls	r3, r3, #8
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	693a      	ldr	r2, [r7, #16]
 800bbce:	4313      	orrs	r3, r2
 800bbd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	4b2b      	ldr	r3, [pc, #172]	; (800bc84 <HAL_TIM_Encoder_Init+0x144>)
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	4b2a      	ldr	r3, [pc, #168]	; (800bc88 <HAL_TIM_Encoder_Init+0x148>)
 800bbde:	4013      	ands	r3, r2
 800bbe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	68da      	ldr	r2, [r3, #12]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	69db      	ldr	r3, [r3, #28]
 800bbea:	021b      	lsls	r3, r3, #8
 800bbec:	4313      	orrs	r3, r2
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	011a      	lsls	r2, r3, #4
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	6a1b      	ldr	r3, [r3, #32]
 800bbfe:	031b      	lsls	r3, r3, #12
 800bc00:	4313      	orrs	r3, r2
 800bc02:	693a      	ldr	r2, [r7, #16]
 800bc04:	4313      	orrs	r3, r2
 800bc06:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bc0e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bc16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	695b      	ldr	r3, [r3, #20]
 800bc20:	011b      	lsls	r3, r3, #4
 800bc22:	4313      	orrs	r3, r2
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	4313      	orrs	r3, r2
 800bc28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	693a      	ldr	r2, [r7, #16]
 800bc38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2201      	movs	r2, #1
 800bc46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2201      	movs	r2, #1
 800bc56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2201      	movs	r2, #1
 800bc5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2201      	movs	r2, #1
 800bc66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3718      	adds	r7, #24
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	fffebff8 	.word	0xfffebff8
 800bc80:	fffffcfc 	.word	0xfffffcfc
 800bc84:	fffff3f3 	.word	0xfffff3f3
 800bc88:	ffff0f0f 	.word	0xffff0f0f

0800bc8c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc9c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bca4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bcac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bcb4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d110      	bne.n	800bcde <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bcbc:	7bfb      	ldrb	r3, [r7, #15]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d102      	bne.n	800bcc8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800bcc2:	7b7b      	ldrb	r3, [r7, #13]
 800bcc4:	2b01      	cmp	r3, #1
 800bcc6:	d001      	beq.n	800bccc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e069      	b.n	800bda0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2202      	movs	r2, #2
 800bcd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2202      	movs	r2, #2
 800bcd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcdc:	e031      	b.n	800bd42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	2b04      	cmp	r3, #4
 800bce2:	d110      	bne.n	800bd06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bce4:	7bbb      	ldrb	r3, [r7, #14]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d102      	bne.n	800bcf0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bcea:	7b3b      	ldrb	r3, [r7, #12]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d001      	beq.n	800bcf4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e055      	b.n	800bda0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2202      	movs	r2, #2
 800bd00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd04:	e01d      	b.n	800bd42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd06:	7bfb      	ldrb	r3, [r7, #15]
 800bd08:	2b01      	cmp	r3, #1
 800bd0a:	d108      	bne.n	800bd1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd0c:	7bbb      	ldrb	r3, [r7, #14]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d105      	bne.n	800bd1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bd12:	7b7b      	ldrb	r3, [r7, #13]
 800bd14:	2b01      	cmp	r3, #1
 800bd16:	d102      	bne.n	800bd1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bd18:	7b3b      	ldrb	r3, [r7, #12]
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	d001      	beq.n	800bd22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e03e      	b.n	800bda0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2202      	movs	r2, #2
 800bd26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2202      	movs	r2, #2
 800bd2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2202      	movs	r2, #2
 800bd36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2202      	movs	r2, #2
 800bd3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d003      	beq.n	800bd50 <HAL_TIM_Encoder_Start+0xc4>
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	2b04      	cmp	r3, #4
 800bd4c:	d008      	beq.n	800bd60 <HAL_TIM_Encoder_Start+0xd4>
 800bd4e:	e00f      	b.n	800bd70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2201      	movs	r2, #1
 800bd56:	2100      	movs	r1, #0
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f000 fb91 	bl	800c480 <TIM_CCxChannelCmd>
      break;
 800bd5e:	e016      	b.n	800bd8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2201      	movs	r2, #1
 800bd66:	2104      	movs	r1, #4
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f000 fb89 	bl	800c480 <TIM_CCxChannelCmd>
      break;
 800bd6e:	e00e      	b.n	800bd8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2201      	movs	r2, #1
 800bd76:	2100      	movs	r1, #0
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f000 fb81 	bl	800c480 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2201      	movs	r2, #1
 800bd84:	2104      	movs	r1, #4
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 fb7a 	bl	800c480 <TIM_CCxChannelCmd>
      break;
 800bd8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f042 0201 	orr.w	r2, r2, #1
 800bd9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bd9e:	2300      	movs	r3, #0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	f003 0302 	and.w	r3, r3, #2
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d020      	beq.n	800be0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f003 0302 	and.w	r3, r3, #2
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d01b      	beq.n	800be0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f06f 0202 	mvn.w	r2, #2
 800bddc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2201      	movs	r2, #1
 800bde2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	f003 0303 	and.w	r3, r3, #3
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f9e2 	bl	800c1bc <HAL_TIM_IC_CaptureCallback>
 800bdf8:	e005      	b.n	800be06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f9d4 	bl	800c1a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f9e5 	bl	800c1d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	f003 0304 	and.w	r3, r3, #4
 800be12:	2b00      	cmp	r3, #0
 800be14:	d020      	beq.n	800be58 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	f003 0304 	and.w	r3, r3, #4
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01b      	beq.n	800be58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f06f 0204 	mvn.w	r2, #4
 800be28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2202      	movs	r2, #2
 800be2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d003      	beq.n	800be46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f9bc 	bl	800c1bc <HAL_TIM_IC_CaptureCallback>
 800be44:	e005      	b.n	800be52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 f9ae 	bl	800c1a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f000 f9bf 	bl	800c1d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2200      	movs	r2, #0
 800be56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	f003 0308 	and.w	r3, r3, #8
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d020      	beq.n	800bea4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f003 0308 	and.w	r3, r3, #8
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d01b      	beq.n	800bea4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f06f 0208 	mvn.w	r2, #8
 800be74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2204      	movs	r2, #4
 800be7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	69db      	ldr	r3, [r3, #28]
 800be82:	f003 0303 	and.w	r3, r3, #3
 800be86:	2b00      	cmp	r3, #0
 800be88:	d003      	beq.n	800be92 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f996 	bl	800c1bc <HAL_TIM_IC_CaptureCallback>
 800be90:	e005      	b.n	800be9e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f000 f988 	bl	800c1a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be98:	6878      	ldr	r0, [r7, #4]
 800be9a:	f000 f999 	bl	800c1d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2200      	movs	r2, #0
 800bea2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bea4:	68bb      	ldr	r3, [r7, #8]
 800bea6:	f003 0310 	and.w	r3, r3, #16
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d020      	beq.n	800bef0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	f003 0310 	and.w	r3, r3, #16
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d01b      	beq.n	800bef0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f06f 0210 	mvn.w	r2, #16
 800bec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2208      	movs	r2, #8
 800bec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	69db      	ldr	r3, [r3, #28]
 800bece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d003      	beq.n	800bede <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 f970 	bl	800c1bc <HAL_TIM_IC_CaptureCallback>
 800bedc:	e005      	b.n	800beea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f962 	bl	800c1a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f000 f973 	bl	800c1d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	f003 0301 	and.w	r3, r3, #1
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d00c      	beq.n	800bf14 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	f003 0301 	and.w	r3, r3, #1
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d007      	beq.n	800bf14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f06f 0201 	mvn.w	r2, #1
 800bf0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7f6 fc38 	bl	8002784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d104      	bne.n	800bf28 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00c      	beq.n	800bf42 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d007      	beq.n	800bf42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800bf3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 fb5d 	bl	800c5fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d00c      	beq.n	800bf66 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d007      	beq.n	800bf66 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bf5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bf60:	6878      	ldr	r0, [r7, #4]
 800bf62:	f000 fb55 	bl	800c610 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d00c      	beq.n	800bf8a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d007      	beq.n	800bf8a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bf82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f92d 	bl	800c1e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	f003 0320 	and.w	r3, r3, #32
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d00c      	beq.n	800bfae <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f003 0320 	and.w	r3, r3, #32
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d007      	beq.n	800bfae <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f06f 0220 	mvn.w	r2, #32
 800bfa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fb1d 	bl	800c5e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bfae:	bf00      	nop
 800bfb0:	3710      	adds	r7, #16
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d101      	bne.n	800bfd4 <HAL_TIM_ConfigClockSource+0x1c>
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	e0dc      	b.n	800c18e <HAL_TIM_ConfigClockSource+0x1d6>
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2202      	movs	r2, #2
 800bfe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	4b6a      	ldr	r3, [pc, #424]	; (800c198 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bff0:	4013      	ands	r3, r2
 800bff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bffa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4a64      	ldr	r2, [pc, #400]	; (800c19c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	f000 80a9 	beq.w	800c162 <HAL_TIM_ConfigClockSource+0x1aa>
 800c010:	4a62      	ldr	r2, [pc, #392]	; (800c19c <HAL_TIM_ConfigClockSource+0x1e4>)
 800c012:	4293      	cmp	r3, r2
 800c014:	f200 80ae 	bhi.w	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c018:	4a61      	ldr	r2, [pc, #388]	; (800c1a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c01a:	4293      	cmp	r3, r2
 800c01c:	f000 80a1 	beq.w	800c162 <HAL_TIM_ConfigClockSource+0x1aa>
 800c020:	4a5f      	ldr	r2, [pc, #380]	; (800c1a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c022:	4293      	cmp	r3, r2
 800c024:	f200 80a6 	bhi.w	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c028:	4a5e      	ldr	r2, [pc, #376]	; (800c1a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	f000 8099 	beq.w	800c162 <HAL_TIM_ConfigClockSource+0x1aa>
 800c030:	4a5c      	ldr	r2, [pc, #368]	; (800c1a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c032:	4293      	cmp	r3, r2
 800c034:	f200 809e 	bhi.w	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c038:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c03c:	f000 8091 	beq.w	800c162 <HAL_TIM_ConfigClockSource+0x1aa>
 800c040:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c044:	f200 8096 	bhi.w	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c04c:	f000 8089 	beq.w	800c162 <HAL_TIM_ConfigClockSource+0x1aa>
 800c050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c054:	f200 808e 	bhi.w	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c05c:	d03e      	beq.n	800c0dc <HAL_TIM_ConfigClockSource+0x124>
 800c05e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c062:	f200 8087 	bhi.w	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c06a:	f000 8086 	beq.w	800c17a <HAL_TIM_ConfigClockSource+0x1c2>
 800c06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c072:	d87f      	bhi.n	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c074:	2b70      	cmp	r3, #112	; 0x70
 800c076:	d01a      	beq.n	800c0ae <HAL_TIM_ConfigClockSource+0xf6>
 800c078:	2b70      	cmp	r3, #112	; 0x70
 800c07a:	d87b      	bhi.n	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c07c:	2b60      	cmp	r3, #96	; 0x60
 800c07e:	d050      	beq.n	800c122 <HAL_TIM_ConfigClockSource+0x16a>
 800c080:	2b60      	cmp	r3, #96	; 0x60
 800c082:	d877      	bhi.n	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c084:	2b50      	cmp	r3, #80	; 0x50
 800c086:	d03c      	beq.n	800c102 <HAL_TIM_ConfigClockSource+0x14a>
 800c088:	2b50      	cmp	r3, #80	; 0x50
 800c08a:	d873      	bhi.n	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c08c:	2b40      	cmp	r3, #64	; 0x40
 800c08e:	d058      	beq.n	800c142 <HAL_TIM_ConfigClockSource+0x18a>
 800c090:	2b40      	cmp	r3, #64	; 0x40
 800c092:	d86f      	bhi.n	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c094:	2b30      	cmp	r3, #48	; 0x30
 800c096:	d064      	beq.n	800c162 <HAL_TIM_ConfigClockSource+0x1aa>
 800c098:	2b30      	cmp	r3, #48	; 0x30
 800c09a:	d86b      	bhi.n	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c09c:	2b20      	cmp	r3, #32
 800c09e:	d060      	beq.n	800c162 <HAL_TIM_ConfigClockSource+0x1aa>
 800c0a0:	2b20      	cmp	r3, #32
 800c0a2:	d867      	bhi.n	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d05c      	beq.n	800c162 <HAL_TIM_ConfigClockSource+0x1aa>
 800c0a8:	2b10      	cmp	r3, #16
 800c0aa:	d05a      	beq.n	800c162 <HAL_TIM_ConfigClockSource+0x1aa>
 800c0ac:	e062      	b.n	800c174 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0be:	f000 f9bf 	bl	800c440 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c0d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	68ba      	ldr	r2, [r7, #8]
 800c0d8:	609a      	str	r2, [r3, #8]
      break;
 800c0da:	e04f      	b.n	800c17c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0ec:	f000 f9a8 	bl	800c440 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	689a      	ldr	r2, [r3, #8]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c0fe:	609a      	str	r2, [r3, #8]
      break;
 800c100:	e03c      	b.n	800c17c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c10e:	461a      	mov	r2, r3
 800c110:	f000 f918 	bl	800c344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2150      	movs	r1, #80	; 0x50
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 f972 	bl	800c404 <TIM_ITRx_SetConfig>
      break;
 800c120:	e02c      	b.n	800c17c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c12e:	461a      	mov	r2, r3
 800c130:	f000 f937 	bl	800c3a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2160      	movs	r1, #96	; 0x60
 800c13a:	4618      	mov	r0, r3
 800c13c:	f000 f962 	bl	800c404 <TIM_ITRx_SetConfig>
      break;
 800c140:	e01c      	b.n	800c17c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c14e:	461a      	mov	r2, r3
 800c150:	f000 f8f8 	bl	800c344 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	2140      	movs	r1, #64	; 0x40
 800c15a:	4618      	mov	r0, r3
 800c15c:	f000 f952 	bl	800c404 <TIM_ITRx_SetConfig>
      break;
 800c160:	e00c      	b.n	800c17c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4619      	mov	r1, r3
 800c16c:	4610      	mov	r0, r2
 800c16e:	f000 f949 	bl	800c404 <TIM_ITRx_SetConfig>
      break;
 800c172:	e003      	b.n	800c17c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c174:	2301      	movs	r3, #1
 800c176:	73fb      	strb	r3, [r7, #15]
      break;
 800c178:	e000      	b.n	800c17c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c17a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2200      	movs	r2, #0
 800c188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c18e:	4618      	mov	r0, r3
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	ffceff88 	.word	0xffceff88
 800c19c:	00100040 	.word	0x00100040
 800c1a0:	00100030 	.word	0x00100030
 800c1a4:	00100020 	.word	0x00100020

0800c1a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b083      	sub	sp, #12
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1b0:	bf00      	nop
 800c1b2:	370c      	adds	r7, #12
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1bc:	b480      	push	{r7}
 800c1be:	b083      	sub	sp, #12
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1c4:	bf00      	nop
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr

0800c1d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1d8:	bf00      	nop
 800c1da:	370c      	adds	r7, #12
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b083      	sub	sp, #12
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1ec:	bf00      	nop
 800c1ee:	370c      	adds	r7, #12
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f6:	4770      	bx	lr

0800c1f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	4a46      	ldr	r2, [pc, #280]	; (800c324 <TIM_Base_SetConfig+0x12c>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d013      	beq.n	800c238 <TIM_Base_SetConfig+0x40>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c216:	d00f      	beq.n	800c238 <TIM_Base_SetConfig+0x40>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4a43      	ldr	r2, [pc, #268]	; (800c328 <TIM_Base_SetConfig+0x130>)
 800c21c:	4293      	cmp	r3, r2
 800c21e:	d00b      	beq.n	800c238 <TIM_Base_SetConfig+0x40>
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a42      	ldr	r2, [pc, #264]	; (800c32c <TIM_Base_SetConfig+0x134>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d007      	beq.n	800c238 <TIM_Base_SetConfig+0x40>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a41      	ldr	r2, [pc, #260]	; (800c330 <TIM_Base_SetConfig+0x138>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d003      	beq.n	800c238 <TIM_Base_SetConfig+0x40>
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	4a40      	ldr	r2, [pc, #256]	; (800c334 <TIM_Base_SetConfig+0x13c>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d108      	bne.n	800c24a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c23e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	68fa      	ldr	r2, [r7, #12]
 800c246:	4313      	orrs	r3, r2
 800c248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a35      	ldr	r2, [pc, #212]	; (800c324 <TIM_Base_SetConfig+0x12c>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d01f      	beq.n	800c292 <TIM_Base_SetConfig+0x9a>
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c258:	d01b      	beq.n	800c292 <TIM_Base_SetConfig+0x9a>
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	4a32      	ldr	r2, [pc, #200]	; (800c328 <TIM_Base_SetConfig+0x130>)
 800c25e:	4293      	cmp	r3, r2
 800c260:	d017      	beq.n	800c292 <TIM_Base_SetConfig+0x9a>
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	4a31      	ldr	r2, [pc, #196]	; (800c32c <TIM_Base_SetConfig+0x134>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d013      	beq.n	800c292 <TIM_Base_SetConfig+0x9a>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	4a30      	ldr	r2, [pc, #192]	; (800c330 <TIM_Base_SetConfig+0x138>)
 800c26e:	4293      	cmp	r3, r2
 800c270:	d00f      	beq.n	800c292 <TIM_Base_SetConfig+0x9a>
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	4a2f      	ldr	r2, [pc, #188]	; (800c334 <TIM_Base_SetConfig+0x13c>)
 800c276:	4293      	cmp	r3, r2
 800c278:	d00b      	beq.n	800c292 <TIM_Base_SetConfig+0x9a>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4a2e      	ldr	r2, [pc, #184]	; (800c338 <TIM_Base_SetConfig+0x140>)
 800c27e:	4293      	cmp	r3, r2
 800c280:	d007      	beq.n	800c292 <TIM_Base_SetConfig+0x9a>
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	4a2d      	ldr	r2, [pc, #180]	; (800c33c <TIM_Base_SetConfig+0x144>)
 800c286:	4293      	cmp	r3, r2
 800c288:	d003      	beq.n	800c292 <TIM_Base_SetConfig+0x9a>
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4a2c      	ldr	r2, [pc, #176]	; (800c340 <TIM_Base_SetConfig+0x148>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d108      	bne.n	800c2a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	68db      	ldr	r3, [r3, #12]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	695b      	ldr	r3, [r3, #20]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	68fa      	ldr	r2, [r7, #12]
 800c2b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	689a      	ldr	r2, [r3, #8]
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a16      	ldr	r2, [pc, #88]	; (800c324 <TIM_Base_SetConfig+0x12c>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d00f      	beq.n	800c2f0 <TIM_Base_SetConfig+0xf8>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a18      	ldr	r2, [pc, #96]	; (800c334 <TIM_Base_SetConfig+0x13c>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d00b      	beq.n	800c2f0 <TIM_Base_SetConfig+0xf8>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a17      	ldr	r2, [pc, #92]	; (800c338 <TIM_Base_SetConfig+0x140>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d007      	beq.n	800c2f0 <TIM_Base_SetConfig+0xf8>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	4a16      	ldr	r2, [pc, #88]	; (800c33c <TIM_Base_SetConfig+0x144>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d003      	beq.n	800c2f0 <TIM_Base_SetConfig+0xf8>
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	4a15      	ldr	r2, [pc, #84]	; (800c340 <TIM_Base_SetConfig+0x148>)
 800c2ec:	4293      	cmp	r3, r2
 800c2ee:	d103      	bne.n	800c2f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	691a      	ldr	r2, [r3, #16]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2201      	movs	r2, #1
 800c2fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b01      	cmp	r3, #1
 800c308:	d105      	bne.n	800c316 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	691b      	ldr	r3, [r3, #16]
 800c30e:	f023 0201 	bic.w	r2, r3, #1
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	611a      	str	r2, [r3, #16]
  }
}
 800c316:	bf00      	nop
 800c318:	3714      	adds	r7, #20
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	40010000 	.word	0x40010000
 800c328:	40000400 	.word	0x40000400
 800c32c:	40000800 	.word	0x40000800
 800c330:	40000c00 	.word	0x40000c00
 800c334:	40010400 	.word	0x40010400
 800c338:	40014000 	.word	0x40014000
 800c33c:	40014400 	.word	0x40014400
 800c340:	40014800 	.word	0x40014800

0800c344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c344:	b480      	push	{r7}
 800c346:	b087      	sub	sp, #28
 800c348:	af00      	add	r7, sp, #0
 800c34a:	60f8      	str	r0, [r7, #12]
 800c34c:	60b9      	str	r1, [r7, #8]
 800c34e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6a1b      	ldr	r3, [r3, #32]
 800c354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6a1b      	ldr	r3, [r3, #32]
 800c35a:	f023 0201 	bic.w	r2, r3, #1
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c36e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	011b      	lsls	r3, r3, #4
 800c374:	693a      	ldr	r2, [r7, #16]
 800c376:	4313      	orrs	r3, r2
 800c378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	f023 030a 	bic.w	r3, r3, #10
 800c380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c382:	697a      	ldr	r2, [r7, #20]
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	4313      	orrs	r3, r2
 800c388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	697a      	ldr	r2, [r7, #20]
 800c394:	621a      	str	r2, [r3, #32]
}
 800c396:	bf00      	nop
 800c398:	371c      	adds	r7, #28
 800c39a:	46bd      	mov	sp, r7
 800c39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a0:	4770      	bx	lr

0800c3a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3a2:	b480      	push	{r7}
 800c3a4:	b087      	sub	sp, #28
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	60f8      	str	r0, [r7, #12]
 800c3aa:	60b9      	str	r1, [r7, #8]
 800c3ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	6a1b      	ldr	r3, [r3, #32]
 800c3b8:	f023 0210 	bic.w	r2, r3, #16
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	699b      	ldr	r3, [r3, #24]
 800c3c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c3cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	031b      	lsls	r3, r3, #12
 800c3d2:	693a      	ldr	r2, [r7, #16]
 800c3d4:	4313      	orrs	r3, r2
 800c3d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c3de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	011b      	lsls	r3, r3, #4
 800c3e4:	697a      	ldr	r2, [r7, #20]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	693a      	ldr	r2, [r7, #16]
 800c3ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	697a      	ldr	r2, [r7, #20]
 800c3f4:	621a      	str	r2, [r3, #32]
}
 800c3f6:	bf00      	nop
 800c3f8:	371c      	adds	r7, #28
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
	...

0800c404 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c404:	b480      	push	{r7}
 800c406:	b085      	sub	sp, #20
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	4b09      	ldr	r3, [pc, #36]	; (800c43c <TIM_ITRx_SetConfig+0x38>)
 800c418:	4013      	ands	r3, r2
 800c41a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c41c:	683a      	ldr	r2, [r7, #0]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	4313      	orrs	r3, r2
 800c422:	f043 0307 	orr.w	r3, r3, #7
 800c426:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	609a      	str	r2, [r3, #8]
}
 800c42e:	bf00      	nop
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	ffcfff8f 	.word	0xffcfff8f

0800c440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c440:	b480      	push	{r7}
 800c442:	b087      	sub	sp, #28
 800c444:	af00      	add	r7, sp, #0
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	607a      	str	r2, [r7, #4]
 800c44c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c45a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	021a      	lsls	r2, r3, #8
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	431a      	orrs	r2, r3
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	4313      	orrs	r3, r2
 800c468:	697a      	ldr	r2, [r7, #20]
 800c46a:	4313      	orrs	r3, r2
 800c46c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	609a      	str	r2, [r3, #8]
}
 800c474:	bf00      	nop
 800c476:	371c      	adds	r7, #28
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c480:	b480      	push	{r7}
 800c482:	b087      	sub	sp, #28
 800c484:	af00      	add	r7, sp, #0
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	f003 031f 	and.w	r3, r3, #31
 800c492:	2201      	movs	r2, #1
 800c494:	fa02 f303 	lsl.w	r3, r2, r3
 800c498:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	6a1a      	ldr	r2, [r3, #32]
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	43db      	mvns	r3, r3
 800c4a2:	401a      	ands	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6a1a      	ldr	r2, [r3, #32]
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	f003 031f 	and.w	r3, r3, #31
 800c4b2:	6879      	ldr	r1, [r7, #4]
 800c4b4:	fa01 f303 	lsl.w	r3, r1, r3
 800c4b8:	431a      	orrs	r2, r3
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	621a      	str	r2, [r3, #32]
}
 800c4be:	bf00      	nop
 800c4c0:	371c      	adds	r7, #28
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c8:	4770      	bx	lr
	...

0800c4cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c4cc:	b480      	push	{r7}
 800c4ce:	b085      	sub	sp, #20
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d101      	bne.n	800c4e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4e0:	2302      	movs	r3, #2
 800c4e2:	e06d      	b.n	800c5c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2202      	movs	r2, #2
 800c4f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	689b      	ldr	r3, [r3, #8]
 800c502:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a30      	ldr	r2, [pc, #192]	; (800c5cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d004      	beq.n	800c518 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4a2f      	ldr	r2, [pc, #188]	; (800c5d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c514:	4293      	cmp	r3, r2
 800c516:	d108      	bne.n	800c52a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c51e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	4313      	orrs	r3, r2
 800c528:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c530:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68fa      	ldr	r2, [r7, #12]
 800c538:	4313      	orrs	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68fa      	ldr	r2, [r7, #12]
 800c542:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a20      	ldr	r2, [pc, #128]	; (800c5cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d022      	beq.n	800c594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c556:	d01d      	beq.n	800c594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a1d      	ldr	r2, [pc, #116]	; (800c5d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d018      	beq.n	800c594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	4a1c      	ldr	r2, [pc, #112]	; (800c5d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c568:	4293      	cmp	r3, r2
 800c56a:	d013      	beq.n	800c594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a1a      	ldr	r2, [pc, #104]	; (800c5dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c572:	4293      	cmp	r3, r2
 800c574:	d00e      	beq.n	800c594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	4a15      	ldr	r2, [pc, #84]	; (800c5d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d009      	beq.n	800c594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	4a16      	ldr	r2, [pc, #88]	; (800c5e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c586:	4293      	cmp	r3, r2
 800c588:	d004      	beq.n	800c594 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	4a15      	ldr	r2, [pc, #84]	; (800c5e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d10c      	bne.n	800c5ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c59a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	4313      	orrs	r3, r2
 800c5a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	2201      	movs	r2, #1
 800c5b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr
 800c5cc:	40010000 	.word	0x40010000
 800c5d0:	40010400 	.word	0x40010400
 800c5d4:	40000400 	.word	0x40000400
 800c5d8:	40000800 	.word	0x40000800
 800c5dc:	40000c00 	.word	0x40000c00
 800c5e0:	40001800 	.word	0x40001800
 800c5e4:	40014000 	.word	0x40014000

0800c5e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr

0800c5fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b083      	sub	sp, #12
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c604:	bf00      	nop
 800c606:	370c      	adds	r7, #12
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr

0800c610 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c610:	b480      	push	{r7}
 800c612:	b083      	sub	sp, #12
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c618:	bf00      	nop
 800c61a:	370c      	adds	r7, #12
 800c61c:	46bd      	mov	sp, r7
 800c61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c622:	4770      	bx	lr

0800c624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b082      	sub	sp, #8
 800c628:	af00      	add	r7, sp, #0
 800c62a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d101      	bne.n	800c636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	e042      	b.n	800c6bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d106      	bne.n	800c64e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2200      	movs	r2, #0
 800c644:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7f6 fb33 	bl	8002cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2224      	movs	r2, #36	; 0x24
 800c652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f022 0201 	bic.w	r2, r2, #1
 800c664:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d002      	beq.n	800c674 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f000 fd90 	bl	800d194 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f825 	bl	800c6c4 <UART_SetConfig>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b01      	cmp	r3, #1
 800c67e:	d101      	bne.n	800c684 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c680:	2301      	movs	r3, #1
 800c682:	e01b      	b.n	800c6bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	685a      	ldr	r2, [r3, #4]
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	689a      	ldr	r2, [r3, #8]
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c6a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f042 0201 	orr.w	r2, r2, #1
 800c6b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 fe0f 	bl	800d2d8 <UART_CheckIdleState>
 800c6ba:	4603      	mov	r3, r0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6c8:	b092      	sub	sp, #72	; 0x48
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	689a      	ldr	r2, [r3, #8]
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	431a      	orrs	r2, r3
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	695b      	ldr	r3, [r3, #20]
 800c6e2:	431a      	orrs	r2, r3
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	69db      	ldr	r3, [r3, #28]
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	681a      	ldr	r2, [r3, #0]
 800c6f2:	4bbe      	ldr	r3, [pc, #760]	; (800c9ec <UART_SetConfig+0x328>)
 800c6f4:	4013      	ands	r3, r2
 800c6f6:	697a      	ldr	r2, [r7, #20]
 800c6f8:	6812      	ldr	r2, [r2, #0]
 800c6fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6fc:	430b      	orrs	r3, r1
 800c6fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c700:	697b      	ldr	r3, [r7, #20]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	68da      	ldr	r2, [r3, #12]
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	430a      	orrs	r2, r1
 800c714:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	699b      	ldr	r3, [r3, #24]
 800c71a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4ab3      	ldr	r2, [pc, #716]	; (800c9f0 <UART_SetConfig+0x32c>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d004      	beq.n	800c730 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	6a1b      	ldr	r3, [r3, #32]
 800c72a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c72c:	4313      	orrs	r3, r2
 800c72e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	689a      	ldr	r2, [r3, #8]
 800c736:	4baf      	ldr	r3, [pc, #700]	; (800c9f4 <UART_SetConfig+0x330>)
 800c738:	4013      	ands	r3, r2
 800c73a:	697a      	ldr	r2, [r7, #20]
 800c73c:	6812      	ldr	r2, [r2, #0]
 800c73e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c740:	430b      	orrs	r3, r1
 800c742:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74a:	f023 010f 	bic.w	r1, r3, #15
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	430a      	orrs	r2, r1
 800c758:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	4aa6      	ldr	r2, [pc, #664]	; (800c9f8 <UART_SetConfig+0x334>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d177      	bne.n	800c854 <UART_SetConfig+0x190>
 800c764:	4ba5      	ldr	r3, [pc, #660]	; (800c9fc <UART_SetConfig+0x338>)
 800c766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c76c:	2b28      	cmp	r3, #40	; 0x28
 800c76e:	d86d      	bhi.n	800c84c <UART_SetConfig+0x188>
 800c770:	a201      	add	r2, pc, #4	; (adr r2, 800c778 <UART_SetConfig+0xb4>)
 800c772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c776:	bf00      	nop
 800c778:	0800c81d 	.word	0x0800c81d
 800c77c:	0800c84d 	.word	0x0800c84d
 800c780:	0800c84d 	.word	0x0800c84d
 800c784:	0800c84d 	.word	0x0800c84d
 800c788:	0800c84d 	.word	0x0800c84d
 800c78c:	0800c84d 	.word	0x0800c84d
 800c790:	0800c84d 	.word	0x0800c84d
 800c794:	0800c84d 	.word	0x0800c84d
 800c798:	0800c825 	.word	0x0800c825
 800c79c:	0800c84d 	.word	0x0800c84d
 800c7a0:	0800c84d 	.word	0x0800c84d
 800c7a4:	0800c84d 	.word	0x0800c84d
 800c7a8:	0800c84d 	.word	0x0800c84d
 800c7ac:	0800c84d 	.word	0x0800c84d
 800c7b0:	0800c84d 	.word	0x0800c84d
 800c7b4:	0800c84d 	.word	0x0800c84d
 800c7b8:	0800c82d 	.word	0x0800c82d
 800c7bc:	0800c84d 	.word	0x0800c84d
 800c7c0:	0800c84d 	.word	0x0800c84d
 800c7c4:	0800c84d 	.word	0x0800c84d
 800c7c8:	0800c84d 	.word	0x0800c84d
 800c7cc:	0800c84d 	.word	0x0800c84d
 800c7d0:	0800c84d 	.word	0x0800c84d
 800c7d4:	0800c84d 	.word	0x0800c84d
 800c7d8:	0800c835 	.word	0x0800c835
 800c7dc:	0800c84d 	.word	0x0800c84d
 800c7e0:	0800c84d 	.word	0x0800c84d
 800c7e4:	0800c84d 	.word	0x0800c84d
 800c7e8:	0800c84d 	.word	0x0800c84d
 800c7ec:	0800c84d 	.word	0x0800c84d
 800c7f0:	0800c84d 	.word	0x0800c84d
 800c7f4:	0800c84d 	.word	0x0800c84d
 800c7f8:	0800c83d 	.word	0x0800c83d
 800c7fc:	0800c84d 	.word	0x0800c84d
 800c800:	0800c84d 	.word	0x0800c84d
 800c804:	0800c84d 	.word	0x0800c84d
 800c808:	0800c84d 	.word	0x0800c84d
 800c80c:	0800c84d 	.word	0x0800c84d
 800c810:	0800c84d 	.word	0x0800c84d
 800c814:	0800c84d 	.word	0x0800c84d
 800c818:	0800c845 	.word	0x0800c845
 800c81c:	2301      	movs	r3, #1
 800c81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c822:	e222      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c824:	2304      	movs	r3, #4
 800c826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c82a:	e21e      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c82c:	2308      	movs	r3, #8
 800c82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c832:	e21a      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c834:	2310      	movs	r3, #16
 800c836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c83a:	e216      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c83c:	2320      	movs	r3, #32
 800c83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c842:	e212      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c844:	2340      	movs	r3, #64	; 0x40
 800c846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c84a:	e20e      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c84c:	2380      	movs	r3, #128	; 0x80
 800c84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c852:	e20a      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a69      	ldr	r2, [pc, #420]	; (800ca00 <UART_SetConfig+0x33c>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d130      	bne.n	800c8c0 <UART_SetConfig+0x1fc>
 800c85e:	4b67      	ldr	r3, [pc, #412]	; (800c9fc <UART_SetConfig+0x338>)
 800c860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c862:	f003 0307 	and.w	r3, r3, #7
 800c866:	2b05      	cmp	r3, #5
 800c868:	d826      	bhi.n	800c8b8 <UART_SetConfig+0x1f4>
 800c86a:	a201      	add	r2, pc, #4	; (adr r2, 800c870 <UART_SetConfig+0x1ac>)
 800c86c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c870:	0800c889 	.word	0x0800c889
 800c874:	0800c891 	.word	0x0800c891
 800c878:	0800c899 	.word	0x0800c899
 800c87c:	0800c8a1 	.word	0x0800c8a1
 800c880:	0800c8a9 	.word	0x0800c8a9
 800c884:	0800c8b1 	.word	0x0800c8b1
 800c888:	2300      	movs	r3, #0
 800c88a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c88e:	e1ec      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c890:	2304      	movs	r3, #4
 800c892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c896:	e1e8      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c898:	2308      	movs	r3, #8
 800c89a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c89e:	e1e4      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c8a0:	2310      	movs	r3, #16
 800c8a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8a6:	e1e0      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c8a8:	2320      	movs	r3, #32
 800c8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8ae:	e1dc      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c8b0:	2340      	movs	r3, #64	; 0x40
 800c8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8b6:	e1d8      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c8b8:	2380      	movs	r3, #128	; 0x80
 800c8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8be:	e1d4      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	4a4f      	ldr	r2, [pc, #316]	; (800ca04 <UART_SetConfig+0x340>)
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d130      	bne.n	800c92c <UART_SetConfig+0x268>
 800c8ca:	4b4c      	ldr	r3, [pc, #304]	; (800c9fc <UART_SetConfig+0x338>)
 800c8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8ce:	f003 0307 	and.w	r3, r3, #7
 800c8d2:	2b05      	cmp	r3, #5
 800c8d4:	d826      	bhi.n	800c924 <UART_SetConfig+0x260>
 800c8d6:	a201      	add	r2, pc, #4	; (adr r2, 800c8dc <UART_SetConfig+0x218>)
 800c8d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8dc:	0800c8f5 	.word	0x0800c8f5
 800c8e0:	0800c8fd 	.word	0x0800c8fd
 800c8e4:	0800c905 	.word	0x0800c905
 800c8e8:	0800c90d 	.word	0x0800c90d
 800c8ec:	0800c915 	.word	0x0800c915
 800c8f0:	0800c91d 	.word	0x0800c91d
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c8fa:	e1b6      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c8fc:	2304      	movs	r3, #4
 800c8fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c902:	e1b2      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c904:	2308      	movs	r3, #8
 800c906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c90a:	e1ae      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c90c:	2310      	movs	r3, #16
 800c90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c912:	e1aa      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c914:	2320      	movs	r3, #32
 800c916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c91a:	e1a6      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c91c:	2340      	movs	r3, #64	; 0x40
 800c91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c922:	e1a2      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c924:	2380      	movs	r3, #128	; 0x80
 800c926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c92a:	e19e      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c92c:	697b      	ldr	r3, [r7, #20]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	4a35      	ldr	r2, [pc, #212]	; (800ca08 <UART_SetConfig+0x344>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d130      	bne.n	800c998 <UART_SetConfig+0x2d4>
 800c936:	4b31      	ldr	r3, [pc, #196]	; (800c9fc <UART_SetConfig+0x338>)
 800c938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c93a:	f003 0307 	and.w	r3, r3, #7
 800c93e:	2b05      	cmp	r3, #5
 800c940:	d826      	bhi.n	800c990 <UART_SetConfig+0x2cc>
 800c942:	a201      	add	r2, pc, #4	; (adr r2, 800c948 <UART_SetConfig+0x284>)
 800c944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c948:	0800c961 	.word	0x0800c961
 800c94c:	0800c969 	.word	0x0800c969
 800c950:	0800c971 	.word	0x0800c971
 800c954:	0800c979 	.word	0x0800c979
 800c958:	0800c981 	.word	0x0800c981
 800c95c:	0800c989 	.word	0x0800c989
 800c960:	2300      	movs	r3, #0
 800c962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c966:	e180      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c968:	2304      	movs	r3, #4
 800c96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c96e:	e17c      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c970:	2308      	movs	r3, #8
 800c972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c976:	e178      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c978:	2310      	movs	r3, #16
 800c97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c97e:	e174      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c980:	2320      	movs	r3, #32
 800c982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c986:	e170      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c988:	2340      	movs	r3, #64	; 0x40
 800c98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c98e:	e16c      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c990:	2380      	movs	r3, #128	; 0x80
 800c992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c996:	e168      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a1b      	ldr	r2, [pc, #108]	; (800ca0c <UART_SetConfig+0x348>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d142      	bne.n	800ca28 <UART_SetConfig+0x364>
 800c9a2:	4b16      	ldr	r3, [pc, #88]	; (800c9fc <UART_SetConfig+0x338>)
 800c9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b05      	cmp	r3, #5
 800c9ac:	d838      	bhi.n	800ca20 <UART_SetConfig+0x35c>
 800c9ae:	a201      	add	r2, pc, #4	; (adr r2, 800c9b4 <UART_SetConfig+0x2f0>)
 800c9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b4:	0800c9cd 	.word	0x0800c9cd
 800c9b8:	0800c9d5 	.word	0x0800c9d5
 800c9bc:	0800c9dd 	.word	0x0800c9dd
 800c9c0:	0800c9e5 	.word	0x0800c9e5
 800c9c4:	0800ca11 	.word	0x0800ca11
 800c9c8:	0800ca19 	.word	0x0800ca19
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9d2:	e14a      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c9d4:	2304      	movs	r3, #4
 800c9d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9da:	e146      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c9dc:	2308      	movs	r3, #8
 800c9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9e2:	e142      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c9e4:	2310      	movs	r3, #16
 800c9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c9ea:	e13e      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800c9ec:	cfff69f3 	.word	0xcfff69f3
 800c9f0:	58000c00 	.word	0x58000c00
 800c9f4:	11fff4ff 	.word	0x11fff4ff
 800c9f8:	40011000 	.word	0x40011000
 800c9fc:	58024400 	.word	0x58024400
 800ca00:	40004400 	.word	0x40004400
 800ca04:	40004800 	.word	0x40004800
 800ca08:	40004c00 	.word	0x40004c00
 800ca0c:	40005000 	.word	0x40005000
 800ca10:	2320      	movs	r3, #32
 800ca12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca16:	e128      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800ca18:	2340      	movs	r3, #64	; 0x40
 800ca1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca1e:	e124      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800ca20:	2380      	movs	r3, #128	; 0x80
 800ca22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ca26:	e120      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	4acb      	ldr	r2, [pc, #812]	; (800cd5c <UART_SetConfig+0x698>)
 800ca2e:	4293      	cmp	r3, r2
 800ca30:	d176      	bne.n	800cb20 <UART_SetConfig+0x45c>
 800ca32:	4bcb      	ldr	r3, [pc, #812]	; (800cd60 <UART_SetConfig+0x69c>)
 800ca34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ca3a:	2b28      	cmp	r3, #40	; 0x28
 800ca3c:	d86c      	bhi.n	800cb18 <UART_SetConfig+0x454>
 800ca3e:	a201      	add	r2, pc, #4	; (adr r2, 800ca44 <UART_SetConfig+0x380>)
 800ca40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca44:	0800cae9 	.word	0x0800cae9
 800ca48:	0800cb19 	.word	0x0800cb19
 800ca4c:	0800cb19 	.word	0x0800cb19
 800ca50:	0800cb19 	.word	0x0800cb19
 800ca54:	0800cb19 	.word	0x0800cb19
 800ca58:	0800cb19 	.word	0x0800cb19
 800ca5c:	0800cb19 	.word	0x0800cb19
 800ca60:	0800cb19 	.word	0x0800cb19
 800ca64:	0800caf1 	.word	0x0800caf1
 800ca68:	0800cb19 	.word	0x0800cb19
 800ca6c:	0800cb19 	.word	0x0800cb19
 800ca70:	0800cb19 	.word	0x0800cb19
 800ca74:	0800cb19 	.word	0x0800cb19
 800ca78:	0800cb19 	.word	0x0800cb19
 800ca7c:	0800cb19 	.word	0x0800cb19
 800ca80:	0800cb19 	.word	0x0800cb19
 800ca84:	0800caf9 	.word	0x0800caf9
 800ca88:	0800cb19 	.word	0x0800cb19
 800ca8c:	0800cb19 	.word	0x0800cb19
 800ca90:	0800cb19 	.word	0x0800cb19
 800ca94:	0800cb19 	.word	0x0800cb19
 800ca98:	0800cb19 	.word	0x0800cb19
 800ca9c:	0800cb19 	.word	0x0800cb19
 800caa0:	0800cb19 	.word	0x0800cb19
 800caa4:	0800cb01 	.word	0x0800cb01
 800caa8:	0800cb19 	.word	0x0800cb19
 800caac:	0800cb19 	.word	0x0800cb19
 800cab0:	0800cb19 	.word	0x0800cb19
 800cab4:	0800cb19 	.word	0x0800cb19
 800cab8:	0800cb19 	.word	0x0800cb19
 800cabc:	0800cb19 	.word	0x0800cb19
 800cac0:	0800cb19 	.word	0x0800cb19
 800cac4:	0800cb09 	.word	0x0800cb09
 800cac8:	0800cb19 	.word	0x0800cb19
 800cacc:	0800cb19 	.word	0x0800cb19
 800cad0:	0800cb19 	.word	0x0800cb19
 800cad4:	0800cb19 	.word	0x0800cb19
 800cad8:	0800cb19 	.word	0x0800cb19
 800cadc:	0800cb19 	.word	0x0800cb19
 800cae0:	0800cb19 	.word	0x0800cb19
 800cae4:	0800cb11 	.word	0x0800cb11
 800cae8:	2301      	movs	r3, #1
 800caea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caee:	e0bc      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800caf0:	2304      	movs	r3, #4
 800caf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800caf6:	e0b8      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800caf8:	2308      	movs	r3, #8
 800cafa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cafe:	e0b4      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb00:	2310      	movs	r3, #16
 800cb02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb06:	e0b0      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb08:	2320      	movs	r3, #32
 800cb0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb0e:	e0ac      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb10:	2340      	movs	r3, #64	; 0x40
 800cb12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb16:	e0a8      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb18:	2380      	movs	r3, #128	; 0x80
 800cb1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb1e:	e0a4      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a8f      	ldr	r2, [pc, #572]	; (800cd64 <UART_SetConfig+0x6a0>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d130      	bne.n	800cb8c <UART_SetConfig+0x4c8>
 800cb2a:	4b8d      	ldr	r3, [pc, #564]	; (800cd60 <UART_SetConfig+0x69c>)
 800cb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb2e:	f003 0307 	and.w	r3, r3, #7
 800cb32:	2b05      	cmp	r3, #5
 800cb34:	d826      	bhi.n	800cb84 <UART_SetConfig+0x4c0>
 800cb36:	a201      	add	r2, pc, #4	; (adr r2, 800cb3c <UART_SetConfig+0x478>)
 800cb38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3c:	0800cb55 	.word	0x0800cb55
 800cb40:	0800cb5d 	.word	0x0800cb5d
 800cb44:	0800cb65 	.word	0x0800cb65
 800cb48:	0800cb6d 	.word	0x0800cb6d
 800cb4c:	0800cb75 	.word	0x0800cb75
 800cb50:	0800cb7d 	.word	0x0800cb7d
 800cb54:	2300      	movs	r3, #0
 800cb56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb5a:	e086      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb5c:	2304      	movs	r3, #4
 800cb5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb62:	e082      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb64:	2308      	movs	r3, #8
 800cb66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb6a:	e07e      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb6c:	2310      	movs	r3, #16
 800cb6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb72:	e07a      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb74:	2320      	movs	r3, #32
 800cb76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb7a:	e076      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb7c:	2340      	movs	r3, #64	; 0x40
 800cb7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb82:	e072      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb84:	2380      	movs	r3, #128	; 0x80
 800cb86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cb8a:	e06e      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a75      	ldr	r2, [pc, #468]	; (800cd68 <UART_SetConfig+0x6a4>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d130      	bne.n	800cbf8 <UART_SetConfig+0x534>
 800cb96:	4b72      	ldr	r3, [pc, #456]	; (800cd60 <UART_SetConfig+0x69c>)
 800cb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb9a:	f003 0307 	and.w	r3, r3, #7
 800cb9e:	2b05      	cmp	r3, #5
 800cba0:	d826      	bhi.n	800cbf0 <UART_SetConfig+0x52c>
 800cba2:	a201      	add	r2, pc, #4	; (adr r2, 800cba8 <UART_SetConfig+0x4e4>)
 800cba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cba8:	0800cbc1 	.word	0x0800cbc1
 800cbac:	0800cbc9 	.word	0x0800cbc9
 800cbb0:	0800cbd1 	.word	0x0800cbd1
 800cbb4:	0800cbd9 	.word	0x0800cbd9
 800cbb8:	0800cbe1 	.word	0x0800cbe1
 800cbbc:	0800cbe9 	.word	0x0800cbe9
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbc6:	e050      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cbc8:	2304      	movs	r3, #4
 800cbca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbce:	e04c      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cbd0:	2308      	movs	r3, #8
 800cbd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbd6:	e048      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cbd8:	2310      	movs	r3, #16
 800cbda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbde:	e044      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cbe0:	2320      	movs	r3, #32
 800cbe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbe6:	e040      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cbe8:	2340      	movs	r3, #64	; 0x40
 800cbea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbee:	e03c      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cbf0:	2380      	movs	r3, #128	; 0x80
 800cbf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cbf6:	e038      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	4a5b      	ldr	r2, [pc, #364]	; (800cd6c <UART_SetConfig+0x6a8>)
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	d130      	bne.n	800cc64 <UART_SetConfig+0x5a0>
 800cc02:	4b57      	ldr	r3, [pc, #348]	; (800cd60 <UART_SetConfig+0x69c>)
 800cc04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc06:	f003 0307 	and.w	r3, r3, #7
 800cc0a:	2b05      	cmp	r3, #5
 800cc0c:	d826      	bhi.n	800cc5c <UART_SetConfig+0x598>
 800cc0e:	a201      	add	r2, pc, #4	; (adr r2, 800cc14 <UART_SetConfig+0x550>)
 800cc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc14:	0800cc2d 	.word	0x0800cc2d
 800cc18:	0800cc35 	.word	0x0800cc35
 800cc1c:	0800cc3d 	.word	0x0800cc3d
 800cc20:	0800cc45 	.word	0x0800cc45
 800cc24:	0800cc4d 	.word	0x0800cc4d
 800cc28:	0800cc55 	.word	0x0800cc55
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc32:	e01a      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cc34:	2304      	movs	r3, #4
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3a:	e016      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cc3c:	2308      	movs	r3, #8
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc42:	e012      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cc44:	2310      	movs	r3, #16
 800cc46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc4a:	e00e      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cc4c:	2320      	movs	r3, #32
 800cc4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc52:	e00a      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cc54:	2340      	movs	r3, #64	; 0x40
 800cc56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc5a:	e006      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cc5c:	2380      	movs	r3, #128	; 0x80
 800cc5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc62:	e002      	b.n	800cc6a <UART_SetConfig+0x5a6>
 800cc64:	2380      	movs	r3, #128	; 0x80
 800cc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a3f      	ldr	r2, [pc, #252]	; (800cd6c <UART_SetConfig+0x6a8>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	f040 80f8 	bne.w	800ce66 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cc76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cc7a:	2b20      	cmp	r3, #32
 800cc7c:	dc46      	bgt.n	800cd0c <UART_SetConfig+0x648>
 800cc7e:	2b02      	cmp	r3, #2
 800cc80:	f2c0 8082 	blt.w	800cd88 <UART_SetConfig+0x6c4>
 800cc84:	3b02      	subs	r3, #2
 800cc86:	2b1e      	cmp	r3, #30
 800cc88:	d87e      	bhi.n	800cd88 <UART_SetConfig+0x6c4>
 800cc8a:	a201      	add	r2, pc, #4	; (adr r2, 800cc90 <UART_SetConfig+0x5cc>)
 800cc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc90:	0800cd13 	.word	0x0800cd13
 800cc94:	0800cd89 	.word	0x0800cd89
 800cc98:	0800cd1b 	.word	0x0800cd1b
 800cc9c:	0800cd89 	.word	0x0800cd89
 800cca0:	0800cd89 	.word	0x0800cd89
 800cca4:	0800cd89 	.word	0x0800cd89
 800cca8:	0800cd2b 	.word	0x0800cd2b
 800ccac:	0800cd89 	.word	0x0800cd89
 800ccb0:	0800cd89 	.word	0x0800cd89
 800ccb4:	0800cd89 	.word	0x0800cd89
 800ccb8:	0800cd89 	.word	0x0800cd89
 800ccbc:	0800cd89 	.word	0x0800cd89
 800ccc0:	0800cd89 	.word	0x0800cd89
 800ccc4:	0800cd89 	.word	0x0800cd89
 800ccc8:	0800cd3b 	.word	0x0800cd3b
 800cccc:	0800cd89 	.word	0x0800cd89
 800ccd0:	0800cd89 	.word	0x0800cd89
 800ccd4:	0800cd89 	.word	0x0800cd89
 800ccd8:	0800cd89 	.word	0x0800cd89
 800ccdc:	0800cd89 	.word	0x0800cd89
 800cce0:	0800cd89 	.word	0x0800cd89
 800cce4:	0800cd89 	.word	0x0800cd89
 800cce8:	0800cd89 	.word	0x0800cd89
 800ccec:	0800cd89 	.word	0x0800cd89
 800ccf0:	0800cd89 	.word	0x0800cd89
 800ccf4:	0800cd89 	.word	0x0800cd89
 800ccf8:	0800cd89 	.word	0x0800cd89
 800ccfc:	0800cd89 	.word	0x0800cd89
 800cd00:	0800cd89 	.word	0x0800cd89
 800cd04:	0800cd89 	.word	0x0800cd89
 800cd08:	0800cd7b 	.word	0x0800cd7b
 800cd0c:	2b40      	cmp	r3, #64	; 0x40
 800cd0e:	d037      	beq.n	800cd80 <UART_SetConfig+0x6bc>
 800cd10:	e03a      	b.n	800cd88 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800cd12:	f7fe f8d1 	bl	800aeb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd18:	e03c      	b.n	800cd94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cd1e:	4618      	mov	r0, r3
 800cd20:	f7fe f8e0 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd28:	e034      	b.n	800cd94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd2a:	f107 0318 	add.w	r3, r7, #24
 800cd2e:	4618      	mov	r0, r3
 800cd30:	f7fe fa2c 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cd34:	69fb      	ldr	r3, [r7, #28]
 800cd36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd38:	e02c      	b.n	800cd94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd3a:	4b09      	ldr	r3, [pc, #36]	; (800cd60 <UART_SetConfig+0x69c>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f003 0320 	and.w	r3, r3, #32
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d016      	beq.n	800cd74 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cd46:	4b06      	ldr	r3, [pc, #24]	; (800cd60 <UART_SetConfig+0x69c>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	08db      	lsrs	r3, r3, #3
 800cd4c:	f003 0303 	and.w	r3, r3, #3
 800cd50:	4a07      	ldr	r2, [pc, #28]	; (800cd70 <UART_SetConfig+0x6ac>)
 800cd52:	fa22 f303 	lsr.w	r3, r2, r3
 800cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cd58:	e01c      	b.n	800cd94 <UART_SetConfig+0x6d0>
 800cd5a:	bf00      	nop
 800cd5c:	40011400 	.word	0x40011400
 800cd60:	58024400 	.word	0x58024400
 800cd64:	40007800 	.word	0x40007800
 800cd68:	40007c00 	.word	0x40007c00
 800cd6c:	58000c00 	.word	0x58000c00
 800cd70:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800cd74:	4b9d      	ldr	r3, [pc, #628]	; (800cfec <UART_SetConfig+0x928>)
 800cd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd78:	e00c      	b.n	800cd94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cd7a:	4b9d      	ldr	r3, [pc, #628]	; (800cff0 <UART_SetConfig+0x92c>)
 800cd7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd7e:	e009      	b.n	800cd94 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd86:	e005      	b.n	800cd94 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cd92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cd94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	f000 81de 	beq.w	800d158 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda0:	4a94      	ldr	r2, [pc, #592]	; (800cff4 <UART_SetConfig+0x930>)
 800cda2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cda6:	461a      	mov	r2, r3
 800cda8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdaa:	fbb3 f3f2 	udiv	r3, r3, r2
 800cdae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	685a      	ldr	r2, [r3, #4]
 800cdb4:	4613      	mov	r3, r2
 800cdb6:	005b      	lsls	r3, r3, #1
 800cdb8:	4413      	add	r3, r2
 800cdba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdbc:	429a      	cmp	r2, r3
 800cdbe:	d305      	bcc.n	800cdcc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cdc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d903      	bls.n	800cdd4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cdd2:	e1c1      	b.n	800d158 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cdd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	60bb      	str	r3, [r7, #8]
 800cdda:	60fa      	str	r2, [r7, #12]
 800cddc:	697b      	ldr	r3, [r7, #20]
 800cdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde0:	4a84      	ldr	r2, [pc, #528]	; (800cff4 <UART_SetConfig+0x930>)
 800cde2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	2200      	movs	r2, #0
 800cdea:	603b      	str	r3, [r7, #0]
 800cdec:	607a      	str	r2, [r7, #4]
 800cdee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cdf6:	f7f3 fa6f 	bl	80002d8 <__aeabi_uldivmod>
 800cdfa:	4602      	mov	r2, r0
 800cdfc:	460b      	mov	r3, r1
 800cdfe:	4610      	mov	r0, r2
 800ce00:	4619      	mov	r1, r3
 800ce02:	f04f 0200 	mov.w	r2, #0
 800ce06:	f04f 0300 	mov.w	r3, #0
 800ce0a:	020b      	lsls	r3, r1, #8
 800ce0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce10:	0202      	lsls	r2, r0, #8
 800ce12:	6979      	ldr	r1, [r7, #20]
 800ce14:	6849      	ldr	r1, [r1, #4]
 800ce16:	0849      	lsrs	r1, r1, #1
 800ce18:	2000      	movs	r0, #0
 800ce1a:	460c      	mov	r4, r1
 800ce1c:	4605      	mov	r5, r0
 800ce1e:	eb12 0804 	adds.w	r8, r2, r4
 800ce22:	eb43 0905 	adc.w	r9, r3, r5
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	469a      	mov	sl, r3
 800ce2e:	4693      	mov	fp, r2
 800ce30:	4652      	mov	r2, sl
 800ce32:	465b      	mov	r3, fp
 800ce34:	4640      	mov	r0, r8
 800ce36:	4649      	mov	r1, r9
 800ce38:	f7f3 fa4e 	bl	80002d8 <__aeabi_uldivmod>
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	460b      	mov	r3, r1
 800ce40:	4613      	mov	r3, r2
 800ce42:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce4a:	d308      	bcc.n	800ce5e <UART_SetConfig+0x79a>
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce52:	d204      	bcs.n	800ce5e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce5a:	60da      	str	r2, [r3, #12]
 800ce5c:	e17c      	b.n	800d158 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800ce64:	e178      	b.n	800d158 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	69db      	ldr	r3, [r3, #28]
 800ce6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce6e:	f040 80c5 	bne.w	800cffc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ce72:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ce76:	2b20      	cmp	r3, #32
 800ce78:	dc48      	bgt.n	800cf0c <UART_SetConfig+0x848>
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	db7b      	blt.n	800cf76 <UART_SetConfig+0x8b2>
 800ce7e:	2b20      	cmp	r3, #32
 800ce80:	d879      	bhi.n	800cf76 <UART_SetConfig+0x8b2>
 800ce82:	a201      	add	r2, pc, #4	; (adr r2, 800ce88 <UART_SetConfig+0x7c4>)
 800ce84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce88:	0800cf13 	.word	0x0800cf13
 800ce8c:	0800cf1b 	.word	0x0800cf1b
 800ce90:	0800cf77 	.word	0x0800cf77
 800ce94:	0800cf77 	.word	0x0800cf77
 800ce98:	0800cf23 	.word	0x0800cf23
 800ce9c:	0800cf77 	.word	0x0800cf77
 800cea0:	0800cf77 	.word	0x0800cf77
 800cea4:	0800cf77 	.word	0x0800cf77
 800cea8:	0800cf33 	.word	0x0800cf33
 800ceac:	0800cf77 	.word	0x0800cf77
 800ceb0:	0800cf77 	.word	0x0800cf77
 800ceb4:	0800cf77 	.word	0x0800cf77
 800ceb8:	0800cf77 	.word	0x0800cf77
 800cebc:	0800cf77 	.word	0x0800cf77
 800cec0:	0800cf77 	.word	0x0800cf77
 800cec4:	0800cf77 	.word	0x0800cf77
 800cec8:	0800cf43 	.word	0x0800cf43
 800cecc:	0800cf77 	.word	0x0800cf77
 800ced0:	0800cf77 	.word	0x0800cf77
 800ced4:	0800cf77 	.word	0x0800cf77
 800ced8:	0800cf77 	.word	0x0800cf77
 800cedc:	0800cf77 	.word	0x0800cf77
 800cee0:	0800cf77 	.word	0x0800cf77
 800cee4:	0800cf77 	.word	0x0800cf77
 800cee8:	0800cf77 	.word	0x0800cf77
 800ceec:	0800cf77 	.word	0x0800cf77
 800cef0:	0800cf77 	.word	0x0800cf77
 800cef4:	0800cf77 	.word	0x0800cf77
 800cef8:	0800cf77 	.word	0x0800cf77
 800cefc:	0800cf77 	.word	0x0800cf77
 800cf00:	0800cf77 	.word	0x0800cf77
 800cf04:	0800cf77 	.word	0x0800cf77
 800cf08:	0800cf69 	.word	0x0800cf69
 800cf0c:	2b40      	cmp	r3, #64	; 0x40
 800cf0e:	d02e      	beq.n	800cf6e <UART_SetConfig+0x8aa>
 800cf10:	e031      	b.n	800cf76 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cf12:	f7fc f81b 	bl	8008f4c <HAL_RCC_GetPCLK1Freq>
 800cf16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf18:	e033      	b.n	800cf82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf1a:	f7fc f82d 	bl	8008f78 <HAL_RCC_GetPCLK2Freq>
 800cf1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cf20:	e02f      	b.n	800cf82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cf26:	4618      	mov	r0, r3
 800cf28:	f7fd ffdc 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800cf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf30:	e027      	b.n	800cf82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cf32:	f107 0318 	add.w	r3, r7, #24
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fe f928 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf40:	e01f      	b.n	800cf82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf42:	4b2d      	ldr	r3, [pc, #180]	; (800cff8 <UART_SetConfig+0x934>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f003 0320 	and.w	r3, r3, #32
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d009      	beq.n	800cf62 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cf4e:	4b2a      	ldr	r3, [pc, #168]	; (800cff8 <UART_SetConfig+0x934>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	08db      	lsrs	r3, r3, #3
 800cf54:	f003 0303 	and.w	r3, r3, #3
 800cf58:	4a24      	ldr	r2, [pc, #144]	; (800cfec <UART_SetConfig+0x928>)
 800cf5a:	fa22 f303 	lsr.w	r3, r2, r3
 800cf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800cf60:	e00f      	b.n	800cf82 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800cf62:	4b22      	ldr	r3, [pc, #136]	; (800cfec <UART_SetConfig+0x928>)
 800cf64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf66:	e00c      	b.n	800cf82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cf68:	4b21      	ldr	r3, [pc, #132]	; (800cff0 <UART_SetConfig+0x92c>)
 800cf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf6c:	e009      	b.n	800cf82 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cf74:	e005      	b.n	800cf82 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800cf76:	2300      	movs	r3, #0
 800cf78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800cf80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f000 80e7 	beq.w	800d158 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf8e:	4a19      	ldr	r2, [pc, #100]	; (800cff4 <UART_SetConfig+0x930>)
 800cf90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf94:	461a      	mov	r2, r3
 800cf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf98:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf9c:	005a      	lsls	r2, r3, #1
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	085b      	lsrs	r3, r3, #1
 800cfa4:	441a      	add	r2, r3
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	685b      	ldr	r3, [r3, #4]
 800cfaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb2:	2b0f      	cmp	r3, #15
 800cfb4:	d916      	bls.n	800cfe4 <UART_SetConfig+0x920>
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfbc:	d212      	bcs.n	800cfe4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfc0:	b29b      	uxth	r3, r3
 800cfc2:	f023 030f 	bic.w	r3, r3, #15
 800cfc6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cfc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfca:	085b      	lsrs	r3, r3, #1
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	f003 0307 	and.w	r3, r3, #7
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cfe0:	60da      	str	r2, [r3, #12]
 800cfe2:	e0b9      	b.n	800d158 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800cfea:	e0b5      	b.n	800d158 <UART_SetConfig+0xa94>
 800cfec:	03d09000 	.word	0x03d09000
 800cff0:	003d0900 	.word	0x003d0900
 800cff4:	0800d8cc 	.word	0x0800d8cc
 800cff8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800cffc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d000:	2b20      	cmp	r3, #32
 800d002:	dc49      	bgt.n	800d098 <UART_SetConfig+0x9d4>
 800d004:	2b00      	cmp	r3, #0
 800d006:	db7c      	blt.n	800d102 <UART_SetConfig+0xa3e>
 800d008:	2b20      	cmp	r3, #32
 800d00a:	d87a      	bhi.n	800d102 <UART_SetConfig+0xa3e>
 800d00c:	a201      	add	r2, pc, #4	; (adr r2, 800d014 <UART_SetConfig+0x950>)
 800d00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d012:	bf00      	nop
 800d014:	0800d09f 	.word	0x0800d09f
 800d018:	0800d0a7 	.word	0x0800d0a7
 800d01c:	0800d103 	.word	0x0800d103
 800d020:	0800d103 	.word	0x0800d103
 800d024:	0800d0af 	.word	0x0800d0af
 800d028:	0800d103 	.word	0x0800d103
 800d02c:	0800d103 	.word	0x0800d103
 800d030:	0800d103 	.word	0x0800d103
 800d034:	0800d0bf 	.word	0x0800d0bf
 800d038:	0800d103 	.word	0x0800d103
 800d03c:	0800d103 	.word	0x0800d103
 800d040:	0800d103 	.word	0x0800d103
 800d044:	0800d103 	.word	0x0800d103
 800d048:	0800d103 	.word	0x0800d103
 800d04c:	0800d103 	.word	0x0800d103
 800d050:	0800d103 	.word	0x0800d103
 800d054:	0800d0cf 	.word	0x0800d0cf
 800d058:	0800d103 	.word	0x0800d103
 800d05c:	0800d103 	.word	0x0800d103
 800d060:	0800d103 	.word	0x0800d103
 800d064:	0800d103 	.word	0x0800d103
 800d068:	0800d103 	.word	0x0800d103
 800d06c:	0800d103 	.word	0x0800d103
 800d070:	0800d103 	.word	0x0800d103
 800d074:	0800d103 	.word	0x0800d103
 800d078:	0800d103 	.word	0x0800d103
 800d07c:	0800d103 	.word	0x0800d103
 800d080:	0800d103 	.word	0x0800d103
 800d084:	0800d103 	.word	0x0800d103
 800d088:	0800d103 	.word	0x0800d103
 800d08c:	0800d103 	.word	0x0800d103
 800d090:	0800d103 	.word	0x0800d103
 800d094:	0800d0f5 	.word	0x0800d0f5
 800d098:	2b40      	cmp	r3, #64	; 0x40
 800d09a:	d02e      	beq.n	800d0fa <UART_SetConfig+0xa36>
 800d09c:	e031      	b.n	800d102 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d09e:	f7fb ff55 	bl	8008f4c <HAL_RCC_GetPCLK1Freq>
 800d0a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0a4:	e033      	b.n	800d10e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d0a6:	f7fb ff67 	bl	8008f78 <HAL_RCC_GetPCLK2Freq>
 800d0aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d0ac:	e02f      	b.n	800d10e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f7fd ff16 	bl	800aee4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0bc:	e027      	b.n	800d10e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0be:	f107 0318 	add.w	r3, r7, #24
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe f862 	bl	800b18c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0c8:	69fb      	ldr	r3, [r7, #28]
 800d0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0cc:	e01f      	b.n	800d10e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0ce:	4b2d      	ldr	r3, [pc, #180]	; (800d184 <UART_SetConfig+0xac0>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	f003 0320 	and.w	r3, r3, #32
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d009      	beq.n	800d0ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0da:	4b2a      	ldr	r3, [pc, #168]	; (800d184 <UART_SetConfig+0xac0>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	08db      	lsrs	r3, r3, #3
 800d0e0:	f003 0303 	and.w	r3, r3, #3
 800d0e4:	4a28      	ldr	r2, [pc, #160]	; (800d188 <UART_SetConfig+0xac4>)
 800d0e6:	fa22 f303 	lsr.w	r3, r2, r3
 800d0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0ec:	e00f      	b.n	800d10e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d0ee:	4b26      	ldr	r3, [pc, #152]	; (800d188 <UART_SetConfig+0xac4>)
 800d0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0f2:	e00c      	b.n	800d10e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0f4:	4b25      	ldr	r3, [pc, #148]	; (800d18c <UART_SetConfig+0xac8>)
 800d0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d0f8:	e009      	b.n	800d10e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d100:	e005      	b.n	800d10e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d102:	2300      	movs	r3, #0
 800d104:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d106:	2301      	movs	r3, #1
 800d108:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d10c:	bf00      	nop
    }

    if (pclk != 0U)
 800d10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d110:	2b00      	cmp	r3, #0
 800d112:	d021      	beq.n	800d158 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d118:	4a1d      	ldr	r2, [pc, #116]	; (800d190 <UART_SetConfig+0xacc>)
 800d11a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d11e:	461a      	mov	r2, r3
 800d120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d122:	fbb3 f2f2 	udiv	r2, r3, r2
 800d126:	697b      	ldr	r3, [r7, #20]
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	085b      	lsrs	r3, r3, #1
 800d12c:	441a      	add	r2, r3
 800d12e:	697b      	ldr	r3, [r7, #20]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	fbb2 f3f3 	udiv	r3, r2, r3
 800d136:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13a:	2b0f      	cmp	r3, #15
 800d13c:	d909      	bls.n	800d152 <UART_SetConfig+0xa8e>
 800d13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d144:	d205      	bcs.n	800d152 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d148:	b29a      	uxth	r2, r3
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	60da      	str	r2, [r3, #12]
 800d150:	e002      	b.n	800d158 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d152:	2301      	movs	r3, #1
 800d154:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d158:	697b      	ldr	r3, [r7, #20]
 800d15a:	2201      	movs	r2, #1
 800d15c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	2201      	movs	r2, #1
 800d164:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	2200      	movs	r2, #0
 800d16c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	2200      	movs	r2, #0
 800d172:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d174:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3748      	adds	r7, #72	; 0x48
 800d17c:	46bd      	mov	sp, r7
 800d17e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d182:	bf00      	nop
 800d184:	58024400 	.word	0x58024400
 800d188:	03d09000 	.word	0x03d09000
 800d18c:	003d0900 	.word	0x003d0900
 800d190:	0800d8cc 	.word	0x0800d8cc

0800d194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a0:	f003 0308 	and.w	r3, r3, #8
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00a      	beq.n	800d1be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	430a      	orrs	r2, r1
 800d1bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1c2:	f003 0301 	and.w	r3, r3, #1
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d00a      	beq.n	800d1e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	685b      	ldr	r3, [r3, #4]
 800d1d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	430a      	orrs	r2, r1
 800d1de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1e4:	f003 0302 	and.w	r3, r3, #2
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d00a      	beq.n	800d202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	430a      	orrs	r2, r1
 800d200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d206:	f003 0304 	and.w	r3, r3, #4
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d00a      	beq.n	800d224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	430a      	orrs	r2, r1
 800d222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d228:	f003 0310 	and.w	r3, r3, #16
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00a      	beq.n	800d246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	430a      	orrs	r2, r1
 800d244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d24a:	f003 0320 	and.w	r3, r3, #32
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00a      	beq.n	800d268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	430a      	orrs	r2, r1
 800d266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d270:	2b00      	cmp	r3, #0
 800d272:	d01a      	beq.n	800d2aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	430a      	orrs	r2, r1
 800d288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d28e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d292:	d10a      	bne.n	800d2aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	430a      	orrs	r2, r1
 800d2a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d00a      	beq.n	800d2cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	430a      	orrs	r2, r1
 800d2ca:	605a      	str	r2, [r3, #4]
  }
}
 800d2cc:	bf00      	nop
 800d2ce:	370c      	adds	r7, #12
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr

0800d2d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b098      	sub	sp, #96	; 0x60
 800d2dc:	af02      	add	r7, sp, #8
 800d2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d2e8:	f7f5 fe9c 	bl	8003024 <HAL_GetTick>
 800d2ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	f003 0308 	and.w	r3, r3, #8
 800d2f8:	2b08      	cmp	r3, #8
 800d2fa:	d12f      	bne.n	800d35c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d304:	2200      	movs	r2, #0
 800d306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 f88e 	bl	800d42c <UART_WaitOnFlagUntilTimeout>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d022      	beq.n	800d35c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d31e:	e853 3f00 	ldrex	r3, [r3]
 800d322:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d32a:	653b      	str	r3, [r7, #80]	; 0x50
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	461a      	mov	r2, r3
 800d332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d334:	647b      	str	r3, [r7, #68]	; 0x44
 800d336:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d338:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d33a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d33c:	e841 2300 	strex	r3, r2, [r1]
 800d340:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d344:	2b00      	cmp	r3, #0
 800d346:	d1e6      	bne.n	800d316 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2220      	movs	r2, #32
 800d34c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d358:	2303      	movs	r3, #3
 800d35a:	e063      	b.n	800d424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	f003 0304 	and.w	r3, r3, #4
 800d366:	2b04      	cmp	r3, #4
 800d368:	d149      	bne.n	800d3fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d36a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d36e:	9300      	str	r3, [sp, #0]
 800d370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d372:	2200      	movs	r2, #0
 800d374:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 f857 	bl	800d42c <UART_WaitOnFlagUntilTimeout>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d03c      	beq.n	800d3fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d38c:	e853 3f00 	ldrex	r3, [r3]
 800d390:	623b      	str	r3, [r7, #32]
   return(result);
 800d392:	6a3b      	ldr	r3, [r7, #32]
 800d394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3a2:	633b      	str	r3, [r7, #48]	; 0x30
 800d3a4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3aa:	e841 2300 	strex	r3, r2, [r1]
 800d3ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1e6      	bne.n	800d384 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	3308      	adds	r3, #8
 800d3bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	e853 3f00 	ldrex	r3, [r3]
 800d3c4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f023 0301 	bic.w	r3, r3, #1
 800d3cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	3308      	adds	r3, #8
 800d3d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3d6:	61fa      	str	r2, [r7, #28]
 800d3d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3da:	69b9      	ldr	r1, [r7, #24]
 800d3dc:	69fa      	ldr	r2, [r7, #28]
 800d3de:	e841 2300 	strex	r3, r2, [r1]
 800d3e2:	617b      	str	r3, [r7, #20]
   return(result);
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d1e5      	bne.n	800d3b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2220      	movs	r2, #32
 800d3ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d3fa:	2303      	movs	r3, #3
 800d3fc:	e012      	b.n	800d424 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2220      	movs	r2, #32
 800d402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2220      	movs	r2, #32
 800d40a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2200      	movs	r2, #0
 800d412:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2200      	movs	r2, #0
 800d418:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3758      	adds	r7, #88	; 0x58
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	603b      	str	r3, [r7, #0]
 800d438:	4613      	mov	r3, r2
 800d43a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d43c:	e04f      	b.n	800d4de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d444:	d04b      	beq.n	800d4de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d446:	f7f5 fded 	bl	8003024 <HAL_GetTick>
 800d44a:	4602      	mov	r2, r0
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	1ad3      	subs	r3, r2, r3
 800d450:	69ba      	ldr	r2, [r7, #24]
 800d452:	429a      	cmp	r2, r3
 800d454:	d302      	bcc.n	800d45c <UART_WaitOnFlagUntilTimeout+0x30>
 800d456:	69bb      	ldr	r3, [r7, #24]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d101      	bne.n	800d460 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d45c:	2303      	movs	r3, #3
 800d45e:	e04e      	b.n	800d4fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	f003 0304 	and.w	r3, r3, #4
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d037      	beq.n	800d4de <UART_WaitOnFlagUntilTimeout+0xb2>
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	2b80      	cmp	r3, #128	; 0x80
 800d472:	d034      	beq.n	800d4de <UART_WaitOnFlagUntilTimeout+0xb2>
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2b40      	cmp	r3, #64	; 0x40
 800d478:	d031      	beq.n	800d4de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	69db      	ldr	r3, [r3, #28]
 800d480:	f003 0308 	and.w	r3, r3, #8
 800d484:	2b08      	cmp	r3, #8
 800d486:	d110      	bne.n	800d4aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	2208      	movs	r2, #8
 800d48e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f000 f839 	bl	800d508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2208      	movs	r2, #8
 800d49a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	e029      	b.n	800d4fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	69db      	ldr	r3, [r3, #28]
 800d4b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d4b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d4b8:	d111      	bne.n	800d4de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f000 f81f 	bl	800d508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2220      	movs	r2, #32
 800d4ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d4da:	2303      	movs	r3, #3
 800d4dc:	e00f      	b.n	800d4fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	69da      	ldr	r2, [r3, #28]
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	4013      	ands	r3, r2
 800d4e8:	68ba      	ldr	r2, [r7, #8]
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	bf0c      	ite	eq
 800d4ee:	2301      	moveq	r3, #1
 800d4f0:	2300      	movne	r3, #0
 800d4f2:	b2db      	uxtb	r3, r3
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	79fb      	ldrb	r3, [r7, #7]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d0a0      	beq.n	800d43e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d4fc:	2300      	movs	r3, #0
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3710      	adds	r7, #16
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
	...

0800d508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d508:	b480      	push	{r7}
 800d50a:	b095      	sub	sp, #84	; 0x54
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d518:	e853 3f00 	ldrex	r3, [r3]
 800d51c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d524:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	461a      	mov	r2, r3
 800d52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d52e:	643b      	str	r3, [r7, #64]	; 0x40
 800d530:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d532:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d536:	e841 2300 	strex	r3, r2, [r1]
 800d53a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1e6      	bne.n	800d510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	3308      	adds	r3, #8
 800d548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d54a:	6a3b      	ldr	r3, [r7, #32]
 800d54c:	e853 3f00 	ldrex	r3, [r3]
 800d550:	61fb      	str	r3, [r7, #28]
   return(result);
 800d552:	69fa      	ldr	r2, [r7, #28]
 800d554:	4b1e      	ldr	r3, [pc, #120]	; (800d5d0 <UART_EndRxTransfer+0xc8>)
 800d556:	4013      	ands	r3, r2
 800d558:	64bb      	str	r3, [r7, #72]	; 0x48
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	3308      	adds	r3, #8
 800d560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d562:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d564:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d56a:	e841 2300 	strex	r3, r2, [r1]
 800d56e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1e5      	bne.n	800d542 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d118      	bne.n	800d5b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	e853 3f00 	ldrex	r3, [r3]
 800d58a:	60bb      	str	r3, [r7, #8]
   return(result);
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	f023 0310 	bic.w	r3, r3, #16
 800d592:	647b      	str	r3, [r7, #68]	; 0x44
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	461a      	mov	r2, r3
 800d59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d59c:	61bb      	str	r3, [r7, #24]
 800d59e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5a0:	6979      	ldr	r1, [r7, #20]
 800d5a2:	69ba      	ldr	r2, [r7, #24]
 800d5a4:	e841 2300 	strex	r3, r2, [r1]
 800d5a8:	613b      	str	r3, [r7, #16]
   return(result);
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1e6      	bne.n	800d57e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2220      	movs	r2, #32
 800d5b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d5c4:	bf00      	nop
 800d5c6:	3754      	adds	r7, #84	; 0x54
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr
 800d5d0:	effffffe 	.word	0xeffffffe

0800d5d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d101      	bne.n	800d5ea <HAL_UARTEx_DisableFifoMode+0x16>
 800d5e6:	2302      	movs	r3, #2
 800d5e8:	e027      	b.n	800d63a <HAL_UARTEx_DisableFifoMode+0x66>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2201      	movs	r2, #1
 800d5ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	2224      	movs	r2, #36	; 0x24
 800d5f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f022 0201 	bic.w	r2, r2, #1
 800d610:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d618:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2220      	movs	r2, #32
 800d62c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2200      	movs	r2, #0
 800d634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d638:	2300      	movs	r3, #0
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3714      	adds	r7, #20
 800d63e:	46bd      	mov	sp, r7
 800d640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d644:	4770      	bx	lr

0800d646 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d646:	b580      	push	{r7, lr}
 800d648:	b084      	sub	sp, #16
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d656:	2b01      	cmp	r3, #1
 800d658:	d101      	bne.n	800d65e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d65a:	2302      	movs	r3, #2
 800d65c:	e02d      	b.n	800d6ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2201      	movs	r2, #1
 800d662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2224      	movs	r2, #36	; 0x24
 800d66a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f022 0201 	bic.w	r2, r2, #1
 800d684:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	689b      	ldr	r3, [r3, #8]
 800d68c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	683a      	ldr	r2, [r7, #0]
 800d696:	430a      	orrs	r2, r1
 800d698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 f850 	bl	800d740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	68fa      	ldr	r2, [r7, #12]
 800d6a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2220      	movs	r2, #32
 800d6ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d6b8:	2300      	movs	r3, #0
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b084      	sub	sp, #16
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
 800d6ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d101      	bne.n	800d6da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d6d6:	2302      	movs	r3, #2
 800d6d8:	e02d      	b.n	800d736 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2224      	movs	r2, #36	; 0x24
 800d6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	681a      	ldr	r2, [r3, #0]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f022 0201 	bic.w	r2, r2, #1
 800d700:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	683a      	ldr	r2, [r7, #0]
 800d712:	430a      	orrs	r2, r1
 800d714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 f812 	bl	800d740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	68fa      	ldr	r2, [r7, #12]
 800d722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2220      	movs	r2, #32
 800d728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d734:	2300      	movs	r3, #0
}
 800d736:	4618      	mov	r0, r3
 800d738:	3710      	adds	r7, #16
 800d73a:	46bd      	mov	sp, r7
 800d73c:	bd80      	pop	{r7, pc}
	...

0800d740 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d740:	b480      	push	{r7}
 800d742:	b085      	sub	sp, #20
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d108      	bne.n	800d762 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2201      	movs	r2, #1
 800d754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d760:	e031      	b.n	800d7c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d762:	2310      	movs	r3, #16
 800d764:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d766:	2310      	movs	r3, #16
 800d768:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	0e5b      	lsrs	r3, r3, #25
 800d772:	b2db      	uxtb	r3, r3
 800d774:	f003 0307 	and.w	r3, r3, #7
 800d778:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	689b      	ldr	r3, [r3, #8]
 800d780:	0f5b      	lsrs	r3, r3, #29
 800d782:	b2db      	uxtb	r3, r3
 800d784:	f003 0307 	and.w	r3, r3, #7
 800d788:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d78a:	7bbb      	ldrb	r3, [r7, #14]
 800d78c:	7b3a      	ldrb	r2, [r7, #12]
 800d78e:	4911      	ldr	r1, [pc, #68]	; (800d7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800d790:	5c8a      	ldrb	r2, [r1, r2]
 800d792:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d796:	7b3a      	ldrb	r2, [r7, #12]
 800d798:	490f      	ldr	r1, [pc, #60]	; (800d7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800d79a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d79c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7a8:	7bfb      	ldrb	r3, [r7, #15]
 800d7aa:	7b7a      	ldrb	r2, [r7, #13]
 800d7ac:	4909      	ldr	r1, [pc, #36]	; (800d7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800d7ae:	5c8a      	ldrb	r2, [r1, r2]
 800d7b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d7b4:	7b7a      	ldrb	r2, [r7, #13]
 800d7b6:	4908      	ldr	r1, [pc, #32]	; (800d7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800d7b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d7ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d7c6:	bf00      	nop
 800d7c8:	3714      	adds	r7, #20
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr
 800d7d2:	bf00      	nop
 800d7d4:	0800d8e4 	.word	0x0800d8e4
 800d7d8:	0800d8ec 	.word	0x0800d8ec

0800d7dc <memset>:
 800d7dc:	4402      	add	r2, r0
 800d7de:	4603      	mov	r3, r0
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	d100      	bne.n	800d7e6 <memset+0xa>
 800d7e4:	4770      	bx	lr
 800d7e6:	f803 1b01 	strb.w	r1, [r3], #1
 800d7ea:	e7f9      	b.n	800d7e0 <memset+0x4>

0800d7ec <__libc_init_array>:
 800d7ec:	b570      	push	{r4, r5, r6, lr}
 800d7ee:	4d0d      	ldr	r5, [pc, #52]	; (800d824 <__libc_init_array+0x38>)
 800d7f0:	4c0d      	ldr	r4, [pc, #52]	; (800d828 <__libc_init_array+0x3c>)
 800d7f2:	1b64      	subs	r4, r4, r5
 800d7f4:	10a4      	asrs	r4, r4, #2
 800d7f6:	2600      	movs	r6, #0
 800d7f8:	42a6      	cmp	r6, r4
 800d7fa:	d109      	bne.n	800d810 <__libc_init_array+0x24>
 800d7fc:	4d0b      	ldr	r5, [pc, #44]	; (800d82c <__libc_init_array+0x40>)
 800d7fe:	4c0c      	ldr	r4, [pc, #48]	; (800d830 <__libc_init_array+0x44>)
 800d800:	f000 f826 	bl	800d850 <_init>
 800d804:	1b64      	subs	r4, r4, r5
 800d806:	10a4      	asrs	r4, r4, #2
 800d808:	2600      	movs	r6, #0
 800d80a:	42a6      	cmp	r6, r4
 800d80c:	d105      	bne.n	800d81a <__libc_init_array+0x2e>
 800d80e:	bd70      	pop	{r4, r5, r6, pc}
 800d810:	f855 3b04 	ldr.w	r3, [r5], #4
 800d814:	4798      	blx	r3
 800d816:	3601      	adds	r6, #1
 800d818:	e7ee      	b.n	800d7f8 <__libc_init_array+0xc>
 800d81a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d81e:	4798      	blx	r3
 800d820:	3601      	adds	r6, #1
 800d822:	e7f2      	b.n	800d80a <__libc_init_array+0x1e>
 800d824:	0800d8fc 	.word	0x0800d8fc
 800d828:	0800d8fc 	.word	0x0800d8fc
 800d82c:	0800d8fc 	.word	0x0800d8fc
 800d830:	0800d900 	.word	0x0800d900

0800d834 <memcpy>:
 800d834:	440a      	add	r2, r1
 800d836:	4291      	cmp	r1, r2
 800d838:	f100 33ff 	add.w	r3, r0, #4294967295
 800d83c:	d100      	bne.n	800d840 <memcpy+0xc>
 800d83e:	4770      	bx	lr
 800d840:	b510      	push	{r4, lr}
 800d842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d84a:	4291      	cmp	r1, r2
 800d84c:	d1f9      	bne.n	800d842 <memcpy+0xe>
 800d84e:	bd10      	pop	{r4, pc}

0800d850 <_init>:
 800d850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d852:	bf00      	nop
 800d854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d856:	bc08      	pop	{r3}
 800d858:	469e      	mov	lr, r3
 800d85a:	4770      	bx	lr

0800d85c <_fini>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	bf00      	nop
 800d860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d862:	bc08      	pop	{r3}
 800d864:	469e      	mov	lr, r3
 800d866:	4770      	bx	lr

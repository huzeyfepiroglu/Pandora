
Pandora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbcc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800ce64  0800ce64  0001ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cef0  0800cef0  0001cef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800cef8  0800cef8  0001cef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800cefc  0800cefc  0001cefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  24000000  0800cf00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800cf14  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800cf74  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f8  240000d4  0800cfd4  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240008cc  0800cfd4  000208cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002e0c1  00000000  00000000  00020145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f11  00000000  00000000  0004e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ed8  00000000  00000000  00053118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001827  00000000  00000000  00054ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003e87a  00000000  00000000  00056817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dddd  00000000  00000000  00095091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018aaf4  00000000  00000000  000c2e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008424  00000000  00000000  0024d964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00255d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d4 	.word	0x240000d4
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ce4c 	.word	0x0800ce4c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d8 	.word	0x240000d8
 80002d4:	0800ce4c 	.word	0x0800ce4c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005e6:	463b      	mov	r3, r7
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
 80005f4:	615a      	str	r2, [r3, #20]
 80005f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005f8:	4b2f      	ldr	r3, [pc, #188]	; (80006b8 <MX_ADC1_Init+0xe4>)
 80005fa:	4a30      	ldr	r2, [pc, #192]	; (80006bc <MX_ADC1_Init+0xe8>)
 80005fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fe:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000604:	4b2c      	ldr	r3, [pc, #176]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060a:	4b2b      	ldr	r3, [pc, #172]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000610:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000612:	2204      	movs	r2, #4
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000616:	4b28      	ldr	r3, [pc, #160]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000618:	2200      	movs	r2, #0
 800061a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061c:	4b26      	ldr	r3, [pc, #152]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800061e:	2201      	movs	r2, #1
 8000620:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000624:	2201      	movs	r2, #1
 8000626:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000628:	4b23      	ldr	r3, [pc, #140]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800062a:	2200      	movs	r2, #0
 800062c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000634:	4b20      	ldr	r3, [pc, #128]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800063a:	4b1f      	ldr	r3, [pc, #124]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800063c:	2200      	movs	r2, #0
 800063e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000640:	4b1d      	ldr	r3, [pc, #116]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000642:	2200      	movs	r2, #0
 8000644:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000646:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000648:	2200      	movs	r2, #0
 800064a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800064c:	4b1a      	ldr	r3, [pc, #104]	; (80006b8 <MX_ADC1_Init+0xe4>)
 800064e:	2200      	movs	r2, #0
 8000650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	4818      	ldr	r0, [pc, #96]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000656:	f002 fc5d 	bl	8002f14 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000660:	f001 fb68 	bl	8001d34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000668:	f107 031c 	add.w	r3, r7, #28
 800066c:	4619      	mov	r1, r3
 800066e:	4812      	ldr	r0, [pc, #72]	; (80006b8 <MX_ADC1_Init+0xe4>)
 8000670:	f003 fc80 	bl	8003f74 <HAL_ADCEx_MultiModeConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800067a:	f001 fb5b 	bl	8001d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800067e:	4b10      	ldr	r3, [pc, #64]	; (80006c0 <MX_ADC1_Init+0xec>)
 8000680:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000682:	2306      	movs	r3, #6
 8000684:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000686:	2300      	movs	r3, #0
 8000688:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800068a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800068e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000690:	2304      	movs	r3, #4
 8000692:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000694:	2300      	movs	r3, #0
 8000696:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000698:	2300      	movs	r3, #0
 800069a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800069c:	463b      	mov	r3, r7
 800069e:	4619      	mov	r1, r3
 80006a0:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_ADC1_Init+0xe4>)
 80006a2:	f002 febb 	bl	800341c <HAL_ADC_ConfigChannel>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80006ac:	f001 fb42 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b0:	bf00      	nop
 80006b2:	3728      	adds	r7, #40	; 0x28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	240000f0 	.word	0x240000f0
 80006bc:	40022000 	.word	0x40022000
 80006c0:	08600004 	.word	0x08600004

080006c4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b088      	sub	sp, #32
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]
 80006d8:	615a      	str	r2, [r3, #20]
 80006da:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006de:	4a2a      	ldr	r2, [pc, #168]	; (8000788 <MX_ADC2_Init+0xc4>)
 80006e0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006fa:	4b22      	ldr	r3, [pc, #136]	; (8000784 <MX_ADC2_Init+0xc0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000700:	4b20      	ldr	r3, [pc, #128]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000702:	2201      	movs	r2, #1
 8000704:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000706:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000708:	2201      	movs	r2, #1
 800070a:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_ADC2_Init+0xc0>)
 800070e:	2200      	movs	r2, #0
 8000710:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000712:	4b1c      	ldr	r3, [pc, #112]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000714:	2200      	movs	r2, #0
 8000716:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_ADC2_Init+0xc0>)
 800071a:	2200      	movs	r2, #0
 800071c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800071e:	4b19      	ldr	r3, [pc, #100]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000720:	2200      	movs	r2, #0
 8000722:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000724:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000726:	2200      	movs	r2, #0
 8000728:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <MX_ADC2_Init+0xc0>)
 800072c:	2200      	movs	r2, #0
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_ADC2_Init+0xc0>)
 8000732:	2200      	movs	r2, #0
 8000734:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_ADC2_Init+0xc0>)
 800073a:	f002 fbeb 	bl	8002f14 <HAL_ADC_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000744:	f001 faf6 	bl	8001d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000748:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_ADC2_Init+0xc8>)
 800074a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800074c:	2306      	movs	r3, #6
 800074e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000750:	2300      	movs	r3, #0
 8000752:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000754:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000758:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800075a:	2304      	movs	r3, #4
 800075c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000762:	2300      	movs	r3, #0
 8000764:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4806      	ldr	r0, [pc, #24]	; (8000784 <MX_ADC2_Init+0xc0>)
 800076c:	f002 fe56 	bl	800341c <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000776:	f001 fadd 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	24000154 	.word	0x24000154
 8000788:	40022100 	.word	0x40022100
 800078c:	08600004 	.word	0x08600004

08000790 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
 80007a2:	611a      	str	r2, [r3, #16]
 80007a4:	615a      	str	r2, [r3, #20]
 80007a6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80007a8:	4b29      	ldr	r3, [pc, #164]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007aa:	4a2a      	ldr	r2, [pc, #168]	; (8000854 <MX_ADC3_Init+0xc4>)
 80007ac:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80007b4:	4b26      	ldr	r3, [pc, #152]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ba:	4b25      	ldr	r3, [pc, #148]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007c2:	2204      	movs	r2, #4
 80007c4:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80007c6:	4b22      	ldr	r3, [pc, #136]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80007d2:	4b1f      	ldr	r3, [pc, #124]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007ea:	4b19      	ldr	r3, [pc, #100]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f0:	4b17      	ldr	r3, [pc, #92]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007f6:	4b16      	ldr	r3, [pc, #88]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <MX_ADC3_Init+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000804:	4812      	ldr	r0, [pc, #72]	; (8000850 <MX_ADC3_Init+0xc0>)
 8000806:	f002 fb85 	bl	8002f14 <HAL_ADC_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 8000810:	f001 fa90 	bl	8001d34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <MX_ADC3_Init+0xc8>)
 8000816:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000818:	2306      	movs	r3, #6
 800081a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000820:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000824:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000826:	2304      	movs	r3, #4
 8000828:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	4619      	mov	r1, r3
 8000836:	4806      	ldr	r0, [pc, #24]	; (8000850 <MX_ADC3_Init+0xc0>)
 8000838:	f002 fdf0 	bl	800341c <HAL_ADC_ConfigChannel>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_ADC3_Init+0xb6>
  {
    Error_Handler();
 8000842:	f001 fa77 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	3720      	adds	r7, #32
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	240001b8 	.word	0x240001b8
 8000854:	58026000 	.word	0x58026000
 8000858:	21800100 	.word	0x21800100

0800085c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08e      	sub	sp, #56	; 0x38
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a99      	ldr	r2, [pc, #612]	; (8000ae0 <HAL_ADC_MspInit+0x284>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d164      	bne.n	8000948 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800087e:	4b99      	ldr	r3, [pc, #612]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	3301      	adds	r3, #1
 8000884:	4a97      	ldr	r2, [pc, #604]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000886:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000888:	4b96      	ldr	r3, [pc, #600]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b01      	cmp	r3, #1
 800088e:	d10e      	bne.n	80008ae <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000890:	4b95      	ldr	r3, [pc, #596]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000896:	4a94      	ldr	r2, [pc, #592]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000898:	f043 0320 	orr.w	r3, r3, #32
 800089c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008a0:	4b91      	ldr	r3, [pc, #580]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a6:	f003 0320 	and.w	r3, r3, #32
 80008aa:	623b      	str	r3, [r7, #32]
 80008ac:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ae:	4b8e      	ldr	r3, [pc, #568]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b4:	4a8c      	ldr	r2, [pc, #560]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008be:	4b8a      	ldr	r3, [pc, #552]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	f003 0320 	and.w	r3, r3, #32
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    PF12     ------> ADC1_INP6
    */
    GPIO_InitStruct.Pin = EOS_CURRENT_Pin|KKU_CURRENT_Pin;
 80008cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4882      	ldr	r0, [pc, #520]	; (8000aec <HAL_ADC_MspInit+0x290>)
 80008e2:	f006 fda5 	bl	8007430 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80008e6:	4b82      	ldr	r3, [pc, #520]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008e8:	4a82      	ldr	r2, [pc, #520]	; (8000af4 <HAL_ADC_MspInit+0x298>)
 80008ea:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80008ec:	4b80      	ldr	r3, [pc, #512]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008ee:	2209      	movs	r2, #9
 80008f0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80008f2:	4b7f      	ldr	r3, [pc, #508]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80008f8:	4b7d      	ldr	r3, [pc, #500]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80008fe:	4b7c      	ldr	r3, [pc, #496]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000904:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000906:	4b7a      	ldr	r3, [pc, #488]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000908:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800090c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800090e:	4b78      	ldr	r3, [pc, #480]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000910:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000914:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000916:	4b76      	ldr	r3, [pc, #472]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000918:	f44f 7280 	mov.w	r2, #256	; 0x100
 800091c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b74      	ldr	r3, [pc, #464]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000924:	4b72      	ldr	r3, [pc, #456]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800092a:	4871      	ldr	r0, [pc, #452]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 800092c:	f003 fd10 	bl	8004350 <HAL_DMA_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_ADC_MspInit+0xde>
    {
      Error_Handler();
 8000936:	f001 f9fd 	bl	8001d34 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4a6c      	ldr	r2, [pc, #432]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 800093e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000940:	4a6b      	ldr	r2, [pc, #428]	; (8000af0 <HAL_ADC_MspInit+0x294>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000946:	e0c6      	b.n	8000ad6 <HAL_ADC_MspInit+0x27a>
  else if(adcHandle->Instance==ADC2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a6a      	ldr	r2, [pc, #424]	; (8000af8 <HAL_ADC_MspInit+0x29c>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d164      	bne.n	8000a1c <HAL_ADC_MspInit+0x1c0>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000952:	4b64      	ldr	r3, [pc, #400]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	3301      	adds	r3, #1
 8000958:	4a62      	ldr	r2, [pc, #392]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800095a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800095c:	4b61      	ldr	r3, [pc, #388]	; (8000ae4 <HAL_ADC_MspInit+0x288>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d10e      	bne.n	8000982 <HAL_ADC_MspInit+0x126>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000964:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000966:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800096a:	4a5f      	ldr	r2, [pc, #380]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 800096c:	f043 0320 	orr.w	r3, r3, #32
 8000970:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000974:	4b5c      	ldr	r3, [pc, #368]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000976:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800097a:	f003 0320 	and.w	r3, r3, #32
 800097e:	61bb      	str	r3, [r7, #24]
 8000980:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000982:	4b59      	ldr	r3, [pc, #356]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000988:	4a57      	ldr	r2, [pc, #348]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000992:	4b55      	ldr	r3, [pc, #340]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000998:	f003 0320 	and.w	r3, r3, #32
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = AKB_CURRENT_Pin|SERVO_CURRENT_Pin;
 80009a0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009a6:	2303      	movs	r3, #3
 80009a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	484d      	ldr	r0, [pc, #308]	; (8000aec <HAL_ADC_MspInit+0x290>)
 80009b6:	f006 fd3b 	bl	8007430 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream1;
 80009ba:	4b50      	ldr	r3, [pc, #320]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009bc:	4a50      	ldr	r2, [pc, #320]	; (8000b00 <HAL_ADC_MspInit+0x2a4>)
 80009be:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80009c0:	4b4e      	ldr	r3, [pc, #312]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009c2:	220a      	movs	r2, #10
 80009c4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009c6:	4b4d      	ldr	r3, [pc, #308]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009cc:	4b4b      	ldr	r3, [pc, #300]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009d2:	4b4a      	ldr	r3, [pc, #296]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009d8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009da:	4b48      	ldr	r3, [pc, #288]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009e0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009e2:	4b46      	ldr	r3, [pc, #280]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009e8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009ea:	4b44      	ldr	r3, [pc, #272]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009f0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80009f2:	4b42      	ldr	r3, [pc, #264]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009f8:	4b40      	ldr	r3, [pc, #256]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009fe:	483f      	ldr	r0, [pc, #252]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a00:	f003 fca6 	bl	8004350 <HAL_DMA_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <HAL_ADC_MspInit+0x1b2>
      Error_Handler();
 8000a0a:	f001 f993 	bl	8001d34 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a12:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a14:	4a39      	ldr	r2, [pc, #228]	; (8000afc <HAL_ADC_MspInit+0x2a0>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000a1a:	e05c      	b.n	8000ad6 <HAL_ADC_MspInit+0x27a>
  else if(adcHandle->Instance==ADC3)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a38      	ldr	r2, [pc, #224]	; (8000b04 <HAL_ADC_MspInit+0x2a8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d157      	bne.n	8000ad6 <HAL_ADC_MspInit+0x27a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a26:	4b30      	ldr	r3, [pc, #192]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2c:	4a2e      	ldr	r2, [pc, #184]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a44:	4b28      	ldr	r3, [pc, #160]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4a:	4a27      	ldr	r2, [pc, #156]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a4c:	f043 0320 	orr.w	r3, r3, #32
 8000a50:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a54:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <HAL_ADC_MspInit+0x28c>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	f003 0320 	and.w	r3, r3, #32
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MAIN_POWER_VOLTAGE_Pin|MAIN_POWER_CURRENT_Pin|SOLENOID_CURRENT_Pin|COCKING_HANDLE_CURRENT_Pin;
 8000a62:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	481d      	ldr	r0, [pc, #116]	; (8000aec <HAL_ADC_MspInit+0x290>)
 8000a78:	f006 fcda 	bl	8007430 <HAL_GPIO_Init>
    hdma_adc3.Instance = BDMA_Channel0;
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <HAL_ADC_MspInit+0x2b0>)
 8000a80:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 8000a82:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a84:	2211      	movs	r2, #17
 8000a86:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a9a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000aa2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000aa6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aaa:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000aae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ab2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000aba:	4813      	ldr	r0, [pc, #76]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000abc:	f003 fc48 	bl	8004350 <HAL_DMA_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_ADC_MspInit+0x26e>
      Error_Handler();
 8000ac6:	f001 f935 	bl	8001d34 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ace:	64da      	str	r2, [r3, #76]	; 0x4c
 8000ad0:	4a0d      	ldr	r2, [pc, #52]	; (8000b08 <HAL_ADC_MspInit+0x2ac>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000ad6:	bf00      	nop
 8000ad8:	3738      	adds	r7, #56	; 0x38
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40022000 	.word	0x40022000
 8000ae4:	24000384 	.word	0x24000384
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	58021400 	.word	0x58021400
 8000af0:	2400021c 	.word	0x2400021c
 8000af4:	40020010 	.word	0x40020010
 8000af8:	40022100 	.word	0x40022100
 8000afc:	24000294 	.word	0x24000294
 8000b00:	40020028 	.word	0x40020028
 8000b04:	58026000 	.word	0x58026000
 8000b08:	2400030c 	.word	0x2400030c
 8000b0c:	58025408 	.word	0x58025408

08000b10 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_BDMA_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_BDMA_Init+0x3c>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	2081      	movs	r0, #129	; 0x81
 8000b3a:	f003 fbd4 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8000b3e:	2081      	movs	r0, #129	; 0x81
 8000b40:	f003 fbeb 	bl	800431a <HAL_NVIC_EnableIRQ>

}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400

08000b50 <functionCockingMotorDrive>:

// variables needed for just cocking_handle_maingun.c not global
int32_t lastCount = 0;

void functionCockingMotorDrive(bool direction)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	71fb      	strb	r3, [r7, #7]
	if(direction == FORWARD)
 8000b5a:	79fb      	ldrb	r3, [r7, #7]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d00d      	beq.n	8000b7c <functionCockingMotorDrive+0x2c>
	{
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,OFF);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2102      	movs	r1, #2
 8000b64:	4811      	ldr	r0, [pc, #68]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b66:	f006 fe13 	bl	8007790 <HAL_GPIO_WritePin>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,ON);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	480f      	ldr	r0, [pc, #60]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b70:	f006 fe0e 	bl	8007790 <HAL_GPIO_WritePin>

		pandora.gun.cockingHandle.motorState = FORWARD;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <functionCockingMotorDrive+0x60>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	715a      	strb	r2, [r3, #5]
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,ON);

		pandora.gun.cockingHandle.motorState = BACKWARD;
	}
}
 8000b7a:	e012      	b.n	8000ba2 <functionCockingMotorDrive+0x52>
	else if(direction == BACKWARD)
 8000b7c:	79fb      	ldrb	r3, [r7, #7]
 8000b7e:	f083 0301 	eor.w	r3, r3, #1
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d00c      	beq.n	8000ba2 <functionCockingMotorDrive+0x52>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2104      	movs	r1, #4
 8000b8c:	4807      	ldr	r0, [pc, #28]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b8e:	f006 fdff 	bl	8007790 <HAL_GPIO_WritePin>
		MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,ON);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2102      	movs	r1, #2
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <functionCockingMotorDrive+0x5c>)
 8000b98:	f006 fdfa 	bl	8007790 <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.motorState = BACKWARD;
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <functionCockingMotorDrive+0x60>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	715a      	strb	r2, [r3, #5]
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	58021800 	.word	0x58021800
 8000bb0:	24000570 	.word	0x24000570

08000bb4 <functionCockingMotorBrake>:

void functionCockingMotorBrake (bool state)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
	if(state == ON)
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d009      	beq.n	8000bd8 <functionCockingMotorBrake+0x24>
	{
		MOTOR_CONTROL(BRAKE_DRV_28V,ON);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <functionCockingMotorBrake+0x4c>)
 8000bcc:	f006 fde0 	bl	8007790 <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.brakeState = ON;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <functionCockingMotorBrake+0x50>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	719a      	strb	r2, [r3, #6]
	{
		MOTOR_CONTROL(BRAKE_DRV_28V,OFF);
		pandora.gun.cockingHandle.brakeState = OFF;
	}

}
 8000bd6:	e00e      	b.n	8000bf6 <functionCockingMotorBrake+0x42>
	else if (state == OFF)
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	f083 0301 	eor.w	r3, r3, #1
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d008      	beq.n	8000bf6 <functionCockingMotorBrake+0x42>
		MOTOR_CONTROL(BRAKE_DRV_28V,OFF);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <functionCockingMotorBrake+0x4c>)
 8000bec:	f006 fdd0 	bl	8007790 <HAL_GPIO_WritePin>
		pandora.gun.cockingHandle.brakeState = OFF;
 8000bf0:	4b04      	ldr	r3, [pc, #16]	; (8000c04 <functionCockingMotorBrake+0x50>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	719a      	strb	r2, [r3, #6]
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	58020c00 	.word	0x58020c00
 8000c04:	24000570 	.word	0x24000570

08000c08 <functionCockingMotorStop>:

void functionCockingMotorStop(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
	MOTOR_CONTROL(COCKING_HANDLE_DRV_H_BACKWARD,OFF);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2102      	movs	r1, #2
 8000c10:	4806      	ldr	r0, [pc, #24]	; (8000c2c <functionCockingMotorStop+0x24>)
 8000c12:	f006 fdbd 	bl	8007790 <HAL_GPIO_WritePin>
	MOTOR_CONTROL(COCKING_HANDLE_DRV_H_FORWARD,OFF);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2104      	movs	r1, #4
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <functionCockingMotorStop+0x24>)
 8000c1c:	f006 fdb8 	bl	8007790 <HAL_GPIO_WritePin>

	pandora.gun.cockingHandle.motorState = IDLE;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <functionCockingMotorStop+0x28>)
 8000c22:	2202      	movs	r2, #2
 8000c24:	715a      	strb	r2, [r3, #5]
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	58021800 	.word	0x58021800
 8000c30:	24000570 	.word	0x24000570

08000c34 <functionCockingHandleGoSafe>:
	pandora.gun.cockingHandle.safe  = false;
	pandora.gun.cockingHandle.home  = true;
}

void functionCockingHandleGoSafe (void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
	if(!pandora.switches.switches_cocking_handle_home)
 8000c38:	4b1e      	ldr	r3, [pc, #120]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c3a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000c3e:	f083 0301 	eor.w	r3, r3, #1
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00f      	beq.n	8000c68 <functionCockingHandleGoSafe+0x34>
	{
		functionCockingMotorBrake(OFF);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f7ff ffb3 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f7ff ff7e 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d1f7      	bne.n	8000c4e <functionCockingHandleGoSafe+0x1a>

		functionCockingMotorStop();
 8000c5e:	f7ff ffd3 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000c62:	2001      	movs	r0, #1
 8000c64:	f7ff ffa6 	bl	8000bb4 <functionCockingMotorBrake>
	}

	if(pandora.switches.switches_cocking_handle_home)
 8000c68:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d014      	beq.n	8000c9c <functionCockingHandleGoSafe+0x68>
	{
		functionCockingMotorBrake(OFF);
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff ff9e 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(FORWARD);
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff ff69 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(!functionCountEncoderPulse(SAFE_POSITION));
 8000c7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c82:	f000 f873 	bl	8000d6c <functionCountEncoderPulse>
 8000c86:	4603      	mov	r3, r0
 8000c88:	f083 0301 	eor.w	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d1f2      	bne.n	8000c78 <functionCockingHandleGoSafe+0x44>

		functionCockingMotorStop();
 8000c92:	f7ff ffb9 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff ff8c 	bl	8000bb4 <functionCockingMotorBrake>
	}

	pandora.gun.cockingHandle.armed = false;
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	71da      	strb	r2, [r3, #7]
	pandora.gun.cockingHandle.safe  = true;
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	721a      	strb	r2, [r3, #8]
	pandora.gun.cockingHandle.home  = true;
 8000ca8:	4b02      	ldr	r3, [pc, #8]	; (8000cb4 <functionCockingHandleGoSafe+0x80>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	725a      	strb	r2, [r3, #9]
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24000570 	.word	0x24000570

08000cb8 <functionCockingHandleGoArm>:

void functionCockingHandleGoArm (void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	if(!pandora.switches.switches_cocking_handle_home)
 8000cbc:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000cbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000cc2:	f083 0301 	eor.w	r3, r3, #1
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d00f      	beq.n	8000cec <functionCockingHandleGoArm+0x34>
	{
		functionCockingMotorBrake(OFF);
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f7ff ff71 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000cd2:	2000      	movs	r0, #0
 8000cd4:	f7ff ff3c 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000cd8:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d1f7      	bne.n	8000cd2 <functionCockingHandleGoArm+0x1a>

		functionCockingMotorStop();
 8000ce2:	f7ff ff91 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f7ff ff64 	bl	8000bb4 <functionCockingMotorBrake>
	}

	if(pandora.switches.switches_cocking_handle_home)
 8000cec:	4b1e      	ldr	r3, [pc, #120]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000cee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d014      	beq.n	8000d20 <functionCockingHandleGoArm+0x68>
	{
		functionCockingMotorBrake(OFF);
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ff5c 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(FORWARD);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff ff27 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(!functionCountEncoderPulse(ARM_POSITION));
 8000d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d06:	f000 f831 	bl	8000d6c <functionCountEncoderPulse>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	f083 0301 	eor.w	r3, r3, #1
 8000d10:	b2db      	uxtb	r3, r3
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d1f2      	bne.n	8000cfc <functionCockingHandleGoArm+0x44>

		functionCockingMotorStop();
 8000d16:	f7ff ff77 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff ff4a 	bl	8000bb4 <functionCockingMotorBrake>
	}

	if(!pandora.switches.switches_cocking_handle_home)
 8000d20:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d26:	f083 0301 	eor.w	r3, r3, #1
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d00f      	beq.n	8000d50 <functionCockingHandleGoArm+0x98>
	{
		functionCockingMotorBrake(OFF);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff ff3f 	bl	8000bb4 <functionCockingMotorBrake>

		do
		{
			functionCockingMotorDrive(BACKWARD);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff0a 	bl	8000b50 <functionCockingMotorDrive>
		}
		while(pandora.switches.switches_cocking_handle_home);
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1f7      	bne.n	8000d36 <functionCockingHandleGoArm+0x7e>


		functionCockingMotorStop();
 8000d46:	f7ff ff5f 	bl	8000c08 <functionCockingMotorStop>
		functionCockingMotorBrake(ON);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff ff32 	bl	8000bb4 <functionCockingMotorBrake>
	}

	pandora.gun.cockingHandle.armed = true;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d52:	2201      	movs	r2, #1
 8000d54:	71da      	strb	r2, [r3, #7]
	pandora.gun.cockingHandle.safe  = false;
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	721a      	strb	r2, [r3, #8]
	pandora.gun.cockingHandle.home  = true;
 8000d5c:	4b02      	ldr	r3, [pc, #8]	; (8000d68 <functionCockingHandleGoArm+0xb0>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	725a      	strb	r2, [r3, #9]
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	24000570 	.word	0x24000570

08000d6c <functionCountEncoderPulse>:

bool functionCountEncoderPulse(uint32_t position)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if(pandora.gun.cockingHandle.encoderCounter <= position)								// main içerisinde functionEncoderCounter saymalı..! OK #huzeyfe
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <functionCountEncoderPulse+0x28>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	461a      	mov	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d301      	bcc.n	8000d84 <functionCountEncoderPulse+0x18>
		return true;
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <functionCountEncoderPulse+0x1a>
	else
		return false;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	24000570 	.word	0x24000570

08000d98 <functionEncoderRead>:

void functionEncoderRead(TIM_HandleTypeDef *htim)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
	int32_t currentCount = __HAL_TIM_GET_COUNTER(htim);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	60fb      	str	r3, [r7, #12]
	int32_t difference = currentCount - lastCount;
 8000da8:	4b18      	ldr	r3, [pc, #96]	; (8000e0c <functionEncoderRead+0x74>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	60bb      	str	r3, [r7, #8]

	if(pandora.switches.switches_cocking_handle_home)
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <functionEncoderRead+0x78>)
 8000db4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d005      	beq.n	8000dc8 <functionEncoderRead+0x30>
	{
		currentCount = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
		lastCount = 0;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	; (8000e0c <functionEncoderRead+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]

		return;
 8000dc6:	e01b      	b.n	8000e00 <functionEncoderRead+0x68>
	}

	if(difference > 0)
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dd09      	ble.n	8000de2 <functionEncoderRead+0x4a>
	{
		pandora.gun.cockingHandle.encoderRotation = FORWARD;
 8000dce:	4b10      	ldr	r3, [pc, #64]	; (8000e10 <functionEncoderRead+0x78>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	711a      	strb	r2, [r3, #4]
		pandora.gun.cockingHandle.encoderCounter += difference;
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <functionEncoderRead+0x78>)
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4413      	add	r3, r2
 8000ddc:	4a0c      	ldr	r2, [pc, #48]	; (8000e10 <functionEncoderRead+0x78>)
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	e00b      	b.n	8000dfa <functionEncoderRead+0x62>
	}

	else if (difference < 0)
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	da08      	bge.n	8000dfa <functionEncoderRead+0x62>
	{
		pandora.gun.cockingHandle.encoderRotation = BACKWARD;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <functionEncoderRead+0x78>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	711a      	strb	r2, [r3, #4]
		pandora.gun.cockingHandle.encoderCounter += difference;
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <functionEncoderRead+0x78>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a06      	ldr	r2, [pc, #24]	; (8000e10 <functionEncoderRead+0x78>)
 8000df8:	6013      	str	r3, [r2, #0]

	}

	lastCount = currentCount;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <functionEncoderRead+0x74>)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	3714      	adds	r7, #20
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	24000388 	.word	0x24000388
 8000e10:	24000570 	.word	0x24000570

08000e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_DMA_Init+0x4c>)
 8000e1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e20:	4a0f      	ldr	r2, [pc, #60]	; (8000e60 <MX_DMA_Init+0x4c>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	; (8000e60 <MX_DMA_Init+0x4c>)
 8000e2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e30:	f003 0301 	and.w	r3, r3, #1
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	200b      	movs	r0, #11
 8000e3e:	f003 fa52 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e42:	200b      	movs	r0, #11
 8000e44:	f003 fa69 	bl	800431a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	200c      	movs	r0, #12
 8000e4e:	f003 fa4a 	bl	80042e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e52:	200c      	movs	r0, #12
 8000e54:	f003 fa61 	bl	800431a <HAL_NVIC_EnableIRQ>

}
 8000e58:	bf00      	nop
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400

08000e64 <function_errorCheck>:
#include "definitions.h"

extern pandoraStructer pandora;

void function_errorCheck (void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
	/************************SOLENOID_BEGIN**************************/
	if(pandora.powerManagement.solenoidCurrent > AMPER_5)
 8000e68:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <function_errorCheck+0xd0>)
 8000e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000e6e:	2b05      	cmp	r3, #5
 8000e70:	d903      	bls.n	8000e7a <function_errorCheck+0x16>
	{
		pandora.error.solenoidCurrentHigh = true;
 8000e72:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <function_errorCheck+0xd0>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	745a      	strb	r2, [r3, #17]
 8000e78:	e002      	b.n	8000e80 <function_errorCheck+0x1c>
	}
	else
	{
		pandora.error.solenoidCurrentHigh = false;
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <function_errorCheck+0xd0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	745a      	strb	r2, [r3, #17]
	}
	/************************SOLENOID_END****************************/

	/*********************COCKING_HANDLE_BEGIN***********************/
	if(pandora.powerManagement.cockingHandleCurrent > AMPER_5)
 8000e80:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <function_errorCheck+0xd0>)
 8000e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e86:	2b05      	cmp	r3, #5
 8000e88:	d903      	bls.n	8000e92 <function_errorCheck+0x2e>
	{
		pandora.error.cockingHandleCurrentHigh = true;
 8000e8a:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <function_errorCheck+0xd0>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	74da      	strb	r2, [r3, #19]
 8000e90:	e002      	b.n	8000e98 <function_errorCheck+0x34>
	}
	else
	{
		pandora.error.cockingHandleCurrentHigh = false;
 8000e92:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <function_errorCheck+0xd0>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	74da      	strb	r2, [r3, #19]
	}
	/*********************COCKING_HANDLE_END*************************/

	/************************HERCULE_BEGIN***************************/
	if(pandora.powerManagement.servoCurrent > AMPER_5)
 8000e98:	4b26      	ldr	r3, [pc, #152]	; (8000f34 <function_errorCheck+0xd0>)
 8000e9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	d903      	bls.n	8000eaa <function_errorCheck+0x46>
	{
		pandora.error.herculeCurrentHigh = true;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <function_errorCheck+0xd0>)
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	755a      	strb	r2, [r3, #21]
 8000ea8:	e002      	b.n	8000eb0 <function_errorCheck+0x4c>
	}
	else
	{
		pandora.error.herculeCurrentHigh = false;
 8000eaa:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <function_errorCheck+0xd0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	755a      	strb	r2, [r3, #21]
	}
	/************************HERCULE_END*****************************/

	/**************************KKU_BEGIN*****************************/
	if(pandora.powerManagement.KKUCurrent > AMPER_5)
 8000eb0:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <function_errorCheck+0xd0>)
 8000eb2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8000eb6:	2b05      	cmp	r3, #5
 8000eb8:	d903      	bls.n	8000ec2 <function_errorCheck+0x5e>
	{
		pandora.error.kkuCurrentHigh = true;
 8000eba:	4b1e      	ldr	r3, [pc, #120]	; (8000f34 <function_errorCheck+0xd0>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	765a      	strb	r2, [r3, #25]
 8000ec0:	e002      	b.n	8000ec8 <function_errorCheck+0x64>
	}
	else
	{
		pandora.error.kkuCurrentHigh = false;
 8000ec2:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <function_errorCheck+0xd0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	765a      	strb	r2, [r3, #25]
	}
	/**************************KKU_END*******************************/

	/**************************AKB_BEGIN*****************************/
	if(pandora.powerManagement.AKBCurrent > AMPER_5)
 8000ec8:	4b1a      	ldr	r3, [pc, #104]	; (8000f34 <function_errorCheck+0xd0>)
 8000eca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ece:	2b05      	cmp	r3, #5
 8000ed0:	d903      	bls.n	8000eda <function_errorCheck+0x76>
	{
		pandora.error.akbCurrentHigh = true;
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <function_errorCheck+0xd0>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	75da      	strb	r2, [r3, #23]
 8000ed8:	e002      	b.n	8000ee0 <function_errorCheck+0x7c>
	}
	else
	{
		pandora.error.akbCurrentHigh = false;
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <function_errorCheck+0xd0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	75da      	strb	r2, [r3, #23]
	}
	/**************************AKB_END*******************************/

	/**************************GDB_BEGIN*****************************/
	if(pandora.powerManagement.GDBCurrent > AMPER_5)
 8000ee0:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <function_errorCheck+0xd0>)
 8000ee2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000ee6:	2b05      	cmp	r3, #5
 8000ee8:	d903      	bls.n	8000ef2 <function_errorCheck+0x8e>
	{
		pandora.error.gdbCurrentHigh = true;
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <function_errorCheck+0xd0>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	775a      	strb	r2, [r3, #29]
 8000ef0:	e002      	b.n	8000ef8 <function_errorCheck+0x94>
	}
	else
	{
		pandora.error.gdbCurrentHigh = false;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	; (8000f34 <function_errorCheck+0xd0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	775a      	strb	r2, [r3, #29]
	}
	/**************************GDB_END*******************************/

	/**************************EOS_BEGIN*****************************/
	if(pandora.powerManagement.EOSCurrent > AMPER_5)
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <function_errorCheck+0xd0>)
 8000efa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8000efe:	2b05      	cmp	r3, #5
 8000f00:	d903      	bls.n	8000f0a <function_errorCheck+0xa6>
	{
		pandora.error.eosCurrentHigh = true;
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <function_errorCheck+0xd0>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	76da      	strb	r2, [r3, #27]
 8000f08:	e002      	b.n	8000f10 <function_errorCheck+0xac>
	}
	else
	{
		pandora.error.eosCurrentHigh = false;
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <function_errorCheck+0xd0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	76da      	strb	r2, [r3, #27]
	}
	/**************************EOS_END*******************************/

	/************************BATTERY_BEGIN***************************/
	if(pandora.powerManagement.batteryVoltage < VOLTAGE_22)
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <function_errorCheck+0xd0>)
 8000f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8000f16:	2b15      	cmp	r3, #21
 8000f18:	d803      	bhi.n	8000f22 <function_errorCheck+0xbe>
	{
		pandora.error.gdbVoltageLow = true;
 8000f1a:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <function_errorCheck+0xd0>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	779a      	strb	r2, [r3, #30]
	else
	{
		pandora.error.gdbVoltageLow = false;
	}
	/************************BATTERY_END***************************/
}
 8000f20:	e002      	b.n	8000f28 <function_errorCheck+0xc4>
		pandora.error.gdbVoltageLow = false;
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <function_errorCheck+0xd0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	779a      	strb	r2, [r3, #30]
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	24000570 	.word	0x24000570

08000f38 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <MX_ETH_Init+0x80>)
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <MX_ETH_Init+0x84>)
 8000f40:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f42:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_ETH_Init+0x88>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	; (8000fc0 <MX_ETH_Init+0x88>)
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_ETH_Init+0x88>)
 8000f50:	22e1      	movs	r2, #225	; 0xe1
 8000f52:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <MX_ETH_Init+0x88>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f5a:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_ETH_Init+0x88>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <MX_ETH_Init+0x88>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_ETH_Init+0x80>)
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MX_ETH_Init+0x88>)
 8000f6a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <MX_ETH_Init+0x80>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <MX_ETH_Init+0x80>)
 8000f74:	4a13      	ldr	r2, [pc, #76]	; (8000fc4 <MX_ETH_Init+0x8c>)
 8000f76:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <MX_ETH_Init+0x80>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <MX_ETH_Init+0x90>)
 8000f7c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <MX_ETH_Init+0x80>)
 8000f80:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000f84:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <MX_ETH_Init+0x80>)
 8000f88:	f005 faba 	bl	8006500 <HAL_ETH_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000f92:	f000 fecf 	bl	8001d34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f96:	2238      	movs	r2, #56	; 0x38
 8000f98:	2100      	movs	r1, #0
 8000f9a:	480c      	ldr	r0, [pc, #48]	; (8000fcc <MX_ETH_Init+0x94>)
 8000f9c:	f00b ff1c 	bl	800cdd8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000fa0:	4b0a      	ldr	r3, [pc, #40]	; (8000fcc <MX_ETH_Init+0x94>)
 8000fa2:	2221      	movs	r2, #33	; 0x21
 8000fa4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000fa6:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_ETH_Init+0x94>)
 8000fa8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fac:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000fae:	4b07      	ldr	r3, [pc, #28]	; (8000fcc <MX_ETH_Init+0x94>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	240003c4 	.word	0x240003c4
 8000fbc:	40028000 	.word	0x40028000
 8000fc0:	24000474 	.word	0x24000474
 8000fc4:	24000074 	.word	0x24000074
 8000fc8:	24000014 	.word	0x24000014
 8000fcc:	2400038c 	.word	0x2400038c

08000fd0 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08e      	sub	sp, #56	; 0x38
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a49      	ldr	r2, [pc, #292]	; (8001114 <HAL_ETH_MspInit+0x144>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	f040 808b 	bne.w	800110a <HAL_ETH_MspInit+0x13a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ff4:	4b48      	ldr	r3, [pc, #288]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8000ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ffa:	4a47      	ldr	r2, [pc, #284]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8000ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001000:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001004:	4b44      	ldr	r3, [pc, #272]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001006:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800100a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800100e:	623b      	str	r3, [r7, #32]
 8001010:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001014:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001018:	4a3f      	ldr	r2, [pc, #252]	; (8001118 <HAL_ETH_MspInit+0x148>)
 800101a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001024:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001032:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001036:	4a38      	ldr	r2, [pc, #224]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001040:	4b35      	ldr	r3, [pc, #212]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001042:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	61bb      	str	r3, [r7, #24]
 800104c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800104e:	4b32      	ldr	r3, [pc, #200]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001054:	4a30      	ldr	r2, [pc, #192]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800105e:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <HAL_ETH_MspInit+0x148>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001072:	4a29      	ldr	r2, [pc, #164]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_ETH_MspInit+0x148>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_ETH_MspInit+0x148>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <HAL_ETH_MspInit+0x148>)
 8001092:	f043 0302 	orr.w	r3, r3, #2
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <HAL_ETH_MspInit+0x148>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a0:	f003 0302 	and.w	r3, r3, #2
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80010a8:	2332      	movs	r3, #50	; 0x32
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010b8:	230b      	movs	r3, #11
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c0:	4619      	mov	r1, r3
 80010c2:	4816      	ldr	r0, [pc, #88]	; (800111c <HAL_ETH_MspInit+0x14c>)
 80010c4:	f006 f9b4 	bl	8007430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80010c8:	2386      	movs	r3, #134	; 0x86
 80010ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010d8:	230b      	movs	r3, #11
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e0:	4619      	mov	r1, r3
 80010e2:	480f      	ldr	r0, [pc, #60]	; (8001120 <HAL_ETH_MspInit+0x150>)
 80010e4:	f006 f9a4 	bl	8007430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80010e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010fa:	230b      	movs	r3, #11
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	4807      	ldr	r0, [pc, #28]	; (8001124 <HAL_ETH_MspInit+0x154>)
 8001106:	f006 f993 	bl	8007430 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800110a:	bf00      	nop
 800110c:	3738      	adds	r7, #56	; 0x38
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40028000 	.word	0x40028000
 8001118:	58024400 	.word	0x58024400
 800111c:	58020800 	.word	0x58020800
 8001120:	58020000 	.word	0x58020000
 8001124:	58020400 	.word	0x58020400

08001128 <MX_FDCAN2_Init>:

FDCAN_HandleTypeDef hfdcan2;

/* FDCAN2 init function */
void MX_FDCAN2_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 800112c:	4b2e      	ldr	r3, [pc, #184]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 800112e:	4a2f      	ldr	r2, [pc, #188]	; (80011ec <MX_FDCAN2_Init+0xc4>)
 8001130:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001132:	4b2d      	ldr	r3, [pc, #180]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001138:	4b2b      	ldr	r3, [pc, #172]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800113e:	4b2a      	ldr	r3, [pc, #168]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001140:	2200      	movs	r2, #0
 8001142:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001144:	4b28      	ldr	r3, [pc, #160]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001146:	2200      	movs	r2, #0
 8001148:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 800114c:	2200      	movs	r2, #0
 800114e:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001152:	2210      	movs	r2, #16
 8001154:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8001156:	4b24      	ldr	r3, [pc, #144]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001158:	2201      	movs	r2, #1
 800115a:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 800115e:	2202      	movs	r2, #2
 8001160:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001164:	2202      	movs	r2, #2
 8001166:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8001168:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 800116a:	2201      	movs	r2, #1
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 800116e:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001170:	2201      	movs	r2, #1
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8001174:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001176:	2201      	movs	r2, #1
 8001178:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 800117c:	2201      	movs	r2, #1
 800117e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001182:	2200      	movs	r2, #0
 8001184:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001188:	2200      	movs	r2, #0
 800118a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 800118e:	2200      	movs	r2, #0
 8001190:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 8001194:	2200      	movs	r2, #0
 8001196:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001198:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 800119a:	2204      	movs	r2, #4
 800119c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800119e:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 80011a6:	2204      	movs	r2, #4
 80011a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 80011b2:	2204      	movs	r2, #4
 80011b4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 80011be:	2200      	movs	r2, #0
 80011c0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 80011d0:	2204      	movs	r2, #4
 80011d2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_FDCAN2_Init+0xc0>)
 80011d6:	f005 fdc7 	bl	8006d68 <HAL_FDCAN_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 80011e0:	f000 fda8 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2400047c 	.word	0x2400047c
 80011ec:	4000a400 	.word	0x4000a400

080011f0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b0ba      	sub	sp, #232	; 0xe8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	22c0      	movs	r2, #192	; 0xc0
 800120e:	2100      	movs	r1, #0
 8001210:	4618      	mov	r0, r3
 8001212:	f00b fde1 	bl	800cdd8 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <HAL_FDCAN_MspInit+0xc8>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d146      	bne.n	80012ae <HAL_FDCAN_MspInit+0xbe>

  /* USER CODE END FDCAN2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001220:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800122c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001234:	f107 0310 	add.w	r3, r7, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f007 fc17 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001244:	f000 fd76 	bl	8001d34 <Error_Handler>
    }

    /* FDCAN2 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <HAL_FDCAN_MspInit+0xcc>)
 800124a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800124e:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <HAL_FDCAN_MspInit+0xcc>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001254:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_FDCAN_MspInit+0xcc>)
 800125a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800125e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b15      	ldr	r3, [pc, #84]	; (80012bc <HAL_FDCAN_MspInit+0xcc>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	4a13      	ldr	r2, [pc, #76]	; (80012bc <HAL_FDCAN_MspInit+0xcc>)
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001276:	4b11      	ldr	r3, [pc, #68]	; (80012bc <HAL_FDCAN_MspInit+0xcc>)
 8001278:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127c:	f003 0302 	and.w	r3, r3, #2
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB5     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001284:	2360      	movs	r3, #96	; 0x60
 8001286:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800129c:	2309      	movs	r3, #9
 800129e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <HAL_FDCAN_MspInit+0xd0>)
 80012aa:	f006 f8c1 	bl	8007430 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }
}
 80012ae:	bf00      	nop
 80012b0:	37e8      	adds	r7, #232	; 0xe8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	4000a400 	.word	0x4000a400
 80012bc:	58024400 	.word	0x58024400
 80012c0:	58020400 	.word	0x58020400

080012c4 <MX_GPIO_Init>:
/** Configure pins
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08e      	sub	sp, #56	; 0x38
 80012c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012da:	4b6b      	ldr	r3, [pc, #428]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e0:	4a69      	ldr	r2, [pc, #420]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80012e2:	f043 0320 	orr.w	r3, r3, #32
 80012e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ea:	4b67      	ldr	r3, [pc, #412]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80012ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	623b      	str	r3, [r7, #32]
 80012f6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f8:	4b63      	ldr	r3, [pc, #396]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	4a62      	ldr	r2, [pc, #392]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001308:	4b5f      	ldr	r3, [pc, #380]	; (8001488 <MX_GPIO_Init+0x1c4>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	4b5c      	ldr	r3, [pc, #368]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001318:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800131c:	4a5a      	ldr	r2, [pc, #360]	; (8001488 <MX_GPIO_Init+0x1c4>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001326:	4b58      	ldr	r3, [pc, #352]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800132c:	f003 0304 	and.w	r3, r3, #4
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b54      	ldr	r3, [pc, #336]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001336:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800133a:	4a53      	ldr	r2, [pc, #332]	; (8001488 <MX_GPIO_Init+0x1c4>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001344:	4b50      	ldr	r3, [pc, #320]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001352:	4b4d      	ldr	r3, [pc, #308]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001354:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001358:	4a4b      	ldr	r2, [pc, #300]	; (8001488 <MX_GPIO_Init+0x1c4>)
 800135a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800135e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001362:	4b49      	ldr	r3, [pc, #292]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001370:	4b45      	ldr	r3, [pc, #276]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	4a44      	ldr	r2, [pc, #272]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001380:	4b41      	ldr	r3, [pc, #260]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	4b3e      	ldr	r3, [pc, #248]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001394:	4a3c      	ldr	r2, [pc, #240]	; (8001488 <MX_GPIO_Init+0x1c4>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139e:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80013a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ac:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b2:	4a35      	ldr	r2, [pc, #212]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013bc:	4b32      	ldr	r3, [pc, #200]	; (8001488 <MX_GPIO_Init+0x1c4>)
 80013be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	607b      	str	r3, [r7, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, COCKING_HANDLE_DRV_H_BACKWARD_Pin|COCKING_HANDLE_DRV_H_FORWARD_Pin|COCKING_HANDLE_POWER_Pin|SOLENOID_POWER_Pin
 80013ca:	2200      	movs	r2, #0
 80013cc:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 80013d0:	482e      	ldr	r0, [pc, #184]	; (800148c <MX_GPIO_Init+0x1c8>)
 80013d2:	f006 f9dd 	bl	8007790 <HAL_GPIO_WritePin>
                          |SOLENOID_DRV_2_Pin|SOLENOID_DRV_1_Pin|SOLENOID_DRV_H_REVERSE_Pin|SOLENOID_DRV_H_FORWARD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CASE_LED_GPIO_Port, CASE_LED_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013dc:	482c      	ldr	r0, [pc, #176]	; (8001490 <MX_GPIO_Init+0x1cc>)
 80013de:	f006 f9d7 	bl	8007790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, EOS_POWER_Pin|SERVO_POWER_Pin|AKB_POWER_Pin|KKU_POWER_Pin
 80013e2:	2200      	movs	r2, #0
 80013e4:	f64d 6121 	movw	r1, #56865	; 0xde21
 80013e8:	482a      	ldr	r0, [pc, #168]	; (8001494 <MX_GPIO_Init+0x1d0>)
 80013ea:	f006 f9d1 	bl	8007790 <HAL_GPIO_WritePin>
                          |BRAKE_DRV_12V_Pin|BRAKE_DRV_28V_Pin|EMERGENCY_STOP_RESET_Pin|SYSTEM_ON_OFFD5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = COCKING_HANDLE_DRV_H_BACKWARD_Pin|COCKING_HANDLE_DRV_H_FORWARD_Pin|COCKING_HANDLE_POWER_Pin|SOLENOID_POWER_Pin
 80013ee:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |SOLENOID_DRV_2_Pin|SOLENOID_DRV_1_Pin|SOLENOID_DRV_H_REVERSE_Pin|SOLENOID_DRV_H_FORWARD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	4821      	ldr	r0, [pc, #132]	; (800148c <MX_GPIO_Init+0x1c8>)
 8001408:	f006 f812 	bl	8007430 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CASE_LED_Pin;
 800140c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CASE_LED_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001422:	4619      	mov	r1, r3
 8001424:	481a      	ldr	r0, [pc, #104]	; (8001490 <MX_GPIO_Init+0x1cc>)
 8001426:	f006 f803 	bl	8007430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = EOS_POWER_Pin|SERVO_POWER_Pin|AKB_POWER_Pin|KKU_POWER_Pin
 800142a:	f64d 6321 	movw	r3, #56865	; 0xde21
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
                          |BRAKE_DRV_12V_Pin|BRAKE_DRV_28V_Pin|EMERGENCY_STOP_RESET_Pin|SYSTEM_ON_OFFD5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	4814      	ldr	r0, [pc, #80]	; (8001494 <MX_GPIO_Init+0x1d0>)
 8001444:	f005 fff4 	bl	8007430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = EMERGENCY_STOP_FEEDBACK_Pin|SYSTEM_ON_OFF_Pin|SWITCHES_FIRE_ORDER_Pin|SWITCHES_SAFETY_Pin
 8001448:	23de      	movs	r3, #222	; 0xde
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
                          |SWITCHES_COCKING_HANDLE_ORDER_Pin|SWITCHES_MOVEMENT_ALLOWED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001456:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145a:	4619      	mov	r1, r3
 800145c:	480d      	ldr	r0, [pc, #52]	; (8001494 <MX_GPIO_Init+0x1d0>)
 800145e:	f005 ffe7 	bl	8007430 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin */
  GPIO_InitStruct.Pin = SWITCHES_SMGA_Pin|SWITCHES_SYSTEM_ON_OFF_Pin|SWITCHES_CREW_1_Pin|SWITCHES_CREW_2_Pin
 8001462:	f44f 5378 	mov.w	r3, #15872	; 0x3e00
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
                          |SWITCHES_COCKING_HANDLE_HOME_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001468:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	4619      	mov	r1, r3
 8001478:	4804      	ldr	r0, [pc, #16]	; (800148c <MX_GPIO_Init+0x1c8>)
 800147a:	f005 ffd9 	bl	8007430 <HAL_GPIO_Init>

}
 800147e:	bf00      	nop
 8001480:	3738      	adds	r7, #56	; 0x38
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	58024400 	.word	0x58024400
 800148c:	58021800 	.word	0x58021800
 8001490:	58021000 	.word	0x58021000
 8001494:	58020c00 	.word	0x58020c00

08001498 <functionGunControlGetShotInterval>:

// global structer
extern pandoraStructer pandora;

static uint32_t functionGunControlGetShotInterval(uint16_t rpm)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	80fb      	strh	r3, [r7, #6]
    return 60000 / rpm;
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	f64e 2260 	movw	r2, #60000	; 0xea60
 80014a8:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <functionGunControlInit>:

void functionGunControlInit(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	SOLENOID(SOLENOID_DRV_1,OFF);
 80014bc:	2200      	movs	r2, #0
 80014be:	2140      	movs	r1, #64	; 0x40
 80014c0:	481d      	ldr	r0, [pc, #116]	; (8001538 <functionGunControlInit+0x80>)
 80014c2:	f006 f965 	bl	8007790 <HAL_GPIO_WritePin>

	pandora.configurations.solenoidFastRpm 		= pandora.eeprom.fastRpm;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <functionGunControlInit+0x84>)
 80014c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	4b1b      	ldr	r3, [pc, #108]	; (800153c <functionGunControlInit+0x84>)
 80014d0:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	pandora.configurations.solenoidSlowRpm 		= pandora.eeprom.slowRpm;
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <functionGunControlInit+0x84>)
 80014d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014da:	b29a      	uxth	r2, r3
 80014dc:	4b17      	ldr	r3, [pc, #92]	; (800153c <functionGunControlInit+0x84>)
 80014de:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	pandora.configurations.solenoidTime 		= pandora.eeprom.solenoidTime;
 80014e2:	4b16      	ldr	r3, [pc, #88]	; (800153c <functionGunControlInit+0x84>)
 80014e4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <functionGunControlInit+0x84>)
 80014ea:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	pandora.configurations.solenoidActiveTime  	= pandora.eeprom.solenoidActiveTime;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <functionGunControlInit+0x84>)
 80014f0:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <functionGunControlInit+0x84>)
 80014f6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	pandora.configurations.solenoidPassiveTime 	= pandora.eeprom.solenoidPassiveTime;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <functionGunControlInit+0x84>)
 80014fc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <functionGunControlInit+0x84>)
 8001502:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	pandora.configurations.solenoidFireMode 	= pandora.eeprom.fireMode;
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <functionGunControlInit+0x84>)
 8001508:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <functionGunControlInit+0x84>)
 800150e:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e

	pandora.states.solenoidActive 		= false;
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <functionGunControlInit+0x84>)
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	pandora.states.triggerHeld 			= false;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <functionGunControlInit+0x84>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	pandora.states.changeTime 			= 0;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <functionGunControlInit+0x84>)
 8001524:	2200      	movs	r2, #0
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
	pandora.states.burstCounter 		= 0;
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <functionGunControlInit+0x84>)
 800152a:	2200      	movs	r2, #0
 800152c:	861a      	strh	r2, [r3, #48]	; 0x30
	pandora.states.ammoCounter			= 0;
 800152e:	4b03      	ldr	r3, [pc, #12]	; (800153c <functionGunControlInit+0x84>)
 8001530:	2200      	movs	r2, #0
 8001532:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}
 8001538:	58021800 	.word	0x58021800
 800153c:	24000570 	.word	0x24000570

08001540 <functionGunControlSetMode>:

void functionGunControlSetMode(FireMode_t mode)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	71fb      	strb	r3, [r7, #7]
    pandora.configurations.solenoidFireMode = mode;
 800154a:	4a05      	ldr	r2, [pc, #20]	; (8001560 <functionGunControlSetMode+0x20>)
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	24000570 	.word	0x24000570

08001564 <functionGunControlTriggerPressed>:

void functionGunControlTriggerPressed(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
    pandora.states.triggerHeld = true;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <functionGunControlTriggerPressed+0x64>)
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    pandora.states.burstCounter = 0;
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <functionGunControlTriggerPressed+0x64>)
 8001572:	2200      	movs	r2, #0
 8001574:	861a      	strh	r2, [r3, #48]	; 0x30
    pandora.states.changeTime = HAL_GetTick();
 8001576:	f001 fa95 	bl	8002aa4 <HAL_GetTick>
 800157a:	4603      	mov	r3, r0
 800157c:	4a12      	ldr	r2, [pc, #72]	; (80015c8 <functionGunControlTriggerPressed+0x64>)
 800157e:	62d3      	str	r3, [r2, #44]	; 0x2c

    if (pandora.configurations.solenoidFireMode == FIRE_MODE_SINGLE)
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <functionGunControlTriggerPressed+0x64>)
 8001582:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001586:	2b00      	cmp	r3, #0
 8001588:	d109      	bne.n	800159e <functionGunControlTriggerPressed+0x3a>
    {
        SOLENOID(SOLENOID_DRV_1,ON);
 800158a:	2201      	movs	r2, #1
 800158c:	2140      	movs	r1, #64	; 0x40
 800158e:	480f      	ldr	r0, [pc, #60]	; (80015cc <functionGunControlTriggerPressed+0x68>)
 8001590:	f006 f8fe 	bl	8007790 <HAL_GPIO_WritePin>
        pandora.states.solenoidActive = true;
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <functionGunControlTriggerPressed+0x64>)
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    else if (pandora.configurations.solenoidFireMode == FIRE_MODE_FAST_BURST_3 || pandora.configurations.solenoidFireMode == FIRE_MODE_FAST_BURST_5)
    {
        pandora.states.solenoidActive = true;
        SOLENOID(SOLENOID_DRV_1,ON);
    }
}
 800159c:	e012      	b.n	80015c4 <functionGunControlTriggerPressed+0x60>
    else if (pandora.configurations.solenoidFireMode == FIRE_MODE_FAST_BURST_3 || pandora.configurations.solenoidFireMode == FIRE_MODE_FAST_BURST_5)
 800159e:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <functionGunControlTriggerPressed+0x64>)
 80015a0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d004      	beq.n	80015b2 <functionGunControlTriggerPressed+0x4e>
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <functionGunControlTriggerPressed+0x64>)
 80015aa:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	d108      	bne.n	80015c4 <functionGunControlTriggerPressed+0x60>
        pandora.states.solenoidActive = true;
 80015b2:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <functionGunControlTriggerPressed+0x64>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        SOLENOID(SOLENOID_DRV_1,ON);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2140      	movs	r1, #64	; 0x40
 80015be:	4803      	ldr	r0, [pc, #12]	; (80015cc <functionGunControlTriggerPressed+0x68>)
 80015c0:	f006 f8e6 	bl	8007790 <HAL_GPIO_WritePin>
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	24000570 	.word	0x24000570
 80015cc:	58021800 	.word	0x58021800

080015d0 <functionGunControlTriggerReleased>:

void functionGunControlTriggerReleased(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
    pandora.states.triggerHeld = false;
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <functionGunControlTriggerReleased+0x28>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    pandora.states.solenoidActive = false;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <functionGunControlTriggerReleased+0x28>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    pandora.states.burstCounter = 0;
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <functionGunControlTriggerReleased+0x28>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	861a      	strh	r2, [r3, #48]	; 0x30
    SOLENOID(SOLENOID_DRV_1,OFF);
 80015ea:	2200      	movs	r2, #0
 80015ec:	2140      	movs	r1, #64	; 0x40
 80015ee:	4803      	ldr	r0, [pc, #12]	; (80015fc <functionGunControlTriggerReleased+0x2c>)
 80015f0:	f006 f8ce 	bl	8007790 <HAL_GPIO_WritePin>
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	24000570 	.word	0x24000570
 80015fc:	58021800 	.word	0x58021800

08001600 <functionGunControlProcess>:

void functionGunControlProcess(uint32_t now)
{
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
    if (!pandora.states.triggerHeld && pandora.configurations.solenoidFireMode != FIRE_MODE_SINGLE) return;
 8001608:	4baa      	ldr	r3, [pc, #680]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800160a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800160e:	f083 0301 	eor.w	r3, r3, #1
 8001612:	b2db      	uxtb	r3, r3
 8001614:	2b00      	cmp	r3, #0
 8001616:	d005      	beq.n	8001624 <functionGunControlProcess+0x24>
 8001618:	4ba6      	ldr	r3, [pc, #664]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800161a:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800161e:	2b00      	cmp	r3, #0
 8001620:	f040 8142 	bne.w	80018a8 <functionGunControlProcess+0x2a8>

    switch (pandora.configurations.solenoidFireMode)
 8001624:	4ba3      	ldr	r3, [pc, #652]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001626:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800162a:	2b06      	cmp	r3, #6
 800162c:	f200 813e 	bhi.w	80018ac <functionGunControlProcess+0x2ac>
 8001630:	a201      	add	r2, pc, #4	; (adr r2, 8001638 <functionGunControlProcess+0x38>)
 8001632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001636:	bf00      	nop
 8001638:	08001655 	.word	0x08001655
 800163c:	08001693 	.word	0x08001693
 8001640:	08001713 	.word	0x08001713
 8001644:	08001713 	.word	0x08001713
 8001648:	08001777 	.word	0x08001777
 800164c:	080017fb 	.word	0x080017fb
 8001650:	080017fb 	.word	0x080017fb
    {
        case FIRE_MODE_SINGLE:
            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.configurations.solenoidTime)
 8001654:	4b97      	ldr	r3, [pc, #604]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001656:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8128 	beq.w	80018b0 <functionGunControlProcess+0x2b0>
 8001660:	4b94      	ldr	r3, [pc, #592]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	4a92      	ldr	r2, [pc, #584]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800166a:	f892 208f 	ldrb.w	r2, [r2, #143]	; 0x8f
 800166e:	4293      	cmp	r3, r2
 8001670:	f0c0 811e 	bcc.w	80018b0 <functionGunControlProcess+0x2b0>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001674:	2200      	movs	r2, #0
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	488f      	ldr	r0, [pc, #572]	; (80018b8 <functionGunControlProcess+0x2b8>)
 800167a:	f006 f889 	bl	8007790 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 800167e:	4b8d      	ldr	r3, [pc, #564]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                pandora.states.ammoCounter++;
 8001686:	4b8b      	ldr	r3, [pc, #556]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800168a:	3301      	adds	r3, #1
 800168c:	4a89      	ldr	r2, [pc, #548]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800168e:	6353      	str	r3, [r2, #52]	; 0x34
            }
            break;
 8001690:	e10e      	b.n	80018b0 <functionGunControlProcess+0x2b0>

        case FIRE_MODE_FAST_AUTO:
            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.configurations.solenoidActiveTime)
 8001692:	4b88      	ldr	r3, [pc, #544]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001694:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01a      	beq.n	80016d2 <functionGunControlProcess+0xd2>
 800169c:	4b85      	ldr	r3, [pc, #532]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800169e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	4a83      	ldr	r2, [pc, #524]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80016a6:	f892 2090 	ldrb.w	r2, [r2, #144]	; 0x90
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d311      	bcc.n	80016d2 <functionGunControlProcess+0xd2>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2140      	movs	r1, #64	; 0x40
 80016b2:	4881      	ldr	r0, [pc, #516]	; (80018b8 <functionGunControlProcess+0x2b8>)
 80016b4:	f006 f86c 	bl	8007790 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 80016b8:	4b7e      	ldr	r3, [pc, #504]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                pandora.states.ammoCounter++;
 80016c0:	4b7c      	ldr	r3, [pc, #496]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80016c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a7b      	ldr	r2, [pc, #492]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80016c8:	6353      	str	r3, [r2, #52]	; 0x34
                pandora.states.changeTime = now;
 80016ca:	4a7a      	ldr	r2, [pc, #488]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	62d3      	str	r3, [r2, #44]	; 0x2c
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
                pandora.states.solenoidActive = true;
                pandora.states.changeTime = now;
            }
            break;
 80016d0:	e0f4      	b.n	80018bc <functionGunControlProcess+0x2bc>
            else if (!pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.configurations.solenoidPassiveTime)
 80016d2:	4b78      	ldr	r3, [pc, #480]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80016d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80016d8:	f083 0301 	eor.w	r3, r3, #1
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80ec 	beq.w	80018bc <functionGunControlProcess+0x2bc>
 80016e4:	4b73      	ldr	r3, [pc, #460]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	4a71      	ldr	r2, [pc, #452]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80016ee:	f892 2091 	ldrb.w	r2, [r2, #145]	; 0x91
 80016f2:	4293      	cmp	r3, r2
 80016f4:	f0c0 80e2 	bcc.w	80018bc <functionGunControlProcess+0x2bc>
            	SOLENOID(SOLENOID_DRV_1,ON);
 80016f8:	2201      	movs	r2, #1
 80016fa:	2140      	movs	r1, #64	; 0x40
 80016fc:	486e      	ldr	r0, [pc, #440]	; (80018b8 <functionGunControlProcess+0x2b8>)
 80016fe:	f006 f847 	bl	8007790 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 8001702:	4b6c      	ldr	r3, [pc, #432]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                pandora.states.changeTime = now;
 800170a:	4a6a      	ldr	r2, [pc, #424]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	62d3      	str	r3, [r2, #44]	; 0x2c
            break;
 8001710:	e0d4      	b.n	80018bc <functionGunControlProcess+0x2bc>

        case FIRE_MODE_FAST_BURST_3:
        case FIRE_MODE_FAST_BURST_5:
        {
            uint8_t target = (pandora.configurations.solenoidFireMode == FIRE_MODE_FAST_BURST_3) ? 3 : 5;
 8001712:	4b68      	ldr	r3, [pc, #416]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001714:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001718:	2b02      	cmp	r3, #2
 800171a:	d101      	bne.n	8001720 <functionGunControlProcess+0x120>
 800171c:	2303      	movs	r3, #3
 800171e:	e000      	b.n	8001722 <functionGunControlProcess+0x122>
 8001720:	2305      	movs	r3, #5
 8001722:	73bb      	strb	r3, [r7, #14]
            uint32_t burst_duration = functionGunControlGetShotInterval(pandora.configurations.solenoidFastRpm) * target;
 8001724:	4b63      	ldr	r3, [pc, #396]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001726:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff feb4 	bl	8001498 <functionGunControlGetShotInterval>
 8001730:	4602      	mov	r2, r0
 8001732:	7bbb      	ldrb	r3, [r7, #14]
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	60bb      	str	r3, [r7, #8]

            if (pandora.states.solenoidActive && now - pandora.states.changeTime >= burst_duration)
 800173a:	4b5e      	ldr	r3, [pc, #376]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800173c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80bd 	beq.w	80018c0 <functionGunControlProcess+0x2c0>
 8001746:	4b5b      	ldr	r3, [pc, #364]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	f200 80b5 	bhi.w	80018c0 <functionGunControlProcess+0x2c0>
            {
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001756:	2200      	movs	r2, #0
 8001758:	2140      	movs	r1, #64	; 0x40
 800175a:	4857      	ldr	r0, [pc, #348]	; (80018b8 <functionGunControlProcess+0x2b8>)
 800175c:	f006 f818 	bl	8007790 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001760:	4b54      	ldr	r3, [pc, #336]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                pandora.states.ammoCounter += target;
 8001768:	4b52      	ldr	r3, [pc, #328]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800176a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800176c:	7bbb      	ldrb	r3, [r7, #14]
 800176e:	4413      	add	r3, r2
 8001770:	4a50      	ldr	r2, [pc, #320]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001772:	6353      	str	r3, [r2, #52]	; 0x34
            }
            break;
 8001774:	e0a4      	b.n	80018c0 <functionGunControlProcess+0x2c0>
        }

        case FIRE_MODE_SLOW_AUTO:
            if (!pandora.states.solenoidActive && now - pandora.states.changeTime >= functionGunControlGetShotInterval(pandora.configurations.solenoidSlowRpm))
 8001776:	4b4f      	ldr	r3, [pc, #316]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800177c:	f083 0301 	eor.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d019      	beq.n	80017ba <functionGunControlProcess+0x1ba>
 8001786:	4b4b      	ldr	r3, [pc, #300]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	687a      	ldr	r2, [r7, #4]
 800178c:	1ad4      	subs	r4, r2, r3
 800178e:	4b49      	ldr	r3, [pc, #292]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001790:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fe7f 	bl	8001498 <functionGunControlGetShotInterval>
 800179a:	4603      	mov	r3, r0
 800179c:	429c      	cmp	r4, r3
 800179e:	d30c      	bcc.n	80017ba <functionGunControlProcess+0x1ba>
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
 80017a0:	2201      	movs	r2, #1
 80017a2:	2140      	movs	r1, #64	; 0x40
 80017a4:	4844      	ldr	r0, [pc, #272]	; (80018b8 <functionGunControlProcess+0x2b8>)
 80017a6:	f005 fff3 	bl	8007790 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 80017aa:	4b42      	ldr	r3, [pc, #264]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                pandora.states.changeTime = now;
 80017b2:	4a40      	ldr	r2, [pc, #256]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	62d3      	str	r3, [r2, #44]	; 0x2c
            	SOLENOID(SOLENOID_DRV_1,OFF);
                pandora.states.solenoidActive = false;
                pandora.states.ammoCounter++;
                pandora.states.changeTime = now;
            }
            break;
 80017b8:	e084      	b.n	80018c4 <functionGunControlProcess+0x2c4>
            else if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.configurations.solenoidTime)
 80017ba:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80017bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d07f      	beq.n	80018c4 <functionGunControlProcess+0x2c4>
 80017c4:	4b3b      	ldr	r3, [pc, #236]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	4a39      	ldr	r2, [pc, #228]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80017ce:	f892 208f 	ldrb.w	r2, [r2, #143]	; 0x8f
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d376      	bcc.n	80018c4 <functionGunControlProcess+0x2c4>
            	SOLENOID(SOLENOID_DRV_1,OFF);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2140      	movs	r1, #64	; 0x40
 80017da:	4837      	ldr	r0, [pc, #220]	; (80018b8 <functionGunControlProcess+0x2b8>)
 80017dc:	f005 ffd8 	bl	8007790 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 80017e0:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                pandora.states.ammoCounter++;
 80017e8:	4b32      	ldr	r3, [pc, #200]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80017ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a31      	ldr	r2, [pc, #196]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80017f0:	6353      	str	r3, [r2, #52]	; 0x34
                pandora.states.changeTime = now;
 80017f2:	4a30      	ldr	r2, [pc, #192]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	62d3      	str	r3, [r2, #44]	; 0x2c
            break;
 80017f8:	e064      	b.n	80018c4 <functionGunControlProcess+0x2c4>

        case FIRE_MODE_SLOW_BURST_3:
        case FIRE_MODE_SLOW_BURST_5:
        {
            uint8_t target = (pandora.configurations.solenoidFireMode == FIRE_MODE_SLOW_BURST_3) ? 3 : 5;
 80017fa:	4b2e      	ldr	r3, [pc, #184]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80017fc:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001800:	2b05      	cmp	r3, #5
 8001802:	d101      	bne.n	8001808 <functionGunControlProcess+0x208>
 8001804:	2303      	movs	r3, #3
 8001806:	e000      	b.n	800180a <functionGunControlProcess+0x20a>
 8001808:	2305      	movs	r3, #5
 800180a:	73fb      	strb	r3, [r7, #15]
            if (pandora.states.burstCounter >= target) break;
 800180c:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800180e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	b29b      	uxth	r3, r3
 8001814:	429a      	cmp	r2, r3
 8001816:	d257      	bcs.n	80018c8 <functionGunControlProcess+0x2c8>

            if (!pandora.states.solenoidActive && now - pandora.states.changeTime >= functionGunControlGetShotInterval(pandora.configurations.solenoidSlowRpm))
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800181a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d019      	beq.n	800185c <functionGunControlProcess+0x25c>
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	1ad4      	subs	r4, r2, r3
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001832:	f8b3 308c 	ldrh.w	r3, [r3, #140]	; 0x8c
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fe2e 	bl	8001498 <functionGunControlGetShotInterval>
 800183c:	4603      	mov	r3, r0
 800183e:	429c      	cmp	r4, r3
 8001840:	d30c      	bcc.n	800185c <functionGunControlProcess+0x25c>
            {
            	SOLENOID(SOLENOID_DRV_1,ON);
 8001842:	2201      	movs	r2, #1
 8001844:	2140      	movs	r1, #64	; 0x40
 8001846:	481c      	ldr	r0, [pc, #112]	; (80018b8 <functionGunControlProcess+0x2b8>)
 8001848:	f005 ffa2 	bl	8007790 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = true;
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800184e:	2201      	movs	r2, #1
 8001850:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                pandora.states.changeTime = now;
 8001854:	4a17      	ldr	r2, [pc, #92]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	62d3      	str	r3, [r2, #44]	; 0x2c
                pandora.states.solenoidActive = false;
                pandora.states.ammoCounter++;
                pandora.states.burstCounter++;
                pandora.states.changeTime = now;
            }
            break;
 800185a:	e037      	b.n	80018cc <functionGunControlProcess+0x2cc>
            else if (pandora.states.solenoidActive && now - pandora.states.changeTime >= pandora.configurations.solenoidTime)
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800185e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001862:	2b00      	cmp	r3, #0
 8001864:	d032      	beq.n	80018cc <functionGunControlProcess+0x2cc>
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	4a11      	ldr	r2, [pc, #68]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001870:	f892 208f 	ldrb.w	r2, [r2, #143]	; 0x8f
 8001874:	4293      	cmp	r3, r2
 8001876:	d329      	bcc.n	80018cc <functionGunControlProcess+0x2cc>
            	SOLENOID(SOLENOID_DRV_1,OFF);
 8001878:	2200      	movs	r2, #0
 800187a:	2140      	movs	r1, #64	; 0x40
 800187c:	480e      	ldr	r0, [pc, #56]	; (80018b8 <functionGunControlProcess+0x2b8>)
 800187e:	f005 ff87 	bl	8007790 <HAL_GPIO_WritePin>
                pandora.states.solenoidActive = false;
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001884:	2200      	movs	r2, #0
 8001886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                pandora.states.ammoCounter++;
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188e:	3301      	adds	r3, #1
 8001890:	4a08      	ldr	r2, [pc, #32]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001892:	6353      	str	r3, [r2, #52]	; 0x34
                pandora.states.burstCounter++;
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <functionGunControlProcess+0x2b4>)
 8001896:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001898:	3301      	adds	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <functionGunControlProcess+0x2b4>)
 800189e:	861a      	strh	r2, [r3, #48]	; 0x30
                pandora.states.changeTime = now;
 80018a0:	4a04      	ldr	r2, [pc, #16]	; (80018b4 <functionGunControlProcess+0x2b4>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	62d3      	str	r3, [r2, #44]	; 0x2c
            break;
 80018a6:	e011      	b.n	80018cc <functionGunControlProcess+0x2cc>
    if (!pandora.states.triggerHeld && pandora.configurations.solenoidFireMode != FIRE_MODE_SINGLE) return;
 80018a8:	bf00      	nop
 80018aa:	e010      	b.n	80018ce <functionGunControlProcess+0x2ce>
        }

        default:
            break;
 80018ac:	bf00      	nop
 80018ae:	e00e      	b.n	80018ce <functionGunControlProcess+0x2ce>
            break;
 80018b0:	bf00      	nop
 80018b2:	e00c      	b.n	80018ce <functionGunControlProcess+0x2ce>
 80018b4:	24000570 	.word	0x24000570
 80018b8:	58021800 	.word	0x58021800
            break;
 80018bc:	bf00      	nop
 80018be:	e006      	b.n	80018ce <functionGunControlProcess+0x2ce>
            break;
 80018c0:	bf00      	nop
 80018c2:	e004      	b.n	80018ce <functionGunControlProcess+0x2ce>
            break;
 80018c4:	bf00      	nop
 80018c6:	e002      	b.n	80018ce <functionGunControlProcess+0x2ce>
            if (pandora.states.burstCounter >= target) break;
 80018c8:	bf00      	nop
 80018ca:	e000      	b.n	80018ce <functionGunControlProcess+0x2ce>
            break;
 80018cc:	bf00      	nop
    }
}
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}

080018d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <MX_I2C1_Init+0x74>)
 80018da:	4a1c      	ldr	r2, [pc, #112]	; (800194c <MX_I2C1_Init+0x78>)
 80018dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <MX_I2C1_Init+0x74>)
 80018e0:	4a1b      	ldr	r2, [pc, #108]	; (8001950 <MX_I2C1_Init+0x7c>)
 80018e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <MX_I2C1_Init+0x74>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <MX_I2C1_Init+0x74>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f0:	4b15      	ldr	r3, [pc, #84]	; (8001948 <MX_I2C1_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <MX_I2C1_Init+0x74>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C1_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C1_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C1_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800190e:	480e      	ldr	r0, [pc, #56]	; (8001948 <MX_I2C1_Init+0x74>)
 8001910:	f005 ff58 	bl	80077c4 <HAL_I2C_Init>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800191a:	f000 fa0b 	bl	8001d34 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800191e:	2100      	movs	r1, #0
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <MX_I2C1_Init+0x74>)
 8001922:	f005 ffeb 	bl	80078fc <HAL_I2CEx_ConfigAnalogFilter>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800192c:	f000 fa02 	bl	8001d34 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001930:	2100      	movs	r1, #0
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_I2C1_Init+0x74>)
 8001934:	f006 f82d 	bl	8007992 <HAL_I2CEx_ConfigDigitalFilter>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800193e:	f000 f9f9 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	2400051c 	.word	0x2400051c
 800194c:	40005400 	.word	0x40005400
 8001950:	307075b1 	.word	0x307075b1

08001954 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b0ba      	sub	sp, #232	; 0xe8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	22c0      	movs	r2, #192	; 0xc0
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f00b fa2f 	bl	800cdd8 <memset>
  if(i2cHandle->Instance==I2C1)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <HAL_I2C_MspInit+0xc8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d146      	bne.n	8001a12 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001984:	f04f 0208 	mov.w	r2, #8
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001996:	f107 0310 	add.w	r3, r7, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f007 f866 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80019a6:	f000 f9c5 	bl	8001d34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_I2C_MspInit+0xcc>)
 80019ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b0:	4a1b      	ldr	r2, [pc, #108]	; (8001a20 <HAL_I2C_MspInit+0xcc>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_I2C_MspInit+0xcc>)
 80019bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = RTC_I2C_SDA_Pin|RTC_I2C_SCL_Pin;
 80019c8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d0:	2312      	movs	r3, #18
 80019d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e2:	2304      	movs	r3, #4
 80019e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019ec:	4619      	mov	r1, r3
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <HAL_I2C_MspInit+0xd0>)
 80019f0:	f005 fd1e 	bl	8007430 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <HAL_I2C_MspInit+0xcc>)
 80019f6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019fa:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <HAL_I2C_MspInit+0xcc>)
 80019fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_I2C_MspInit+0xcc>)
 8001a06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001a12:	bf00      	nop
 8001a14:	37e8      	adds	r7, #232	; 0xe8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40005400 	.word	0x40005400
 8001a20:	58024400 	.word	0x58024400
 8001a24:	58020400 	.word	0x58020400

08001a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a2c:	f000 ffb4 	bl	8002998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a30:	f000 f8a2 	bl	8001b78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a34:	f000 f94e 	bl	8001cd4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a38:	f7ff fc44 	bl	80012c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a3c:	f7ff f9ea 	bl	8000e14 <MX_DMA_Init>
  MX_BDMA_Init();
 8001a40:	f7ff f866 	bl	8000b10 <MX_BDMA_Init>
  MX_TIM1_Init();
 8001a44:	f000 faa4 	bl	8001f90 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001a48:	f7fe fe3c 	bl	80006c4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001a4c:	f7fe fea0 	bl	8000790 <MX_ADC3_Init>
  MX_ETH_Init();
 8001a50:	f7ff fa72 	bl	8000f38 <MX_ETH_Init>
  MX_FDCAN2_Init();
 8001a54:	f7ff fb68 	bl	8001128 <MX_FDCAN2_Init>
  MX_I2C1_Init();
 8001a58:	f7ff ff3c 	bl	80018d4 <MX_I2C1_Init>
  MX_UART4_Init();
 8001a5c:	f000 fd86 	bl	800256c <MX_UART4_Init>
  MX_UART7_Init();
 8001a60:	f000 fdd0 	bl	8002604 <MX_UART7_Init>
  MX_ADC1_Init();
 8001a64:	f7fe fdb6 	bl	80005d4 <MX_ADC1_Init>
  MX_UART8_Init();
 8001a68:	f000 fe18 	bl	800269c <MX_UART8_Init>
  MX_TIM3_Init();
 8001a6c:	f000 faea 	bl	8002044 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, pandora.analogDigitalConverter.hadc1Buffer, 1);
 8001a70:	2201      	movs	r2, #1
 8001a72:	4938      	ldr	r1, [pc, #224]	; (8001b54 <main+0x12c>)
 8001a74:	4838      	ldr	r0, [pc, #224]	; (8001b58 <main+0x130>)
 8001a76:	f001 fbef 	bl	8003258 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, pandora.analogDigitalConverter.hadc2Buffer, 1);
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	4937      	ldr	r1, [pc, #220]	; (8001b5c <main+0x134>)
 8001a7e:	4838      	ldr	r0, [pc, #224]	; (8001b60 <main+0x138>)
 8001a80:	f001 fbea 	bl	8003258 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, pandora.analogDigitalConverter.hadc3Buffer, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	4937      	ldr	r1, [pc, #220]	; (8001b64 <main+0x13c>)
 8001a88:	4837      	ldr	r0, [pc, #220]	; (8001b68 <main+0x140>)
 8001a8a:	f001 fbe5 	bl	8003258 <HAL_ADC_Start_DMA>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001a8e:	213c      	movs	r1, #60	; 0x3c
 8001a90:	4836      	ldr	r0, [pc, #216]	; (8001b6c <main+0x144>)
 8001a92:	f009 fd8f 	bl	800b5b4 <HAL_TIM_Encoder_Start>
  __HAL_TIM_SET_COUNTER(&htim3,0);
 8001a96:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <main+0x144>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	625a      	str	r2, [r3, #36]	; 0x24

  functionGunControlInit();
 8001a9e:	f7ff fd0b 	bl	80014b8 <functionGunControlInit>
  functionGunControlSetMode(FIRE_MODE_SINGLE);
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	f7ff fd4c 	bl	8001540 <functionGunControlSetMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  startTimeScanFlags();
 8001aa8:	f000 fc92 	bl	80023d0 <startTimeScanFlags>



	  if(_100msFlag)
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <main+0x148>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <main+0x94>
	  {
		  functionMeasure();
 8001ab4:	f000 f944 	bl	8001d40 <functionMeasure>
		  function_errorCheck();
 8001ab8:	f7ff f9d4 	bl	8000e64 <function_errorCheck>
	  }

	  /* COCKING HANDLE LOOP BEGIN */
	  if(pandora.gun.cockingHandle.motorState != IDLE)
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <main+0x14c>)
 8001abe:	795b      	ldrb	r3, [r3, #5]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d002      	beq.n	8001aca <main+0xa2>
	  {
		  functionEncoderRead(&htim3);
 8001ac4:	4829      	ldr	r0, [pc, #164]	; (8001b6c <main+0x144>)
 8001ac6:	f7ff f967 	bl	8000d98 <functionEncoderRead>
	  }

	  if(pandora.switches.switches_cocking_handle_order && pandora.switches.switches_safety && !pandora.gun.cockingHandle.armed)
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <main+0x14c>)
 8001acc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00e      	beq.n	8001af2 <main+0xca>
 8001ad4:	4b27      	ldr	r3, [pc, #156]	; (8001b74 <main+0x14c>)
 8001ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <main+0xca>
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <main+0x14c>)
 8001ae0:	79db      	ldrb	r3, [r3, #7]
 8001ae2:	f083 0301 	eor.w	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d002      	beq.n	8001af2 <main+0xca>
	  {
		  functionCockingHandleGoArm();
 8001aec:	f7ff f8e4 	bl	8000cb8 <functionCockingHandleGoArm>
 8001af0:	e010      	b.n	8001b14 <main+0xec>
	  }

	  else if (!pandora.switches.switches_safety && !pandora.gun.cockingHandle.safe)
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <main+0x14c>)
 8001af4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001af8:	f083 0301 	eor.w	r3, r3, #1
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d008      	beq.n	8001b14 <main+0xec>
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <main+0x14c>)
 8001b04:	7a1b      	ldrb	r3, [r3, #8]
 8001b06:	f083 0301 	eor.w	r3, r3, #1
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <main+0xec>
	  {
		  functionCockingHandleGoSafe();
 8001b10:	f7ff f890 	bl	8000c34 <functionCockingHandleGoSafe>
	  }
	  /* COCKING HANDLE LOOP END */

	  /* SOLENOID LOOP BEGIN */
	  functionGunControlProcess(HAL_GetTick());
 8001b14:	f000 ffc6 	bl	8002aa4 <HAL_GetTick>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fd70 	bl	8001600 <functionGunControlProcess>

	  if(pandora.switches.switches_fire_order && pandora.switches.switches_safety && pandora.switches.switches_movement_allowed) // atış emniyet anahtarı ve hareket anahtarı
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <main+0x14c>)
 8001b22:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <main+0x11c>
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <main+0x14c>)
 8001b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d007      	beq.n	8001b44 <main+0x11c>
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <main+0x14c>)
 8001b36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <main+0x11c>
	  {
		  functionGunControlTriggerPressed();
 8001b3e:	f7ff fd11 	bl	8001564 <functionGunControlTriggerPressed>
	  {
 8001b42:	e001      	b.n	8001b48 <main+0x120>
	  }
	  else
	  {
		  functionGunControlTriggerReleased();
 8001b44:	f7ff fd44 	bl	80015d0 <functionGunControlTriggerReleased>
	  //pandora.maingunEncoder.maingunEncoderCounter = __HAL_TIM_GET_COUNTER(&htim3);
	  //pandora.maingun.encoderCounter = __HAL_TIM_GET_COUNTER(&htim3);
	  //pandora.maingun.cockingHandle.encoderRotation = false;

	  //FDCAN_SendMessage(&hfdcan1, 0x100,(uint8_t *)&(pandora.canMessages.maingunCockingHandle), 8);
	  HAL_Delay(10);
 8001b48:	200a      	movs	r0, #10
 8001b4a:	f000 ffb7 	bl	8002abc <HAL_Delay>
	  clearTimeScanFlags();
 8001b4e:	f000 fcd3 	bl	80024f8 <clearTimeScanFlags>
  {
 8001b52:	e7a9      	b.n	8001aa8 <main+0x80>
 8001b54:	24000630 	.word	0x24000630
 8001b58:	240000f0 	.word	0x240000f0
 8001b5c:	24000638 	.word	0x24000638
 8001b60:	24000154 	.word	0x24000154
 8001b64:	24000640 	.word	0x24000640
 8001b68:	240001b8 	.word	0x240001b8
 8001b6c:	2400069c 	.word	0x2400069c
 8001b70:	24000705 	.word	0x24000705
 8001b74:	24000570 	.word	0x24000570

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b09e      	sub	sp, #120	; 0x78
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	224c      	movs	r2, #76	; 0x4c
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f00b f926 	bl	800cdd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2220      	movs	r2, #32
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00b f91f 	bl	800cdd8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001b9a:	2002      	movs	r0, #2
 8001b9c:	f005 ff46 	bl	8007a2c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	4b48      	ldr	r3, [pc, #288]	; (8001cc8 <SystemClock_Config+0x150>)
 8001ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba8:	4a47      	ldr	r2, [pc, #284]	; (8001cc8 <SystemClock_Config+0x150>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001bb0:	4b45      	ldr	r3, [pc, #276]	; (8001cc8 <SystemClock_Config+0x150>)
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	4b44      	ldr	r3, [pc, #272]	; (8001ccc <SystemClock_Config+0x154>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	4a43      	ldr	r2, [pc, #268]	; (8001ccc <SystemClock_Config+0x154>)
 8001bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bc4:	6193      	str	r3, [r2, #24]
 8001bc6:	4b41      	ldr	r3, [pc, #260]	; (8001ccc <SystemClock_Config+0x154>)
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bce:	60bb      	str	r3, [r7, #8]
 8001bd0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001bd2:	bf00      	nop
 8001bd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <SystemClock_Config+0x154>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be0:	d1f8      	bne.n	8001bd4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <SystemClock_Config+0x158>)
 8001be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001be8:	4a39      	ldr	r2, [pc, #228]	; (8001cd0 <SystemClock_Config+0x158>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <SystemClock_Config+0x158>)
 8001bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c00:	2300      	movs	r3, #0
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	4b31      	ldr	r3, [pc, #196]	; (8001ccc <SystemClock_Config+0x154>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <SystemClock_Config+0x154>)
 8001c0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <SystemClock_Config+0x154>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b2b      	ldr	r3, [pc, #172]	; (8001cc8 <SystemClock_Config+0x150>)
 8001c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1e:	4a2a      	ldr	r2, [pc, #168]	; (8001cc8 <SystemClock_Config+0x150>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001c26:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <SystemClock_Config+0x150>)
 8001c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c32:	bf00      	nop
 8001c34:	4b25      	ldr	r3, [pc, #148]	; (8001ccc <SystemClock_Config+0x154>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c40:	d1f8      	bne.n	8001c34 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c42:	2301      	movs	r3, #1
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c50:	2302      	movs	r3, #2
 8001c52:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001c54:	2302      	movs	r3, #2
 8001c56:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 8001c58:	2350      	movs	r3, #80	; 0x50
 8001c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001c60:	2308      	movs	r3, #8
 8001c62:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c64:	2302      	movs	r3, #2
 8001c66:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c68:	230c      	movs	r3, #12
 8001c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f005 ff11 	bl	8007aa0 <HAL_RCC_OscConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8001c84:	f000 f856 	bl	8001d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c88:	233f      	movs	r3, #63	; 0x3f
 8001c8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c94:	2308      	movs	r3, #8
 8001c96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c98:	2340      	movs	r3, #64	; 0x40
 8001c9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c9c:	2340      	movs	r3, #64	; 0x40
 8001c9e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001ca6:	2340      	movs	r3, #64	; 0x40
 8001ca8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	2104      	movs	r1, #4
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f006 fb4f 	bl	8008354 <HAL_RCC_ClockConfig>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001cbc:	f000 f83a 	bl	8001d34 <Error_Handler>
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	3778      	adds	r7, #120	; 0x78
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	58000400 	.word	0x58000400
 8001ccc:	58024800 	.word	0x58024800
 8001cd0:	58024400 	.word	0x58024400

08001cd4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b0b0      	sub	sp, #192	; 0xc0
 8001cd8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cda:	463b      	mov	r3, r7
 8001cdc:	22c0      	movs	r2, #192	; 0xc0
 8001cde:	2100      	movs	r1, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f00b f879 	bl	800cdd8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001ce6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001cf6:	230c      	movs	r3, #12
 8001cf8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d02:	2302      	movs	r3, #2
 8001d04:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001d0a:	2320      	movs	r3, #32
 8001d0c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 4096;
 8001d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f006 fea5 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <PeriphCommonClock_Config+0x58>
  {
    Error_Handler();
 8001d28:	f000 f804 	bl	8001d34 <Error_Handler>
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	37c0      	adds	r7, #192	; 0xc0
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d38:	b672      	cpsid	i
}
 8001d3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <Error_Handler+0x8>
	...

08001d40 <functionMeasure>:
        }
    }
}

void functionMeasure(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
	pandora.powerManagement.solenoidCurrent 		= pandora.analogDigitalConverter.hadc3Buffer[2];
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <functionMeasure+0x64>)
 8001d46:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d4a:	4a16      	ldr	r2, [pc, #88]	; (8001da4 <functionMeasure+0x64>)
 8001d4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	pandora.powerManagement.cockingHandleCurrent 	= pandora.analogDigitalConverter.hadc3Buffer[0];
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <functionMeasure+0x64>)
 8001d52:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001d56:	4a13      	ldr	r2, [pc, #76]	; (8001da4 <functionMeasure+0x64>)
 8001d58:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	pandora.powerManagement.servoCurrent 			= pandora.analogDigitalConverter.hadc2Buffer[1];
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <functionMeasure+0x64>)
 8001d5e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8001d62:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <functionMeasure+0x64>)
 8001d64:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	pandora.powerManagement.AKBCurrent 				= pandora.analogDigitalConverter.hadc2Buffer[0];
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <functionMeasure+0x64>)
 8001d6a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001d6e:	4a0d      	ldr	r2, [pc, #52]	; (8001da4 <functionMeasure+0x64>)
 8001d70:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	pandora.powerManagement.EOSCurrent 				= pandora.analogDigitalConverter.hadc1Buffer[0];
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <functionMeasure+0x64>)
 8001d76:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <functionMeasure+0x64>)
 8001d7c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
	pandora.powerManagement.GDBCurrent 				= pandora.analogDigitalConverter.hadc3Buffer[0];
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <functionMeasure+0x64>)
 8001d82:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8001d86:	4a07      	ldr	r2, [pc, #28]	; (8001da4 <functionMeasure+0x64>)
 8001d88:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	pandora.powerManagement.KKUCurrent 				= pandora.analogDigitalConverter.hadc1Buffer[1];
 8001d8c:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <functionMeasure+0x64>)
 8001d8e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001d92:	4a04      	ldr	r2, [pc, #16]	; (8001da4 <functionMeasure+0x64>)
 8001d94:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	24000570 	.word	0x24000570

08001da8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <HAL_MspInit+0x30>)
 8001db0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001db4:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_MspInit+0x30>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_MspInit+0x30>)
 8001dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001dc4:	f003 0302 	and.w	r3, r3, #2
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	58024400 	.word	0x58024400

08001ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de0:	e7fe      	b.n	8001de0 <NMI_Handler+0x4>

08001de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de6:	e7fe      	b.n	8001de6 <HardFault_Handler+0x4>

08001de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <MemManage_Handler+0x4>

08001dee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e28:	f000 fe28 	bl	8002a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA1_Stream0_IRQHandler+0x10>)
 8001e36:	f003 f851 	bl	8004edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2400021c 	.word	0x2400021c

08001e44 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <DMA1_Stream1_IRQHandler+0x10>)
 8001e4a:	f003 f847 	bl	8004edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	24000294 	.word	0x24000294

08001e58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <TIM3_IRQHandler+0x10>)
 8001e5e:	f009 fc37 	bl	800b6d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	2400069c 	.word	0x2400069c

08001e6c <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <BDMA_Channel0_IRQHandler+0x10>)
 8001e72:	f003 f833 	bl	8004edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2400030c 	.word	0x2400030c

08001e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <SystemInit+0xe4>)
 8001e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8a:	4a36      	ldr	r2, [pc, #216]	; (8001f64 <SystemInit+0xe4>)
 8001e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e94:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <SystemInit+0xe8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	2b06      	cmp	r3, #6
 8001e9e:	d807      	bhi.n	8001eb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001ea0:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <SystemInit+0xe8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f023 030f 	bic.w	r3, r3, #15
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <SystemInit+0xe8>)
 8001eaa:	f043 0307 	orr.w	r3, r3, #7
 8001eae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001eb0:	4b2e      	ldr	r3, [pc, #184]	; (8001f6c <SystemInit+0xec>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a2d      	ldr	r2, [pc, #180]	; (8001f6c <SystemInit+0xec>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <SystemInit+0xec>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001ec2:	4b2a      	ldr	r3, [pc, #168]	; (8001f6c <SystemInit+0xec>)
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4929      	ldr	r1, [pc, #164]	; (8001f6c <SystemInit+0xec>)
 8001ec8:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <SystemInit+0xf0>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001ece:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <SystemInit+0xe8>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001eda:	4b23      	ldr	r3, [pc, #140]	; (8001f68 <SystemInit+0xe8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 030f 	bic.w	r3, r3, #15
 8001ee2:	4a21      	ldr	r2, [pc, #132]	; (8001f68 <SystemInit+0xe8>)
 8001ee4:	f043 0307 	orr.w	r3, r3, #7
 8001ee8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <SystemInit+0xec>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ef0:	4b1e      	ldr	r3, [pc, #120]	; (8001f6c <SystemInit+0xec>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <SystemInit+0xec>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <SystemInit+0xec>)
 8001efe:	4a1d      	ldr	r2, [pc, #116]	; (8001f74 <SystemInit+0xf4>)
 8001f00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	; (8001f6c <SystemInit+0xec>)
 8001f04:	4a1c      	ldr	r2, [pc, #112]	; (8001f78 <SystemInit+0xf8>)
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <SystemInit+0xec>)
 8001f0a:	4a1c      	ldr	r2, [pc, #112]	; (8001f7c <SystemInit+0xfc>)
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	; (8001f6c <SystemInit+0xec>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <SystemInit+0xec>)
 8001f16:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <SystemInit+0xfc>)
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001f1a:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <SystemInit+0xec>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001f20:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <SystemInit+0xec>)
 8001f22:	4a16      	ldr	r2, [pc, #88]	; (8001f7c <SystemInit+0xfc>)
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001f26:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <SystemInit+0xec>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <SystemInit+0xec>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a0e      	ldr	r2, [pc, #56]	; (8001f6c <SystemInit+0xec>)
 8001f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <SystemInit+0xec>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	; (8001f80 <SystemInit+0x100>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <SystemInit+0x104>)
 8001f44:	4013      	ands	r3, r2
 8001f46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f4a:	d202      	bcs.n	8001f52 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001f4c:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <SystemInit+0x108>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <SystemInit+0x10c>)
 8001f54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001f58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00
 8001f68:	52002000 	.word	0x52002000
 8001f6c:	58024400 	.word	0x58024400
 8001f70:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f74:	02020200 	.word	0x02020200
 8001f78:	01ff0000 	.word	0x01ff0000
 8001f7c:	01010280 	.word	0x01010280
 8001f80:	5c001000 	.word	0x5c001000
 8001f84:	ffff0000 	.word	0xffff0000
 8001f88:	51008108 	.word	0x51008108
 8001f8c:	52004000 	.word	0x52004000

08001f90 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b08c      	sub	sp, #48	; 0x30
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f96:	f107 030c 	add.w	r3, r7, #12
 8001f9a:	2224      	movs	r2, #36	; 0x24
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f00a ff1a 	bl	800cdd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa4:	463b      	mov	r3, r7
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fae:	4b23      	ldr	r3, [pc, #140]	; (800203c <MX_TIM1_Init+0xac>)
 8001fb0:	4a23      	ldr	r2, [pc, #140]	; (8002040 <MX_TIM1_Init+0xb0>)
 8001fb2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <MX_TIM1_Init+0xac>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b20      	ldr	r3, [pc, #128]	; (800203c <MX_TIM1_Init+0xac>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001fc0:	4b1e      	ldr	r3, [pc, #120]	; (800203c <MX_TIM1_Init+0xac>)
 8001fc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fc6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <MX_TIM1_Init+0xac>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fce:	4b1b      	ldr	r3, [pc, #108]	; (800203c <MX_TIM1_Init+0xac>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <MX_TIM1_Init+0xac>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	4619      	mov	r1, r3
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <MX_TIM1_Init+0xac>)
 8002006:	f009 fa2f 	bl	800b468 <HAL_TIM_Encoder_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002010:	f7ff fe90 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002014:	2300      	movs	r3, #0
 8002016:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002020:	463b      	mov	r3, r7
 8002022:	4619      	mov	r1, r3
 8002024:	4805      	ldr	r0, [pc, #20]	; (800203c <MX_TIM1_Init+0xac>)
 8002026:	f009 fd4f 	bl	800bac8 <HAL_TIMEx_MasterConfigSynchronization>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8002030:	f7ff fe80 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	3730      	adds	r7, #48	; 0x30
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	24000650 	.word	0x24000650
 8002040:	40010000 	.word	0x40010000

08002044 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	2224      	movs	r2, #36	; 0x24
 8002050:	2100      	movs	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f00a fec0 	bl	800cdd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002058:	463b      	mov	r3, r7
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	605a      	str	r2, [r3, #4]
 8002060:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <MX_TIM3_Init+0xa4>)
 8002064:	4a21      	ldr	r2, [pc, #132]	; (80020ec <MX_TIM3_Init+0xa8>)
 8002066:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002068:	4b1f      	ldr	r3, [pc, #124]	; (80020e8 <MX_TIM3_Init+0xa4>)
 800206a:	2200      	movs	r2, #0
 800206c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800206e:	4b1e      	ldr	r3, [pc, #120]	; (80020e8 <MX_TIM3_Init+0xa4>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002074:	4b1c      	ldr	r3, [pc, #112]	; (80020e8 <MX_TIM3_Init+0xa4>)
 8002076:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800207a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <MX_TIM3_Init+0xa4>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002082:	4b19      	ldr	r3, [pc, #100]	; (80020e8 <MX_TIM3_Init+0xa4>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002088:	2301      	movs	r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800208c:	2300      	movs	r3, #0
 800208e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002090:	2301      	movs	r3, #1
 8002092:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020a0:	2301      	movs	r3, #1
 80020a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	4619      	mov	r1, r3
 80020b2:	480d      	ldr	r0, [pc, #52]	; (80020e8 <MX_TIM3_Init+0xa4>)
 80020b4:	f009 f9d8 	bl	800b468 <HAL_TIM_Encoder_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80020be:	f7ff fe39 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ca:	463b      	mov	r3, r7
 80020cc:	4619      	mov	r1, r3
 80020ce:	4806      	ldr	r0, [pc, #24]	; (80020e8 <MX_TIM3_Init+0xa4>)
 80020d0:	f009 fcfa 	bl	800bac8 <HAL_TIMEx_MasterConfigSynchronization>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80020da:	f7ff fe2b 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020de:	bf00      	nop
 80020e0:	3730      	adds	r7, #48	; 0x30
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	2400069c 	.word	0x2400069c
 80020ec:	40000400 	.word	0x40000400

080020f0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b08c      	sub	sp, #48	; 0x30
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a38      	ldr	r2, [pc, #224]	; (80021f0 <HAL_TIM_Encoder_MspInit+0x100>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d12f      	bne.n	8002172 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002112:	4b38      	ldr	r3, [pc, #224]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 8002114:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002118:	4a36      	ldr	r2, [pc, #216]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002122:	4b34      	ldr	r3, [pc, #208]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 8002124:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	61bb      	str	r3, [r7, #24]
 800212e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002130:	4b30      	ldr	r3, [pc, #192]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 8002132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002136:	4a2f      	ldr	r2, [pc, #188]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002140:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 8002142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_2_PHASE_A_Pin|ENCODER_2_PHASE_B_Pin;
 800214e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002160:	2301      	movs	r3, #1
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	4823      	ldr	r0, [pc, #140]	; (80021f8 <HAL_TIM_Encoder_MspInit+0x108>)
 800216c:	f005 f960 	bl	8007430 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002170:	e03a      	b.n	80021e8 <HAL_TIM_Encoder_MspInit+0xf8>
  else if(tim_encoderHandle->Instance==TIM3)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a21      	ldr	r2, [pc, #132]	; (80021fc <HAL_TIM_Encoder_MspInit+0x10c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d135      	bne.n	80021e8 <HAL_TIM_Encoder_MspInit+0xf8>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 800217e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002182:	4a1c      	ldr	r2, [pc, #112]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800218c:	4b19      	ldr	r3, [pc, #100]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 800218e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 800219c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a0:	4a14      	ldr	r2, [pc, #80]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021aa:	4b12      	ldr	r3, [pc, #72]	; (80021f4 <HAL_TIM_Encoder_MspInit+0x104>)
 80021ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_1_PHASE_A_Pin|ENCODER_1_PHASE_B_Pin;
 80021b8:	23c0      	movs	r3, #192	; 0xc0
 80021ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021bc:	2302      	movs	r3, #2
 80021be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c4:	2300      	movs	r3, #0
 80021c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021c8:	2302      	movs	r3, #2
 80021ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4619      	mov	r1, r3
 80021d2:	480b      	ldr	r0, [pc, #44]	; (8002200 <HAL_TIM_Encoder_MspInit+0x110>)
 80021d4:	f005 f92c 	bl	8007430 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80021d8:	2200      	movs	r2, #0
 80021da:	2100      	movs	r1, #0
 80021dc:	201d      	movs	r0, #29
 80021de:	f002 f882 	bl	80042e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80021e2:	201d      	movs	r0, #29
 80021e4:	f002 f899 	bl	800431a <HAL_NVIC_EnableIRQ>
}
 80021e8:	bf00      	nop
 80021ea:	3730      	adds	r7, #48	; 0x30
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40010000 	.word	0x40010000
 80021f4:	58024400 	.word	0x58024400
 80021f8:	58020000 	.word	0x58020000
 80021fc:	40000400 	.word	0x40000400
 8002200:	58020800 	.word	0x58020800

08002204 <HAL_TIM_PeriodElapsedCallback>:
bool _500msFlag		 		= false;
bool _1sFlag				= false;
bool _10sFlag				= false;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)   // şuan 50ms 1msye  ayarla
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a58      	ldr	r2, [pc, #352]	; (8002374 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8002212:	4293      	cmp	r3, r2
 8002214:	f040 80a9 	bne.w	800236a <HAL_TIM_PeriodElapsedCallback+0x166>
    {
    	functionEncoderRead(&htim3);		// her ms değerinde çağrılır. IDLE durumunda çağrılmayabilir #huzeyfe
 8002218:	4857      	ldr	r0, [pc, #348]	; (8002378 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800221a:	f7fe fdbd 	bl	8000d98 <functionEncoderRead>

    	_configurableCounter++;
 800221e:	4b57      	ldr	r3, [pc, #348]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b55      	ldr	r3, [pc, #340]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002228:	701a      	strb	r2, [r3, #0]
    	if(_configurableCounter>configurableTime)
 800222a:	4b54      	ldr	r3, [pc, #336]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800222c:	781a      	ldrb	r2, [r3, #0]
 800222e:	4b54      	ldr	r3, [pc, #336]	; (8002380 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d905      	bls.n	8002242 <HAL_TIM_PeriodElapsedCallback+0x3e>
    	{
    		_configurableFlagScanStart = true;
 8002236:	4b53      	ldr	r3, [pc, #332]	; (8002384 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002238:	2201      	movs	r2, #1
 800223a:	701a      	strb	r2, [r3, #0]
    		_configurableCounter = 0;
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <HAL_TIM_PeriodElapsedCallback+0x178>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
    	}

    	_1msCounter++;
 8002242:	4b51      	ldr	r3, [pc, #324]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	3301      	adds	r3, #1
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4b4f      	ldr	r3, [pc, #316]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800224c:	701a      	strb	r2, [r3, #0]
    	if(_1msCounter>0)
 800224e:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_TIM_PeriodElapsedCallback+0x5e>
    	{
    		_1msFlagScanStart = true;
 8002256:	4b4d      	ldr	r3, [pc, #308]	; (800238c <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002258:	2201      	movs	r2, #1
 800225a:	701a      	strb	r2, [r3, #0]
    		_1msCounter = 0;
 800225c:	4b4a      	ldr	r3, [pc, #296]	; (8002388 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
    	}


    	_10msCounter++;
 8002262:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	3301      	adds	r3, #1
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b49      	ldr	r3, [pc, #292]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800226c:	701a      	strb	r2, [r3, #0]
    	if(_10msCounter>9)
 800226e:	4b48      	ldr	r3, [pc, #288]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	2b09      	cmp	r3, #9
 8002274:	d905      	bls.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x7e>
    	{
    		_10msFlagScanStart = true;
 8002276:	4b47      	ldr	r3, [pc, #284]	; (8002394 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002278:	2201      	movs	r2, #1
 800227a:	701a      	strb	r2, [r3, #0]
    		_10msCounter = 0;
 800227c:	4b44      	ldr	r3, [pc, #272]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
    	}

    	_25msCounter++;
 8002282:	4b45      	ldr	r3, [pc, #276]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	3301      	adds	r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b43      	ldr	r3, [pc, #268]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800228c:	701a      	strb	r2, [r3, #0]
    	if(_25msCounter>24)
 800228e:	4b42      	ldr	r3, [pc, #264]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b18      	cmp	r3, #24
 8002294:	d905      	bls.n	80022a2 <HAL_TIM_PeriodElapsedCallback+0x9e>
    	{
    		_25msFlagScanStart = true;
 8002296:	4b41      	ldr	r3, [pc, #260]	; (800239c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
    		_25msCounter = 0;
 800229c:	4b3e      	ldr	r3, [pc, #248]	; (8002398 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
    	}

    	_50msCounter++;
 80022a2:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	b2da      	uxtb	r2, r3
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80022ac:	701a      	strb	r2, [r3, #0]
    	if(_50msCounter>49)
 80022ae:	4b3c      	ldr	r3, [pc, #240]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b31      	cmp	r3, #49	; 0x31
 80022b4:	d905      	bls.n	80022c2 <HAL_TIM_PeriodElapsedCallback+0xbe>
    	{
    		_50msFlagScanStart = true;
 80022b6:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
    		_50msCounter = 0;
 80022bc:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
    	}

    	_100msCounter++;
 80022c2:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	3301      	adds	r3, #1
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80022cc:	701a      	strb	r2, [r3, #0]
    	if(_100msCounter>99)
 80022ce:	4b36      	ldr	r3, [pc, #216]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b63      	cmp	r3, #99	; 0x63
 80022d4:	d905      	bls.n	80022e2 <HAL_TIM_PeriodElapsedCallback+0xde>
    	{
    		_100msFlagScanStart = true;
 80022d6:	4b35      	ldr	r3, [pc, #212]	; (80023ac <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
    		_100msCounter = 0;
 80022dc:	4b32      	ldr	r3, [pc, #200]	; (80023a8 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80022de:	2200      	movs	r2, #0
 80022e0:	701a      	strb	r2, [r3, #0]

    	}

    	_250msCounter++;
 80022e2:	4b33      	ldr	r3, [pc, #204]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	3301      	adds	r3, #1
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80022ec:	701a      	strb	r2, [r3, #0]
    	if(_250msCounter>249)
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2bf9      	cmp	r3, #249	; 0xf9
 80022f4:	d905      	bls.n	8002302 <HAL_TIM_PeriodElapsedCallback+0xfe>
    	{
    		_250msFlagScanStart = true;
 80022f6:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
    		_250msCounter = 0;
 80022fc:	4b2c      	ldr	r3, [pc, #176]	; (80023b0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80022fe:	2200      	movs	r2, #0
 8002300:	701a      	strb	r2, [r3, #0]
    	}

    	_500msCounter++;
 8002302:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	3301      	adds	r3, #1
 8002308:	b29a      	uxth	r2, r3
 800230a:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800230c:	801a      	strh	r2, [r3, #0]
    	if(_500msCounter>499)
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002316:	d305      	bcc.n	8002324 <HAL_TIM_PeriodElapsedCallback+0x120>
    	{
    		_500msFlagScanStart = true;
 8002318:	4b28      	ldr	r3, [pc, #160]	; (80023bc <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
    		_500msCounter = 0;
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002320:	2200      	movs	r2, #0
 8002322:	801a      	strh	r2, [r3, #0]
    	}

    	_1sCounter++;
 8002324:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002326:	881b      	ldrh	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800232e:	801a      	strh	r2, [r3, #0]
    	if(_1sCounter>999)
 8002330:	4b23      	ldr	r3, [pc, #140]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002338:	d305      	bcc.n	8002346 <HAL_TIM_PeriodElapsedCallback+0x142>
    	{
    		_1sFlagScanStart = true;
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
    		_1sCounter = 0;
 8002340:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002342:	2200      	movs	r2, #0
 8002344:	801a      	strh	r2, [r3, #0]
    	}

    	_10sCounter++;
 8002346:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002348:	881b      	ldrh	r3, [r3, #0]
 800234a:	3301      	adds	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	4b1e      	ldr	r3, [pc, #120]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002350:	801a      	strh	r2, [r3, #0]
    	if(_10sCounter>9999)
 8002352:	4b1d      	ldr	r3, [pc, #116]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002354:	881b      	ldrh	r3, [r3, #0]
 8002356:	f242 720f 	movw	r2, #9999	; 0x270f
 800235a:	4293      	cmp	r3, r2
 800235c:	d905      	bls.n	800236a <HAL_TIM_PeriodElapsedCallback+0x166>
    	{
    		_10sFlagScanStart = true;
 800235e:	4b1b      	ldr	r3, [pc, #108]	; (80023cc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
    		_10sCounter = 0;
 8002364:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002366:	2200      	movs	r2, #0
 8002368:	801a      	strh	r2, [r3, #0]
    	}
    }
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40000400 	.word	0x40000400
 8002378:	2400069c 	.word	0x2400069c
 800237c:	240006e8 	.word	0x240006e8
 8002380:	24000008 	.word	0x24000008
 8002384:	240006f6 	.word	0x240006f6
 8002388:	240006e9 	.word	0x240006e9
 800238c:	240006f7 	.word	0x240006f7
 8002390:	240006ea 	.word	0x240006ea
 8002394:	240006f8 	.word	0x240006f8
 8002398:	240006eb 	.word	0x240006eb
 800239c:	240006f9 	.word	0x240006f9
 80023a0:	240006ec 	.word	0x240006ec
 80023a4:	240006fa 	.word	0x240006fa
 80023a8:	240006ed 	.word	0x240006ed
 80023ac:	240006fb 	.word	0x240006fb
 80023b0:	240006ee 	.word	0x240006ee
 80023b4:	240006fc 	.word	0x240006fc
 80023b8:	240006f0 	.word	0x240006f0
 80023bc:	240006fd 	.word	0x240006fd
 80023c0:	240006f2 	.word	0x240006f2
 80023c4:	240006fe 	.word	0x240006fe
 80023c8:	240006f4 	.word	0x240006f4
 80023cc:	240006ff 	.word	0x240006ff

080023d0 <startTimeScanFlags>:

void startTimeScanFlags(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
	if(_configurableFlagScanStart)
 80023d4:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <startTimeScanFlags+0xd8>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <startTimeScanFlags+0x18>
	{
		_configurableFlag = true;
 80023dc:	4b33      	ldr	r3, [pc, #204]	; (80024ac <startTimeScanFlags+0xdc>)
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
		_configurableFlagScanStart = false;
 80023e2:	4b31      	ldr	r3, [pc, #196]	; (80024a8 <startTimeScanFlags+0xd8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	701a      	strb	r2, [r3, #0]
	}
	if(_1msFlagScanStart)
 80023e8:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <startTimeScanFlags+0xe0>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d005      	beq.n	80023fc <startTimeScanFlags+0x2c>
	{
		_1msFlag = true;
 80023f0:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <startTimeScanFlags+0xe4>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
		_1msFlagScanStart = false;
 80023f6:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <startTimeScanFlags+0xe0>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
	}
	if(_10msFlagScanStart)
 80023fc:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <startTimeScanFlags+0xe8>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <startTimeScanFlags+0x40>
	{
		_10msFlag = true;
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <startTimeScanFlags+0xec>)
 8002406:	2201      	movs	r2, #1
 8002408:	701a      	strb	r2, [r3, #0]
		_10msFlagScanStart = false;
 800240a:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <startTimeScanFlags+0xe8>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
	}
	if(_25msFlagScanStart)
 8002410:	4b2b      	ldr	r3, [pc, #172]	; (80024c0 <startTimeScanFlags+0xf0>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d005      	beq.n	8002424 <startTimeScanFlags+0x54>
	{
		_25msFlag = true;
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <startTimeScanFlags+0xf4>)
 800241a:	2201      	movs	r2, #1
 800241c:	701a      	strb	r2, [r3, #0]
		_25msFlagScanStart = false;
 800241e:	4b28      	ldr	r3, [pc, #160]	; (80024c0 <startTimeScanFlags+0xf0>)
 8002420:	2200      	movs	r2, #0
 8002422:	701a      	strb	r2, [r3, #0]
	}
	if(_50msFlagScanStart)
 8002424:	4b28      	ldr	r3, [pc, #160]	; (80024c8 <startTimeScanFlags+0xf8>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <startTimeScanFlags+0x68>
	{
		_50msFlag = true;
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <startTimeScanFlags+0xfc>)
 800242e:	2201      	movs	r2, #1
 8002430:	701a      	strb	r2, [r3, #0]
		_50msFlagScanStart = false;
 8002432:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <startTimeScanFlags+0xf8>)
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
	}
	if(_100msFlagScanStart)
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <startTimeScanFlags+0x100>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <startTimeScanFlags+0x7c>
	{
		_100msFlag = true;
 8002440:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <startTimeScanFlags+0x104>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
		_100msFlagScanStart = false;
 8002446:	4b22      	ldr	r3, [pc, #136]	; (80024d0 <startTimeScanFlags+0x100>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
	}
	if(_250msFlagScanStart)
 800244c:	4b22      	ldr	r3, [pc, #136]	; (80024d8 <startTimeScanFlags+0x108>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <startTimeScanFlags+0x90>
	{
		_250msFlag = true;
 8002454:	4b21      	ldr	r3, [pc, #132]	; (80024dc <startTimeScanFlags+0x10c>)
 8002456:	2201      	movs	r2, #1
 8002458:	701a      	strb	r2, [r3, #0]
		_250msFlagScanStart = false;
 800245a:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <startTimeScanFlags+0x108>)
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
	}
	if(_500msFlagScanStart)
 8002460:	4b1f      	ldr	r3, [pc, #124]	; (80024e0 <startTimeScanFlags+0x110>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d005      	beq.n	8002474 <startTimeScanFlags+0xa4>
	{
		_500msFlag = true;
 8002468:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <startTimeScanFlags+0x114>)
 800246a:	2201      	movs	r2, #1
 800246c:	701a      	strb	r2, [r3, #0]
		_500msFlagScanStart = false;
 800246e:	4b1c      	ldr	r3, [pc, #112]	; (80024e0 <startTimeScanFlags+0x110>)
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
	}
	if(_1sFlagScanStart)
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <startTimeScanFlags+0x118>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <startTimeScanFlags+0xb8>
	{
		_1sFlag = true;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <startTimeScanFlags+0x11c>)
 800247e:	2201      	movs	r2, #1
 8002480:	701a      	strb	r2, [r3, #0]
		_1sFlagScanStart = false;
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <startTimeScanFlags+0x118>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
	}
	if(_10sFlagScanStart)
 8002488:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <startTimeScanFlags+0x120>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <startTimeScanFlags+0xcc>
	{
		_10sFlag = true;
 8002490:	4b18      	ldr	r3, [pc, #96]	; (80024f4 <startTimeScanFlags+0x124>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
		_10sFlagScanStart = false;
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <startTimeScanFlags+0x120>)
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
	}
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	240006f6 	.word	0x240006f6
 80024ac:	24000700 	.word	0x24000700
 80024b0:	240006f7 	.word	0x240006f7
 80024b4:	24000701 	.word	0x24000701
 80024b8:	240006f8 	.word	0x240006f8
 80024bc:	24000702 	.word	0x24000702
 80024c0:	240006f9 	.word	0x240006f9
 80024c4:	24000703 	.word	0x24000703
 80024c8:	240006fa 	.word	0x240006fa
 80024cc:	24000704 	.word	0x24000704
 80024d0:	240006fb 	.word	0x240006fb
 80024d4:	24000705 	.word	0x24000705
 80024d8:	240006fc 	.word	0x240006fc
 80024dc:	24000706 	.word	0x24000706
 80024e0:	240006fd 	.word	0x240006fd
 80024e4:	24000707 	.word	0x24000707
 80024e8:	240006fe 	.word	0x240006fe
 80024ec:	24000708 	.word	0x24000708
 80024f0:	240006ff 	.word	0x240006ff
 80024f4:	24000709 	.word	0x24000709

080024f8 <clearTimeScanFlags>:

void clearTimeScanFlags(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
	_configurableFlag 	= false;
 80024fc:	4b11      	ldr	r3, [pc, #68]	; (8002544 <clearTimeScanFlags+0x4c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
	_1msFlag 	= false;
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <clearTimeScanFlags+0x50>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
	_10msFlag 	= false;
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <clearTimeScanFlags+0x54>)
 800250a:	2200      	movs	r2, #0
 800250c:	701a      	strb	r2, [r3, #0]
	_25msFlag 	= false;
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <clearTimeScanFlags+0x58>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
	_50msFlag 	= false;
 8002514:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <clearTimeScanFlags+0x5c>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
	_100msFlag 	= false;
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <clearTimeScanFlags+0x60>)
 800251c:	2200      	movs	r2, #0
 800251e:	701a      	strb	r2, [r3, #0]
	_250msFlag 	= false;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <clearTimeScanFlags+0x64>)
 8002522:	2200      	movs	r2, #0
 8002524:	701a      	strb	r2, [r3, #0]
	_500msFlag 	= false;
 8002526:	4b0e      	ldr	r3, [pc, #56]	; (8002560 <clearTimeScanFlags+0x68>)
 8002528:	2200      	movs	r2, #0
 800252a:	701a      	strb	r2, [r3, #0]
	_1sFlag 	= false;
 800252c:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <clearTimeScanFlags+0x6c>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
	_10sFlag 	= false;
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <clearTimeScanFlags+0x70>)
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	24000700 	.word	0x24000700
 8002548:	24000701 	.word	0x24000701
 800254c:	24000702 	.word	0x24000702
 8002550:	24000703 	.word	0x24000703
 8002554:	24000704 	.word	0x24000704
 8002558:	24000705 	.word	0x24000705
 800255c:	24000706 	.word	0x24000706
 8002560:	24000707 	.word	0x24000707
 8002564:	24000708 	.word	0x24000708
 8002568:	24000709 	.word	0x24000709

0800256c <MX_UART4_Init>:
UART_HandleTypeDef huart7;
UART_HandleTypeDef huart8;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002570:	4b22      	ldr	r3, [pc, #136]	; (80025fc <MX_UART4_Init+0x90>)
 8002572:	4a23      	ldr	r2, [pc, #140]	; (8002600 <MX_UART4_Init+0x94>)
 8002574:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <MX_UART4_Init+0x90>)
 8002578:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800257c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800257e:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <MX_UART4_Init+0x90>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <MX_UART4_Init+0x90>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <MX_UART4_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <MX_UART4_Init+0x90>)
 8002592:	220c      	movs	r2, #12
 8002594:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <MX_UART4_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800259c:	4b17      	ldr	r3, [pc, #92]	; (80025fc <MX_UART4_Init+0x90>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025a2:	4b16      	ldr	r3, [pc, #88]	; (80025fc <MX_UART4_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025a8:	4b14      	ldr	r3, [pc, #80]	; (80025fc <MX_UART4_Init+0x90>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <MX_UART4_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025b4:	4811      	ldr	r0, [pc, #68]	; (80025fc <MX_UART4_Init+0x90>)
 80025b6:	f009 fb33 	bl	800bc20 <HAL_UART_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80025c0:	f7ff fbb8 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025c4:	2100      	movs	r1, #0
 80025c6:	480d      	ldr	r0, [pc, #52]	; (80025fc <MX_UART4_Init+0x90>)
 80025c8:	f00a fb3b 	bl	800cc42 <HAL_UARTEx_SetTxFifoThreshold>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80025d2:	f7ff fbaf 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025d6:	2100      	movs	r1, #0
 80025d8:	4808      	ldr	r0, [pc, #32]	; (80025fc <MX_UART4_Init+0x90>)
 80025da:	f00a fb70 	bl	800ccbe <HAL_UARTEx_SetRxFifoThreshold>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80025e4:	f7ff fba6 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80025e8:	4804      	ldr	r0, [pc, #16]	; (80025fc <MX_UART4_Init+0x90>)
 80025ea:	f00a faf1 	bl	800cbd0 <HAL_UARTEx_DisableFifoMode>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80025f4:	f7ff fb9e 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80025f8:	bf00      	nop
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	2400070c 	.word	0x2400070c
 8002600:	40004c00 	.word	0x40004c00

08002604 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <MX_UART7_Init+0x90>)
 800260a:	4a23      	ldr	r2, [pc, #140]	; (8002698 <MX_UART7_Init+0x94>)
 800260c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800260e:	4b21      	ldr	r3, [pc, #132]	; (8002694 <MX_UART7_Init+0x90>)
 8002610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002614:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002616:	4b1f      	ldr	r3, [pc, #124]	; (8002694 <MX_UART7_Init+0x90>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <MX_UART7_Init+0x90>)
 800261e:	2200      	movs	r2, #0
 8002620:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002622:	4b1c      	ldr	r3, [pc, #112]	; (8002694 <MX_UART7_Init+0x90>)
 8002624:	2200      	movs	r2, #0
 8002626:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002628:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_UART7_Init+0x90>)
 800262a:	220c      	movs	r2, #12
 800262c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800262e:	4b19      	ldr	r3, [pc, #100]	; (8002694 <MX_UART7_Init+0x90>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002634:	4b17      	ldr	r3, [pc, #92]	; (8002694 <MX_UART7_Init+0x90>)
 8002636:	2200      	movs	r2, #0
 8002638:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800263a:	4b16      	ldr	r3, [pc, #88]	; (8002694 <MX_UART7_Init+0x90>)
 800263c:	2200      	movs	r2, #0
 800263e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <MX_UART7_Init+0x90>)
 8002642:	2200      	movs	r2, #0
 8002644:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002646:	4b13      	ldr	r3, [pc, #76]	; (8002694 <MX_UART7_Init+0x90>)
 8002648:	2200      	movs	r2, #0
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800264c:	4811      	ldr	r0, [pc, #68]	; (8002694 <MX_UART7_Init+0x90>)
 800264e:	f009 fae7 	bl	800bc20 <HAL_UART_Init>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8002658:	f7ff fb6c 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800265c:	2100      	movs	r1, #0
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <MX_UART7_Init+0x90>)
 8002660:	f00a faef 	bl	800cc42 <HAL_UARTEx_SetTxFifoThreshold>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_UART7_Init+0x6a>
  {
    Error_Handler();
 800266a:	f7ff fb63 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800266e:	2100      	movs	r1, #0
 8002670:	4808      	ldr	r0, [pc, #32]	; (8002694 <MX_UART7_Init+0x90>)
 8002672:	f00a fb24 	bl	800ccbe <HAL_UARTEx_SetRxFifoThreshold>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_UART7_Init+0x7c>
  {
    Error_Handler();
 800267c:	f7ff fb5a 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 8002680:	4804      	ldr	r0, [pc, #16]	; (8002694 <MX_UART7_Init+0x90>)
 8002682:	f00a faa5 	bl	800cbd0 <HAL_UARTEx_DisableFifoMode>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_UART7_Init+0x8c>
  {
    Error_Handler();
 800268c:	f7ff fb52 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002690:	bf00      	nop
 8002692:	bd80      	pop	{r7, pc}
 8002694:	240007a0 	.word	0x240007a0
 8002698:	40007800 	.word	0x40007800

0800269c <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80026a0:	4b22      	ldr	r3, [pc, #136]	; (800272c <MX_UART8_Init+0x90>)
 80026a2:	4a23      	ldr	r2, [pc, #140]	; (8002730 <MX_UART8_Init+0x94>)
 80026a4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80026a6:	4b21      	ldr	r3, [pc, #132]	; (800272c <MX_UART8_Init+0x90>)
 80026a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026ac:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80026ae:	4b1f      	ldr	r3, [pc, #124]	; (800272c <MX_UART8_Init+0x90>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	; (800272c <MX_UART8_Init+0x90>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80026ba:	4b1c      	ldr	r3, [pc, #112]	; (800272c <MX_UART8_Init+0x90>)
 80026bc:	2200      	movs	r2, #0
 80026be:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <MX_UART8_Init+0x90>)
 80026c2:	220c      	movs	r2, #12
 80026c4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c6:	4b19      	ldr	r3, [pc, #100]	; (800272c <MX_UART8_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80026cc:	4b17      	ldr	r3, [pc, #92]	; (800272c <MX_UART8_Init+0x90>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026d2:	4b16      	ldr	r3, [pc, #88]	; (800272c <MX_UART8_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026d8:	4b14      	ldr	r3, [pc, #80]	; (800272c <MX_UART8_Init+0x90>)
 80026da:	2200      	movs	r2, #0
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <MX_UART8_Init+0x90>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80026e4:	4811      	ldr	r0, [pc, #68]	; (800272c <MX_UART8_Init+0x90>)
 80026e6:	f009 fa9b 	bl	800bc20 <HAL_UART_Init>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80026f0:	f7ff fb20 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026f4:	2100      	movs	r1, #0
 80026f6:	480d      	ldr	r0, [pc, #52]	; (800272c <MX_UART8_Init+0x90>)
 80026f8:	f00a faa3 	bl	800cc42 <HAL_UARTEx_SetTxFifoThreshold>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002702:	f7ff fb17 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002706:	2100      	movs	r1, #0
 8002708:	4808      	ldr	r0, [pc, #32]	; (800272c <MX_UART8_Init+0x90>)
 800270a:	f00a fad8 	bl	800ccbe <HAL_UARTEx_SetRxFifoThreshold>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002714:	f7ff fb0e 	bl	8001d34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002718:	4804      	ldr	r0, [pc, #16]	; (800272c <MX_UART8_Init+0x90>)
 800271a:	f00a fa59 	bl	800cbd0 <HAL_UARTEx_DisableFifoMode>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002724:	f7ff fb06 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002728:	bf00      	nop
 800272a:	bd80      	pop	{r7, pc}
 800272c:	24000834 	.word	0x24000834
 8002730:	40007c00 	.word	0x40007c00

08002734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b0be      	sub	sp, #248	; 0xf8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800274c:	f107 0320 	add.w	r3, r7, #32
 8002750:	22c0      	movs	r2, #192	; 0xc0
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f00a fb3f 	bl	800cdd8 <memset>
  if(uartHandle->Instance==UART4)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a73      	ldr	r2, [pc, #460]	; (800292c <HAL_UART_MspInit+0x1f8>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d147      	bne.n	80027f4 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002764:	f04f 0202 	mov.w	r2, #2
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002770:	2300      	movs	r3, #0
 8002772:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002776:	f107 0320 	add.w	r3, r7, #32
 800277a:	4618      	mov	r0, r3
 800277c:	f006 f976 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d001      	beq.n	800278a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002786:	f7ff fad5 	bl	8001d34 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800278a:	4b69      	ldr	r3, [pc, #420]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 800278c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002790:	4a67      	ldr	r2, [pc, #412]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 8002792:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002796:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800279a:	4b65      	ldr	r3, [pc, #404]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 800279c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027a8:	4b61      	ldr	r3, [pc, #388]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 80027aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ae:	4a60      	ldr	r2, [pc, #384]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 80027b0:	f043 0304 	orr.w	r3, r3, #4
 80027b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027b8:	4b5d      	ldr	r3, [pc, #372]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 80027ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027be:	f003 0304 	and.w	r3, r3, #4
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = RS422_TX_1_Pin|RS422_RX_1_Pin;
 80027c6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ce:	2302      	movs	r3, #2
 80027d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	2300      	movs	r3, #0
 80027dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027e0:	2308      	movs	r3, #8
 80027e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80027ea:	4619      	mov	r1, r3
 80027ec:	4851      	ldr	r0, [pc, #324]	; (8002934 <HAL_UART_MspInit+0x200>)
 80027ee:	f004 fe1f 	bl	8007430 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
}
 80027f2:	e097      	b.n	8002924 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==UART7)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a4f      	ldr	r2, [pc, #316]	; (8002938 <HAL_UART_MspInit+0x204>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d147      	bne.n	800288e <HAL_UART_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80027fe:	f04f 0202 	mov.w	r2, #2
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800280a:	2300      	movs	r3, #0
 800280c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002810:	f107 0320 	add.w	r3, r7, #32
 8002814:	4618      	mov	r0, r3
 8002816:	f006 f929 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002820:	f7ff fa88 	bl	8001d34 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002824:	4b42      	ldr	r3, [pc, #264]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 8002826:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800282a:	4a41      	ldr	r2, [pc, #260]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 800282c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002830:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002834:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 8002836:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800283a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002842:	4b3b      	ldr	r3, [pc, #236]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 8002844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002848:	4a39      	ldr	r2, [pc, #228]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 800284a:	f043 0310 	orr.w	r3, r3, #16
 800284e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002852:	4b37      	ldr	r3, [pc, #220]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 8002854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RS422_RX_2_Pin|RS422_TX_2_Pin;
 8002860:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002864:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002874:	2300      	movs	r3, #0
 8002876:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 800287a:	2307      	movs	r3, #7
 800287c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002880:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002884:	4619      	mov	r1, r3
 8002886:	482d      	ldr	r0, [pc, #180]	; (800293c <HAL_UART_MspInit+0x208>)
 8002888:	f004 fdd2 	bl	8007430 <HAL_GPIO_Init>
}
 800288c:	e04a      	b.n	8002924 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==UART8)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a2b      	ldr	r2, [pc, #172]	; (8002940 <HAL_UART_MspInit+0x20c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d145      	bne.n	8002924 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002898:	f04f 0202 	mov.w	r2, #2
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028aa:	f107 0320 	add.w	r3, r7, #32
 80028ae:	4618      	mov	r0, r3
 80028b0:	f006 f8dc 	bl	8008a6c <HAL_RCCEx_PeriphCLKConfig>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_UART_MspInit+0x18a>
      Error_Handler();
 80028ba:	f7ff fa3b 	bl	8001d34 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80028be:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 80028c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028c4:	4a1a      	ldr	r2, [pc, #104]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 80028c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80028ce:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 80028d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80028d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 80028de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028e2:	4a13      	ldr	r2, [pc, #76]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 80028e4:	f043 0310 	orr.w	r3, r3, #16
 80028e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_UART_MspInit+0x1fc>)
 80028ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_RX_Pin|RS485_TX_Pin;
 80028fa:	2303      	movs	r3, #3
 80028fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002900:	2302      	movs	r3, #2
 8002902:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002912:	2308      	movs	r3, #8
 8002914:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002918:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800291c:	4619      	mov	r1, r3
 800291e:	4807      	ldr	r0, [pc, #28]	; (800293c <HAL_UART_MspInit+0x208>)
 8002920:	f004 fd86 	bl	8007430 <HAL_GPIO_Init>
}
 8002924:	bf00      	nop
 8002926:	37f8      	adds	r7, #248	; 0xf8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40004c00 	.word	0x40004c00
 8002930:	58024400 	.word	0x58024400
 8002934:	58020800 	.word	0x58020800
 8002938:	40007800 	.word	0x40007800
 800293c:	58021000 	.word	0x58021000
 8002940:	40007c00 	.word	0x40007c00

08002944 <Reset_Handler>:
 8002944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800297c <LoopFillZerobss+0xe>
 8002948:	f7ff fa9a 	bl	8001e80 <SystemInit>
 800294c:	480c      	ldr	r0, [pc, #48]	; (8002980 <LoopFillZerobss+0x12>)
 800294e:	490d      	ldr	r1, [pc, #52]	; (8002984 <LoopFillZerobss+0x16>)
 8002950:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <LoopFillZerobss+0x1a>)
 8002952:	2300      	movs	r3, #0
 8002954:	e002      	b.n	800295c <LoopCopyDataInit>

08002956 <CopyDataInit>:
 8002956:	58d4      	ldr	r4, [r2, r3]
 8002958:	50c4      	str	r4, [r0, r3]
 800295a:	3304      	adds	r3, #4

0800295c <LoopCopyDataInit>:
 800295c:	18c4      	adds	r4, r0, r3
 800295e:	428c      	cmp	r4, r1
 8002960:	d3f9      	bcc.n	8002956 <CopyDataInit>
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <LoopFillZerobss+0x1e>)
 8002964:	4c0a      	ldr	r4, [pc, #40]	; (8002990 <LoopFillZerobss+0x22>)
 8002966:	2300      	movs	r3, #0
 8002968:	e001      	b.n	800296e <LoopFillZerobss>

0800296a <FillZerobss>:
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	3204      	adds	r2, #4

0800296e <LoopFillZerobss>:
 800296e:	42a2      	cmp	r2, r4
 8002970:	d3fb      	bcc.n	800296a <FillZerobss>
 8002972:	f00a fa39 	bl	800cde8 <__libc_init_array>
 8002976:	f7ff f857 	bl	8001a28 <main>
 800297a:	4770      	bx	lr
 800297c:	24080000 	.word	0x24080000
 8002980:	24000000 	.word	0x24000000
 8002984:	24000014 	.word	0x24000014
 8002988:	0800cf00 	.word	0x0800cf00
 800298c:	240000d4 	.word	0x240000d4
 8002990:	240008cc 	.word	0x240008cc

08002994 <ADC3_IRQHandler>:
 8002994:	e7fe      	b.n	8002994 <ADC3_IRQHandler>
	...

08002998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800299e:	2003      	movs	r0, #3
 80029a0:	f001 fc96 	bl	80042d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029a4:	f005 fe8c 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_Init+0x68>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	4913      	ldr	r1, [pc, #76]	; (8002a04 <HAL_Init+0x6c>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	fa22 f303 	lsr.w	r3, r2, r3
 80029c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_Init+0x68>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <HAL_Init+0x6c>)
 80029cc:	5cd3      	ldrb	r3, [r2, r3]
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
 80029d8:	4a0b      	ldr	r2, [pc, #44]	; (8002a08 <HAL_Init+0x70>)
 80029da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029dc:	4a0b      	ldr	r2, [pc, #44]	; (8002a0c <HAL_Init+0x74>)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029e2:	200f      	movs	r0, #15
 80029e4:	f000 f814 	bl	8002a10 <HAL_InitTick>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e002      	b.n	80029f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80029f2:	f7ff f9d9 	bl	8001da8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	58024400 	.word	0x58024400
 8002a04:	0800ceb0 	.word	0x0800ceb0
 8002a08:	24000004 	.word	0x24000004
 8002a0c:	24000000 	.word	0x24000000

08002a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <HAL_InitTick+0x60>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e021      	b.n	8002a68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002a24:	4b13      	ldr	r3, [pc, #76]	; (8002a74 <HAL_InitTick+0x64>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_InitTick+0x60>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f001 fc7b 	bl	8004336 <HAL_SYSTICK_Config>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00e      	b.n	8002a68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2b0f      	cmp	r3, #15
 8002a4e:	d80a      	bhi.n	8002a66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a50:	2200      	movs	r2, #0
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f001 fc45 	bl	80042e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a5c:	4a06      	ldr	r2, [pc, #24]	; (8002a78 <HAL_InitTick+0x68>)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	24000010 	.word	0x24000010
 8002a74:	24000000 	.word	0x24000000
 8002a78:	2400000c 	.word	0x2400000c

08002a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a80:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_IncTick+0x20>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a04      	ldr	r2, [pc, #16]	; (8002aa0 <HAL_IncTick+0x24>)
 8002a8e:	6013      	str	r3, [r2, #0]
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	24000010 	.word	0x24000010
 8002aa0:	240008c8 	.word	0x240008c8

08002aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa8:	4b03      	ldr	r3, [pc, #12]	; (8002ab8 <HAL_GetTick+0x14>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	240008c8 	.word	0x240008c8

08002abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac4:	f7ff ffee 	bl	8002aa4 <HAL_GetTick>
 8002ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d005      	beq.n	8002ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_Delay+0x44>)
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4413      	add	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ae2:	bf00      	nop
 8002ae4:	f7ff ffde 	bl	8002aa4 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d8f7      	bhi.n	8002ae4 <HAL_Delay+0x28>
  {
  }
}
 8002af4:	bf00      	nop
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	24000010 	.word	0x24000010

08002b04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_GetREVID+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	0c1b      	lsrs	r3, r3, #16
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	5c001000 	.word	0x5c001000

08002b1c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b2c:	4904      	ldr	r1, [pc, #16]	; (8002b40 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	604b      	str	r3, [r1, #4]
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	58000400 	.word	0x58000400

08002b44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	609a      	str	r2, [r3, #8]
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b087      	sub	sp, #28
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	3360      	adds	r3, #96	; 0x60
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	430b      	orrs	r3, r1
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	fa01 f303 	lsl.w	r3, r1, r3
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	611a      	str	r2, [r3, #16]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b087      	sub	sp, #28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3360      	adds	r3, #96	; 0x60
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4413      	add	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	601a      	str	r2, [r3, #0]
  }
}
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b087      	sub	sp, #28
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	60f8      	str	r0, [r7, #12]
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	3330      	adds	r3, #48	; 0x30
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	0a1b      	lsrs	r3, r3, #8
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	f003 030c 	and.w	r3, r3, #12
 8002c96:	4413      	add	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	211f      	movs	r1, #31
 8002ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	401a      	ands	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	0e9b      	lsrs	r3, r3, #26
 8002cb2:	f003 011f 	and.w	r1, r3, #31
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cc6:	bf00      	nop
 8002cc8:	371c      	adds	r7, #28
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
 8002cda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f023 0203 	bic.w	r2, r3, #3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	60da      	str	r2, [r3, #12]
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	3314      	adds	r3, #20
 8002d08:	461a      	mov	r2, r3
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	0e5b      	lsrs	r3, r3, #25
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	4413      	add	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	0d1b      	lsrs	r3, r3, #20
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2107      	movs	r1, #7
 8002d26:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2a:	43db      	mvns	r3, r3
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	0d1b      	lsrs	r3, r3, #20
 8002d32:	f003 031f 	and.w	r3, r3, #31
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f003 0318 	and.w	r3, r3, #24
 8002d72:	4908      	ldr	r1, [pc, #32]	; (8002d94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d74:	40d9      	lsrs	r1, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	400b      	ands	r3, r1
 8002d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	000fffff 	.word	0x000fffff

08002d98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 031f 	and.w	r3, r3, #31
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6093      	str	r3, [r2, #8]
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	5fffffc0 	.word	0x5fffffc0

08002dd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dec:	d101      	bne.n	8002df2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	4b05      	ldr	r3, [pc, #20]	; (8002e24 <LL_ADC_EnableInternalRegulator+0x24>)
 8002e0e:	4013      	ands	r3, r2
 8002e10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr
 8002e24:	6fffffc0 	.word	0x6fffffc0

08002e28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e3c:	d101      	bne.n	8002e42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	4b05      	ldr	r3, [pc, #20]	; (8002e74 <LL_ADC_Enable+0x24>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	f043 0201 	orr.w	r2, r3, #1
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	7fffffc0 	.word	0x7fffffc0

08002e78 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0301 	and.w	r3, r3, #1
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <LL_ADC_IsEnabled+0x18>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <LL_ADC_IsEnabled+0x1a>
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <LL_ADC_REG_StartConversion+0x24>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	f043 0204 	orr.w	r2, r3, #4
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	7fffffc0 	.word	0x7fffffc0

08002ec8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d101      	bne.n	8002ee0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d101      	bne.n	8002f06 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b089      	sub	sp, #36	; 0x24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e18f      	b.n	800324e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7fd fc8d 	bl	800085c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7ff ff3f 	bl	8002dd8 <LL_ADC_IsDeepPowerDownEnabled>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d004      	beq.n	8002f6a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff25 	bl	8002db4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff ff5a 	bl	8002e28 <LL_ADC_IsInternalRegulatorEnabled>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d114      	bne.n	8002fa4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff ff3e 	bl	8002e00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f84:	4b87      	ldr	r3, [pc, #540]	; (80031a4 <HAL_ADC_Init+0x290>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	099b      	lsrs	r3, r3, #6
 8002f8a:	4a87      	ldr	r2, [pc, #540]	; (80031a8 <HAL_ADC_Init+0x294>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	099b      	lsrs	r3, r3, #6
 8002f92:	3301      	adds	r3, #1
 8002f94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f96:	e002      	b.n	8002f9e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1f9      	bne.n	8002f98 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff3d 	bl	8002e28 <LL_ADC_IsInternalRegulatorEnabled>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d10d      	bne.n	8002fd0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb8:	f043 0210 	orr.w	r2, r3, #16
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	f043 0201 	orr.w	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff77 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 8002fda:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 8129 	bne.w	800323c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	f040 8125 	bne.w	800323c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002ffa:	f043 0202 	orr.w	r2, r3, #2
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff36 	bl	8002e78 <LL_ADC_IsEnabled>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d136      	bne.n	8003080 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a65      	ldr	r2, [pc, #404]	; (80031ac <HAL_ADC_Init+0x298>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_ADC_Init+0x112>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a63      	ldr	r2, [pc, #396]	; (80031b0 <HAL_ADC_Init+0x29c>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d10e      	bne.n	8003044 <HAL_ADC_Init+0x130>
 8003026:	4861      	ldr	r0, [pc, #388]	; (80031ac <HAL_ADC_Init+0x298>)
 8003028:	f7ff ff26 	bl	8002e78 <LL_ADC_IsEnabled>
 800302c:	4604      	mov	r4, r0
 800302e:	4860      	ldr	r0, [pc, #384]	; (80031b0 <HAL_ADC_Init+0x29c>)
 8003030:	f7ff ff22 	bl	8002e78 <LL_ADC_IsEnabled>
 8003034:	4603      	mov	r3, r0
 8003036:	4323      	orrs	r3, r4
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e008      	b.n	8003056 <HAL_ADC_Init+0x142>
 8003044:	485b      	ldr	r0, [pc, #364]	; (80031b4 <HAL_ADC_Init+0x2a0>)
 8003046:	f7ff ff17 	bl	8002e78 <LL_ADC_IsEnabled>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a53      	ldr	r2, [pc, #332]	; (80031ac <HAL_ADC_Init+0x298>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d004      	beq.n	800306e <HAL_ADC_Init+0x15a>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a51      	ldr	r2, [pc, #324]	; (80031b0 <HAL_ADC_Init+0x29c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <HAL_ADC_Init+0x15e>
 800306e:	4a52      	ldr	r2, [pc, #328]	; (80031b8 <HAL_ADC_Init+0x2a4>)
 8003070:	e000      	b.n	8003074 <HAL_ADC_Init+0x160>
 8003072:	4a52      	ldr	r2, [pc, #328]	; (80031bc <HAL_ADC_Init+0x2a8>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4619      	mov	r1, r3
 800307a:	4610      	mov	r0, r2
 800307c:	f7ff fd62 	bl	8002b44 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003080:	f7ff fd40 	bl	8002b04 <HAL_GetREVID>
 8003084:	4603      	mov	r3, r0
 8003086:	f241 0203 	movw	r2, #4099	; 0x1003
 800308a:	4293      	cmp	r3, r2
 800308c:	d914      	bls.n	80030b8 <HAL_ADC_Init+0x1a4>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b10      	cmp	r3, #16
 8003094:	d110      	bne.n	80030b8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	7d5b      	ldrb	r3, [r3, #21]
 800309a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030a0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030a6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	7f1b      	ldrb	r3, [r3, #28]
 80030ac:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80030ae:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b0:	f043 030c 	orr.w	r3, r3, #12
 80030b4:	61bb      	str	r3, [r7, #24]
 80030b6:	e00d      	b.n	80030d4 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	7d5b      	ldrb	r3, [r3, #21]
 80030bc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030c2:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80030c8:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	7f1b      	ldrb	r3, [r3, #28]
 80030ce:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80030d0:	4313      	orrs	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7f1b      	ldrb	r3, [r3, #28]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d106      	bne.n	80030ea <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	045b      	lsls	r3, r3, #17
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	4313      	orrs	r3, r2
 8003104:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <HAL_ADC_Init+0x2ac>)
 800310e:	4013      	ands	r3, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	69b9      	ldr	r1, [r7, #24]
 8003116:	430b      	orrs	r3, r1
 8003118:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff fed2 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 8003124:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7ff fedf 	bl	8002eee <LL_ADC_INJ_IsConversionOngoing>
 8003130:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d15f      	bne.n	80031f8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d15c      	bne.n	80031f8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7d1b      	ldrb	r3, [r3, #20]
 8003142:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <HAL_ADC_Init+0x2b0>)
 8003154:	4013      	ands	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	69b9      	ldr	r1, [r7, #24]
 800315c:	430b      	orrs	r3, r1
 800315e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003166:	2b01      	cmp	r3, #1
 8003168:	d130      	bne.n	80031cc <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691a      	ldr	r2, [r3, #16]
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <HAL_ADC_Init+0x2b4>)
 8003178:	4013      	ands	r3, r2
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800317e:	3a01      	subs	r2, #1
 8003180:	0411      	lsls	r1, r2, #16
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003186:	4311      	orrs	r1, r2
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800318c:	4311      	orrs	r1, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003192:	430a      	orrs	r2, r1
 8003194:	431a      	orrs	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	611a      	str	r2, [r3, #16]
 80031a0:	e01c      	b.n	80031dc <HAL_ADC_Init+0x2c8>
 80031a2:	bf00      	nop
 80031a4:	24000000 	.word	0x24000000
 80031a8:	053e2d63 	.word	0x053e2d63
 80031ac:	40022000 	.word	0x40022000
 80031b0:	40022100 	.word	0x40022100
 80031b4:	58026000 	.word	0x58026000
 80031b8:	40022300 	.word	0x40022300
 80031bc:	58026300 	.word	0x58026300
 80031c0:	fff0c003 	.word	0xfff0c003
 80031c4:	ffffbffc 	.word	0xffffbffc
 80031c8:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0201 	bic.w	r2, r2, #1
 80031da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 fd8c 	bl	8003d10 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10c      	bne.n	800321a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f023 010f 	bic.w	r1, r3, #15
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	1e5a      	subs	r2, r3, #1
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	631a      	str	r2, [r3, #48]	; 0x30
 8003218:	e007      	b.n	800322a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 020f 	bic.w	r2, r2, #15
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	f043 0201 	orr.w	r2, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	655a      	str	r2, [r3, #84]	; 0x54
 800323a:	e007      	b.n	800324c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	f043 0210 	orr.w	r2, r3, #16
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800324c:	7ffb      	ldrb	r3, [r7, #31]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	; 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd90      	pop	{r4, r7, pc}
 8003256:	bf00      	nop

08003258 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a55      	ldr	r2, [pc, #340]	; (80033c0 <HAL_ADC_Start_DMA+0x168>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d004      	beq.n	8003278 <HAL_ADC_Start_DMA+0x20>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a54      	ldr	r2, [pc, #336]	; (80033c4 <HAL_ADC_Start_DMA+0x16c>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_ADC_Start_DMA+0x24>
 8003278:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <HAL_ADC_Start_DMA+0x170>)
 800327a:	e000      	b.n	800327e <HAL_ADC_Start_DMA+0x26>
 800327c:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_ADC_Start_DMA+0x174>)
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fd8a 	bl	8002d98 <LL_ADC_GetMultimode>
 8003284:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff fe1c 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	f040 808c 	bne.w	80033b0 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_Start_DMA+0x4e>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e087      	b.n	80033b6 <HAL_ADC_Start_DMA+0x15e>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d005      	beq.n	80032c0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b05      	cmp	r3, #5
 80032b8:	d002      	beq.n	80032c0 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b09      	cmp	r3, #9
 80032be:	d170      	bne.n	80033a2 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fc07 	bl	8003ad4 <ADC_Enable>
 80032c6:	4603      	mov	r3, r0
 80032c8:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80032ca:	7dfb      	ldrb	r3, [r7, #23]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d163      	bne.n	8003398 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032d4:	4b3e      	ldr	r3, [pc, #248]	; (80033d0 <HAL_ADC_Start_DMA+0x178>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a37      	ldr	r2, [pc, #220]	; (80033c4 <HAL_ADC_Start_DMA+0x16c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d002      	beq.n	80032f0 <HAL_ADC_Start_DMA+0x98>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	e000      	b.n	80032f2 <HAL_ADC_Start_DMA+0x9a>
 80032f0:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <HAL_ADC_Start_DMA+0x168>)
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	6812      	ldr	r2, [r2, #0]
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d002      	beq.n	8003300 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003304:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d006      	beq.n	8003326 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331c:	f023 0206 	bic.w	r2, r3, #6
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	659a      	str	r2, [r3, #88]	; 0x58
 8003324:	e002      	b.n	800332c <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003330:	4a28      	ldr	r2, [pc, #160]	; (80033d4 <HAL_ADC_Start_DMA+0x17c>)
 8003332:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003338:	4a27      	ldr	r2, [pc, #156]	; (80033d8 <HAL_ADC_Start_DMA+0x180>)
 800333a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	4a26      	ldr	r2, [pc, #152]	; (80033dc <HAL_ADC_Start_DMA+0x184>)
 8003342:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	221c      	movs	r2, #28
 800334a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0210 	orr.w	r2, r2, #16
 8003362:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f7ff fcaf 	bl	8002cd2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3340      	adds	r3, #64	; 0x40
 800337e:	4619      	mov	r1, r3
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f001 fb40 	bl	8004a08 <HAL_DMA_Start_IT>
 8003388:	4603      	mov	r3, r0
 800338a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fd85 	bl	8002ea0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003396:	e00d      	b.n	80033b4 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80033a0:	e008      	b.n	80033b4 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80033ae:	e001      	b.n	80033b4 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033b0:	2302      	movs	r3, #2
 80033b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80033b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	40022000 	.word	0x40022000
 80033c4:	40022100 	.word	0x40022100
 80033c8:	40022300 	.word	0x40022300
 80033cc:	58026300 	.word	0x58026300
 80033d0:	fffff0fe 	.word	0xfffff0fe
 80033d4:	08003be9 	.word	0x08003be9
 80033d8:	08003cc1 	.word	0x08003cc1
 80033dc:	08003cdd 	.word	0x08003cdd

080033e0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b0a1      	sub	sp, #132	; 0x84
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a65      	ldr	r2, [pc, #404]	; (80035cc <HAL_ADC_ConfigChannel+0x1b0>)
 8003436:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800343e:	2b01      	cmp	r3, #1
 8003440:	d101      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x2a>
 8003442:	2302      	movs	r3, #2
 8003444:	e32e      	b.n	8003aa4 <HAL_ADC_ConfigChannel+0x688>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fd38 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	f040 8313 	bne.w	8003a86 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	db2c      	blt.n	80034c2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003470:	2b00      	cmp	r3, #0
 8003472:	d108      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x6a>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	0e9b      	lsrs	r3, r3, #26
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2201      	movs	r2, #1
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	e016      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x98>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800348e:	fa93 f3a3 	rbit	r3, r3
 8003492:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003494:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003496:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800349e:	2320      	movs	r3, #32
 80034a0:	e003      	b.n	80034aa <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80034a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80034a4:	fab3 f383 	clz	r3, r3
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2201      	movs	r2, #1
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6812      	ldr	r2, [r2, #0]
 80034b8:	69d1      	ldr	r1, [r2, #28]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	430b      	orrs	r3, r1
 80034c0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f7ff fbd3 	bl	8002c7a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff fcf5 	bl	8002ec8 <LL_ADC_REG_IsConversionOngoing>
 80034de:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fd02 	bl	8002eee <LL_ADC_INJ_IsConversionOngoing>
 80034ea:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f040 80b8 	bne.w	8003664 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f040 80b4 	bne.w	8003664 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	461a      	mov	r2, r3
 800350a:	f7ff fbf5 	bl	8002cf8 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800350e:	4b30      	ldr	r3, [pc, #192]	; (80035d0 <HAL_ADC_ConfigChannel+0x1b4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003516:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800351a:	d10b      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x118>
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	695a      	ldr	r2, [r3, #20]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	e01d      	b.n	8003570 <HAL_ADC_ConfigChannel+0x154>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	f003 0310 	and.w	r3, r3, #16
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10b      	bne.n	800355a <HAL_ADC_ConfigChannel+0x13e>
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	089b      	lsrs	r3, r3, #2
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	e00a      	b.n	8003570 <HAL_ADC_ConfigChannel+0x154>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	089b      	lsrs	r3, r3, #2
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	2b04      	cmp	r3, #4
 8003578:	d02c      	beq.n	80035d4 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6919      	ldr	r1, [r3, #16]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003588:	f7ff fb10 	bl	8002bac <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	6919      	ldr	r1, [r3, #16]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	7e5b      	ldrb	r3, [r3, #25]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d102      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x186>
 800359c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80035a0:	e000      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x188>
 80035a2:	2300      	movs	r3, #0
 80035a4:	461a      	mov	r2, r3
 80035a6:	f7ff fb3a 	bl	8002c1e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6919      	ldr	r1, [r3, #16]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	7e1b      	ldrb	r3, [r3, #24]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d102      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x1a4>
 80035ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035be:	e000      	b.n	80035c2 <HAL_ADC_ConfigChannel+0x1a6>
 80035c0:	2300      	movs	r3, #0
 80035c2:	461a      	mov	r2, r3
 80035c4:	f7ff fb12 	bl	8002bec <LL_ADC_SetDataRightShift>
 80035c8:	e04c      	b.n	8003664 <HAL_ADC_ConfigChannel+0x248>
 80035ca:	bf00      	nop
 80035cc:	47ff0000 	.word	0x47ff0000
 80035d0:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	069b      	lsls	r3, r3, #26
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d107      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80035f6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	069b      	lsls	r3, r3, #26
 8003608:	429a      	cmp	r2, r3
 800360a:	d107      	bne.n	800361c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800361a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	069b      	lsls	r3, r3, #26
 800362c:	429a      	cmp	r2, r3
 800362e:	d107      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800363e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003646:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	069b      	lsls	r3, r3, #26
 8003650:	429a      	cmp	r2, r3
 8003652:	d107      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003662:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fc05 	bl	8002e78 <LL_ADC_IsEnabled>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	f040 8211 	bne.w	8003a98 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6819      	ldr	r1, [r3, #0]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	461a      	mov	r2, r3
 8003684:	f7ff fb64 	bl	8002d50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	4aa1      	ldr	r2, [pc, #644]	; (8003914 <HAL_ADC_ConfigChannel+0x4f8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	f040 812e 	bne.w	80038f0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10b      	bne.n	80036bc <HAL_ADC_ConfigChannel+0x2a0>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e9b      	lsrs	r3, r3, #26
 80036aa:	3301      	adds	r3, #1
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	2b09      	cmp	r3, #9
 80036b2:	bf94      	ite	ls
 80036b4:	2301      	movls	r3, #1
 80036b6:	2300      	movhi	r3, #0
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	e019      	b.n	80036f0 <HAL_ADC_ConfigChannel+0x2d4>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036c4:	fa93 f3a3 	rbit	r3, r3
 80036c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80036ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80036ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80036d4:	2320      	movs	r3, #32
 80036d6:	e003      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80036d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	3301      	adds	r3, #1
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2b09      	cmp	r3, #9
 80036e8:	bf94      	ite	ls
 80036ea:	2301      	movls	r3, #1
 80036ec:	2300      	movhi	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d079      	beq.n	80037e8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d107      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x2f4>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	0e9b      	lsrs	r3, r3, #26
 8003706:	3301      	adds	r3, #1
 8003708:	069b      	lsls	r3, r3, #26
 800370a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800370e:	e015      	b.n	800373c <HAL_ADC_ConfigChannel+0x320>
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003718:	fa93 f3a3 	rbit	r3, r3
 800371c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800371e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003720:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8003728:	2320      	movs	r3, #32
 800372a:	e003      	b.n	8003734 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800372c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3301      	adds	r3, #1
 8003736:	069b      	lsls	r3, r3, #26
 8003738:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_ADC_ConfigChannel+0x340>
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	0e9b      	lsrs	r3, r3, #26
 800374e:	3301      	adds	r3, #1
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2101      	movs	r1, #1
 8003756:	fa01 f303 	lsl.w	r3, r1, r3
 800375a:	e017      	b.n	800378c <HAL_ADC_ConfigChannel+0x370>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003764:	fa93 f3a3 	rbit	r3, r3
 8003768:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800376a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800376c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800376e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003774:	2320      	movs	r3, #32
 8003776:	e003      	b.n	8003780 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003778:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	3301      	adds	r3, #1
 8003782:	f003 031f 	and.w	r3, r3, #31
 8003786:	2101      	movs	r1, #1
 8003788:	fa01 f303 	lsl.w	r3, r1, r3
 800378c:	ea42 0103 	orr.w	r1, r2, r3
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <HAL_ADC_ConfigChannel+0x396>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	0e9b      	lsrs	r3, r3, #26
 80037a2:	3301      	adds	r3, #1
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	4613      	mov	r3, r2
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4413      	add	r3, r2
 80037ae:	051b      	lsls	r3, r3, #20
 80037b0:	e018      	b.n	80037e4 <HAL_ADC_ConfigChannel+0x3c8>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80037c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80037ca:	2320      	movs	r3, #32
 80037cc:	e003      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80037ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d0:	fab3 f383 	clz	r3, r3
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	3301      	adds	r3, #1
 80037d8:	f003 021f 	and.w	r2, r3, #31
 80037dc:	4613      	mov	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4413      	add	r3, r2
 80037e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037e4:	430b      	orrs	r3, r1
 80037e6:	e07e      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d107      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x3e8>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	0e9b      	lsrs	r3, r3, #26
 80037fa:	3301      	adds	r3, #1
 80037fc:	069b      	lsls	r3, r3, #26
 80037fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003802:	e015      	b.n	8003830 <HAL_ADC_ConfigChannel+0x414>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	fa93 f3a3 	rbit	r3, r3
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800381c:	2320      	movs	r3, #32
 800381e:	e003      	b.n	8003828 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003822:	fab3 f383 	clz	r3, r3
 8003826:	b2db      	uxtb	r3, r3
 8003828:	3301      	adds	r3, #1
 800382a:	069b      	lsls	r3, r3, #26
 800382c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <HAL_ADC_ConfigChannel+0x434>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	0e9b      	lsrs	r3, r3, #26
 8003842:	3301      	adds	r3, #1
 8003844:	f003 031f 	and.w	r3, r3, #31
 8003848:	2101      	movs	r1, #1
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	e017      	b.n	8003880 <HAL_ADC_ConfigChannel+0x464>
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	fa93 f3a3 	rbit	r3, r3
 800385c:	61bb      	str	r3, [r7, #24]
  return result;
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003862:	6a3b      	ldr	r3, [r7, #32]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003868:	2320      	movs	r3, #32
 800386a:	e003      	b.n	8003874 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	fab3 f383 	clz	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	3301      	adds	r3, #1
 8003876:	f003 031f 	and.w	r3, r3, #31
 800387a:	2101      	movs	r1, #1
 800387c:	fa01 f303 	lsl.w	r3, r1, r3
 8003880:	ea42 0103 	orr.w	r1, r2, r3
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10d      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x490>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	0e9b      	lsrs	r3, r3, #26
 8003896:	3301      	adds	r3, #1
 8003898:	f003 021f 	and.w	r2, r3, #31
 800389c:	4613      	mov	r3, r2
 800389e:	005b      	lsls	r3, r3, #1
 80038a0:	4413      	add	r3, r2
 80038a2:	3b1e      	subs	r3, #30
 80038a4:	051b      	lsls	r3, r3, #20
 80038a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80038aa:	e01b      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x4c8>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	60fb      	str	r3, [r7, #12]
  return result;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80038c4:	2320      	movs	r3, #32
 80038c6:	e003      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	fab3 f383 	clz	r3, r3
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	f003 021f 	and.w	r2, r3, #31
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	3b1e      	subs	r3, #30
 80038de:	051b      	lsls	r3, r3, #20
 80038e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038e4:	430b      	orrs	r3, r1
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	6892      	ldr	r2, [r2, #8]
 80038ea:	4619      	mov	r1, r3
 80038ec:	f7ff fa04 	bl	8002cf8 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f280 80cf 	bge.w	8003a98 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a06      	ldr	r2, [pc, #24]	; (8003918 <HAL_ADC_ConfigChannel+0x4fc>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d004      	beq.n	800390e <HAL_ADC_ConfigChannel+0x4f2>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_ADC_ConfigChannel+0x500>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d10a      	bne.n	8003924 <HAL_ADC_ConfigChannel+0x508>
 800390e:	4b04      	ldr	r3, [pc, #16]	; (8003920 <HAL_ADC_ConfigChannel+0x504>)
 8003910:	e009      	b.n	8003926 <HAL_ADC_ConfigChannel+0x50a>
 8003912:	bf00      	nop
 8003914:	47ff0000 	.word	0x47ff0000
 8003918:	40022000 	.word	0x40022000
 800391c:	40022100 	.word	0x40022100
 8003920:	40022300 	.word	0x40022300
 8003924:	4b61      	ldr	r3, [pc, #388]	; (8003aac <HAL_ADC_ConfigChannel+0x690>)
 8003926:	4618      	mov	r0, r3
 8003928:	f7ff f932 	bl	8002b90 <LL_ADC_GetCommonPathInternalCh>
 800392c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a5f      	ldr	r2, [pc, #380]	; (8003ab0 <HAL_ADC_ConfigChannel+0x694>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_ADC_ConfigChannel+0x526>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a5d      	ldr	r2, [pc, #372]	; (8003ab4 <HAL_ADC_ConfigChannel+0x698>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d10e      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x544>
 8003942:	485b      	ldr	r0, [pc, #364]	; (8003ab0 <HAL_ADC_ConfigChannel+0x694>)
 8003944:	f7ff fa98 	bl	8002e78 <LL_ADC_IsEnabled>
 8003948:	4604      	mov	r4, r0
 800394a:	485a      	ldr	r0, [pc, #360]	; (8003ab4 <HAL_ADC_ConfigChannel+0x698>)
 800394c:	f7ff fa94 	bl	8002e78 <LL_ADC_IsEnabled>
 8003950:	4603      	mov	r3, r0
 8003952:	4323      	orrs	r3, r4
 8003954:	2b00      	cmp	r3, #0
 8003956:	bf0c      	ite	eq
 8003958:	2301      	moveq	r3, #1
 800395a:	2300      	movne	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e008      	b.n	8003972 <HAL_ADC_ConfigChannel+0x556>
 8003960:	4855      	ldr	r0, [pc, #340]	; (8003ab8 <HAL_ADC_ConfigChannel+0x69c>)
 8003962:	f7ff fa89 	bl	8002e78 <LL_ADC_IsEnabled>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d07d      	beq.n	8003a72 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a50      	ldr	r2, [pc, #320]	; (8003abc <HAL_ADC_ConfigChannel+0x6a0>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d130      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x5c6>
 8003980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d12b      	bne.n	80039e2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a4a      	ldr	r2, [pc, #296]	; (8003ab8 <HAL_ADC_ConfigChannel+0x69c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	f040 8081 	bne.w	8003a98 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a45      	ldr	r2, [pc, #276]	; (8003ab0 <HAL_ADC_ConfigChannel+0x694>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d004      	beq.n	80039aa <HAL_ADC_ConfigChannel+0x58e>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a43      	ldr	r2, [pc, #268]	; (8003ab4 <HAL_ADC_ConfigChannel+0x698>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x592>
 80039aa:	4a45      	ldr	r2, [pc, #276]	; (8003ac0 <HAL_ADC_ConfigChannel+0x6a4>)
 80039ac:	e000      	b.n	80039b0 <HAL_ADC_ConfigChannel+0x594>
 80039ae:	4a3f      	ldr	r2, [pc, #252]	; (8003aac <HAL_ADC_ConfigChannel+0x690>)
 80039b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039b6:	4619      	mov	r1, r3
 80039b8:	4610      	mov	r0, r2
 80039ba:	f7ff f8d6 	bl	8002b6a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039be:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_ADC_ConfigChannel+0x6a8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	4a40      	ldr	r2, [pc, #256]	; (8003ac8 <HAL_ADC_ConfigChannel+0x6ac>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	099b      	lsrs	r3, r3, #6
 80039cc:	3301      	adds	r3, #1
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039d2:	e002      	b.n	80039da <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f9      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039e0:	e05a      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a39      	ldr	r2, [pc, #228]	; (8003acc <HAL_ADC_ConfigChannel+0x6b0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d11e      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x60e>
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d119      	bne.n	8003a2a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2f      	ldr	r2, [pc, #188]	; (8003ab8 <HAL_ADC_ConfigChannel+0x69c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d14b      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a2a      	ldr	r2, [pc, #168]	; (8003ab0 <HAL_ADC_ConfigChannel+0x694>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d004      	beq.n	8003a14 <HAL_ADC_ConfigChannel+0x5f8>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a29      	ldr	r2, [pc, #164]	; (8003ab4 <HAL_ADC_ConfigChannel+0x698>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d101      	bne.n	8003a18 <HAL_ADC_ConfigChannel+0x5fc>
 8003a14:	4a2a      	ldr	r2, [pc, #168]	; (8003ac0 <HAL_ADC_ConfigChannel+0x6a4>)
 8003a16:	e000      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x5fe>
 8003a18:	4a24      	ldr	r2, [pc, #144]	; (8003aac <HAL_ADC_ConfigChannel+0x690>)
 8003a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a20:	4619      	mov	r1, r3
 8003a22:	4610      	mov	r0, r2
 8003a24:	f7ff f8a1 	bl	8002b6a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a28:	e036      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a28      	ldr	r2, [pc, #160]	; (8003ad0 <HAL_ADC_ConfigChannel+0x6b4>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d131      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x67c>
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d12c      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1d      	ldr	r2, [pc, #116]	; (8003ab8 <HAL_ADC_ConfigChannel+0x69c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d127      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a18      	ldr	r2, [pc, #96]	; (8003ab0 <HAL_ADC_ConfigChannel+0x694>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d004      	beq.n	8003a5c <HAL_ADC_ConfigChannel+0x640>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a17      	ldr	r2, [pc, #92]	; (8003ab4 <HAL_ADC_ConfigChannel+0x698>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x644>
 8003a5c:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_ADC_ConfigChannel+0x6a4>)
 8003a5e:	e000      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x646>
 8003a60:	4a12      	ldr	r2, [pc, #72]	; (8003aac <HAL_ADC_ConfigChannel+0x690>)
 8003a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a68:	4619      	mov	r1, r3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	f7ff f87d 	bl	8002b6a <LL_ADC_SetCommonPathInternalCh>
 8003a70:	e012      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a76:	f043 0220 	orr.w	r2, r3, #32
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003a84:	e008      	b.n	8003a98 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a8a:	f043 0220 	orr.w	r2, r3, #32
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003aa0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3784      	adds	r7, #132	; 0x84
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd90      	pop	{r4, r7, pc}
 8003aac:	58026300 	.word	0x58026300
 8003ab0:	40022000 	.word	0x40022000
 8003ab4:	40022100 	.word	0x40022100
 8003ab8:	58026000 	.word	0x58026000
 8003abc:	cb840000 	.word	0xcb840000
 8003ac0:	40022300 	.word	0x40022300
 8003ac4:	24000000 	.word	0x24000000
 8003ac8:	053e2d63 	.word	0x053e2d63
 8003acc:	c7520000 	.word	0xc7520000
 8003ad0:	cfb80000 	.word	0xcfb80000

08003ad4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f9c9 	bl	8002e78 <LL_ADC_IsEnabled>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d16e      	bne.n	8003bca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	4b38      	ldr	r3, [pc, #224]	; (8003bd4 <ADC_Enable+0x100>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afe:	f043 0210 	orr.w	r2, r3, #16
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e05a      	b.n	8003bcc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff f998 	bl	8002e50 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b20:	f7fe ffc0 	bl	8002aa4 <HAL_GetTick>
 8003b24:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a2b      	ldr	r2, [pc, #172]	; (8003bd8 <ADC_Enable+0x104>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d004      	beq.n	8003b3a <ADC_Enable+0x66>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a29      	ldr	r2, [pc, #164]	; (8003bdc <ADC_Enable+0x108>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <ADC_Enable+0x6a>
 8003b3a:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <ADC_Enable+0x10c>)
 8003b3c:	e000      	b.n	8003b40 <ADC_Enable+0x6c>
 8003b3e:	4b29      	ldr	r3, [pc, #164]	; (8003be4 <ADC_Enable+0x110>)
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7ff f929 	bl	8002d98 <LL_ADC_GetMultimode>
 8003b46:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a23      	ldr	r2, [pc, #140]	; (8003bdc <ADC_Enable+0x108>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d002      	beq.n	8003b58 <ADC_Enable+0x84>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	e000      	b.n	8003b5a <ADC_Enable+0x86>
 8003b58:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <ADC_Enable+0x104>)
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d02c      	beq.n	8003bbc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d130      	bne.n	8003bca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b68:	e028      	b.n	8003bbc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f982 	bl	8002e78 <LL_ADC_IsEnabled>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff f966 	bl	8002e50 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b84:	f7fe ff8e 	bl	8002aa4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d914      	bls.n	8003bbc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d00d      	beq.n	8003bbc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ba4:	f043 0210 	orr.w	r2, r3, #16
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	f043 0201 	orr.w	r2, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e007      	b.n	8003bcc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d1cf      	bne.n	8003b6a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	8000003f 	.word	0x8000003f
 8003bd8:	40022000 	.word	0x40022000
 8003bdc:	40022100 	.word	0x40022100
 8003be0:	40022300 	.word	0x40022300
 8003be4:	58026300 	.word	0x58026300

08003be8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d14b      	bne.n	8003c9a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d021      	beq.n	8003c60 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff f817 	bl	8002c54 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d032      	beq.n	8003c92 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d12b      	bne.n	8003c92 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c4a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d11f      	bne.n	8003c92 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c56:	f043 0201 	orr.w	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	655a      	str	r2, [r3, #84]	; 0x54
 8003c5e:	e018      	b.n	8003c92 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d111      	bne.n	8003c92 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d105      	bne.n	8003c92 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8a:	f043 0201 	orr.w	r2, r3, #1
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff fba4 	bl	80033e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003c98:	e00e      	b.n	8003cb8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f7ff fbae 	bl	8003408 <HAL_ADC_ErrorCallback>
}
 8003cac:	e004      	b.n	8003cb8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	4798      	blx	r3
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ccc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff fb90 	bl	80033f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cd4:	bf00      	nop
 8003cd6:	3710      	adds	r7, #16
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f043 0204 	orr.w	r2, r3, #4
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f7ff fb80 	bl	8003408 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d08:	bf00      	nop
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a7a      	ldr	r2, [pc, #488]	; (8003f08 <ADC_ConfigureBoostMode+0x1f8>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d004      	beq.n	8003d2c <ADC_ConfigureBoostMode+0x1c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a79      	ldr	r2, [pc, #484]	; (8003f0c <ADC_ConfigureBoostMode+0x1fc>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d109      	bne.n	8003d40 <ADC_ConfigureBoostMode+0x30>
 8003d2c:	4b78      	ldr	r3, [pc, #480]	; (8003f10 <ADC_ConfigureBoostMode+0x200>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bf14      	ite	ne
 8003d38:	2301      	movne	r3, #1
 8003d3a:	2300      	moveq	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	e008      	b.n	8003d52 <ADC_ConfigureBoostMode+0x42>
 8003d40:	4b74      	ldr	r3, [pc, #464]	; (8003f14 <ADC_ConfigureBoostMode+0x204>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01c      	beq.n	8003d90 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d56:	f004 fe2d 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 8003d5a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d64:	d010      	beq.n	8003d88 <ADC_ConfigureBoostMode+0x78>
 8003d66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d6a:	d873      	bhi.n	8003e54 <ADC_ConfigureBoostMode+0x144>
 8003d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d70:	d002      	beq.n	8003d78 <ADC_ConfigureBoostMode+0x68>
 8003d72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d76:	d16d      	bne.n	8003e54 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	68fa      	ldr	r2, [r7, #12]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	60fb      	str	r3, [r7, #12]
        break;
 8003d86:	e068      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	089b      	lsrs	r3, r3, #2
 8003d8c:	60fb      	str	r3, [r7, #12]
        break;
 8003d8e:	e064      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d90:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	f006 f872 	bl	8009e80 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d9c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003da6:	d051      	beq.n	8003e4c <ADC_ConfigureBoostMode+0x13c>
 8003da8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003dac:	d854      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dae:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003db2:	d047      	beq.n	8003e44 <ADC_ConfigureBoostMode+0x134>
 8003db4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003db8:	d84e      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dba:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003dbe:	d03d      	beq.n	8003e3c <ADC_ConfigureBoostMode+0x12c>
 8003dc0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003dc4:	d848      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dca:	d033      	beq.n	8003e34 <ADC_ConfigureBoostMode+0x124>
 8003dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd0:	d842      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dd2:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003dd6:	d029      	beq.n	8003e2c <ADC_ConfigureBoostMode+0x11c>
 8003dd8:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ddc:	d83c      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dde:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003de2:	d01a      	beq.n	8003e1a <ADC_ConfigureBoostMode+0x10a>
 8003de4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003de8:	d836      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003dea:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003dee:	d014      	beq.n	8003e1a <ADC_ConfigureBoostMode+0x10a>
 8003df0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003df4:	d830      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003df6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dfa:	d00e      	beq.n	8003e1a <ADC_ConfigureBoostMode+0x10a>
 8003dfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e00:	d82a      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003e02:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e06:	d008      	beq.n	8003e1a <ADC_ConfigureBoostMode+0x10a>
 8003e08:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003e0c:	d824      	bhi.n	8003e58 <ADC_ConfigureBoostMode+0x148>
 8003e0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e12:	d002      	beq.n	8003e1a <ADC_ConfigureBoostMode+0x10a>
 8003e14:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003e18:	d11e      	bne.n	8003e58 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	0c9b      	lsrs	r3, r3, #18
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e28:	60fb      	str	r3, [r7, #12]
        break;
 8003e2a:	e016      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	091b      	lsrs	r3, r3, #4
 8003e30:	60fb      	str	r3, [r7, #12]
        break;
 8003e32:	e012      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	60fb      	str	r3, [r7, #12]
        break;
 8003e3a:	e00e      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	099b      	lsrs	r3, r3, #6
 8003e40:	60fb      	str	r3, [r7, #12]
        break;
 8003e42:	e00a      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	09db      	lsrs	r3, r3, #7
 8003e48:	60fb      	str	r3, [r7, #12]
        break;
 8003e4a:	e006      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	60fb      	str	r3, [r7, #12]
        break;
 8003e52:	e002      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
        break;
 8003e54:	bf00      	nop
 8003e56:	e000      	b.n	8003e5a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003e58:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003e5a:	f7fe fe53 	bl	8002b04 <HAL_GetREVID>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f241 0203 	movw	r2, #4099	; 0x1003
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d815      	bhi.n	8003e94 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	4a2b      	ldr	r2, [pc, #172]	; (8003f18 <ADC_ConfigureBoostMode+0x208>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d908      	bls.n	8003e82 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e80:	e03e      	b.n	8003f00 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e90:	609a      	str	r2, [r3, #8]
}
 8003e92:	e035      	b.n	8003f00 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a1f      	ldr	r2, [pc, #124]	; (8003f1c <ADC_ConfigureBoostMode+0x20c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d808      	bhi.n	8003eb4 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003eb0:	609a      	str	r2, [r3, #8]
}
 8003eb2:	e025      	b.n	8003f00 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	; (8003f20 <ADC_ConfigureBoostMode+0x210>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d80a      	bhi.n	8003ed2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ece:	609a      	str	r2, [r3, #8]
}
 8003ed0:	e016      	b.n	8003f00 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a13      	ldr	r2, [pc, #76]	; (8003f24 <ADC_ConfigureBoostMode+0x214>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d80a      	bhi.n	8003ef0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eec:	609a      	str	r2, [r3, #8]
}
 8003eee:	e007      	b.n	8003f00 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689a      	ldr	r2, [r3, #8]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003efe:	609a      	str	r2, [r3, #8]
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40022000 	.word	0x40022000
 8003f0c:	40022100 	.word	0x40022100
 8003f10:	40022300 	.word	0x40022300
 8003f14:	58026300 	.word	0x58026300
 8003f18:	01312d00 	.word	0x01312d00
 8003f1c:	005f5e10 	.word	0x005f5e10
 8003f20:	00bebc20 	.word	0x00bebc20
 8003f24:	017d7840 	.word	0x017d7840

08003f28 <LL_ADC_IsEnabled>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 0301 	and.w	r3, r3, #1
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d101      	bne.n	8003f40 <LL_ADC_IsEnabled+0x18>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <LL_ADC_IsEnabled+0x1a>
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_ADC_REG_IsConversionOngoing>:
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0304 	and.w	r3, r3, #4
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d101      	bne.n	8003f66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e000      	b.n	8003f68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b09f      	sub	sp, #124	; 0x7c
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e0be      	b.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a5c      	ldr	r2, [pc, #368]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d102      	bne.n	8003fb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fac:	4b5b      	ldr	r3, [pc, #364]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fae:	60bb      	str	r3, [r7, #8]
 8003fb0:	e001      	b.n	8003fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	f043 0220 	orr.w	r2, r3, #32
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e09d      	b.n	8004110 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff ffb9 	bl	8003f4e <LL_ADC_REG_IsConversionOngoing>
 8003fdc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff ffb3 	bl	8003f4e <LL_ADC_REG_IsConversionOngoing>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d17f      	bne.n	80040ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d17c      	bne.n	80040ee <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a47      	ldr	r2, [pc, #284]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a46      	ldr	r2, [pc, #280]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d101      	bne.n	800400c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8004008:	4b45      	ldr	r3, [pc, #276]	; (8004120 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800400a:	e000      	b.n	800400e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800400c:	4b45      	ldr	r3, [pc, #276]	; (8004124 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800400e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d039      	beq.n	800408c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	431a      	orrs	r2, r3
 8004026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004028:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a3a      	ldr	r2, [pc, #232]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d004      	beq.n	800403e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a38      	ldr	r2, [pc, #224]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d10e      	bne.n	800405c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800403e:	4836      	ldr	r0, [pc, #216]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8004040:	f7ff ff72 	bl	8003f28 <LL_ADC_IsEnabled>
 8004044:	4604      	mov	r4, r0
 8004046:	4835      	ldr	r0, [pc, #212]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8004048:	f7ff ff6e 	bl	8003f28 <LL_ADC_IsEnabled>
 800404c:	4603      	mov	r3, r0
 800404e:	4323      	orrs	r3, r4
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	e008      	b.n	800406e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800405c:	4832      	ldr	r0, [pc, #200]	; (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800405e:	f7ff ff63 	bl	8003f28 <LL_ADC_IsEnabled>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	bf0c      	ite	eq
 8004068:	2301      	moveq	r3, #1
 800406a:	2300      	movne	r3, #0
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d047      	beq.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	4b2d      	ldr	r3, [pc, #180]	; (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004078:	4013      	ands	r3, r2
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	6811      	ldr	r1, [r2, #0]
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	6892      	ldr	r2, [r2, #8]
 8004082:	430a      	orrs	r2, r1
 8004084:	431a      	orrs	r2, r3
 8004086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004088:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800408a:	e03a      	b.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800408c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004096:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d004      	beq.n	80040ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1d      	ldr	r2, [pc, #116]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d10e      	bne.n	80040ca <HAL_ADCEx_MultiModeConfigChannel+0x156>
 80040ac:	481a      	ldr	r0, [pc, #104]	; (8004118 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80040ae:	f7ff ff3b 	bl	8003f28 <LL_ADC_IsEnabled>
 80040b2:	4604      	mov	r4, r0
 80040b4:	4819      	ldr	r0, [pc, #100]	; (800411c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80040b6:	f7ff ff37 	bl	8003f28 <LL_ADC_IsEnabled>
 80040ba:	4603      	mov	r3, r0
 80040bc:	4323      	orrs	r3, r4
 80040be:	2b00      	cmp	r3, #0
 80040c0:	bf0c      	ite	eq
 80040c2:	2301      	moveq	r3, #1
 80040c4:	2300      	movne	r3, #0
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	e008      	b.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80040ca:	4817      	ldr	r0, [pc, #92]	; (8004128 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80040cc:	f7ff ff2c 	bl	8003f28 <LL_ADC_IsEnabled>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	bf0c      	ite	eq
 80040d6:	2301      	moveq	r3, #1
 80040d8:	2300      	movne	r3, #0
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d010      	beq.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	4b11      	ldr	r3, [pc, #68]	; (800412c <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040ea:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040ec:	e009      	b.n	8004102 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	f043 0220 	orr.w	r2, r3, #32
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004100:	e000      	b.n	8004104 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004102:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800410c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8004110:	4618      	mov	r0, r3
 8004112:	377c      	adds	r7, #124	; 0x7c
 8004114:	46bd      	mov	sp, r7
 8004116:	bd90      	pop	{r4, r7, pc}
 8004118:	40022000 	.word	0x40022000
 800411c:	40022100 	.word	0x40022100
 8004120:	40022300 	.word	0x40022300
 8004124:	58026300 	.word	0x58026300
 8004128:	58026000 	.word	0x58026000
 800412c:	fffff0e0 	.word	0xfffff0e0

08004130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <__NVIC_SetPriorityGrouping+0x40>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800414c:	4013      	ands	r3, r2
 800414e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004158:	4b06      	ldr	r3, [pc, #24]	; (8004174 <__NVIC_SetPriorityGrouping+0x44>)
 800415a:	4313      	orrs	r3, r2
 800415c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800415e:	4a04      	ldr	r2, [pc, #16]	; (8004170 <__NVIC_SetPriorityGrouping+0x40>)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	60d3      	str	r3, [r2, #12]
}
 8004164:	bf00      	nop
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr
 8004170:	e000ed00 	.word	0xe000ed00
 8004174:	05fa0000 	.word	0x05fa0000

08004178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800417c:	4b04      	ldr	r3, [pc, #16]	; (8004190 <__NVIC_GetPriorityGrouping+0x18>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	0a1b      	lsrs	r3, r3, #8
 8004182:	f003 0307 	and.w	r3, r3, #7
}
 8004186:	4618      	mov	r0, r3
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	e000ed00 	.word	0xe000ed00

08004194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	4603      	mov	r3, r0
 800419c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800419e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db0b      	blt.n	80041be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041a6:	88fb      	ldrh	r3, [r7, #6]
 80041a8:	f003 021f 	and.w	r2, r3, #31
 80041ac:	4907      	ldr	r1, [pc, #28]	; (80041cc <__NVIC_EnableIRQ+0x38>)
 80041ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	2001      	movs	r0, #1
 80041b6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	e000e100 	.word	0xe000e100

080041d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	4603      	mov	r3, r0
 80041d8:	6039      	str	r1, [r7, #0]
 80041da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	db0a      	blt.n	80041fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	490c      	ldr	r1, [pc, #48]	; (800421c <__NVIC_SetPriority+0x4c>)
 80041ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ee:	0112      	lsls	r2, r2, #4
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	440b      	add	r3, r1
 80041f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041f8:	e00a      	b.n	8004210 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	4908      	ldr	r1, [pc, #32]	; (8004220 <__NVIC_SetPriority+0x50>)
 8004200:	88fb      	ldrh	r3, [r7, #6]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	3b04      	subs	r3, #4
 8004208:	0112      	lsls	r2, r2, #4
 800420a:	b2d2      	uxtb	r2, r2
 800420c:	440b      	add	r3, r1
 800420e:	761a      	strb	r2, [r3, #24]
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	e000e100 	.word	0xe000e100
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004224:	b480      	push	{r7}
 8004226:	b089      	sub	sp, #36	; 0x24
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 0307 	and.w	r3, r3, #7
 8004236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f1c3 0307 	rsb	r3, r3, #7
 800423e:	2b04      	cmp	r3, #4
 8004240:	bf28      	it	cs
 8004242:	2304      	movcs	r3, #4
 8004244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3304      	adds	r3, #4
 800424a:	2b06      	cmp	r3, #6
 800424c:	d902      	bls.n	8004254 <NVIC_EncodePriority+0x30>
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	3b03      	subs	r3, #3
 8004252:	e000      	b.n	8004256 <NVIC_EncodePriority+0x32>
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004258:	f04f 32ff 	mov.w	r2, #4294967295
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	fa02 f303 	lsl.w	r3, r2, r3
 8004262:	43da      	mvns	r2, r3
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	401a      	ands	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800426c:	f04f 31ff 	mov.w	r1, #4294967295
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	fa01 f303 	lsl.w	r3, r1, r3
 8004276:	43d9      	mvns	r1, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800427c:	4313      	orrs	r3, r2
         );
}
 800427e:	4618      	mov	r0, r3
 8004280:	3724      	adds	r7, #36	; 0x24
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	3b01      	subs	r3, #1
 8004298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800429c:	d301      	bcc.n	80042a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800429e:	2301      	movs	r3, #1
 80042a0:	e00f      	b.n	80042c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a2:	4a0a      	ldr	r2, [pc, #40]	; (80042cc <SysTick_Config+0x40>)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3b01      	subs	r3, #1
 80042a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042aa:	210f      	movs	r1, #15
 80042ac:	f04f 30ff 	mov.w	r0, #4294967295
 80042b0:	f7ff ff8e 	bl	80041d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b4:	4b05      	ldr	r3, [pc, #20]	; (80042cc <SysTick_Config+0x40>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ba:	4b04      	ldr	r3, [pc, #16]	; (80042cc <SysTick_Config+0x40>)
 80042bc:	2207      	movs	r2, #7
 80042be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	e000e010 	.word	0xe000e010

080042d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7ff ff29 	bl	8004130 <__NVIC_SetPriorityGrouping>
}
 80042de:	bf00      	nop
 80042e0:	3708      	adds	r7, #8
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b086      	sub	sp, #24
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	4603      	mov	r3, r0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042f4:	f7ff ff40 	bl	8004178 <__NVIC_GetPriorityGrouping>
 80042f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	6978      	ldr	r0, [r7, #20]
 8004300:	f7ff ff90 	bl	8004224 <NVIC_EncodePriority>
 8004304:	4602      	mov	r2, r0
 8004306:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ff5f 	bl	80041d0 <__NVIC_SetPriority>
}
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b082      	sub	sp, #8
 800431e:	af00      	add	r7, sp, #0
 8004320:	4603      	mov	r3, r0
 8004322:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004324:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff ff33 	bl	8004194 <__NVIC_EnableIRQ>
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004336:	b580      	push	{r7, lr}
 8004338:	b082      	sub	sp, #8
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff ffa4 	bl	800428c <SysTick_Config>
 8004344:	4603      	mov	r3, r0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004358:	f7fe fba4 	bl	8002aa4 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e316      	b.n	8004996 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a66      	ldr	r2, [pc, #408]	; (8004508 <HAL_DMA_Init+0x1b8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d04a      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a65      	ldr	r2, [pc, #404]	; (800450c <HAL_DMA_Init+0x1bc>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d045      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a63      	ldr	r2, [pc, #396]	; (8004510 <HAL_DMA_Init+0x1c0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d040      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a62      	ldr	r2, [pc, #392]	; (8004514 <HAL_DMA_Init+0x1c4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d03b      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a60      	ldr	r2, [pc, #384]	; (8004518 <HAL_DMA_Init+0x1c8>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d036      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a5f      	ldr	r2, [pc, #380]	; (800451c <HAL_DMA_Init+0x1cc>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d031      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a5d      	ldr	r2, [pc, #372]	; (8004520 <HAL_DMA_Init+0x1d0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d02c      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a5c      	ldr	r2, [pc, #368]	; (8004524 <HAL_DMA_Init+0x1d4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d027      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a5a      	ldr	r2, [pc, #360]	; (8004528 <HAL_DMA_Init+0x1d8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d022      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a59      	ldr	r2, [pc, #356]	; (800452c <HAL_DMA_Init+0x1dc>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d01d      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a57      	ldr	r2, [pc, #348]	; (8004530 <HAL_DMA_Init+0x1e0>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d018      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a56      	ldr	r2, [pc, #344]	; (8004534 <HAL_DMA_Init+0x1e4>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d013      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a54      	ldr	r2, [pc, #336]	; (8004538 <HAL_DMA_Init+0x1e8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d00e      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a53      	ldr	r2, [pc, #332]	; (800453c <HAL_DMA_Init+0x1ec>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d009      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a51      	ldr	r2, [pc, #324]	; (8004540 <HAL_DMA_Init+0x1f0>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d004      	beq.n	8004408 <HAL_DMA_Init+0xb8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a50      	ldr	r2, [pc, #320]	; (8004544 <HAL_DMA_Init+0x1f4>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d101      	bne.n	800440c <HAL_DMA_Init+0xbc>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <HAL_DMA_Init+0xbe>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 813b 	beq.w	800468a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2202      	movs	r2, #2
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a37      	ldr	r2, [pc, #220]	; (8004508 <HAL_DMA_Init+0x1b8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d04a      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a36      	ldr	r2, [pc, #216]	; (800450c <HAL_DMA_Init+0x1bc>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d045      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a34      	ldr	r2, [pc, #208]	; (8004510 <HAL_DMA_Init+0x1c0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d040      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a33      	ldr	r2, [pc, #204]	; (8004514 <HAL_DMA_Init+0x1c4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d03b      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a31      	ldr	r2, [pc, #196]	; (8004518 <HAL_DMA_Init+0x1c8>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d036      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a30      	ldr	r2, [pc, #192]	; (800451c <HAL_DMA_Init+0x1cc>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d031      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a2e      	ldr	r2, [pc, #184]	; (8004520 <HAL_DMA_Init+0x1d0>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d02c      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a2d      	ldr	r2, [pc, #180]	; (8004524 <HAL_DMA_Init+0x1d4>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d027      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2b      	ldr	r2, [pc, #172]	; (8004528 <HAL_DMA_Init+0x1d8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d022      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a2a      	ldr	r2, [pc, #168]	; (800452c <HAL_DMA_Init+0x1dc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d01d      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a28      	ldr	r2, [pc, #160]	; (8004530 <HAL_DMA_Init+0x1e0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a27      	ldr	r2, [pc, #156]	; (8004534 <HAL_DMA_Init+0x1e4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d013      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a25      	ldr	r2, [pc, #148]	; (8004538 <HAL_DMA_Init+0x1e8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a24      	ldr	r2, [pc, #144]	; (800453c <HAL_DMA_Init+0x1ec>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a22      	ldr	r2, [pc, #136]	; (8004540 <HAL_DMA_Init+0x1f0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_DMA_Init+0x174>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a21      	ldr	r2, [pc, #132]	; (8004544 <HAL_DMA_Init+0x1f4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d108      	bne.n	80044d6 <HAL_DMA_Init+0x186>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	e007      	b.n	80044e6 <HAL_DMA_Init+0x196>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044e6:	e02f      	b.n	8004548 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044e8:	f7fe fadc 	bl	8002aa4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b05      	cmp	r3, #5
 80044f4:	d928      	bls.n	8004548 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2203      	movs	r2, #3
 8004500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e246      	b.n	8004996 <HAL_DMA_Init+0x646>
 8004508:	40020010 	.word	0x40020010
 800450c:	40020028 	.word	0x40020028
 8004510:	40020040 	.word	0x40020040
 8004514:	40020058 	.word	0x40020058
 8004518:	40020070 	.word	0x40020070
 800451c:	40020088 	.word	0x40020088
 8004520:	400200a0 	.word	0x400200a0
 8004524:	400200b8 	.word	0x400200b8
 8004528:	40020410 	.word	0x40020410
 800452c:	40020428 	.word	0x40020428
 8004530:	40020440 	.word	0x40020440
 8004534:	40020458 	.word	0x40020458
 8004538:	40020470 	.word	0x40020470
 800453c:	40020488 	.word	0x40020488
 8004540:	400204a0 	.word	0x400204a0
 8004544:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1c8      	bne.n	80044e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4b83      	ldr	r3, [pc, #524]	; (8004770 <HAL_DMA_Init+0x420>)
 8004562:	4013      	ands	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800456e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004586:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4313      	orrs	r3, r2
 8004592:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	2b04      	cmp	r3, #4
 800459a:	d107      	bne.n	80045ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a4:	4313      	orrs	r3, r2
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80045ac:	4b71      	ldr	r3, [pc, #452]	; (8004774 <HAL_DMA_Init+0x424>)
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4b71      	ldr	r3, [pc, #452]	; (8004778 <HAL_DMA_Init+0x428>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b8:	d328      	bcc.n	800460c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b28      	cmp	r3, #40	; 0x28
 80045c0:	d903      	bls.n	80045ca <HAL_DMA_Init+0x27a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b2e      	cmp	r3, #46	; 0x2e
 80045c8:	d917      	bls.n	80045fa <HAL_DMA_Init+0x2aa>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2b3e      	cmp	r3, #62	; 0x3e
 80045d0:	d903      	bls.n	80045da <HAL_DMA_Init+0x28a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b42      	cmp	r3, #66	; 0x42
 80045d8:	d90f      	bls.n	80045fa <HAL_DMA_Init+0x2aa>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b46      	cmp	r3, #70	; 0x46
 80045e0:	d903      	bls.n	80045ea <HAL_DMA_Init+0x29a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b48      	cmp	r3, #72	; 0x48
 80045e8:	d907      	bls.n	80045fa <HAL_DMA_Init+0x2aa>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2b4e      	cmp	r3, #78	; 0x4e
 80045f0:	d905      	bls.n	80045fe <HAL_DMA_Init+0x2ae>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	2b52      	cmp	r3, #82	; 0x52
 80045f8:	d801      	bhi.n	80045fe <HAL_DMA_Init+0x2ae>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <HAL_DMA_Init+0x2b0>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800460a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0307 	bic.w	r3, r3, #7
 8004622:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	4313      	orrs	r3, r2
 800462c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b04      	cmp	r3, #4
 8004634:	d117      	bne.n	8004666 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00e      	beq.n	8004666 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f001 fdcf 	bl	80061ec <DMA_CheckFifoParam>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2240      	movs	r2, #64	; 0x40
 8004658:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e197      	b.n	8004996 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f001 fd0a 	bl	8006088 <DMA_CalcBaseAndBitshift>
 8004674:	4603      	mov	r3, r0
 8004676:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	223f      	movs	r2, #63	; 0x3f
 8004682:	409a      	lsls	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	609a      	str	r2, [r3, #8]
 8004688:	e0cd      	b.n	8004826 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a3b      	ldr	r2, [pc, #236]	; (800477c <HAL_DMA_Init+0x42c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d022      	beq.n	80046da <HAL_DMA_Init+0x38a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a39      	ldr	r2, [pc, #228]	; (8004780 <HAL_DMA_Init+0x430>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d01d      	beq.n	80046da <HAL_DMA_Init+0x38a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a38      	ldr	r2, [pc, #224]	; (8004784 <HAL_DMA_Init+0x434>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d018      	beq.n	80046da <HAL_DMA_Init+0x38a>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a36      	ldr	r2, [pc, #216]	; (8004788 <HAL_DMA_Init+0x438>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d013      	beq.n	80046da <HAL_DMA_Init+0x38a>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a35      	ldr	r2, [pc, #212]	; (800478c <HAL_DMA_Init+0x43c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d00e      	beq.n	80046da <HAL_DMA_Init+0x38a>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a33      	ldr	r2, [pc, #204]	; (8004790 <HAL_DMA_Init+0x440>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d009      	beq.n	80046da <HAL_DMA_Init+0x38a>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a32      	ldr	r2, [pc, #200]	; (8004794 <HAL_DMA_Init+0x444>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d004      	beq.n	80046da <HAL_DMA_Init+0x38a>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a30      	ldr	r2, [pc, #192]	; (8004798 <HAL_DMA_Init+0x448>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d101      	bne.n	80046de <HAL_DMA_Init+0x38e>
 80046da:	2301      	movs	r3, #1
 80046dc:	e000      	b.n	80046e0 <HAL_DMA_Init+0x390>
 80046de:	2300      	movs	r3, #0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f000 8097 	beq.w	8004814 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a24      	ldr	r2, [pc, #144]	; (800477c <HAL_DMA_Init+0x42c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d021      	beq.n	8004734 <HAL_DMA_Init+0x3e4>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a22      	ldr	r2, [pc, #136]	; (8004780 <HAL_DMA_Init+0x430>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01c      	beq.n	8004734 <HAL_DMA_Init+0x3e4>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a21      	ldr	r2, [pc, #132]	; (8004784 <HAL_DMA_Init+0x434>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d017      	beq.n	8004734 <HAL_DMA_Init+0x3e4>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a1f      	ldr	r2, [pc, #124]	; (8004788 <HAL_DMA_Init+0x438>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d012      	beq.n	8004734 <HAL_DMA_Init+0x3e4>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a1e      	ldr	r2, [pc, #120]	; (800478c <HAL_DMA_Init+0x43c>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00d      	beq.n	8004734 <HAL_DMA_Init+0x3e4>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a1c      	ldr	r2, [pc, #112]	; (8004790 <HAL_DMA_Init+0x440>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d008      	beq.n	8004734 <HAL_DMA_Init+0x3e4>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a1b      	ldr	r2, [pc, #108]	; (8004794 <HAL_DMA_Init+0x444>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <HAL_DMA_Init+0x3e4>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a19      	ldr	r2, [pc, #100]	; (8004798 <HAL_DMA_Init+0x448>)
 8004732:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	4b13      	ldr	r3, [pc, #76]	; (800479c <HAL_DMA_Init+0x44c>)
 8004750:	4013      	ands	r3, r2
 8004752:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	d021      	beq.n	80047a0 <HAL_DMA_Init+0x450>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b80      	cmp	r3, #128	; 0x80
 8004762:	d102      	bne.n	800476a <HAL_DMA_Init+0x41a>
 8004764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004768:	e01b      	b.n	80047a2 <HAL_DMA_Init+0x452>
 800476a:	2300      	movs	r3, #0
 800476c:	e019      	b.n	80047a2 <HAL_DMA_Init+0x452>
 800476e:	bf00      	nop
 8004770:	fe10803f 	.word	0xfe10803f
 8004774:	5c001000 	.word	0x5c001000
 8004778:	ffff0000 	.word	0xffff0000
 800477c:	58025408 	.word	0x58025408
 8004780:	5802541c 	.word	0x5802541c
 8004784:	58025430 	.word	0x58025430
 8004788:	58025444 	.word	0x58025444
 800478c:	58025458 	.word	0x58025458
 8004790:	5802546c 	.word	0x5802546c
 8004794:	58025480 	.word	0x58025480
 8004798:	58025494 	.word	0x58025494
 800479c:	fffe000f 	.word	0xfffe000f
 80047a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68d2      	ldr	r2, [r2, #12]
 80047a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	4b6e      	ldr	r3, [pc, #440]	; (80049a0 <HAL_DMA_Init+0x650>)
 80047e8:	4413      	add	r3, r2
 80047ea:	4a6e      	ldr	r2, [pc, #440]	; (80049a4 <HAL_DMA_Init+0x654>)
 80047ec:	fba2 2303 	umull	r2, r3, r2, r3
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	009a      	lsls	r2, r3, #2
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f001 fc45 	bl	8006088 <DMA_CalcBaseAndBitshift>
 80047fe:	4603      	mov	r3, r0
 8004800:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2201      	movs	r2, #1
 800480c:	409a      	lsls	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	e008      	b.n	8004826 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2240      	movs	r2, #64	; 0x40
 8004818:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2203      	movs	r2, #3
 800481e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e0b7      	b.n	8004996 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a5f      	ldr	r2, [pc, #380]	; (80049a8 <HAL_DMA_Init+0x658>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d072      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a5d      	ldr	r2, [pc, #372]	; (80049ac <HAL_DMA_Init+0x65c>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d06d      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a5c      	ldr	r2, [pc, #368]	; (80049b0 <HAL_DMA_Init+0x660>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d068      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5a      	ldr	r2, [pc, #360]	; (80049b4 <HAL_DMA_Init+0x664>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d063      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a59      	ldr	r2, [pc, #356]	; (80049b8 <HAL_DMA_Init+0x668>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d05e      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a57      	ldr	r2, [pc, #348]	; (80049bc <HAL_DMA_Init+0x66c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d059      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a56      	ldr	r2, [pc, #344]	; (80049c0 <HAL_DMA_Init+0x670>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d054      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a54      	ldr	r2, [pc, #336]	; (80049c4 <HAL_DMA_Init+0x674>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d04f      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a53      	ldr	r2, [pc, #332]	; (80049c8 <HAL_DMA_Init+0x678>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d04a      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a51      	ldr	r2, [pc, #324]	; (80049cc <HAL_DMA_Init+0x67c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d045      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a50      	ldr	r2, [pc, #320]	; (80049d0 <HAL_DMA_Init+0x680>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d040      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a4e      	ldr	r2, [pc, #312]	; (80049d4 <HAL_DMA_Init+0x684>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d03b      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a4d      	ldr	r2, [pc, #308]	; (80049d8 <HAL_DMA_Init+0x688>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d036      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a4b      	ldr	r2, [pc, #300]	; (80049dc <HAL_DMA_Init+0x68c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d031      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a4a      	ldr	r2, [pc, #296]	; (80049e0 <HAL_DMA_Init+0x690>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d02c      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a48      	ldr	r2, [pc, #288]	; (80049e4 <HAL_DMA_Init+0x694>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d027      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a47      	ldr	r2, [pc, #284]	; (80049e8 <HAL_DMA_Init+0x698>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d022      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a45      	ldr	r2, [pc, #276]	; (80049ec <HAL_DMA_Init+0x69c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d01d      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a44      	ldr	r2, [pc, #272]	; (80049f0 <HAL_DMA_Init+0x6a0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d018      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a42      	ldr	r2, [pc, #264]	; (80049f4 <HAL_DMA_Init+0x6a4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d013      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a41      	ldr	r2, [pc, #260]	; (80049f8 <HAL_DMA_Init+0x6a8>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d00e      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a3f      	ldr	r2, [pc, #252]	; (80049fc <HAL_DMA_Init+0x6ac>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d009      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a3e      	ldr	r2, [pc, #248]	; (8004a00 <HAL_DMA_Init+0x6b0>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_DMA_Init+0x5c6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a3c      	ldr	r2, [pc, #240]	; (8004a04 <HAL_DMA_Init+0x6b4>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <HAL_DMA_Init+0x5ca>
 8004916:	2301      	movs	r3, #1
 8004918:	e000      	b.n	800491c <HAL_DMA_Init+0x5cc>
 800491a:	2300      	movs	r3, #0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d032      	beq.n	8004986 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f001 fcdf 	bl	80062e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b80      	cmp	r3, #128	; 0x80
 800492c:	d102      	bne.n	8004934 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493c:	b2d2      	uxtb	r2, r2
 800493e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004948:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d010      	beq.n	8004974 <HAL_DMA_Init+0x624>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d80c      	bhi.n	8004974 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f001 fd5c 	bl	8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004964:	2200      	movs	r2, #0
 8004966:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	e008      	b.n	8004986 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	a7fdabf8 	.word	0xa7fdabf8
 80049a4:	cccccccd 	.word	0xcccccccd
 80049a8:	40020010 	.word	0x40020010
 80049ac:	40020028 	.word	0x40020028
 80049b0:	40020040 	.word	0x40020040
 80049b4:	40020058 	.word	0x40020058
 80049b8:	40020070 	.word	0x40020070
 80049bc:	40020088 	.word	0x40020088
 80049c0:	400200a0 	.word	0x400200a0
 80049c4:	400200b8 	.word	0x400200b8
 80049c8:	40020410 	.word	0x40020410
 80049cc:	40020428 	.word	0x40020428
 80049d0:	40020440 	.word	0x40020440
 80049d4:	40020458 	.word	0x40020458
 80049d8:	40020470 	.word	0x40020470
 80049dc:	40020488 	.word	0x40020488
 80049e0:	400204a0 	.word	0x400204a0
 80049e4:	400204b8 	.word	0x400204b8
 80049e8:	58025408 	.word	0x58025408
 80049ec:	5802541c 	.word	0x5802541c
 80049f0:	58025430 	.word	0x58025430
 80049f4:	58025444 	.word	0x58025444
 80049f8:	58025458 	.word	0x58025458
 80049fc:	5802546c 	.word	0x5802546c
 8004a00:	58025480 	.word	0x58025480
 8004a04:	58025494 	.word	0x58025494

08004a08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e226      	b.n	8004e72 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_DMA_Start_IT+0x2a>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e21f      	b.n	8004e72 <HAL_DMA_Start_IT+0x46a>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	f040 820a 	bne.w	8004e5c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a68      	ldr	r2, [pc, #416]	; (8004bfc <HAL_DMA_Start_IT+0x1f4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d04a      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a66      	ldr	r2, [pc, #408]	; (8004c00 <HAL_DMA_Start_IT+0x1f8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d045      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a65      	ldr	r2, [pc, #404]	; (8004c04 <HAL_DMA_Start_IT+0x1fc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d040      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a63      	ldr	r2, [pc, #396]	; (8004c08 <HAL_DMA_Start_IT+0x200>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d03b      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4a62      	ldr	r2, [pc, #392]	; (8004c0c <HAL_DMA_Start_IT+0x204>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d036      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a60      	ldr	r2, [pc, #384]	; (8004c10 <HAL_DMA_Start_IT+0x208>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d031      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a5f      	ldr	r2, [pc, #380]	; (8004c14 <HAL_DMA_Start_IT+0x20c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d02c      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a5d      	ldr	r2, [pc, #372]	; (8004c18 <HAL_DMA_Start_IT+0x210>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d027      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a5c      	ldr	r2, [pc, #368]	; (8004c1c <HAL_DMA_Start_IT+0x214>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d022      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a5a      	ldr	r2, [pc, #360]	; (8004c20 <HAL_DMA_Start_IT+0x218>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d01d      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a59      	ldr	r2, [pc, #356]	; (8004c24 <HAL_DMA_Start_IT+0x21c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d018      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a57      	ldr	r2, [pc, #348]	; (8004c28 <HAL_DMA_Start_IT+0x220>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a56      	ldr	r2, [pc, #344]	; (8004c2c <HAL_DMA_Start_IT+0x224>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d00e      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a54      	ldr	r2, [pc, #336]	; (8004c30 <HAL_DMA_Start_IT+0x228>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d009      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a53      	ldr	r2, [pc, #332]	; (8004c34 <HAL_DMA_Start_IT+0x22c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d004      	beq.n	8004af6 <HAL_DMA_Start_IT+0xee>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a51      	ldr	r2, [pc, #324]	; (8004c38 <HAL_DMA_Start_IT+0x230>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <HAL_DMA_Start_IT+0x100>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e007      	b.n	8004b18 <HAL_DMA_Start_IT+0x110>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0201 	bic.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f001 f906 	bl	8005d30 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a34      	ldr	r2, [pc, #208]	; (8004bfc <HAL_DMA_Start_IT+0x1f4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d04a      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a33      	ldr	r2, [pc, #204]	; (8004c00 <HAL_DMA_Start_IT+0x1f8>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d045      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a31      	ldr	r2, [pc, #196]	; (8004c04 <HAL_DMA_Start_IT+0x1fc>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d040      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a30      	ldr	r2, [pc, #192]	; (8004c08 <HAL_DMA_Start_IT+0x200>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d03b      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a2e      	ldr	r2, [pc, #184]	; (8004c0c <HAL_DMA_Start_IT+0x204>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d036      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a2d      	ldr	r2, [pc, #180]	; (8004c10 <HAL_DMA_Start_IT+0x208>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d031      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2b      	ldr	r2, [pc, #172]	; (8004c14 <HAL_DMA_Start_IT+0x20c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d02c      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a2a      	ldr	r2, [pc, #168]	; (8004c18 <HAL_DMA_Start_IT+0x210>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d027      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a28      	ldr	r2, [pc, #160]	; (8004c1c <HAL_DMA_Start_IT+0x214>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d022      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a27      	ldr	r2, [pc, #156]	; (8004c20 <HAL_DMA_Start_IT+0x218>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d01d      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a25      	ldr	r2, [pc, #148]	; (8004c24 <HAL_DMA_Start_IT+0x21c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d018      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a24      	ldr	r2, [pc, #144]	; (8004c28 <HAL_DMA_Start_IT+0x220>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d013      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <HAL_DMA_Start_IT+0x224>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00e      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <HAL_DMA_Start_IT+0x228>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d009      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_DMA_Start_IT+0x22c>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d004      	beq.n	8004bc4 <HAL_DMA_Start_IT+0x1bc>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1e      	ldr	r2, [pc, #120]	; (8004c38 <HAL_DMA_Start_IT+0x230>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d101      	bne.n	8004bc8 <HAL_DMA_Start_IT+0x1c0>
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e000      	b.n	8004bca <HAL_DMA_Start_IT+0x1c2>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d036      	beq.n	8004c3c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 021e 	bic.w	r2, r3, #30
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0216 	orr.w	r2, r2, #22
 8004be0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d03e      	beq.n	8004c68 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0208 	orr.w	r2, r2, #8
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	e035      	b.n	8004c68 <HAL_DMA_Start_IT+0x260>
 8004bfc:	40020010 	.word	0x40020010
 8004c00:	40020028 	.word	0x40020028
 8004c04:	40020040 	.word	0x40020040
 8004c08:	40020058 	.word	0x40020058
 8004c0c:	40020070 	.word	0x40020070
 8004c10:	40020088 	.word	0x40020088
 8004c14:	400200a0 	.word	0x400200a0
 8004c18:	400200b8 	.word	0x400200b8
 8004c1c:	40020410 	.word	0x40020410
 8004c20:	40020428 	.word	0x40020428
 8004c24:	40020440 	.word	0x40020440
 8004c28:	40020458 	.word	0x40020458
 8004c2c:	40020470 	.word	0x40020470
 8004c30:	40020488 	.word	0x40020488
 8004c34:	400204a0 	.word	0x400204a0
 8004c38:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f023 020e 	bic.w	r2, r3, #14
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 020a 	orr.w	r2, r2, #10
 8004c4e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d007      	beq.n	8004c68 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0204 	orr.w	r2, r2, #4
 8004c66:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a83      	ldr	r2, [pc, #524]	; (8004e7c <HAL_DMA_Start_IT+0x474>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d072      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a82      	ldr	r2, [pc, #520]	; (8004e80 <HAL_DMA_Start_IT+0x478>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d06d      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a80      	ldr	r2, [pc, #512]	; (8004e84 <HAL_DMA_Start_IT+0x47c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d068      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a7f      	ldr	r2, [pc, #508]	; (8004e88 <HAL_DMA_Start_IT+0x480>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d063      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a7d      	ldr	r2, [pc, #500]	; (8004e8c <HAL_DMA_Start_IT+0x484>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d05e      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a7c      	ldr	r2, [pc, #496]	; (8004e90 <HAL_DMA_Start_IT+0x488>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d059      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a7a      	ldr	r2, [pc, #488]	; (8004e94 <HAL_DMA_Start_IT+0x48c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d054      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a79      	ldr	r2, [pc, #484]	; (8004e98 <HAL_DMA_Start_IT+0x490>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d04f      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a77      	ldr	r2, [pc, #476]	; (8004e9c <HAL_DMA_Start_IT+0x494>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d04a      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a76      	ldr	r2, [pc, #472]	; (8004ea0 <HAL_DMA_Start_IT+0x498>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d045      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a74      	ldr	r2, [pc, #464]	; (8004ea4 <HAL_DMA_Start_IT+0x49c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d040      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a73      	ldr	r2, [pc, #460]	; (8004ea8 <HAL_DMA_Start_IT+0x4a0>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d03b      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a71      	ldr	r2, [pc, #452]	; (8004eac <HAL_DMA_Start_IT+0x4a4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d036      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a70      	ldr	r2, [pc, #448]	; (8004eb0 <HAL_DMA_Start_IT+0x4a8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d031      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a6e      	ldr	r2, [pc, #440]	; (8004eb4 <HAL_DMA_Start_IT+0x4ac>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02c      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6d      	ldr	r2, [pc, #436]	; (8004eb8 <HAL_DMA_Start_IT+0x4b0>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d027      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a6b      	ldr	r2, [pc, #428]	; (8004ebc <HAL_DMA_Start_IT+0x4b4>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d022      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6a      	ldr	r2, [pc, #424]	; (8004ec0 <HAL_DMA_Start_IT+0x4b8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d01d      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a68      	ldr	r2, [pc, #416]	; (8004ec4 <HAL_DMA_Start_IT+0x4bc>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d018      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a67      	ldr	r2, [pc, #412]	; (8004ec8 <HAL_DMA_Start_IT+0x4c0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a65      	ldr	r2, [pc, #404]	; (8004ecc <HAL_DMA_Start_IT+0x4c4>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00e      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a64      	ldr	r2, [pc, #400]	; (8004ed0 <HAL_DMA_Start_IT+0x4c8>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d009      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a62      	ldr	r2, [pc, #392]	; (8004ed4 <HAL_DMA_Start_IT+0x4cc>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_DMA_Start_IT+0x350>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a61      	ldr	r2, [pc, #388]	; (8004ed8 <HAL_DMA_Start_IT+0x4d0>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d101      	bne.n	8004d5c <HAL_DMA_Start_IT+0x354>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_DMA_Start_IT+0x356>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d01a      	beq.n	8004d98 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d007      	beq.n	8004d80 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d7e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d007      	beq.n	8004d98 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d96:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a37      	ldr	r2, [pc, #220]	; (8004e7c <HAL_DMA_Start_IT+0x474>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d04a      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a36      	ldr	r2, [pc, #216]	; (8004e80 <HAL_DMA_Start_IT+0x478>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d045      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a34      	ldr	r2, [pc, #208]	; (8004e84 <HAL_DMA_Start_IT+0x47c>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d040      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a33      	ldr	r2, [pc, #204]	; (8004e88 <HAL_DMA_Start_IT+0x480>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d03b      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a31      	ldr	r2, [pc, #196]	; (8004e8c <HAL_DMA_Start_IT+0x484>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d036      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a30      	ldr	r2, [pc, #192]	; (8004e90 <HAL_DMA_Start_IT+0x488>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d031      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a2e      	ldr	r2, [pc, #184]	; (8004e94 <HAL_DMA_Start_IT+0x48c>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d02c      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a2d      	ldr	r2, [pc, #180]	; (8004e98 <HAL_DMA_Start_IT+0x490>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d027      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a2b      	ldr	r2, [pc, #172]	; (8004e9c <HAL_DMA_Start_IT+0x494>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d022      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2a      	ldr	r2, [pc, #168]	; (8004ea0 <HAL_DMA_Start_IT+0x498>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d01d      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a28      	ldr	r2, [pc, #160]	; (8004ea4 <HAL_DMA_Start_IT+0x49c>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d018      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a27      	ldr	r2, [pc, #156]	; (8004ea8 <HAL_DMA_Start_IT+0x4a0>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d013      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a25      	ldr	r2, [pc, #148]	; (8004eac <HAL_DMA_Start_IT+0x4a4>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d00e      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a24      	ldr	r2, [pc, #144]	; (8004eb0 <HAL_DMA_Start_IT+0x4a8>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d009      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a22      	ldr	r2, [pc, #136]	; (8004eb4 <HAL_DMA_Start_IT+0x4ac>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d004      	beq.n	8004e38 <HAL_DMA_Start_IT+0x430>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a21      	ldr	r2, [pc, #132]	; (8004eb8 <HAL_DMA_Start_IT+0x4b0>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <HAL_DMA_Start_IT+0x442>
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e012      	b.n	8004e70 <HAL_DMA_Start_IT+0x468>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	e009      	b.n	8004e70 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40020010 	.word	0x40020010
 8004e80:	40020028 	.word	0x40020028
 8004e84:	40020040 	.word	0x40020040
 8004e88:	40020058 	.word	0x40020058
 8004e8c:	40020070 	.word	0x40020070
 8004e90:	40020088 	.word	0x40020088
 8004e94:	400200a0 	.word	0x400200a0
 8004e98:	400200b8 	.word	0x400200b8
 8004e9c:	40020410 	.word	0x40020410
 8004ea0:	40020428 	.word	0x40020428
 8004ea4:	40020440 	.word	0x40020440
 8004ea8:	40020458 	.word	0x40020458
 8004eac:	40020470 	.word	0x40020470
 8004eb0:	40020488 	.word	0x40020488
 8004eb4:	400204a0 	.word	0x400204a0
 8004eb8:	400204b8 	.word	0x400204b8
 8004ebc:	58025408 	.word	0x58025408
 8004ec0:	5802541c 	.word	0x5802541c
 8004ec4:	58025430 	.word	0x58025430
 8004ec8:	58025444 	.word	0x58025444
 8004ecc:	58025458 	.word	0x58025458
 8004ed0:	5802546c 	.word	0x5802546c
 8004ed4:	58025480 	.word	0x58025480
 8004ed8:	58025494 	.word	0x58025494

08004edc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ee8:	4b67      	ldr	r3, [pc, #412]	; (8005088 <HAL_DMA_IRQHandler+0x1ac>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a67      	ldr	r2, [pc, #412]	; (800508c <HAL_DMA_IRQHandler+0x1b0>)
 8004eee:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef2:	0a9b      	lsrs	r3, r3, #10
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004efa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f00:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a5f      	ldr	r2, [pc, #380]	; (8005090 <HAL_DMA_IRQHandler+0x1b4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d04a      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a5d      	ldr	r2, [pc, #372]	; (8005094 <HAL_DMA_IRQHandler+0x1b8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d045      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a5c      	ldr	r2, [pc, #368]	; (8005098 <HAL_DMA_IRQHandler+0x1bc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d040      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a5a      	ldr	r2, [pc, #360]	; (800509c <HAL_DMA_IRQHandler+0x1c0>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d03b      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a59      	ldr	r2, [pc, #356]	; (80050a0 <HAL_DMA_IRQHandler+0x1c4>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d036      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a57      	ldr	r2, [pc, #348]	; (80050a4 <HAL_DMA_IRQHandler+0x1c8>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d031      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a56      	ldr	r2, [pc, #344]	; (80050a8 <HAL_DMA_IRQHandler+0x1cc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d02c      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a54      	ldr	r2, [pc, #336]	; (80050ac <HAL_DMA_IRQHandler+0x1d0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d027      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a53      	ldr	r2, [pc, #332]	; (80050b0 <HAL_DMA_IRQHandler+0x1d4>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d022      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a51      	ldr	r2, [pc, #324]	; (80050b4 <HAL_DMA_IRQHandler+0x1d8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01d      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a50      	ldr	r2, [pc, #320]	; (80050b8 <HAL_DMA_IRQHandler+0x1dc>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d018      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a4e      	ldr	r2, [pc, #312]	; (80050bc <HAL_DMA_IRQHandler+0x1e0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a4d      	ldr	r2, [pc, #308]	; (80050c0 <HAL_DMA_IRQHandler+0x1e4>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a4b      	ldr	r2, [pc, #300]	; (80050c4 <HAL_DMA_IRQHandler+0x1e8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a4a      	ldr	r2, [pc, #296]	; (80050c8 <HAL_DMA_IRQHandler+0x1ec>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_DMA_IRQHandler+0xd2>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a48      	ldr	r2, [pc, #288]	; (80050cc <HAL_DMA_IRQHandler+0x1f0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d101      	bne.n	8004fb2 <HAL_DMA_IRQHandler+0xd6>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <HAL_DMA_IRQHandler+0xd8>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 842b 	beq.w	8005810 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	2208      	movs	r2, #8
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	f000 80a2 	beq.w	8005114 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a2e      	ldr	r2, [pc, #184]	; (8005090 <HAL_DMA_IRQHandler+0x1b4>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d04a      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a2d      	ldr	r2, [pc, #180]	; (8005094 <HAL_DMA_IRQHandler+0x1b8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d045      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <HAL_DMA_IRQHandler+0x1bc>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d040      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2a      	ldr	r2, [pc, #168]	; (800509c <HAL_DMA_IRQHandler+0x1c0>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d03b      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a28      	ldr	r2, [pc, #160]	; (80050a0 <HAL_DMA_IRQHandler+0x1c4>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d036      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a27      	ldr	r2, [pc, #156]	; (80050a4 <HAL_DMA_IRQHandler+0x1c8>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d031      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a25      	ldr	r2, [pc, #148]	; (80050a8 <HAL_DMA_IRQHandler+0x1cc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d02c      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a24      	ldr	r2, [pc, #144]	; (80050ac <HAL_DMA_IRQHandler+0x1d0>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d027      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a22      	ldr	r2, [pc, #136]	; (80050b0 <HAL_DMA_IRQHandler+0x1d4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d022      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a21      	ldr	r2, [pc, #132]	; (80050b4 <HAL_DMA_IRQHandler+0x1d8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d01d      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <HAL_DMA_IRQHandler+0x1dc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d018      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <HAL_DMA_IRQHandler+0x1e0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d013      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1c      	ldr	r2, [pc, #112]	; (80050c0 <HAL_DMA_IRQHandler+0x1e4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00e      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d009      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <HAL_DMA_IRQHandler+0x1ec>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_DMA_IRQHandler+0x194>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a18      	ldr	r2, [pc, #96]	; (80050cc <HAL_DMA_IRQHandler+0x1f0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d12f      	bne.n	80050d0 <HAL_DMA_IRQHandler+0x1f4>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b00      	cmp	r3, #0
 800507c:	bf14      	ite	ne
 800507e:	2301      	movne	r3, #1
 8005080:	2300      	moveq	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e02e      	b.n	80050e4 <HAL_DMA_IRQHandler+0x208>
 8005086:	bf00      	nop
 8005088:	24000000 	.word	0x24000000
 800508c:	1b4e81b5 	.word	0x1b4e81b5
 8005090:	40020010 	.word	0x40020010
 8005094:	40020028 	.word	0x40020028
 8005098:	40020040 	.word	0x40020040
 800509c:	40020058 	.word	0x40020058
 80050a0:	40020070 	.word	0x40020070
 80050a4:	40020088 	.word	0x40020088
 80050a8:	400200a0 	.word	0x400200a0
 80050ac:	400200b8 	.word	0x400200b8
 80050b0:	40020410 	.word	0x40020410
 80050b4:	40020428 	.word	0x40020428
 80050b8:	40020440 	.word	0x40020440
 80050bc:	40020458 	.word	0x40020458
 80050c0:	40020470 	.word	0x40020470
 80050c4:	40020488 	.word	0x40020488
 80050c8:	400204a0 	.word	0x400204a0
 80050cc:	400204b8 	.word	0x400204b8
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0308 	and.w	r3, r3, #8
 80050da:	2b00      	cmp	r3, #0
 80050dc:	bf14      	ite	ne
 80050de:	2301      	movne	r3, #1
 80050e0:	2300      	moveq	r3, #0
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d015      	beq.n	8005114 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0204 	bic.w	r2, r2, #4
 80050f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fc:	f003 031f 	and.w	r3, r3, #31
 8005100:	2208      	movs	r2, #8
 8005102:	409a      	lsls	r2, r3
 8005104:	6a3b      	ldr	r3, [r7, #32]
 8005106:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	f043 0201 	orr.w	r2, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	fa22 f303 	lsr.w	r3, r2, r3
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d06e      	beq.n	8005208 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a69      	ldr	r2, [pc, #420]	; (80052d4 <HAL_DMA_IRQHandler+0x3f8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d04a      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a67      	ldr	r2, [pc, #412]	; (80052d8 <HAL_DMA_IRQHandler+0x3fc>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d045      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a66      	ldr	r2, [pc, #408]	; (80052dc <HAL_DMA_IRQHandler+0x400>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d040      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a64      	ldr	r2, [pc, #400]	; (80052e0 <HAL_DMA_IRQHandler+0x404>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d03b      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a63      	ldr	r2, [pc, #396]	; (80052e4 <HAL_DMA_IRQHandler+0x408>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d036      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a61      	ldr	r2, [pc, #388]	; (80052e8 <HAL_DMA_IRQHandler+0x40c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d031      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a60      	ldr	r2, [pc, #384]	; (80052ec <HAL_DMA_IRQHandler+0x410>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d02c      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a5e      	ldr	r2, [pc, #376]	; (80052f0 <HAL_DMA_IRQHandler+0x414>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d027      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5d      	ldr	r2, [pc, #372]	; (80052f4 <HAL_DMA_IRQHandler+0x418>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d022      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5b      	ldr	r2, [pc, #364]	; (80052f8 <HAL_DMA_IRQHandler+0x41c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01d      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a5a      	ldr	r2, [pc, #360]	; (80052fc <HAL_DMA_IRQHandler+0x420>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d018      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a58      	ldr	r2, [pc, #352]	; (8005300 <HAL_DMA_IRQHandler+0x424>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a57      	ldr	r2, [pc, #348]	; (8005304 <HAL_DMA_IRQHandler+0x428>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00e      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a55      	ldr	r2, [pc, #340]	; (8005308 <HAL_DMA_IRQHandler+0x42c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d009      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a54      	ldr	r2, [pc, #336]	; (800530c <HAL_DMA_IRQHandler+0x430>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <HAL_DMA_IRQHandler+0x2ee>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a52      	ldr	r2, [pc, #328]	; (8005310 <HAL_DMA_IRQHandler+0x434>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d10a      	bne.n	80051e0 <HAL_DMA_IRQHandler+0x304>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	bf14      	ite	ne
 80051d8:	2301      	movne	r3, #1
 80051da:	2300      	moveq	r3, #0
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	e003      	b.n	80051e8 <HAL_DMA_IRQHandler+0x30c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2300      	movs	r3, #0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00d      	beq.n	8005208 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f0:	f003 031f 	and.w	r3, r3, #31
 80051f4:	2201      	movs	r2, #1
 80051f6:	409a      	lsls	r2, r3
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005200:	f043 0202 	orr.w	r2, r3, #2
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520c:	f003 031f 	and.w	r3, r3, #31
 8005210:	2204      	movs	r2, #4
 8005212:	409a      	lsls	r2, r3
 8005214:	69bb      	ldr	r3, [r7, #24]
 8005216:	4013      	ands	r3, r2
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 808f 	beq.w	800533c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a2c      	ldr	r2, [pc, #176]	; (80052d4 <HAL_DMA_IRQHandler+0x3f8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d04a      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a2a      	ldr	r2, [pc, #168]	; (80052d8 <HAL_DMA_IRQHandler+0x3fc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d045      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a29      	ldr	r2, [pc, #164]	; (80052dc <HAL_DMA_IRQHandler+0x400>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d040      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a27      	ldr	r2, [pc, #156]	; (80052e0 <HAL_DMA_IRQHandler+0x404>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d03b      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <HAL_DMA_IRQHandler+0x408>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d036      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a24      	ldr	r2, [pc, #144]	; (80052e8 <HAL_DMA_IRQHandler+0x40c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d031      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a23      	ldr	r2, [pc, #140]	; (80052ec <HAL_DMA_IRQHandler+0x410>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d02c      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a21      	ldr	r2, [pc, #132]	; (80052f0 <HAL_DMA_IRQHandler+0x414>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d027      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a20      	ldr	r2, [pc, #128]	; (80052f4 <HAL_DMA_IRQHandler+0x418>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d022      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a1e      	ldr	r2, [pc, #120]	; (80052f8 <HAL_DMA_IRQHandler+0x41c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01d      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a1d      	ldr	r2, [pc, #116]	; (80052fc <HAL_DMA_IRQHandler+0x420>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d018      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <HAL_DMA_IRQHandler+0x424>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1a      	ldr	r2, [pc, #104]	; (8005304 <HAL_DMA_IRQHandler+0x428>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a18      	ldr	r2, [pc, #96]	; (8005308 <HAL_DMA_IRQHandler+0x42c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a17      	ldr	r2, [pc, #92]	; (800530c <HAL_DMA_IRQHandler+0x430>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_DMA_IRQHandler+0x3e2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a15      	ldr	r2, [pc, #84]	; (8005310 <HAL_DMA_IRQHandler+0x434>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d12a      	bne.n	8005314 <HAL_DMA_IRQHandler+0x438>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0302 	and.w	r3, r3, #2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf14      	ite	ne
 80052cc:	2301      	movne	r3, #1
 80052ce:	2300      	moveq	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e023      	b.n	800531c <HAL_DMA_IRQHandler+0x440>
 80052d4:	40020010 	.word	0x40020010
 80052d8:	40020028 	.word	0x40020028
 80052dc:	40020040 	.word	0x40020040
 80052e0:	40020058 	.word	0x40020058
 80052e4:	40020070 	.word	0x40020070
 80052e8:	40020088 	.word	0x40020088
 80052ec:	400200a0 	.word	0x400200a0
 80052f0:	400200b8 	.word	0x400200b8
 80052f4:	40020410 	.word	0x40020410
 80052f8:	40020428 	.word	0x40020428
 80052fc:	40020440 	.word	0x40020440
 8005300:	40020458 	.word	0x40020458
 8005304:	40020470 	.word	0x40020470
 8005308:	40020488 	.word	0x40020488
 800530c:	400204a0 	.word	0x400204a0
 8005310:	400204b8 	.word	0x400204b8
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2300      	movs	r3, #0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00d      	beq.n	800533c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	2204      	movs	r2, #4
 800532a:	409a      	lsls	r2, r3
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005334:	f043 0204 	orr.w	r2, r3, #4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005340:	f003 031f 	and.w	r3, r3, #31
 8005344:	2210      	movs	r2, #16
 8005346:	409a      	lsls	r2, r3
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	f000 80a6 	beq.w	800549e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a85      	ldr	r2, [pc, #532]	; (800556c <HAL_DMA_IRQHandler+0x690>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d04a      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a83      	ldr	r2, [pc, #524]	; (8005570 <HAL_DMA_IRQHandler+0x694>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d045      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a82      	ldr	r2, [pc, #520]	; (8005574 <HAL_DMA_IRQHandler+0x698>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d040      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a80      	ldr	r2, [pc, #512]	; (8005578 <HAL_DMA_IRQHandler+0x69c>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d03b      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a7f      	ldr	r2, [pc, #508]	; (800557c <HAL_DMA_IRQHandler+0x6a0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d036      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a7d      	ldr	r2, [pc, #500]	; (8005580 <HAL_DMA_IRQHandler+0x6a4>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d031      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a7c      	ldr	r2, [pc, #496]	; (8005584 <HAL_DMA_IRQHandler+0x6a8>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d02c      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a7a      	ldr	r2, [pc, #488]	; (8005588 <HAL_DMA_IRQHandler+0x6ac>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d027      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a79      	ldr	r2, [pc, #484]	; (800558c <HAL_DMA_IRQHandler+0x6b0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d022      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a77      	ldr	r2, [pc, #476]	; (8005590 <HAL_DMA_IRQHandler+0x6b4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01d      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a76      	ldr	r2, [pc, #472]	; (8005594 <HAL_DMA_IRQHandler+0x6b8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d018      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a74      	ldr	r2, [pc, #464]	; (8005598 <HAL_DMA_IRQHandler+0x6bc>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a73      	ldr	r2, [pc, #460]	; (800559c <HAL_DMA_IRQHandler+0x6c0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00e      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a71      	ldr	r2, [pc, #452]	; (80055a0 <HAL_DMA_IRQHandler+0x6c4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d009      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a70      	ldr	r2, [pc, #448]	; (80055a4 <HAL_DMA_IRQHandler+0x6c8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d004      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x516>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a6e      	ldr	r2, [pc, #440]	; (80055a8 <HAL_DMA_IRQHandler+0x6cc>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d10a      	bne.n	8005408 <HAL_DMA_IRQHandler+0x52c>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	bf14      	ite	ne
 8005400:	2301      	movne	r3, #1
 8005402:	2300      	moveq	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e009      	b.n	800541c <HAL_DMA_IRQHandler+0x540>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0304 	and.w	r3, r3, #4
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf14      	ite	ne
 8005416:	2301      	movne	r3, #1
 8005418:	2300      	moveq	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d03e      	beq.n	800549e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005424:	f003 031f 	and.w	r3, r3, #31
 8005428:	2210      	movs	r2, #16
 800542a:	409a      	lsls	r2, r3
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d018      	beq.n	8005470 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d108      	bne.n	800545e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005450:	2b00      	cmp	r3, #0
 8005452:	d024      	beq.n	800549e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	4798      	blx	r3
 800545c:	e01f      	b.n	800549e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01b      	beq.n	800549e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
 800546e:	e016      	b.n	800549e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547a:	2b00      	cmp	r3, #0
 800547c:	d107      	bne.n	800548e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0208 	bic.w	r2, r2, #8
 800548c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	2220      	movs	r2, #32
 80054a8:	409a      	lsls	r2, r3
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f000 8110 	beq.w	80056d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a2c      	ldr	r2, [pc, #176]	; (800556c <HAL_DMA_IRQHandler+0x690>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d04a      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2b      	ldr	r2, [pc, #172]	; (8005570 <HAL_DMA_IRQHandler+0x694>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d045      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a29      	ldr	r2, [pc, #164]	; (8005574 <HAL_DMA_IRQHandler+0x698>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d040      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a28      	ldr	r2, [pc, #160]	; (8005578 <HAL_DMA_IRQHandler+0x69c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d03b      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a26      	ldr	r2, [pc, #152]	; (800557c <HAL_DMA_IRQHandler+0x6a0>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d036      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a25      	ldr	r2, [pc, #148]	; (8005580 <HAL_DMA_IRQHandler+0x6a4>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d031      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a23      	ldr	r2, [pc, #140]	; (8005584 <HAL_DMA_IRQHandler+0x6a8>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d02c      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a22      	ldr	r2, [pc, #136]	; (8005588 <HAL_DMA_IRQHandler+0x6ac>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d027      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a20      	ldr	r2, [pc, #128]	; (800558c <HAL_DMA_IRQHandler+0x6b0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d022      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1f      	ldr	r2, [pc, #124]	; (8005590 <HAL_DMA_IRQHandler+0x6b4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d01d      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <HAL_DMA_IRQHandler+0x6b8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d018      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1c      	ldr	r2, [pc, #112]	; (8005598 <HAL_DMA_IRQHandler+0x6bc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d013      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1a      	ldr	r2, [pc, #104]	; (800559c <HAL_DMA_IRQHandler+0x6c0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d00e      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a19      	ldr	r2, [pc, #100]	; (80055a0 <HAL_DMA_IRQHandler+0x6c4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d009      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a17      	ldr	r2, [pc, #92]	; (80055a4 <HAL_DMA_IRQHandler+0x6c8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <HAL_DMA_IRQHandler+0x678>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a16      	ldr	r2, [pc, #88]	; (80055a8 <HAL_DMA_IRQHandler+0x6cc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d12b      	bne.n	80055ac <HAL_DMA_IRQHandler+0x6d0>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	bf14      	ite	ne
 8005562:	2301      	movne	r3, #1
 8005564:	2300      	moveq	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	e02a      	b.n	80055c0 <HAL_DMA_IRQHandler+0x6e4>
 800556a:	bf00      	nop
 800556c:	40020010 	.word	0x40020010
 8005570:	40020028 	.word	0x40020028
 8005574:	40020040 	.word	0x40020040
 8005578:	40020058 	.word	0x40020058
 800557c:	40020070 	.word	0x40020070
 8005580:	40020088 	.word	0x40020088
 8005584:	400200a0 	.word	0x400200a0
 8005588:	400200b8 	.word	0x400200b8
 800558c:	40020410 	.word	0x40020410
 8005590:	40020428 	.word	0x40020428
 8005594:	40020440 	.word	0x40020440
 8005598:	40020458 	.word	0x40020458
 800559c:	40020470 	.word	0x40020470
 80055a0:	40020488 	.word	0x40020488
 80055a4:	400204a0 	.word	0x400204a0
 80055a8:	400204b8 	.word	0x400204b8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	bf14      	ite	ne
 80055ba:	2301      	movne	r3, #1
 80055bc:	2300      	moveq	r3, #0
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 8087 	beq.w	80056d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	2220      	movs	r2, #32
 80055d0:	409a      	lsls	r2, r3
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b04      	cmp	r3, #4
 80055e0:	d139      	bne.n	8005656 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0216 	bic.w	r2, r2, #22
 80055f0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005600:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <HAL_DMA_IRQHandler+0x736>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800560e:	2b00      	cmp	r3, #0
 8005610:	d007      	beq.n	8005622 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0208 	bic.w	r2, r2, #8
 8005620:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005626:	f003 031f 	and.w	r3, r3, #31
 800562a:	223f      	movs	r2, #63	; 0x3f
 800562c:	409a      	lsls	r2, r3
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2200      	movs	r2, #0
 800563e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 834a 	beq.w	8005ce0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	4798      	blx	r3
          }
          return;
 8005654:	e344      	b.n	8005ce0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d018      	beq.n	8005696 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d108      	bne.n	8005684 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005676:	2b00      	cmp	r3, #0
 8005678:	d02c      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	4798      	blx	r3
 8005682:	e027      	b.n	80056d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005688:	2b00      	cmp	r3, #0
 800568a:	d023      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
 8005694:	e01e      	b.n	80056d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10f      	bne.n	80056c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 0210 	bic.w	r2, r2, #16
 80056b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f000 8306 	beq.w	8005cea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 8088 	beq.w	80057fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2204      	movs	r2, #4
 80056f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a7a      	ldr	r2, [pc, #488]	; (80058e4 <HAL_DMA_IRQHandler+0xa08>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d04a      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a79      	ldr	r2, [pc, #484]	; (80058e8 <HAL_DMA_IRQHandler+0xa0c>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d045      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a77      	ldr	r2, [pc, #476]	; (80058ec <HAL_DMA_IRQHandler+0xa10>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d040      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a76      	ldr	r2, [pc, #472]	; (80058f0 <HAL_DMA_IRQHandler+0xa14>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d03b      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a74      	ldr	r2, [pc, #464]	; (80058f4 <HAL_DMA_IRQHandler+0xa18>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d036      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a73      	ldr	r2, [pc, #460]	; (80058f8 <HAL_DMA_IRQHandler+0xa1c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d031      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a71      	ldr	r2, [pc, #452]	; (80058fc <HAL_DMA_IRQHandler+0xa20>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d02c      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a70      	ldr	r2, [pc, #448]	; (8005900 <HAL_DMA_IRQHandler+0xa24>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d027      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a6e      	ldr	r2, [pc, #440]	; (8005904 <HAL_DMA_IRQHandler+0xa28>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d022      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a6d      	ldr	r2, [pc, #436]	; (8005908 <HAL_DMA_IRQHandler+0xa2c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d01d      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6b      	ldr	r2, [pc, #428]	; (800590c <HAL_DMA_IRQHandler+0xa30>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d018      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a6a      	ldr	r2, [pc, #424]	; (8005910 <HAL_DMA_IRQHandler+0xa34>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d013      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a68      	ldr	r2, [pc, #416]	; (8005914 <HAL_DMA_IRQHandler+0xa38>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d00e      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a67      	ldr	r2, [pc, #412]	; (8005918 <HAL_DMA_IRQHandler+0xa3c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d009      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a65      	ldr	r2, [pc, #404]	; (800591c <HAL_DMA_IRQHandler+0xa40>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d004      	beq.n	8005794 <HAL_DMA_IRQHandler+0x8b8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a64      	ldr	r2, [pc, #400]	; (8005920 <HAL_DMA_IRQHandler+0xa44>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d108      	bne.n	80057a6 <HAL_DMA_IRQHandler+0x8ca>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0201 	bic.w	r2, r2, #1
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e007      	b.n	80057b6 <HAL_DMA_IRQHandler+0x8da>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3301      	adds	r3, #1
 80057ba:	60fb      	str	r3, [r7, #12]
 80057bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057be:	429a      	cmp	r2, r3
 80057c0:	d307      	bcc.n	80057d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 0301 	and.w	r3, r3, #1
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f2      	bne.n	80057b6 <HAL_DMA_IRQHandler+0x8da>
 80057d0:	e000      	b.n	80057d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80057d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d004      	beq.n	80057ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2203      	movs	r2, #3
 80057e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80057ea:	e003      	b.n	80057f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8272 	beq.w	8005cea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	4798      	blx	r3
 800580e:	e26c      	b.n	8005cea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a43      	ldr	r2, [pc, #268]	; (8005924 <HAL_DMA_IRQHandler+0xa48>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d022      	beq.n	8005860 <HAL_DMA_IRQHandler+0x984>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a42      	ldr	r2, [pc, #264]	; (8005928 <HAL_DMA_IRQHandler+0xa4c>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d01d      	beq.n	8005860 <HAL_DMA_IRQHandler+0x984>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a40      	ldr	r2, [pc, #256]	; (800592c <HAL_DMA_IRQHandler+0xa50>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d018      	beq.n	8005860 <HAL_DMA_IRQHandler+0x984>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a3f      	ldr	r2, [pc, #252]	; (8005930 <HAL_DMA_IRQHandler+0xa54>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d013      	beq.n	8005860 <HAL_DMA_IRQHandler+0x984>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a3d      	ldr	r2, [pc, #244]	; (8005934 <HAL_DMA_IRQHandler+0xa58>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d00e      	beq.n	8005860 <HAL_DMA_IRQHandler+0x984>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a3c      	ldr	r2, [pc, #240]	; (8005938 <HAL_DMA_IRQHandler+0xa5c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d009      	beq.n	8005860 <HAL_DMA_IRQHandler+0x984>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a3a      	ldr	r2, [pc, #232]	; (800593c <HAL_DMA_IRQHandler+0xa60>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d004      	beq.n	8005860 <HAL_DMA_IRQHandler+0x984>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a39      	ldr	r2, [pc, #228]	; (8005940 <HAL_DMA_IRQHandler+0xa64>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d101      	bne.n	8005864 <HAL_DMA_IRQHandler+0x988>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <HAL_DMA_IRQHandler+0x98a>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	f000 823f 	beq.w	8005cea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005878:	f003 031f 	and.w	r3, r3, #31
 800587c:	2204      	movs	r2, #4
 800587e:	409a      	lsls	r2, r3
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	4013      	ands	r3, r2
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 80cd 	beq.w	8005a24 <HAL_DMA_IRQHandler+0xb48>
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	f000 80c7 	beq.w	8005a24 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2204      	movs	r2, #4
 80058a0:	409a      	lsls	r2, r3
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d049      	beq.n	8005944 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f000 8210 	beq.w	8005ce4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058cc:	e20a      	b.n	8005ce4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 8206 	beq.w	8005ce4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80058e0:	e200      	b.n	8005ce4 <HAL_DMA_IRQHandler+0xe08>
 80058e2:	bf00      	nop
 80058e4:	40020010 	.word	0x40020010
 80058e8:	40020028 	.word	0x40020028
 80058ec:	40020040 	.word	0x40020040
 80058f0:	40020058 	.word	0x40020058
 80058f4:	40020070 	.word	0x40020070
 80058f8:	40020088 	.word	0x40020088
 80058fc:	400200a0 	.word	0x400200a0
 8005900:	400200b8 	.word	0x400200b8
 8005904:	40020410 	.word	0x40020410
 8005908:	40020428 	.word	0x40020428
 800590c:	40020440 	.word	0x40020440
 8005910:	40020458 	.word	0x40020458
 8005914:	40020470 	.word	0x40020470
 8005918:	40020488 	.word	0x40020488
 800591c:	400204a0 	.word	0x400204a0
 8005920:	400204b8 	.word	0x400204b8
 8005924:	58025408 	.word	0x58025408
 8005928:	5802541c 	.word	0x5802541c
 800592c:	58025430 	.word	0x58025430
 8005930:	58025444 	.word	0x58025444
 8005934:	58025458 	.word	0x58025458
 8005938:	5802546c 	.word	0x5802546c
 800593c:	58025480 	.word	0x58025480
 8005940:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d160      	bne.n	8005a10 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a7f      	ldr	r2, [pc, #508]	; (8005b50 <HAL_DMA_IRQHandler+0xc74>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d04a      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a7d      	ldr	r2, [pc, #500]	; (8005b54 <HAL_DMA_IRQHandler+0xc78>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d045      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a7c      	ldr	r2, [pc, #496]	; (8005b58 <HAL_DMA_IRQHandler+0xc7c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d040      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a7a      	ldr	r2, [pc, #488]	; (8005b5c <HAL_DMA_IRQHandler+0xc80>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d03b      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a79      	ldr	r2, [pc, #484]	; (8005b60 <HAL_DMA_IRQHandler+0xc84>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d036      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a77      	ldr	r2, [pc, #476]	; (8005b64 <HAL_DMA_IRQHandler+0xc88>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d031      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a76      	ldr	r2, [pc, #472]	; (8005b68 <HAL_DMA_IRQHandler+0xc8c>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d02c      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a74      	ldr	r2, [pc, #464]	; (8005b6c <HAL_DMA_IRQHandler+0xc90>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d027      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a73      	ldr	r2, [pc, #460]	; (8005b70 <HAL_DMA_IRQHandler+0xc94>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d022      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a71      	ldr	r2, [pc, #452]	; (8005b74 <HAL_DMA_IRQHandler+0xc98>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d01d      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a70      	ldr	r2, [pc, #448]	; (8005b78 <HAL_DMA_IRQHandler+0xc9c>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d018      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a6e      	ldr	r2, [pc, #440]	; (8005b7c <HAL_DMA_IRQHandler+0xca0>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d013      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a6d      	ldr	r2, [pc, #436]	; (8005b80 <HAL_DMA_IRQHandler+0xca4>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d00e      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a6b      	ldr	r2, [pc, #428]	; (8005b84 <HAL_DMA_IRQHandler+0xca8>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d009      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a6a      	ldr	r2, [pc, #424]	; (8005b88 <HAL_DMA_IRQHandler+0xcac>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d004      	beq.n	80059ee <HAL_DMA_IRQHandler+0xb12>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a68      	ldr	r2, [pc, #416]	; (8005b8c <HAL_DMA_IRQHandler+0xcb0>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d108      	bne.n	8005a00 <HAL_DMA_IRQHandler+0xb24>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0208 	bic.w	r2, r2, #8
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e007      	b.n	8005a10 <HAL_DMA_IRQHandler+0xb34>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0204 	bic.w	r2, r2, #4
 8005a0e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 8165 	beq.w	8005ce4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a22:	e15f      	b.n	8005ce4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	409a      	lsls	r2, r3
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	4013      	ands	r3, r2
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80c5 	beq.w	8005bc4 <HAL_DMA_IRQHandler+0xce8>
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 80bf 	beq.w	8005bc4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	2202      	movs	r2, #2
 8005a50:	409a      	lsls	r2, r3
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d018      	beq.n	8005a92 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 813a 	beq.w	8005ce8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a7c:	e134      	b.n	8005ce8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 8130 	beq.w	8005ce8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005a90:	e12a      	b.n	8005ce8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f040 8089 	bne.w	8005bb0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a2b      	ldr	r2, [pc, #172]	; (8005b50 <HAL_DMA_IRQHandler+0xc74>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d04a      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a29      	ldr	r2, [pc, #164]	; (8005b54 <HAL_DMA_IRQHandler+0xc78>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d045      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a28      	ldr	r2, [pc, #160]	; (8005b58 <HAL_DMA_IRQHandler+0xc7c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d040      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a26      	ldr	r2, [pc, #152]	; (8005b5c <HAL_DMA_IRQHandler+0xc80>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d03b      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4a25      	ldr	r2, [pc, #148]	; (8005b60 <HAL_DMA_IRQHandler+0xc84>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d036      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a23      	ldr	r2, [pc, #140]	; (8005b64 <HAL_DMA_IRQHandler+0xc88>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d031      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a22      	ldr	r2, [pc, #136]	; (8005b68 <HAL_DMA_IRQHandler+0xc8c>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d02c      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a20      	ldr	r2, [pc, #128]	; (8005b6c <HAL_DMA_IRQHandler+0xc90>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d027      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a1f      	ldr	r2, [pc, #124]	; (8005b70 <HAL_DMA_IRQHandler+0xc94>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d022      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a1d      	ldr	r2, [pc, #116]	; (8005b74 <HAL_DMA_IRQHandler+0xc98>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d01d      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a1c      	ldr	r2, [pc, #112]	; (8005b78 <HAL_DMA_IRQHandler+0xc9c>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d018      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a1a      	ldr	r2, [pc, #104]	; (8005b7c <HAL_DMA_IRQHandler+0xca0>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d013      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a19      	ldr	r2, [pc, #100]	; (8005b80 <HAL_DMA_IRQHandler+0xca4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d00e      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a17      	ldr	r2, [pc, #92]	; (8005b84 <HAL_DMA_IRQHandler+0xca8>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d009      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a16      	ldr	r2, [pc, #88]	; (8005b88 <HAL_DMA_IRQHandler+0xcac>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d004      	beq.n	8005b3e <HAL_DMA_IRQHandler+0xc62>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a14      	ldr	r2, [pc, #80]	; (8005b8c <HAL_DMA_IRQHandler+0xcb0>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d128      	bne.n	8005b90 <HAL_DMA_IRQHandler+0xcb4>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0214 	bic.w	r2, r2, #20
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	e027      	b.n	8005ba0 <HAL_DMA_IRQHandler+0xcc4>
 8005b50:	40020010 	.word	0x40020010
 8005b54:	40020028 	.word	0x40020028
 8005b58:	40020040 	.word	0x40020040
 8005b5c:	40020058 	.word	0x40020058
 8005b60:	40020070 	.word	0x40020070
 8005b64:	40020088 	.word	0x40020088
 8005b68:	400200a0 	.word	0x400200a0
 8005b6c:	400200b8 	.word	0x400200b8
 8005b70:	40020410 	.word	0x40020410
 8005b74:	40020428 	.word	0x40020428
 8005b78:	40020440 	.word	0x40020440
 8005b7c:	40020458 	.word	0x40020458
 8005b80:	40020470 	.word	0x40020470
 8005b84:	40020488 	.word	0x40020488
 8005b88:	400204a0 	.word	0x400204a0
 8005b8c:	400204b8 	.word	0x400204b8
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 020a 	bic.w	r2, r2, #10
 8005b9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8097 	beq.w	8005ce8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005bc2:	e091      	b.n	8005ce8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc8:	f003 031f 	and.w	r3, r3, #31
 8005bcc:	2208      	movs	r2, #8
 8005bce:	409a      	lsls	r2, r3
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8088 	beq.w	8005cea <HAL_DMA_IRQHandler+0xe0e>
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 8082 	beq.w	8005cea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a41      	ldr	r2, [pc, #260]	; (8005cf0 <HAL_DMA_IRQHandler+0xe14>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d04a      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a3f      	ldr	r2, [pc, #252]	; (8005cf4 <HAL_DMA_IRQHandler+0xe18>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d045      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a3e      	ldr	r2, [pc, #248]	; (8005cf8 <HAL_DMA_IRQHandler+0xe1c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d040      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a3c      	ldr	r2, [pc, #240]	; (8005cfc <HAL_DMA_IRQHandler+0xe20>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d03b      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3b      	ldr	r2, [pc, #236]	; (8005d00 <HAL_DMA_IRQHandler+0xe24>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d036      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a39      	ldr	r2, [pc, #228]	; (8005d04 <HAL_DMA_IRQHandler+0xe28>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d031      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a38      	ldr	r2, [pc, #224]	; (8005d08 <HAL_DMA_IRQHandler+0xe2c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d02c      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a36      	ldr	r2, [pc, #216]	; (8005d0c <HAL_DMA_IRQHandler+0xe30>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d027      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a35      	ldr	r2, [pc, #212]	; (8005d10 <HAL_DMA_IRQHandler+0xe34>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d022      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a33      	ldr	r2, [pc, #204]	; (8005d14 <HAL_DMA_IRQHandler+0xe38>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01d      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a32      	ldr	r2, [pc, #200]	; (8005d18 <HAL_DMA_IRQHandler+0xe3c>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d018      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a30      	ldr	r2, [pc, #192]	; (8005d1c <HAL_DMA_IRQHandler+0xe40>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d013      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a2f      	ldr	r2, [pc, #188]	; (8005d20 <HAL_DMA_IRQHandler+0xe44>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00e      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2d      	ldr	r2, [pc, #180]	; (8005d24 <HAL_DMA_IRQHandler+0xe48>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d009      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2c      	ldr	r2, [pc, #176]	; (8005d28 <HAL_DMA_IRQHandler+0xe4c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d004      	beq.n	8005c86 <HAL_DMA_IRQHandler+0xdaa>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <HAL_DMA_IRQHandler+0xe50>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d108      	bne.n	8005c98 <HAL_DMA_IRQHandler+0xdbc>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 021c 	bic.w	r2, r2, #28
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e007      	b.n	8005ca8 <HAL_DMA_IRQHandler+0xdcc>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 020e 	bic.w	r2, r2, #14
 8005ca6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	409a      	lsls	r2, r3
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d009      	beq.n	8005cea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	4798      	blx	r3
 8005cde:	e004      	b.n	8005cea <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005ce0:	bf00      	nop
 8005ce2:	e002      	b.n	8005cea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ce8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005cea:	3728      	adds	r7, #40	; 0x28
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40020010 	.word	0x40020010
 8005cf4:	40020028 	.word	0x40020028
 8005cf8:	40020040 	.word	0x40020040
 8005cfc:	40020058 	.word	0x40020058
 8005d00:	40020070 	.word	0x40020070
 8005d04:	40020088 	.word	0x40020088
 8005d08:	400200a0 	.word	0x400200a0
 8005d0c:	400200b8 	.word	0x400200b8
 8005d10:	40020410 	.word	0x40020410
 8005d14:	40020428 	.word	0x40020428
 8005d18:	40020440 	.word	0x40020440
 8005d1c:	40020458 	.word	0x40020458
 8005d20:	40020470 	.word	0x40020470
 8005d24:	40020488 	.word	0x40020488
 8005d28:	400204a0 	.word	0x400204a0
 8005d2c:	400204b8 	.word	0x400204b8

08005d30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d42:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d48:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a7f      	ldr	r2, [pc, #508]	; (8005f4c <DMA_SetConfig+0x21c>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d072      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a7d      	ldr	r2, [pc, #500]	; (8005f50 <DMA_SetConfig+0x220>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d06d      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a7c      	ldr	r2, [pc, #496]	; (8005f54 <DMA_SetConfig+0x224>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d068      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a7a      	ldr	r2, [pc, #488]	; (8005f58 <DMA_SetConfig+0x228>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d063      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a79      	ldr	r2, [pc, #484]	; (8005f5c <DMA_SetConfig+0x22c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d05e      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a77      	ldr	r2, [pc, #476]	; (8005f60 <DMA_SetConfig+0x230>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d059      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a76      	ldr	r2, [pc, #472]	; (8005f64 <DMA_SetConfig+0x234>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d054      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a74      	ldr	r2, [pc, #464]	; (8005f68 <DMA_SetConfig+0x238>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d04f      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a73      	ldr	r2, [pc, #460]	; (8005f6c <DMA_SetConfig+0x23c>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d04a      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a71      	ldr	r2, [pc, #452]	; (8005f70 <DMA_SetConfig+0x240>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d045      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a70      	ldr	r2, [pc, #448]	; (8005f74 <DMA_SetConfig+0x244>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d040      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a6e      	ldr	r2, [pc, #440]	; (8005f78 <DMA_SetConfig+0x248>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d03b      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a6d      	ldr	r2, [pc, #436]	; (8005f7c <DMA_SetConfig+0x24c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d036      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a6b      	ldr	r2, [pc, #428]	; (8005f80 <DMA_SetConfig+0x250>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d031      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a6a      	ldr	r2, [pc, #424]	; (8005f84 <DMA_SetConfig+0x254>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d02c      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a68      	ldr	r2, [pc, #416]	; (8005f88 <DMA_SetConfig+0x258>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d027      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a67      	ldr	r2, [pc, #412]	; (8005f8c <DMA_SetConfig+0x25c>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d022      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a65      	ldr	r2, [pc, #404]	; (8005f90 <DMA_SetConfig+0x260>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01d      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a64      	ldr	r2, [pc, #400]	; (8005f94 <DMA_SetConfig+0x264>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d018      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a62      	ldr	r2, [pc, #392]	; (8005f98 <DMA_SetConfig+0x268>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a61      	ldr	r2, [pc, #388]	; (8005f9c <DMA_SetConfig+0x26c>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00e      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a5f      	ldr	r2, [pc, #380]	; (8005fa0 <DMA_SetConfig+0x270>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d009      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a5e      	ldr	r2, [pc, #376]	; (8005fa4 <DMA_SetConfig+0x274>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <DMA_SetConfig+0x10a>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a5c      	ldr	r2, [pc, #368]	; (8005fa8 <DMA_SetConfig+0x278>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d101      	bne.n	8005e3e <DMA_SetConfig+0x10e>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e000      	b.n	8005e40 <DMA_SetConfig+0x110>
 8005e3e:	2300      	movs	r3, #0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00d      	beq.n	8005e60 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e4c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e5e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a39      	ldr	r2, [pc, #228]	; (8005f4c <DMA_SetConfig+0x21c>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d04a      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a38      	ldr	r2, [pc, #224]	; (8005f50 <DMA_SetConfig+0x220>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d045      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a36      	ldr	r2, [pc, #216]	; (8005f54 <DMA_SetConfig+0x224>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d040      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a35      	ldr	r2, [pc, #212]	; (8005f58 <DMA_SetConfig+0x228>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d03b      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a33      	ldr	r2, [pc, #204]	; (8005f5c <DMA_SetConfig+0x22c>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d036      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a32      	ldr	r2, [pc, #200]	; (8005f60 <DMA_SetConfig+0x230>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d031      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a30      	ldr	r2, [pc, #192]	; (8005f64 <DMA_SetConfig+0x234>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d02c      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a2f      	ldr	r2, [pc, #188]	; (8005f68 <DMA_SetConfig+0x238>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d027      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a2d      	ldr	r2, [pc, #180]	; (8005f6c <DMA_SetConfig+0x23c>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d022      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a2c      	ldr	r2, [pc, #176]	; (8005f70 <DMA_SetConfig+0x240>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d01d      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2a      	ldr	r2, [pc, #168]	; (8005f74 <DMA_SetConfig+0x244>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d018      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a29      	ldr	r2, [pc, #164]	; (8005f78 <DMA_SetConfig+0x248>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d013      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a27      	ldr	r2, [pc, #156]	; (8005f7c <DMA_SetConfig+0x24c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d00e      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a26      	ldr	r2, [pc, #152]	; (8005f80 <DMA_SetConfig+0x250>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d009      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a24      	ldr	r2, [pc, #144]	; (8005f84 <DMA_SetConfig+0x254>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d004      	beq.n	8005f00 <DMA_SetConfig+0x1d0>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a23      	ldr	r2, [pc, #140]	; (8005f88 <DMA_SetConfig+0x258>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d101      	bne.n	8005f04 <DMA_SetConfig+0x1d4>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <DMA_SetConfig+0x1d6>
 8005f04:	2300      	movs	r3, #0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d059      	beq.n	8005fbe <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0e:	f003 031f 	and.w	r3, r3, #31
 8005f12:	223f      	movs	r2, #63	; 0x3f
 8005f14:	409a      	lsls	r2, r3
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f28:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	2b40      	cmp	r3, #64	; 0x40
 8005f38:	d138      	bne.n	8005fac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68ba      	ldr	r2, [r7, #8]
 8005f48:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005f4a:	e086      	b.n	800605a <DMA_SetConfig+0x32a>
 8005f4c:	40020010 	.word	0x40020010
 8005f50:	40020028 	.word	0x40020028
 8005f54:	40020040 	.word	0x40020040
 8005f58:	40020058 	.word	0x40020058
 8005f5c:	40020070 	.word	0x40020070
 8005f60:	40020088 	.word	0x40020088
 8005f64:	400200a0 	.word	0x400200a0
 8005f68:	400200b8 	.word	0x400200b8
 8005f6c:	40020410 	.word	0x40020410
 8005f70:	40020428 	.word	0x40020428
 8005f74:	40020440 	.word	0x40020440
 8005f78:	40020458 	.word	0x40020458
 8005f7c:	40020470 	.word	0x40020470
 8005f80:	40020488 	.word	0x40020488
 8005f84:	400204a0 	.word	0x400204a0
 8005f88:	400204b8 	.word	0x400204b8
 8005f8c:	58025408 	.word	0x58025408
 8005f90:	5802541c 	.word	0x5802541c
 8005f94:	58025430 	.word	0x58025430
 8005f98:	58025444 	.word	0x58025444
 8005f9c:	58025458 	.word	0x58025458
 8005fa0:	5802546c 	.word	0x5802546c
 8005fa4:	58025480 	.word	0x58025480
 8005fa8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	60da      	str	r2, [r3, #12]
}
 8005fbc:	e04d      	b.n	800605a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a29      	ldr	r2, [pc, #164]	; (8006068 <DMA_SetConfig+0x338>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d022      	beq.n	800600e <DMA_SetConfig+0x2de>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a27      	ldr	r2, [pc, #156]	; (800606c <DMA_SetConfig+0x33c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d01d      	beq.n	800600e <DMA_SetConfig+0x2de>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a26      	ldr	r2, [pc, #152]	; (8006070 <DMA_SetConfig+0x340>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d018      	beq.n	800600e <DMA_SetConfig+0x2de>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a24      	ldr	r2, [pc, #144]	; (8006074 <DMA_SetConfig+0x344>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d013      	beq.n	800600e <DMA_SetConfig+0x2de>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a23      	ldr	r2, [pc, #140]	; (8006078 <DMA_SetConfig+0x348>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00e      	beq.n	800600e <DMA_SetConfig+0x2de>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a21      	ldr	r2, [pc, #132]	; (800607c <DMA_SetConfig+0x34c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d009      	beq.n	800600e <DMA_SetConfig+0x2de>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a20      	ldr	r2, [pc, #128]	; (8006080 <DMA_SetConfig+0x350>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d004      	beq.n	800600e <DMA_SetConfig+0x2de>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1e      	ldr	r2, [pc, #120]	; (8006084 <DMA_SetConfig+0x354>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d101      	bne.n	8006012 <DMA_SetConfig+0x2e2>
 800600e:	2301      	movs	r3, #1
 8006010:	e000      	b.n	8006014 <DMA_SetConfig+0x2e4>
 8006012:	2300      	movs	r3, #0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d020      	beq.n	800605a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601c:	f003 031f 	and.w	r3, r3, #31
 8006020:	2201      	movs	r2, #1
 8006022:	409a      	lsls	r2, r3
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	2b40      	cmp	r3, #64	; 0x40
 8006036:	d108      	bne.n	800604a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	60da      	str	r2, [r3, #12]
}
 8006048:	e007      	b.n	800605a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	60da      	str	r2, [r3, #12]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	58025408 	.word	0x58025408
 800606c:	5802541c 	.word	0x5802541c
 8006070:	58025430 	.word	0x58025430
 8006074:	58025444 	.word	0x58025444
 8006078:	58025458 	.word	0x58025458
 800607c:	5802546c 	.word	0x5802546c
 8006080:	58025480 	.word	0x58025480
 8006084:	58025494 	.word	0x58025494

08006088 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a42      	ldr	r2, [pc, #264]	; (80061a0 <DMA_CalcBaseAndBitshift+0x118>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d04a      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a41      	ldr	r2, [pc, #260]	; (80061a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d045      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a3f      	ldr	r2, [pc, #252]	; (80061a8 <DMA_CalcBaseAndBitshift+0x120>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d040      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a3e      	ldr	r2, [pc, #248]	; (80061ac <DMA_CalcBaseAndBitshift+0x124>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d03b      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a3c      	ldr	r2, [pc, #240]	; (80061b0 <DMA_CalcBaseAndBitshift+0x128>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d036      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a3b      	ldr	r2, [pc, #236]	; (80061b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d031      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a39      	ldr	r2, [pc, #228]	; (80061b8 <DMA_CalcBaseAndBitshift+0x130>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d02c      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a38      	ldr	r2, [pc, #224]	; (80061bc <DMA_CalcBaseAndBitshift+0x134>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d027      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a36      	ldr	r2, [pc, #216]	; (80061c0 <DMA_CalcBaseAndBitshift+0x138>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d022      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a35      	ldr	r2, [pc, #212]	; (80061c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d01d      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a33      	ldr	r2, [pc, #204]	; (80061c8 <DMA_CalcBaseAndBitshift+0x140>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d018      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a32      	ldr	r2, [pc, #200]	; (80061cc <DMA_CalcBaseAndBitshift+0x144>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d013      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a30      	ldr	r2, [pc, #192]	; (80061d0 <DMA_CalcBaseAndBitshift+0x148>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d00e      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a2f      	ldr	r2, [pc, #188]	; (80061d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d009      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a2d      	ldr	r2, [pc, #180]	; (80061d8 <DMA_CalcBaseAndBitshift+0x150>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <DMA_CalcBaseAndBitshift+0xa8>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a2c      	ldr	r2, [pc, #176]	; (80061dc <DMA_CalcBaseAndBitshift+0x154>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d101      	bne.n	8006134 <DMA_CalcBaseAndBitshift+0xac>
 8006130:	2301      	movs	r3, #1
 8006132:	e000      	b.n	8006136 <DMA_CalcBaseAndBitshift+0xae>
 8006134:	2300      	movs	r3, #0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d024      	beq.n	8006184 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	b2db      	uxtb	r3, r3
 8006140:	3b10      	subs	r3, #16
 8006142:	4a27      	ldr	r2, [pc, #156]	; (80061e0 <DMA_CalcBaseAndBitshift+0x158>)
 8006144:	fba2 2303 	umull	r2, r3, r2, r3
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	4a24      	ldr	r2, [pc, #144]	; (80061e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8006154:	5cd3      	ldrb	r3, [r2, r3]
 8006156:	461a      	mov	r2, r3
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2b03      	cmp	r3, #3
 8006160:	d908      	bls.n	8006174 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	461a      	mov	r2, r3
 8006168:	4b1f      	ldr	r3, [pc, #124]	; (80061e8 <DMA_CalcBaseAndBitshift+0x160>)
 800616a:	4013      	ands	r3, r2
 800616c:	1d1a      	adds	r2, r3, #4
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	659a      	str	r2, [r3, #88]	; 0x58
 8006172:	e00d      	b.n	8006190 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <DMA_CalcBaseAndBitshift+0x160>)
 800617c:	4013      	ands	r3, r2
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	6593      	str	r3, [r2, #88]	; 0x58
 8006182:	e005      	b.n	8006190 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr
 80061a0:	40020010 	.word	0x40020010
 80061a4:	40020028 	.word	0x40020028
 80061a8:	40020040 	.word	0x40020040
 80061ac:	40020058 	.word	0x40020058
 80061b0:	40020070 	.word	0x40020070
 80061b4:	40020088 	.word	0x40020088
 80061b8:	400200a0 	.word	0x400200a0
 80061bc:	400200b8 	.word	0x400200b8
 80061c0:	40020410 	.word	0x40020410
 80061c4:	40020428 	.word	0x40020428
 80061c8:	40020440 	.word	0x40020440
 80061cc:	40020458 	.word	0x40020458
 80061d0:	40020470 	.word	0x40020470
 80061d4:	40020488 	.word	0x40020488
 80061d8:	400204a0 	.word	0x400204a0
 80061dc:	400204b8 	.word	0x400204b8
 80061e0:	aaaaaaab 	.word	0xaaaaaaab
 80061e4:	0800cec0 	.word	0x0800cec0
 80061e8:	fffffc00 	.word	0xfffffc00

080061ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d120      	bne.n	8006242 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	2b03      	cmp	r3, #3
 8006206:	d858      	bhi.n	80062ba <DMA_CheckFifoParam+0xce>
 8006208:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <DMA_CheckFifoParam+0x24>)
 800620a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620e:	bf00      	nop
 8006210:	08006221 	.word	0x08006221
 8006214:	08006233 	.word	0x08006233
 8006218:	08006221 	.word	0x08006221
 800621c:	080062bb 	.word	0x080062bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d048      	beq.n	80062be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006230:	e045      	b.n	80062be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006236:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800623a:	d142      	bne.n	80062c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006240:	e03f      	b.n	80062c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800624a:	d123      	bne.n	8006294 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	2b03      	cmp	r3, #3
 8006252:	d838      	bhi.n	80062c6 <DMA_CheckFifoParam+0xda>
 8006254:	a201      	add	r2, pc, #4	; (adr r2, 800625c <DMA_CheckFifoParam+0x70>)
 8006256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625a:	bf00      	nop
 800625c:	0800626d 	.word	0x0800626d
 8006260:	08006273 	.word	0x08006273
 8006264:	0800626d 	.word	0x0800626d
 8006268:	08006285 	.word	0x08006285
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	73fb      	strb	r3, [r7, #15]
        break;
 8006270:	e030      	b.n	80062d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d025      	beq.n	80062ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006282:	e022      	b.n	80062ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006288:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800628c:	d11f      	bne.n	80062ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800628e:	2301      	movs	r3, #1
 8006290:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006292:	e01c      	b.n	80062ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006298:	2b02      	cmp	r3, #2
 800629a:	d902      	bls.n	80062a2 <DMA_CheckFifoParam+0xb6>
 800629c:	2b03      	cmp	r3, #3
 800629e:	d003      	beq.n	80062a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80062a0:	e018      	b.n	80062d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	73fb      	strb	r3, [r7, #15]
        break;
 80062a6:	e015      	b.n	80062d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00e      	beq.n	80062d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	73fb      	strb	r3, [r7, #15]
    break;
 80062b8:	e00b      	b.n	80062d2 <DMA_CheckFifoParam+0xe6>
        break;
 80062ba:	bf00      	nop
 80062bc:	e00a      	b.n	80062d4 <DMA_CheckFifoParam+0xe8>
        break;
 80062be:	bf00      	nop
 80062c0:	e008      	b.n	80062d4 <DMA_CheckFifoParam+0xe8>
        break;
 80062c2:	bf00      	nop
 80062c4:	e006      	b.n	80062d4 <DMA_CheckFifoParam+0xe8>
        break;
 80062c6:	bf00      	nop
 80062c8:	e004      	b.n	80062d4 <DMA_CheckFifoParam+0xe8>
        break;
 80062ca:	bf00      	nop
 80062cc:	e002      	b.n	80062d4 <DMA_CheckFifoParam+0xe8>
        break;
 80062ce:	bf00      	nop
 80062d0:	e000      	b.n	80062d4 <DMA_CheckFifoParam+0xe8>
    break;
 80062d2:	bf00      	nop
    }
  }

  return status;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop

080062e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a38      	ldr	r2, [pc, #224]	; (80063d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d022      	beq.n	8006342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a36      	ldr	r2, [pc, #216]	; (80063dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a35      	ldr	r2, [pc, #212]	; (80063e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a33      	ldr	r2, [pc, #204]	; (80063e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a32      	ldr	r2, [pc, #200]	; (80063e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a30      	ldr	r2, [pc, #192]	; (80063ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a2f      	ldr	r2, [pc, #188]	; (80063f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a2d      	ldr	r2, [pc, #180]	; (80063f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d101      	bne.n	8006346 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006342:	2301      	movs	r3, #1
 8006344:	e000      	b.n	8006348 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006346:	2300      	movs	r3, #0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01a      	beq.n	8006382 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	3b08      	subs	r3, #8
 8006354:	4a28      	ldr	r2, [pc, #160]	; (80063f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006356:	fba2 2303 	umull	r2, r3, r2, r3
 800635a:	091b      	lsrs	r3, r3, #4
 800635c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800635e:	68fa      	ldr	r2, [r7, #12]
 8006360:	4b26      	ldr	r3, [pc, #152]	; (80063fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	461a      	mov	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a24      	ldr	r2, [pc, #144]	; (8006400 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006370:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f003 031f 	and.w	r3, r3, #31
 8006378:	2201      	movs	r2, #1
 800637a:	409a      	lsls	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006380:	e024      	b.n	80063cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	3b10      	subs	r3, #16
 800638a:	4a1e      	ldr	r2, [pc, #120]	; (8006404 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	091b      	lsrs	r3, r3, #4
 8006392:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	4a1c      	ldr	r2, [pc, #112]	; (8006408 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d806      	bhi.n	80063aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	4a1b      	ldr	r2, [pc, #108]	; (800640c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d902      	bls.n	80063aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3308      	adds	r3, #8
 80063a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4b18      	ldr	r3, [pc, #96]	; (8006410 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	461a      	mov	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a16      	ldr	r2, [pc, #88]	; (8006414 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80063bc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f003 031f 	and.w	r3, r3, #31
 80063c4:	2201      	movs	r2, #1
 80063c6:	409a      	lsls	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80063cc:	bf00      	nop
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	58025408 	.word	0x58025408
 80063dc:	5802541c 	.word	0x5802541c
 80063e0:	58025430 	.word	0x58025430
 80063e4:	58025444 	.word	0x58025444
 80063e8:	58025458 	.word	0x58025458
 80063ec:	5802546c 	.word	0x5802546c
 80063f0:	58025480 	.word	0x58025480
 80063f4:	58025494 	.word	0x58025494
 80063f8:	cccccccd 	.word	0xcccccccd
 80063fc:	16009600 	.word	0x16009600
 8006400:	58025880 	.word	0x58025880
 8006404:	aaaaaaab 	.word	0xaaaaaaab
 8006408:	400204b8 	.word	0x400204b8
 800640c:	4002040f 	.word	0x4002040f
 8006410:	10008200 	.word	0x10008200
 8006414:	40020880 	.word	0x40020880

08006418 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d04a      	beq.n	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b08      	cmp	r3, #8
 8006432:	d847      	bhi.n	80064c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a25      	ldr	r2, [pc, #148]	; (80064d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d022      	beq.n	8006484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a24      	ldr	r2, [pc, #144]	; (80064d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d01d      	beq.n	8006484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a22      	ldr	r2, [pc, #136]	; (80064d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d018      	beq.n	8006484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a21      	ldr	r2, [pc, #132]	; (80064dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d013      	beq.n	8006484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1f      	ldr	r2, [pc, #124]	; (80064e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d00e      	beq.n	8006484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d009      	beq.n	8006484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d004      	beq.n	8006484 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d101      	bne.n	8006488 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006488:	2300      	movs	r3, #0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4b17      	ldr	r3, [pc, #92]	; (80064f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	461a      	mov	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a15      	ldr	r2, [pc, #84]	; (80064f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80064a0:	671a      	str	r2, [r3, #112]	; 0x70
 80064a2:	e009      	b.n	80064b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	4b14      	ldr	r3, [pc, #80]	; (80064f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80064a8:	4413      	add	r3, r2
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	461a      	mov	r2, r3
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a11      	ldr	r2, [pc, #68]	; (80064fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80064b6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3b01      	subs	r3, #1
 80064bc:	2201      	movs	r2, #1
 80064be:	409a      	lsls	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80064c4:	bf00      	nop
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	58025408 	.word	0x58025408
 80064d4:	5802541c 	.word	0x5802541c
 80064d8:	58025430 	.word	0x58025430
 80064dc:	58025444 	.word	0x58025444
 80064e0:	58025458 	.word	0x58025458
 80064e4:	5802546c 	.word	0x5802546c
 80064e8:	58025480 	.word	0x58025480
 80064ec:	58025494 	.word	0x58025494
 80064f0:	1600963f 	.word	0x1600963f
 80064f4:	58025940 	.word	0x58025940
 80064f8:	1000823f 	.word	0x1000823f
 80064fc:	40020940 	.word	0x40020940

08006500 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d101      	bne.n	8006512 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e0e3      	b.n	80066da <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006518:	2b00      	cmp	r3, #0
 800651a:	d106      	bne.n	800652a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2223      	movs	r2, #35	; 0x23
 8006520:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7fa fd53 	bl	8000fd0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800652a:	4b6e      	ldr	r3, [pc, #440]	; (80066e4 <HAL_ETH_Init+0x1e4>)
 800652c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006530:	4a6c      	ldr	r2, [pc, #432]	; (80066e4 <HAL_ETH_Init+0x1e4>)
 8006532:	f043 0302 	orr.w	r3, r3, #2
 8006536:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800653a:	4b6a      	ldr	r3, [pc, #424]	; (80066e4 <HAL_ETH_Init+0x1e4>)
 800653c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	60bb      	str	r3, [r7, #8]
 8006546:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	7a1b      	ldrb	r3, [r3, #8]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006550:	2000      	movs	r0, #0
 8006552:	f7fc fae3 	bl	8002b1c <HAL_SYSCFG_ETHInterfaceSelect>
 8006556:	e003      	b.n	8006560 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006558:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800655c:	f7fc fade 	bl	8002b1c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006560:	4b61      	ldr	r3, [pc, #388]	; (80066e8 <HAL_ETH_Init+0x1e8>)
 8006562:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800657a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800657c:	f7fc fa92 	bl	8002aa4 <HAL_GetTick>
 8006580:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006582:	e011      	b.n	80065a8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006584:	f7fc fa8e 	bl	8002aa4 <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006592:	d909      	bls.n	80065a8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2204      	movs	r2, #4
 8006598:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	22e0      	movs	r2, #224	; 0xe0
 80065a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e098      	b.n	80066da <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e4      	bne.n	8006584 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f89e 	bl	80066fc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80065c0:	f002 f9f8 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 80065c4:	4603      	mov	r3, r0
 80065c6:	4a49      	ldr	r2, [pc, #292]	; (80066ec <HAL_ETH_Init+0x1ec>)
 80065c8:	fba2 2303 	umull	r2, r3, r2, r3
 80065cc:	0c9a      	lsrs	r2, r3, #18
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3a01      	subs	r2, #1
 80065d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fa81 	bl	8006ae0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80065ea:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	6812      	ldr	r2, [r2, #0]
 80065f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80065fa:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f003 0303 	and.w	r3, r3, #3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	22e0      	movs	r2, #224	; 0xe0
 8006616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e05d      	b.n	80066da <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006626:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800662a:	4b31      	ldr	r3, [pc, #196]	; (80066f0 <HAL_ETH_Init+0x1f0>)
 800662c:	4013      	ands	r3, r2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6952      	ldr	r2, [r2, #20]
 8006632:	0051      	lsls	r1, r2, #1
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	6812      	ldr	r2, [r2, #0]
 8006638:	430b      	orrs	r3, r1
 800663a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800663e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fae9 	bl	8006c1a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fb2f 	bl	8006cac <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	3305      	adds	r3, #5
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	021a      	lsls	r2, r3, #8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	3304      	adds	r3, #4
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	4619      	mov	r1, r3
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	3303      	adds	r3, #3
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	061a      	lsls	r2, r3, #24
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	3302      	adds	r3, #2
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	041b      	lsls	r3, r3, #16
 8006680:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	3301      	adds	r3, #1
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800668c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800669a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800669c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <HAL_ETH_Init+0x1f4>)
 80066ae:	430b      	orrs	r3, r1
 80066b0:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	4b0d      	ldr	r3, [pc, #52]	; (80066f8 <HAL_ETH_Init+0x1f8>)
 80066c2:	430b      	orrs	r3, r1
 80066c4:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2210      	movs	r2, #16
 80066d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3710      	adds	r7, #16
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	58024400 	.word	0x58024400
 80066e8:	58000400 	.word	0x58000400
 80066ec:	431bde83 	.word	0x431bde83
 80066f0:	ffff8001 	.word	0xffff8001
 80066f4:	0c020060 	.word	0x0c020060
 80066f8:	0c20c000 	.word	0x0c20c000

080066fc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800670c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006714:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006716:	f002 f94d 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 800671a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	4a1a      	ldr	r2, [pc, #104]	; (8006788 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d804      	bhi.n	800672e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	e022      	b.n	8006774 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	4a16      	ldr	r2, [pc, #88]	; (800678c <HAL_ETH_SetMDIOClockRange+0x90>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d204      	bcs.n	8006740 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	e019      	b.n	8006774 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4a13      	ldr	r2, [pc, #76]	; (8006790 <HAL_ETH_SetMDIOClockRange+0x94>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d915      	bls.n	8006774 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4a12      	ldr	r2, [pc, #72]	; (8006794 <HAL_ETH_SetMDIOClockRange+0x98>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d804      	bhi.n	800675a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	e00c      	b.n	8006774 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d804      	bhi.n	800676c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	e003      	b.n	8006774 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8006772:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800677e:	bf00      	nop
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	02160ebf 	.word	0x02160ebf
 800678c:	03938700 	.word	0x03938700
 8006790:	05f5e0ff 	.word	0x05f5e0ff
 8006794:	08f0d17f 	.word	0x08f0d17f
 8006798:	0ee6b27f 	.word	0x0ee6b27f

0800679c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80067ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	791b      	ldrb	r3, [r3, #4]
 80067b4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80067b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	7b1b      	ldrb	r3, [r3, #12]
 80067bc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80067be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	7b5b      	ldrb	r3, [r3, #13]
 80067c4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80067c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	7b9b      	ldrb	r3, [r3, #14]
 80067cc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80067ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	7bdb      	ldrb	r3, [r3, #15]
 80067d4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80067d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	7c12      	ldrb	r2, [r2, #16]
 80067dc:	2a00      	cmp	r2, #0
 80067de:	d102      	bne.n	80067e6 <ETH_SetMACConfig+0x4a>
 80067e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80067e4:	e000      	b.n	80067e8 <ETH_SetMACConfig+0x4c>
 80067e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80067e8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80067ea:	683a      	ldr	r2, [r7, #0]
 80067ec:	7c52      	ldrb	r2, [r2, #17]
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	d102      	bne.n	80067f8 <ETH_SetMACConfig+0x5c>
 80067f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80067f6:	e000      	b.n	80067fa <ETH_SetMACConfig+0x5e>
 80067f8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80067fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	7c9b      	ldrb	r3, [r3, #18]
 8006800:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006802:	431a      	orrs	r2, r3
               macconf->Speed |
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006808:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800680e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	7f1b      	ldrb	r3, [r3, #28]
 8006814:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006816:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	7f5b      	ldrb	r3, [r3, #29]
 800681c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800681e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	7f92      	ldrb	r2, [r2, #30]
 8006824:	2a00      	cmp	r2, #0
 8006826:	d102      	bne.n	800682e <ETH_SetMACConfig+0x92>
 8006828:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800682c:	e000      	b.n	8006830 <ETH_SetMACConfig+0x94>
 800682e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006830:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	7fdb      	ldrb	r3, [r3, #31]
 8006836:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006838:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006840:	2a00      	cmp	r2, #0
 8006842:	d102      	bne.n	800684a <ETH_SetMACConfig+0xae>
 8006844:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006848:	e000      	b.n	800684c <ETH_SetMACConfig+0xb0>
 800684a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800684c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006852:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800685a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800685c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	4b56      	ldr	r3, [pc, #344]	; (80069c8 <ETH_SetMACConfig+0x22c>)
 800686e:	4013      	ands	r3, r2
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	6812      	ldr	r2, [r2, #0]
 8006874:	68f9      	ldr	r1, [r7, #12]
 8006876:	430b      	orrs	r3, r1
 8006878:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006886:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006888:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006890:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006892:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800689a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800689c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	d102      	bne.n	80068ae <ETH_SetMACConfig+0x112>
 80068a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80068ac:	e000      	b.n	80068b0 <ETH_SetMACConfig+0x114>
 80068ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80068b0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685a      	ldr	r2, [r3, #4]
 80068c0:	4b42      	ldr	r3, [pc, #264]	; (80069cc <ETH_SetMACConfig+0x230>)
 80068c2:	4013      	ands	r3, r2
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	68f9      	ldr	r1, [r7, #12]
 80068ca:	430b      	orrs	r3, r1
 80068cc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068d4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	4b3a      	ldr	r3, [pc, #232]	; (80069d0 <ETH_SetMACConfig+0x234>)
 80068e6:	4013      	ands	r3, r2
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	6812      	ldr	r2, [r2, #0]
 80068ec:	68f9      	ldr	r1, [r7, #12]
 80068ee:	430b      	orrs	r3, r1
 80068f0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80068f8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80068fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006906:	2a00      	cmp	r2, #0
 8006908:	d101      	bne.n	800690e <ETH_SetMACConfig+0x172>
 800690a:	2280      	movs	r2, #128	; 0x80
 800690c:	e000      	b.n	8006910 <ETH_SetMACConfig+0x174>
 800690e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006910:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006916:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006922:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006926:	4013      	ands	r3, r2
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6812      	ldr	r2, [r2, #0]
 800692c:	68f9      	ldr	r1, [r7, #12]
 800692e:	430b      	orrs	r3, r1
 8006930:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006938:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006940:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694e:	f023 0103 	bic.w	r1, r3, #3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	430a      	orrs	r2, r1
 800695a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006966:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800697c:	683a      	ldr	r2, [r7, #0]
 800697e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006982:	2a00      	cmp	r2, #0
 8006984:	d101      	bne.n	800698a <ETH_SetMACConfig+0x1ee>
 8006986:	2240      	movs	r2, #64	; 0x40
 8006988:	e000      	b.n	800698c <ETH_SetMACConfig+0x1f0>
 800698a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800698c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006994:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006996:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800699e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80069ac:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	430a      	orrs	r2, r1
 80069b8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80069bc:	bf00      	nop
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	00048083 	.word	0x00048083
 80069cc:	c0f88000 	.word	0xc0f88000
 80069d0:	fffffef0 	.word	0xfffffef0

080069d4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	4b38      	ldr	r3, [pc, #224]	; (8006acc <ETH_SetDMAConfig+0xf8>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	683a      	ldr	r2, [r7, #0]
 80069ee:	6811      	ldr	r1, [r2, #0]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6812      	ldr	r2, [r2, #0]
 80069f4:	430b      	orrs	r3, r1
 80069f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80069fa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	791b      	ldrb	r3, [r3, #4]
 8006a00:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006a06:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	7b1b      	ldrb	r3, [r3, #12]
 8006a0c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	4b2c      	ldr	r3, [pc, #176]	; (8006ad0 <ETH_SetDMAConfig+0xfc>)
 8006a1e:	4013      	ands	r3, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6812      	ldr	r2, [r2, #0]
 8006a24:	68f9      	ldr	r1, [r7, #12]
 8006a26:	430b      	orrs	r3, r1
 8006a28:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a2c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	7b5b      	ldrb	r3, [r3, #13]
 8006a32:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a44:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006a48:	4b22      	ldr	r3, [pc, #136]	; (8006ad4 <ETH_SetDMAConfig+0x100>)
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	6812      	ldr	r2, [r2, #0]
 8006a50:	68f9      	ldr	r1, [r7, #12]
 8006a52:	430b      	orrs	r3, r1
 8006a54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a58:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	7d1b      	ldrb	r3, [r3, #20]
 8006a64:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006a66:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	7f5b      	ldrb	r3, [r3, #29]
 8006a6c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a7a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006a7e:	4b16      	ldr	r3, [pc, #88]	; (8006ad8 <ETH_SetDMAConfig+0x104>)
 8006a80:	4013      	ands	r3, r2
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	6812      	ldr	r2, [r2, #0]
 8006a86:	68f9      	ldr	r1, [r7, #12]
 8006a88:	430b      	orrs	r3, r1
 8006a8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006a8e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	7f1b      	ldrb	r3, [r3, #28]
 8006a96:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aa8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <ETH_SetDMAConfig+0x108>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	6812      	ldr	r2, [r2, #0]
 8006ab4:	68f9      	ldr	r1, [r7, #12]
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006abc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006ac0:	bf00      	nop
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	ffff87fd 	.word	0xffff87fd
 8006ad0:	ffff2ffe 	.word	0xffff2ffe
 8006ad4:	fffec000 	.word	0xfffec000
 8006ad8:	ffc0efef 	.word	0xffc0efef
 8006adc:	7fc0ffff 	.word	0x7fc0ffff

08006ae0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b0a4      	sub	sp, #144	; 0x90
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006aee:	2300      	movs	r3, #0
 8006af0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006af2:	2300      	movs	r3, #0
 8006af4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006af8:	2300      	movs	r3, #0
 8006afa:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006b04:	2301      	movs	r3, #1
 8006b06:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006b16:	2301      	movs	r3, #1
 8006b18:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b20:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8006b38:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006b3c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006b44:	2300      	movs	r3, #0
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006b62:	2300      	movs	r3, #0
 8006b64:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006b66:	2300      	movs	r3, #0
 8006b68:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006b72:	2301      	movs	r3, #1
 8006b74:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006b78:	2320      	movs	r3, #32
 8006b7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006b8a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006b90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b94:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006bc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff fde6 	bl	800679c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006be2:	2300      	movs	r3, #0
 8006be4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006bea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006bee:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006bf4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006bf8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006c00:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006c04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006c06:	f107 0308 	add.w	r3, r7, #8
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff fee1 	bl	80069d4 <ETH_SetDMAConfig>
}
 8006c12:	bf00      	nop
 8006c14:	3790      	adds	r7, #144	; 0x90
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006c22:	2300      	movs	r3, #0
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	e01d      	b.n	8006c64 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	68d9      	ldr	r1, [r3, #12]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	4413      	add	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	440b      	add	r3, r1
 8006c38:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006c52:	68b9      	ldr	r1, [r7, #8]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	3206      	adds	r2, #6
 8006c5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	3301      	adds	r3, #1
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d9de      	bls.n	8006c28 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c78:	461a      	mov	r2, r3
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	68da      	ldr	r2, [r3, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c9c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006ca0:	bf00      	nop
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b085      	sub	sp, #20
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	e023      	b.n	8006d02 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6919      	ldr	r1, [r3, #16]
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	4613      	mov	r3, r2
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	4413      	add	r3, r2
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	440b      	add	r3, r1
 8006cca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2200      	movs	r2, #0
 8006cee:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006cf0:	68b9      	ldr	r1, [r7, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	3212      	adds	r2, #18
 8006cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	3301      	adds	r3, #1
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d9d8      	bls.n	8006cba <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d2e:	461a      	mov	r2, r3
 8006d30:	2303      	movs	r3, #3
 8006d32:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691a      	ldr	r2, [r3, #16]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d42:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d56:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006d5a:	bf00      	nop
 8006d5c:	3714      	adds	r7, #20
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b098      	sub	sp, #96	; 0x60
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006d70:	4a84      	ldr	r2, [pc, #528]	; (8006f84 <HAL_FDCAN_Init+0x21c>)
 8006d72:	f107 030c 	add.w	r3, r7, #12
 8006d76:	4611      	mov	r1, r2
 8006d78:	224c      	movs	r2, #76	; 0x4c
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f006 f858 	bl	800ce30 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e1c6      	b.n	8007118 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a7e      	ldr	r2, [pc, #504]	; (8006f88 <HAL_FDCAN_Init+0x220>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d106      	bne.n	8006da2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fa fa1a 	bl	80011f0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699a      	ldr	r2, [r3, #24]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f022 0210 	bic.w	r2, r2, #16
 8006dca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dcc:	f7fb fe6a 	bl	8002aa4 <HAL_GetTick>
 8006dd0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006dd2:	e014      	b.n	8006dfe <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006dd4:	f7fb fe66 	bl	8002aa4 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b0a      	cmp	r3, #10
 8006de0:	d90d      	bls.n	8006dfe <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006de8:	f043 0201 	orr.w	r2, r3, #1
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2203      	movs	r2, #3
 8006df6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e18c      	b.n	8007118 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	f003 0308 	and.w	r3, r3, #8
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	d0e3      	beq.n	8006dd4 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f042 0201 	orr.w	r2, r2, #1
 8006e1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e1c:	f7fb fe42 	bl	8002aa4 <HAL_GetTick>
 8006e20:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e22:	e014      	b.n	8006e4e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e24:	f7fb fe3e 	bl	8002aa4 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b0a      	cmp	r3, #10
 8006e30:	d90d      	bls.n	8006e4e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e38:	f043 0201 	orr.w	r2, r3, #1
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2203      	movs	r2, #3
 8006e46:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e164      	b.n	8007118 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d0e3      	beq.n	8006e24 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0202 	orr.w	r2, r2, #2
 8006e6a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	7c1b      	ldrb	r3, [r3, #16]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d108      	bne.n	8006e86 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	699a      	ldr	r2, [r3, #24]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e82:	619a      	str	r2, [r3, #24]
 8006e84:	e007      	b.n	8006e96 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699a      	ldr	r2, [r3, #24]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e94:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7c5b      	ldrb	r3, [r3, #17]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d108      	bne.n	8006eb0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	699a      	ldr	r2, [r3, #24]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006eac:	619a      	str	r2, [r3, #24]
 8006eae:	e007      	b.n	8006ec0 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ebe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	7c9b      	ldrb	r3, [r3, #18]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d108      	bne.n	8006eda <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006ed6:	619a      	str	r2, [r3, #24]
 8006ed8:	e007      	b.n	8006eea <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	699a      	ldr	r2, [r3, #24]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ee8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	430a      	orrs	r2, r1
 8006efe:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	699a      	ldr	r2, [r3, #24]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006f0e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691a      	ldr	r2, [r3, #16]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0210 	bic.w	r2, r2, #16
 8006f1e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d108      	bne.n	8006f3a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	699a      	ldr	r2, [r3, #24]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0204 	orr.w	r2, r2, #4
 8006f36:	619a      	str	r2, [r3, #24]
 8006f38:	e030      	b.n	8006f9c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d02c      	beq.n	8006f9c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d020      	beq.n	8006f8c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	699a      	ldr	r2, [r3, #24]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006f58:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f042 0210 	orr.w	r2, r2, #16
 8006f68:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	2b03      	cmp	r3, #3
 8006f70:	d114      	bne.n	8006f9c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	699a      	ldr	r2, [r3, #24]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f042 0220 	orr.w	r2, r2, #32
 8006f80:	619a      	str	r2, [r3, #24]
 8006f82:	e00b      	b.n	8006f9c <HAL_FDCAN_Init+0x234>
 8006f84:	0800ce64 	.word	0x0800ce64
 8006f88:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699a      	ldr	r2, [r3, #24]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0220 	orr.w	r2, r2, #32
 8006f9a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006fac:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006fb4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	695b      	ldr	r3, [r3, #20]
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006fc4:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006fc6:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fd0:	d115      	bne.n	8006ffe <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006fe0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006fea:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006ffa:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006ffc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	430a      	orrs	r2, r1
 8007018:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007024:	4413      	add	r3, r2
 8007026:	2b00      	cmp	r3, #0
 8007028:	d011      	beq.n	800704e <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007032:	f023 0107 	bic.w	r1, r3, #7
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	3360      	adds	r3, #96	; 0x60
 800703e:	443b      	add	r3, r7
 8007040:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	2b00      	cmp	r3, #0
 8007054:	d011      	beq.n	800707a <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800705e:	f023 0107 	bic.w	r1, r3, #7
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	3360      	adds	r3, #96	; 0x60
 800706a:	443b      	add	r3, r7
 800706c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	430a      	orrs	r2, r1
 8007076:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800707e:	2b00      	cmp	r3, #0
 8007080:	d012      	beq.n	80070a8 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800708a:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	3360      	adds	r3, #96	; 0x60
 8007096:	443b      	add	r3, r7
 8007098:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800709c:	011a      	lsls	r2, r3, #4
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d012      	beq.n	80070d6 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80070b8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	3360      	adds	r3, #96	; 0x60
 80070c4:	443b      	add	r3, r7
 80070c6:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80070ca:	021a      	lsls	r2, r3, #8
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a11      	ldr	r2, [pc, #68]	; (8007120 <HAL_FDCAN_Init+0x3b8>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d107      	bne.n	80070f0 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f022 0203 	bic.w	r2, r2, #3
 80070ee:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f80b 	bl	8007124 <FDCAN_CalcultateRamBlockAddresses>
 800710e:	4603      	mov	r3, r0
 8007110:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007114:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007118:	4618      	mov	r0, r3
 800711a:	3760      	adds	r7, #96	; 0x60
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	4000a000 	.word	0x4000a000

08007124 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007130:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800713a:	4ba7      	ldr	r3, [pc, #668]	; (80073d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800713c:	4013      	ands	r3, r2
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	0091      	lsls	r1, r2, #2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	430b      	orrs	r3, r1
 8007148:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007154:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	041a      	lsls	r2, r3, #16
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	4413      	add	r3, r2
 8007170:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800717a:	4b97      	ldr	r3, [pc, #604]	; (80073d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800717c:	4013      	ands	r3, r2
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	0091      	lsls	r1, r2, #2
 8007182:	687a      	ldr	r2, [r7, #4]
 8007184:	6812      	ldr	r2, [r2, #0]
 8007186:	430b      	orrs	r3, r1
 8007188:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007194:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719c:	041a      	lsls	r2, r3, #16
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	430a      	orrs	r2, r1
 80071a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ac:	005b      	lsls	r3, r3, #1
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	4413      	add	r3, r2
 80071b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80071bc:	4b86      	ldr	r3, [pc, #536]	; (80073d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80071be:	4013      	ands	r3, r2
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	0091      	lsls	r1, r2, #2
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	6812      	ldr	r2, [r2, #0]
 80071c8:	430b      	orrs	r3, r1
 80071ca:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80071d6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071de:	041a      	lsls	r2, r3, #16
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80071f2:	fb02 f303 	mul.w	r3, r2, r3
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	4413      	add	r3, r2
 80071fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007204:	4b74      	ldr	r3, [pc, #464]	; (80073d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007206:	4013      	ands	r3, r2
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	0091      	lsls	r1, r2, #2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6812      	ldr	r2, [r2, #0]
 8007210:	430b      	orrs	r3, r1
 8007212:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800721e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007226:	041a      	lsls	r2, r3, #16
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	430a      	orrs	r2, r1
 800722e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800723a:	fb02 f303 	mul.w	r3, r2, r3
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	4413      	add	r3, r2
 8007242:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800724c:	4b62      	ldr	r3, [pc, #392]	; (80073d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800724e:	4013      	ands	r3, r2
 8007250:	68ba      	ldr	r2, [r7, #8]
 8007252:	0091      	lsls	r1, r2, #2
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6812      	ldr	r2, [r2, #0]
 8007258:	430b      	orrs	r3, r1
 800725a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007266:	fb02 f303 	mul.w	r3, r2, r3
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	4413      	add	r3, r2
 800726e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007278:	4b57      	ldr	r3, [pc, #348]	; (80073d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800727a:	4013      	ands	r3, r2
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	0091      	lsls	r1, r2, #2
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	430b      	orrs	r3, r1
 8007286:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007292:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800729a:	041a      	lsls	r2, r3, #16
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	430a      	orrs	r2, r1
 80072a2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	4413      	add	r3, r2
 80072b0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80072ba:	4b47      	ldr	r3, [pc, #284]	; (80073d8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80072bc:	4013      	ands	r3, r2
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	0091      	lsls	r1, r2, #2
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	6812      	ldr	r2, [r2, #0]
 80072c6:	430b      	orrs	r3, r1
 80072c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072d4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072dc:	041a      	lsls	r2, r3, #16
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	430a      	orrs	r2, r1
 80072e4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80072f0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f8:	061a      	lsls	r2, r3, #24
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007308:	4b34      	ldr	r3, [pc, #208]	; (80073dc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800730a:	4413      	add	r3, r2
 800730c:	009a      	lsls	r2, r3, #2
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	441a      	add	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732a:	00db      	lsls	r3, r3, #3
 800732c:	441a      	add	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6f5a      	ldr	r2, [r3, #116]	; 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	6879      	ldr	r1, [r7, #4]
 800733c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800733e:	fb01 f303 	mul.w	r3, r1, r3
 8007342:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8007344:	441a      	add	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007356:	fb01 f303 	mul.w	r3, r1, r3
 800735a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800735c:	441a      	add	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6fda      	ldr	r2, [r3, #124]	; 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800736e:	fb01 f303 	mul.w	r3, r1, r3
 8007372:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8007374:	441a      	add	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007386:	00db      	lsls	r3, r3, #3
 8007388:	441a      	add	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739a:	6879      	ldr	r1, [r7, #4]
 800739c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800739e:	fb01 f303 	mul.w	r3, r1, r3
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	441a      	add	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80073ba:	fb01 f303 	mul.w	r3, r1, r3
 80073be:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80073c0:	441a      	add	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ce:	4a04      	ldr	r2, [pc, #16]	; (80073e0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d915      	bls.n	8007400 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80073d4:	e006      	b.n	80073e4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80073d6:	bf00      	nop
 80073d8:	ffff0003 	.word	0xffff0003
 80073dc:	10002b00 	.word	0x10002b00
 80073e0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ea:	f043 0220 	orr.w	r2, r3, #32
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2203      	movs	r2, #3
 80073f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e010      	b.n	8007422 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007404:	60fb      	str	r3, [r7, #12]
 8007406:	e005      	b.n	8007414 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	3304      	adds	r3, #4
 8007412:	60fb      	str	r3, [r7, #12]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	429a      	cmp	r2, r3
 800741e:	d3f3      	bcc.n	8007408 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3714      	adds	r7, #20
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop

08007430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007430:	b480      	push	{r7}
 8007432:	b089      	sub	sp, #36	; 0x24
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800743a:	2300      	movs	r3, #0
 800743c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800743e:	4b89      	ldr	r3, [pc, #548]	; (8007664 <HAL_GPIO_Init+0x234>)
 8007440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007442:	e194      	b.n	800776e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	2101      	movs	r1, #1
 800744a:	69fb      	ldr	r3, [r7, #28]
 800744c:	fa01 f303 	lsl.w	r3, r1, r3
 8007450:	4013      	ands	r3, r2
 8007452:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8186 	beq.w	8007768 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f003 0303 	and.w	r3, r3, #3
 8007464:	2b01      	cmp	r3, #1
 8007466:	d005      	beq.n	8007474 <HAL_GPIO_Init+0x44>
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d130      	bne.n	80074d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	005b      	lsls	r3, r3, #1
 800747e:	2203      	movs	r2, #3
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	43db      	mvns	r3, r3
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	4013      	ands	r3, r2
 800748a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	fa02 f303 	lsl.w	r3, r2, r3
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4313      	orrs	r3, r2
 800749c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074aa:	2201      	movs	r2, #1
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	fa02 f303 	lsl.w	r3, r2, r3
 80074b2:	43db      	mvns	r3, r3
 80074b4:	69ba      	ldr	r2, [r7, #24]
 80074b6:	4013      	ands	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	091b      	lsrs	r3, r3, #4
 80074c0:	f003 0201 	and.w	r2, r3, #1
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f003 0303 	and.w	r3, r3, #3
 80074de:	2b03      	cmp	r3, #3
 80074e0:	d017      	beq.n	8007512 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68db      	ldr	r3, [r3, #12]
 80074e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	2203      	movs	r2, #3
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	43db      	mvns	r3, r3
 80074f4:	69ba      	ldr	r2, [r7, #24]
 80074f6:	4013      	ands	r3, r2
 80074f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	689a      	ldr	r2, [r3, #8]
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	fa02 f303 	lsl.w	r3, r2, r3
 8007506:	69ba      	ldr	r2, [r7, #24]
 8007508:	4313      	orrs	r3, r2
 800750a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d123      	bne.n	8007566 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	08da      	lsrs	r2, r3, #3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3208      	adds	r2, #8
 8007526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800752a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f003 0307 	and.w	r3, r3, #7
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	220f      	movs	r2, #15
 8007536:	fa02 f303 	lsl.w	r3, r2, r3
 800753a:	43db      	mvns	r3, r3
 800753c:	69ba      	ldr	r2, [r7, #24]
 800753e:	4013      	ands	r3, r2
 8007540:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	691a      	ldr	r2, [r3, #16]
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	f003 0307 	and.w	r3, r3, #7
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	fa02 f303 	lsl.w	r3, r2, r3
 8007552:	69ba      	ldr	r2, [r7, #24]
 8007554:	4313      	orrs	r3, r2
 8007556:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	08da      	lsrs	r2, r3, #3
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3208      	adds	r2, #8
 8007560:	69b9      	ldr	r1, [r7, #24]
 8007562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800756c:	69fb      	ldr	r3, [r7, #28]
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	2203      	movs	r2, #3
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	43db      	mvns	r3, r3
 8007578:	69ba      	ldr	r2, [r7, #24]
 800757a:	4013      	ands	r3, r2
 800757c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	f003 0203 	and.w	r2, r3, #3
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	fa02 f303 	lsl.w	r3, r2, r3
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4313      	orrs	r3, r2
 8007592:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	69ba      	ldr	r2, [r7, #24]
 8007598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f000 80e0 	beq.w	8007768 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075a8:	4b2f      	ldr	r3, [pc, #188]	; (8007668 <HAL_GPIO_Init+0x238>)
 80075aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075ae:	4a2e      	ldr	r2, [pc, #184]	; (8007668 <HAL_GPIO_Init+0x238>)
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80075b8:	4b2b      	ldr	r3, [pc, #172]	; (8007668 <HAL_GPIO_Init+0x238>)
 80075ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075be:	f003 0302 	and.w	r3, r3, #2
 80075c2:	60fb      	str	r3, [r7, #12]
 80075c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075c6:	4a29      	ldr	r2, [pc, #164]	; (800766c <HAL_GPIO_Init+0x23c>)
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	089b      	lsrs	r3, r3, #2
 80075cc:	3302      	adds	r3, #2
 80075ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	f003 0303 	and.w	r3, r3, #3
 80075da:	009b      	lsls	r3, r3, #2
 80075dc:	220f      	movs	r2, #15
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	43db      	mvns	r3, r3
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	4013      	ands	r3, r2
 80075e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a20      	ldr	r2, [pc, #128]	; (8007670 <HAL_GPIO_Init+0x240>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d052      	beq.n	8007698 <HAL_GPIO_Init+0x268>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a1f      	ldr	r2, [pc, #124]	; (8007674 <HAL_GPIO_Init+0x244>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d031      	beq.n	800765e <HAL_GPIO_Init+0x22e>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a1e      	ldr	r2, [pc, #120]	; (8007678 <HAL_GPIO_Init+0x248>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d02b      	beq.n	800765a <HAL_GPIO_Init+0x22a>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1d      	ldr	r2, [pc, #116]	; (800767c <HAL_GPIO_Init+0x24c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d025      	beq.n	8007656 <HAL_GPIO_Init+0x226>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a1c      	ldr	r2, [pc, #112]	; (8007680 <HAL_GPIO_Init+0x250>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01f      	beq.n	8007652 <HAL_GPIO_Init+0x222>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a1b      	ldr	r2, [pc, #108]	; (8007684 <HAL_GPIO_Init+0x254>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d019      	beq.n	800764e <HAL_GPIO_Init+0x21e>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a1a      	ldr	r2, [pc, #104]	; (8007688 <HAL_GPIO_Init+0x258>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <HAL_GPIO_Init+0x21a>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a19      	ldr	r2, [pc, #100]	; (800768c <HAL_GPIO_Init+0x25c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00d      	beq.n	8007646 <HAL_GPIO_Init+0x216>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a18      	ldr	r2, [pc, #96]	; (8007690 <HAL_GPIO_Init+0x260>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d007      	beq.n	8007642 <HAL_GPIO_Init+0x212>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a17      	ldr	r2, [pc, #92]	; (8007694 <HAL_GPIO_Init+0x264>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d101      	bne.n	800763e <HAL_GPIO_Init+0x20e>
 800763a:	2309      	movs	r3, #9
 800763c:	e02d      	b.n	800769a <HAL_GPIO_Init+0x26a>
 800763e:	230a      	movs	r3, #10
 8007640:	e02b      	b.n	800769a <HAL_GPIO_Init+0x26a>
 8007642:	2308      	movs	r3, #8
 8007644:	e029      	b.n	800769a <HAL_GPIO_Init+0x26a>
 8007646:	2307      	movs	r3, #7
 8007648:	e027      	b.n	800769a <HAL_GPIO_Init+0x26a>
 800764a:	2306      	movs	r3, #6
 800764c:	e025      	b.n	800769a <HAL_GPIO_Init+0x26a>
 800764e:	2305      	movs	r3, #5
 8007650:	e023      	b.n	800769a <HAL_GPIO_Init+0x26a>
 8007652:	2304      	movs	r3, #4
 8007654:	e021      	b.n	800769a <HAL_GPIO_Init+0x26a>
 8007656:	2303      	movs	r3, #3
 8007658:	e01f      	b.n	800769a <HAL_GPIO_Init+0x26a>
 800765a:	2302      	movs	r3, #2
 800765c:	e01d      	b.n	800769a <HAL_GPIO_Init+0x26a>
 800765e:	2301      	movs	r3, #1
 8007660:	e01b      	b.n	800769a <HAL_GPIO_Init+0x26a>
 8007662:	bf00      	nop
 8007664:	58000080 	.word	0x58000080
 8007668:	58024400 	.word	0x58024400
 800766c:	58000400 	.word	0x58000400
 8007670:	58020000 	.word	0x58020000
 8007674:	58020400 	.word	0x58020400
 8007678:	58020800 	.word	0x58020800
 800767c:	58020c00 	.word	0x58020c00
 8007680:	58021000 	.word	0x58021000
 8007684:	58021400 	.word	0x58021400
 8007688:	58021800 	.word	0x58021800
 800768c:	58021c00 	.word	0x58021c00
 8007690:	58022000 	.word	0x58022000
 8007694:	58022400 	.word	0x58022400
 8007698:	2300      	movs	r3, #0
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	f002 0203 	and.w	r2, r2, #3
 80076a0:	0092      	lsls	r2, r2, #2
 80076a2:	4093      	lsls	r3, r2
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80076aa:	4938      	ldr	r1, [pc, #224]	; (800778c <HAL_GPIO_Init+0x35c>)
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	089b      	lsrs	r3, r3, #2
 80076b0:	3302      	adds	r3, #2
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80076b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	43db      	mvns	r3, r3
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	4013      	ands	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	4313      	orrs	r3, r2
 80076dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80076de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80076e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	43db      	mvns	r3, r3
 80076f2:	69ba      	ldr	r2, [r7, #24]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007704:	69ba      	ldr	r2, [r7, #24]
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	4313      	orrs	r3, r2
 800770a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800770c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	43db      	mvns	r3, r3
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	4013      	ands	r3, r2
 8007722:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800772c:	2b00      	cmp	r3, #0
 800772e:	d003      	beq.n	8007738 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007730:	69ba      	ldr	r2, [r7, #24]
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	4313      	orrs	r3, r2
 8007736:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	69ba      	ldr	r2, [r7, #24]
 800773c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	43db      	mvns	r3, r3
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	4013      	ands	r3, r2
 800774c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d003      	beq.n	8007762 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800775a:	69ba      	ldr	r2, [r7, #24]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4313      	orrs	r3, r2
 8007760:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	69ba      	ldr	r2, [r7, #24]
 8007766:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	3301      	adds	r3, #1
 800776c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	fa22 f303 	lsr.w	r3, r2, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	f47f ae63 	bne.w	8007444 <HAL_GPIO_Init+0x14>
  }
}
 800777e:	bf00      	nop
 8007780:	bf00      	nop
 8007782:	3724      	adds	r7, #36	; 0x24
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr
 800778c:	58000400 	.word	0x58000400

08007790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	807b      	strh	r3, [r7, #2]
 800779c:	4613      	mov	r3, r2
 800779e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077a0:	787b      	ldrb	r3, [r7, #1]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d003      	beq.n	80077ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077a6:	887a      	ldrh	r2, [r7, #2]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80077ac:	e003      	b.n	80077b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80077ae:	887b      	ldrh	r3, [r7, #2]
 80077b0:	041a      	lsls	r2, r3, #16
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	619a      	str	r2, [r3, #24]
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
	...

080077c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d101      	bne.n	80077d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e08b      	b.n	80078ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d106      	bne.n	80077f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7fa f8b2 	bl	8001954 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2224      	movs	r2, #36	; 0x24
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0201 	bic.w	r2, r2, #1
 8007806:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685a      	ldr	r2, [r3, #4]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007814:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689a      	ldr	r2, [r3, #8]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007824:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d107      	bne.n	800783e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800783a:	609a      	str	r2, [r3, #8]
 800783c:	e006      	b.n	800784c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	689a      	ldr	r2, [r3, #8]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800784a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d108      	bne.n	8007866 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685a      	ldr	r2, [r3, #4]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007862:	605a      	str	r2, [r3, #4]
 8007864:	e007      	b.n	8007876 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007874:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6859      	ldr	r1, [r3, #4]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681a      	ldr	r2, [r3, #0]
 8007880:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <HAL_I2C_Init+0x134>)
 8007882:	430b      	orrs	r3, r1
 8007884:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68da      	ldr	r2, [r3, #12]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007894:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	430a      	orrs	r2, r1
 80078ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69d9      	ldr	r1, [r3, #28]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1a      	ldr	r2, [r3, #32]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0201 	orr.w	r2, r2, #1
 80078ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2220      	movs	r2, #32
 80078da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	02008000 	.word	0x02008000

080078fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b20      	cmp	r3, #32
 8007910:	d138      	bne.n	8007984 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007918:	2b01      	cmp	r3, #1
 800791a:	d101      	bne.n	8007920 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800791c:	2302      	movs	r3, #2
 800791e:	e032      	b.n	8007986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2224      	movs	r2, #36	; 0x24
 800792c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f022 0201 	bic.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800794e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	6819      	ldr	r1, [r3, #0]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	681a      	ldr	r2, [r3, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f042 0201 	orr.w	r2, r2, #1
 800796e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2220      	movs	r2, #32
 8007974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007992:	b480      	push	{r7}
 8007994:	b085      	sub	sp, #20
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
 800799a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b20      	cmp	r3, #32
 80079a6:	d139      	bne.n	8007a1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d101      	bne.n	80079b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079b2:	2302      	movs	r3, #2
 80079b4:	e033      	b.n	8007a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2224      	movs	r2, #36	; 0x24
 80079c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0201 	bic.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80079e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	021b      	lsls	r3, r3, #8
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0201 	orr.w	r2, r2, #1
 8007a06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2220      	movs	r2, #32
 8007a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	e000      	b.n	8007a1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a1c:	2302      	movs	r3, #2
  }
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
	...

08007a2c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007a34:	4b19      	ldr	r3, [pc, #100]	; (8007a9c <HAL_PWREx_ConfigSupply+0x70>)
 8007a36:	68db      	ldr	r3, [r3, #12]
 8007a38:	f003 0304 	and.w	r3, r3, #4
 8007a3c:	2b04      	cmp	r3, #4
 8007a3e:	d00a      	beq.n	8007a56 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a40:	4b16      	ldr	r3, [pc, #88]	; (8007a9c <HAL_PWREx_ConfigSupply+0x70>)
 8007a42:	68db      	ldr	r3, [r3, #12]
 8007a44:	f003 0307 	and.w	r3, r3, #7
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d001      	beq.n	8007a52 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e01f      	b.n	8007a92 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	e01d      	b.n	8007a92 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a56:	4b11      	ldr	r3, [pc, #68]	; (8007a9c <HAL_PWREx_ConfigSupply+0x70>)
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	f023 0207 	bic.w	r2, r3, #7
 8007a5e:	490f      	ldr	r1, [pc, #60]	; (8007a9c <HAL_PWREx_ConfigSupply+0x70>)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a66:	f7fb f81d 	bl	8002aa4 <HAL_GetTick>
 8007a6a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a6c:	e009      	b.n	8007a82 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a6e:	f7fb f819 	bl	8002aa4 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a7c:	d901      	bls.n	8007a82 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e007      	b.n	8007a92 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a82:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <HAL_PWREx_ConfigSupply+0x70>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a8e:	d1ee      	bne.n	8007a6e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	58024800 	.word	0x58024800

08007aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b08c      	sub	sp, #48	; 0x30
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d102      	bne.n	8007ab4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	f000 bc48 	b.w	8008344 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0301 	and.w	r3, r3, #1
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 8088 	beq.w	8007bd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ac2:	4b99      	ldr	r3, [pc, #612]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007acc:	4b96      	ldr	r3, [pc, #600]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad4:	2b10      	cmp	r3, #16
 8007ad6:	d007      	beq.n	8007ae8 <HAL_RCC_OscConfig+0x48>
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	2b18      	cmp	r3, #24
 8007adc:	d111      	bne.n	8007b02 <HAL_RCC_OscConfig+0x62>
 8007ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae0:	f003 0303 	and.w	r3, r3, #3
 8007ae4:	2b02      	cmp	r3, #2
 8007ae6:	d10c      	bne.n	8007b02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ae8:	4b8f      	ldr	r3, [pc, #572]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d06d      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x130>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d169      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f000 bc21 	b.w	8008344 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b0a:	d106      	bne.n	8007b1a <HAL_RCC_OscConfig+0x7a>
 8007b0c:	4b86      	ldr	r3, [pc, #536]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a85      	ldr	r2, [pc, #532]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	e02e      	b.n	8007b78 <HAL_RCC_OscConfig+0xd8>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10c      	bne.n	8007b3c <HAL_RCC_OscConfig+0x9c>
 8007b22:	4b81      	ldr	r3, [pc, #516]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a80      	ldr	r2, [pc, #512]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	4b7e      	ldr	r3, [pc, #504]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a7d      	ldr	r2, [pc, #500]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b38:	6013      	str	r3, [r2, #0]
 8007b3a:	e01d      	b.n	8007b78 <HAL_RCC_OscConfig+0xd8>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b44:	d10c      	bne.n	8007b60 <HAL_RCC_OscConfig+0xc0>
 8007b46:	4b78      	ldr	r3, [pc, #480]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a77      	ldr	r2, [pc, #476]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	4b75      	ldr	r3, [pc, #468]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a74      	ldr	r2, [pc, #464]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	e00b      	b.n	8007b78 <HAL_RCC_OscConfig+0xd8>
 8007b60:	4b71      	ldr	r3, [pc, #452]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a70      	ldr	r2, [pc, #448]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b6a:	6013      	str	r3, [r2, #0]
 8007b6c:	4b6e      	ldr	r3, [pc, #440]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a6d      	ldr	r2, [pc, #436]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d013      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b80:	f7fa ff90 	bl	8002aa4 <HAL_GetTick>
 8007b84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b88:	f7fa ff8c 	bl	8002aa4 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b64      	cmp	r3, #100	; 0x64
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e3d4      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b9a:	4b63      	ldr	r3, [pc, #396]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0f0      	beq.n	8007b88 <HAL_RCC_OscConfig+0xe8>
 8007ba6:	e014      	b.n	8007bd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ba8:	f7fa ff7c 	bl	8002aa4 <HAL_GetTick>
 8007bac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bae:	e008      	b.n	8007bc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bb0:	f7fa ff78 	bl	8002aa4 <HAL_GetTick>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb8:	1ad3      	subs	r3, r2, r3
 8007bba:	2b64      	cmp	r3, #100	; 0x64
 8007bbc:	d901      	bls.n	8007bc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e3c0      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bc2:	4b59      	ldr	r3, [pc, #356]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1f0      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x110>
 8007bce:	e000      	b.n	8007bd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 80ca 	beq.w	8007d74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007be0:	4b51      	ldr	r3, [pc, #324]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007be2:	691b      	ldr	r3, [r3, #16]
 8007be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007be8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bea:	4b4f      	ldr	r3, [pc, #316]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <HAL_RCC_OscConfig+0x166>
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	2b18      	cmp	r3, #24
 8007bfa:	d156      	bne.n	8007caa <HAL_RCC_OscConfig+0x20a>
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d151      	bne.n	8007caa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c06:	4b48      	ldr	r3, [pc, #288]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d005      	beq.n	8007c1e <HAL_RCC_OscConfig+0x17e>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d101      	bne.n	8007c1e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e392      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c1e:	4b42      	ldr	r3, [pc, #264]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f023 0219 	bic.w	r2, r3, #25
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	493f      	ldr	r1, [pc, #252]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c30:	f7fa ff38 	bl	8002aa4 <HAL_GetTick>
 8007c34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c38:	f7fa ff34 	bl	8002aa4 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e37c      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c4a:	4b37      	ldr	r3, [pc, #220]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f003 0304 	and.w	r3, r3, #4
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d0f0      	beq.n	8007c38 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c56:	f7fa ff55 	bl	8002b04 <HAL_GetREVID>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d817      	bhi.n	8007c94 <HAL_RCC_OscConfig+0x1f4>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	691b      	ldr	r3, [r3, #16]
 8007c68:	2b40      	cmp	r3, #64	; 0x40
 8007c6a:	d108      	bne.n	8007c7e <HAL_RCC_OscConfig+0x1de>
 8007c6c:	4b2e      	ldr	r3, [pc, #184]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007c74:	4a2c      	ldr	r2, [pc, #176]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c7a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c7c:	e07a      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c7e:	4b2a      	ldr	r3, [pc, #168]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	031b      	lsls	r3, r3, #12
 8007c8c:	4926      	ldr	r1, [pc, #152]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c92:	e06f      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c94:	4b24      	ldr	r3, [pc, #144]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007c96:	685b      	ldr	r3, [r3, #4]
 8007c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	061b      	lsls	r3, r3, #24
 8007ca2:	4921      	ldr	r1, [pc, #132]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ca8:	e064      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d047      	beq.n	8007d42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007cb2:	4b1d      	ldr	r3, [pc, #116]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f023 0219 	bic.w	r2, r3, #25
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	491a      	ldr	r1, [pc, #104]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc4:	f7fa feee 	bl	8002aa4 <HAL_GetTick>
 8007cc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cca:	e008      	b.n	8007cde <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ccc:	f7fa feea 	bl	8002aa4 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e332      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007cde:	4b12      	ldr	r3, [pc, #72]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 0304 	and.w	r3, r3, #4
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0f0      	beq.n	8007ccc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cea:	f7fa ff0b 	bl	8002b04 <HAL_GetREVID>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d819      	bhi.n	8007d2c <HAL_RCC_OscConfig+0x28c>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	2b40      	cmp	r3, #64	; 0x40
 8007cfe:	d108      	bne.n	8007d12 <HAL_RCC_OscConfig+0x272>
 8007d00:	4b09      	ldr	r3, [pc, #36]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d08:	4a07      	ldr	r2, [pc, #28]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d0e:	6053      	str	r3, [r2, #4]
 8007d10:	e030      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
 8007d12:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	031b      	lsls	r3, r3, #12
 8007d20:	4901      	ldr	r1, [pc, #4]	; (8007d28 <HAL_RCC_OscConfig+0x288>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	604b      	str	r3, [r1, #4]
 8007d26:	e025      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
 8007d28:	58024400 	.word	0x58024400
 8007d2c:	4b9a      	ldr	r3, [pc, #616]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	061b      	lsls	r3, r3, #24
 8007d3a:	4997      	ldr	r1, [pc, #604]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d3c:	4313      	orrs	r3, r2
 8007d3e:	604b      	str	r3, [r1, #4]
 8007d40:	e018      	b.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d42:	4b95      	ldr	r3, [pc, #596]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a94      	ldr	r2, [pc, #592]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d48:	f023 0301 	bic.w	r3, r3, #1
 8007d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4e:	f7fa fea9 	bl	8002aa4 <HAL_GetTick>
 8007d52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d54:	e008      	b.n	8007d68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d56:	f7fa fea5 	bl	8002aa4 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e2ed      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d68:	4b8b      	ldr	r3, [pc, #556]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f003 0304 	and.w	r3, r3, #4
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1f0      	bne.n	8007d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0310 	and.w	r3, r3, #16
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 80a9 	beq.w	8007ed4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d82:	4b85      	ldr	r3, [pc, #532]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007d8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d8c:	4b82      	ldr	r3, [pc, #520]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d007      	beq.n	8007da8 <HAL_RCC_OscConfig+0x308>
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	2b18      	cmp	r3, #24
 8007d9c:	d13a      	bne.n	8007e14 <HAL_RCC_OscConfig+0x374>
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	f003 0303 	and.w	r3, r3, #3
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d135      	bne.n	8007e14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007da8:	4b7b      	ldr	r3, [pc, #492]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x320>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	69db      	ldr	r3, [r3, #28]
 8007db8:	2b80      	cmp	r3, #128	; 0x80
 8007dba:	d001      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e2c1      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dc0:	f7fa fea0 	bl	8002b04 <HAL_GetREVID>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	f241 0203 	movw	r2, #4099	; 0x1003
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d817      	bhi.n	8007dfe <HAL_RCC_OscConfig+0x35e>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	2b20      	cmp	r3, #32
 8007dd4:	d108      	bne.n	8007de8 <HAL_RCC_OscConfig+0x348>
 8007dd6:	4b70      	ldr	r3, [pc, #448]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007dde:	4a6e      	ldr	r2, [pc, #440]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007de0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007de4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007de6:	e075      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007de8:	4b6b      	ldr	r3, [pc, #428]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	069b      	lsls	r3, r3, #26
 8007df6:	4968      	ldr	r1, [pc, #416]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dfc:	e06a      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dfe:	4b66      	ldr	r3, [pc, #408]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	061b      	lsls	r3, r3, #24
 8007e0c:	4962      	ldr	r1, [pc, #392]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e12:	e05f      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69db      	ldr	r3, [r3, #28]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d042      	beq.n	8007ea2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e1c:	4b5e      	ldr	r3, [pc, #376]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a5d      	ldr	r2, [pc, #372]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e28:	f7fa fe3c 	bl	8002aa4 <HAL_GetTick>
 8007e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e2e:	e008      	b.n	8007e42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e30:	f7fa fe38 	bl	8002aa4 <HAL_GetTick>
 8007e34:	4602      	mov	r2, r0
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	1ad3      	subs	r3, r2, r3
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e280      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e42:	4b55      	ldr	r3, [pc, #340]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f0      	beq.n	8007e30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e4e:	f7fa fe59 	bl	8002b04 <HAL_GetREVID>
 8007e52:	4603      	mov	r3, r0
 8007e54:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d817      	bhi.n	8007e8c <HAL_RCC_OscConfig+0x3ec>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	2b20      	cmp	r3, #32
 8007e62:	d108      	bne.n	8007e76 <HAL_RCC_OscConfig+0x3d6>
 8007e64:	4b4c      	ldr	r3, [pc, #304]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007e6c:	4a4a      	ldr	r2, [pc, #296]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e6e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e72:	6053      	str	r3, [r2, #4]
 8007e74:	e02e      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
 8007e76:	4b48      	ldr	r3, [pc, #288]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e78:	685b      	ldr	r3, [r3, #4]
 8007e7a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	069b      	lsls	r3, r3, #26
 8007e84:	4944      	ldr	r1, [pc, #272]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	604b      	str	r3, [r1, #4]
 8007e8a:	e023      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
 8007e8c:	4b42      	ldr	r3, [pc, #264]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	061b      	lsls	r3, r3, #24
 8007e9a:	493f      	ldr	r1, [pc, #252]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60cb      	str	r3, [r1, #12]
 8007ea0:	e018      	b.n	8007ed4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ea2:	4b3d      	ldr	r3, [pc, #244]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a3c      	ldr	r2, [pc, #240]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007ea8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eae:	f7fa fdf9 	bl	8002aa4 <HAL_GetTick>
 8007eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007eb4:	e008      	b.n	8007ec8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007eb6:	f7fa fdf5 	bl	8002aa4 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d901      	bls.n	8007ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e23d      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ec8:	4b33      	ldr	r3, [pc, #204]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1f0      	bne.n	8007eb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d036      	beq.n	8007f4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d019      	beq.n	8007f1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ee8:	4b2b      	ldr	r3, [pc, #172]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eec:	4a2a      	ldr	r2, [pc, #168]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ef4:	f7fa fdd6 	bl	8002aa4 <HAL_GetTick>
 8007ef8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007efa:	e008      	b.n	8007f0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007efc:	f7fa fdd2 	bl	8002aa4 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e21a      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f0e:	4b22      	ldr	r3, [pc, #136]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0f0      	beq.n	8007efc <HAL_RCC_OscConfig+0x45c>
 8007f1a:	e018      	b.n	8007f4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f1c:	4b1e      	ldr	r3, [pc, #120]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f20:	4a1d      	ldr	r2, [pc, #116]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f22:	f023 0301 	bic.w	r3, r3, #1
 8007f26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f28:	f7fa fdbc 	bl	8002aa4 <HAL_GetTick>
 8007f2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f2e:	e008      	b.n	8007f42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f30:	f7fa fdb8 	bl	8002aa4 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	2b02      	cmp	r3, #2
 8007f3c:	d901      	bls.n	8007f42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007f3e:	2303      	movs	r3, #3
 8007f40:	e200      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f42:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f46:	f003 0302 	and.w	r3, r3, #2
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1f0      	bne.n	8007f30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d039      	beq.n	8007fce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d01c      	beq.n	8007f9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f62:	4b0d      	ldr	r3, [pc, #52]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a0c      	ldr	r2, [pc, #48]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f6e:	f7fa fd99 	bl	8002aa4 <HAL_GetTick>
 8007f72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f74:	e008      	b.n	8007f88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f76:	f7fa fd95 	bl	8002aa4 <HAL_GetTick>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	1ad3      	subs	r3, r2, r3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d901      	bls.n	8007f88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e1dd      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f88:	4b03      	ldr	r3, [pc, #12]	; (8007f98 <HAL_RCC_OscConfig+0x4f8>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0f0      	beq.n	8007f76 <HAL_RCC_OscConfig+0x4d6>
 8007f94:	e01b      	b.n	8007fce <HAL_RCC_OscConfig+0x52e>
 8007f96:	bf00      	nop
 8007f98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f9c:	4b9b      	ldr	r3, [pc, #620]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a9a      	ldr	r2, [pc, #616]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8007fa2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007fa6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fa8:	f7fa fd7c 	bl	8002aa4 <HAL_GetTick>
 8007fac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fae:	e008      	b.n	8007fc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fb0:	f7fa fd78 	bl	8002aa4 <HAL_GetTick>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	1ad3      	subs	r3, r2, r3
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d901      	bls.n	8007fc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e1c0      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fc2:	4b92      	ldr	r3, [pc, #584]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d1f0      	bne.n	8007fb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f003 0304 	and.w	r3, r3, #4
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	f000 8081 	beq.w	80080de <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fdc:	4b8c      	ldr	r3, [pc, #560]	; (8008210 <HAL_RCC_OscConfig+0x770>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a8b      	ldr	r2, [pc, #556]	; (8008210 <HAL_RCC_OscConfig+0x770>)
 8007fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fe6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fe8:	f7fa fd5c 	bl	8002aa4 <HAL_GetTick>
 8007fec:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fee:	e008      	b.n	8008002 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ff0:	f7fa fd58 	bl	8002aa4 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b64      	cmp	r3, #100	; 0x64
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e1a0      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008002:	4b83      	ldr	r3, [pc, #524]	; (8008210 <HAL_RCC_OscConfig+0x770>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800a:	2b00      	cmp	r3, #0
 800800c:	d0f0      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d106      	bne.n	8008024 <HAL_RCC_OscConfig+0x584>
 8008016:	4b7d      	ldr	r3, [pc, #500]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800801a:	4a7c      	ldr	r2, [pc, #496]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 800801c:	f043 0301 	orr.w	r3, r3, #1
 8008020:	6713      	str	r3, [r2, #112]	; 0x70
 8008022:	e02d      	b.n	8008080 <HAL_RCC_OscConfig+0x5e0>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10c      	bne.n	8008046 <HAL_RCC_OscConfig+0x5a6>
 800802c:	4b77      	ldr	r3, [pc, #476]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 800802e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008030:	4a76      	ldr	r2, [pc, #472]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008032:	f023 0301 	bic.w	r3, r3, #1
 8008036:	6713      	str	r3, [r2, #112]	; 0x70
 8008038:	4b74      	ldr	r3, [pc, #464]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 800803a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803c:	4a73      	ldr	r2, [pc, #460]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 800803e:	f023 0304 	bic.w	r3, r3, #4
 8008042:	6713      	str	r3, [r2, #112]	; 0x70
 8008044:	e01c      	b.n	8008080 <HAL_RCC_OscConfig+0x5e0>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	2b05      	cmp	r3, #5
 800804c:	d10c      	bne.n	8008068 <HAL_RCC_OscConfig+0x5c8>
 800804e:	4b6f      	ldr	r3, [pc, #444]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008052:	4a6e      	ldr	r2, [pc, #440]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008054:	f043 0304 	orr.w	r3, r3, #4
 8008058:	6713      	str	r3, [r2, #112]	; 0x70
 800805a:	4b6c      	ldr	r3, [pc, #432]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 800805c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805e:	4a6b      	ldr	r2, [pc, #428]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008060:	f043 0301 	orr.w	r3, r3, #1
 8008064:	6713      	str	r3, [r2, #112]	; 0x70
 8008066:	e00b      	b.n	8008080 <HAL_RCC_OscConfig+0x5e0>
 8008068:	4b68      	ldr	r3, [pc, #416]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 800806a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800806c:	4a67      	ldr	r2, [pc, #412]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 800806e:	f023 0301 	bic.w	r3, r3, #1
 8008072:	6713      	str	r3, [r2, #112]	; 0x70
 8008074:	4b65      	ldr	r3, [pc, #404]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008078:	4a64      	ldr	r2, [pc, #400]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 800807a:	f023 0304 	bic.w	r3, r3, #4
 800807e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d015      	beq.n	80080b4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008088:	f7fa fd0c 	bl	8002aa4 <HAL_GetTick>
 800808c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800808e:	e00a      	b.n	80080a6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008090:	f7fa fd08 	bl	8002aa4 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	f241 3288 	movw	r2, #5000	; 0x1388
 800809e:	4293      	cmp	r3, r2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e14e      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080a6:	4b59      	ldr	r3, [pc, #356]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80080a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0ee      	beq.n	8008090 <HAL_RCC_OscConfig+0x5f0>
 80080b2:	e014      	b.n	80080de <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080b4:	f7fa fcf6 	bl	8002aa4 <HAL_GetTick>
 80080b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080ba:	e00a      	b.n	80080d2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080bc:	f7fa fcf2 	bl	8002aa4 <HAL_GetTick>
 80080c0:	4602      	mov	r2, r0
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	1ad3      	subs	r3, r2, r3
 80080c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e138      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080d2:	4b4e      	ldr	r3, [pc, #312]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d1ee      	bne.n	80080bc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	f000 812d 	beq.w	8008342 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80080e8:	4b48      	ldr	r3, [pc, #288]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080f0:	2b18      	cmp	r3, #24
 80080f2:	f000 80bd 	beq.w	8008270 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	f040 809e 	bne.w	800823c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008100:	4b42      	ldr	r3, [pc, #264]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a41      	ldr	r2, [pc, #260]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800810a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810c:	f7fa fcca 	bl	8002aa4 <HAL_GetTick>
 8008110:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008112:	e008      	b.n	8008126 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008114:	f7fa fcc6 	bl	8002aa4 <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e10e      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008126:	4b39      	ldr	r3, [pc, #228]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1f0      	bne.n	8008114 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008132:	4b36      	ldr	r3, [pc, #216]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008136:	4b37      	ldr	r3, [pc, #220]	; (8008214 <HAL_RCC_OscConfig+0x774>)
 8008138:	4013      	ands	r3, r2
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008142:	0112      	lsls	r2, r2, #4
 8008144:	430a      	orrs	r2, r1
 8008146:	4931      	ldr	r1, [pc, #196]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008148:	4313      	orrs	r3, r2
 800814a:	628b      	str	r3, [r1, #40]	; 0x28
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008150:	3b01      	subs	r3, #1
 8008152:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815a:	3b01      	subs	r3, #1
 800815c:	025b      	lsls	r3, r3, #9
 800815e:	b29b      	uxth	r3, r3
 8008160:	431a      	orrs	r2, r3
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008166:	3b01      	subs	r3, #1
 8008168:	041b      	lsls	r3, r3, #16
 800816a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800816e:	431a      	orrs	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008174:	3b01      	subs	r3, #1
 8008176:	061b      	lsls	r3, r3, #24
 8008178:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800817c:	4923      	ldr	r1, [pc, #140]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 800817e:	4313      	orrs	r3, r2
 8008180:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008182:	4b22      	ldr	r3, [pc, #136]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008186:	4a21      	ldr	r2, [pc, #132]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008188:	f023 0301 	bic.w	r3, r3, #1
 800818c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800818e:	4b1f      	ldr	r3, [pc, #124]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 8008190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008192:	4b21      	ldr	r3, [pc, #132]	; (8008218 <HAL_RCC_OscConfig+0x778>)
 8008194:	4013      	ands	r3, r2
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800819a:	00d2      	lsls	r2, r2, #3
 800819c:	491b      	ldr	r1, [pc, #108]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80081a2:	4b1a      	ldr	r3, [pc, #104]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081a6:	f023 020c 	bic.w	r2, r3, #12
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	4917      	ldr	r1, [pc, #92]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081b0:	4313      	orrs	r3, r2
 80081b2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80081b4:	4b15      	ldr	r3, [pc, #84]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b8:	f023 0202 	bic.w	r2, r3, #2
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081c0:	4912      	ldr	r1, [pc, #72]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081c6:	4b11      	ldr	r3, [pc, #68]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ca:	4a10      	ldr	r2, [pc, #64]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d2:	4b0e      	ldr	r3, [pc, #56]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d6:	4a0d      	ldr	r2, [pc, #52]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081de:	4b0b      	ldr	r3, [pc, #44]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	4a0a      	ldr	r2, [pc, #40]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80081ea:	4b08      	ldr	r3, [pc, #32]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ee:	4a07      	ldr	r2, [pc, #28]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081f0:	f043 0301 	orr.w	r3, r3, #1
 80081f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081f6:	4b05      	ldr	r3, [pc, #20]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	4a04      	ldr	r2, [pc, #16]	; (800820c <HAL_RCC_OscConfig+0x76c>)
 80081fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008202:	f7fa fc4f 	bl	8002aa4 <HAL_GetTick>
 8008206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008208:	e011      	b.n	800822e <HAL_RCC_OscConfig+0x78e>
 800820a:	bf00      	nop
 800820c:	58024400 	.word	0x58024400
 8008210:	58024800 	.word	0x58024800
 8008214:	fffffc0c 	.word	0xfffffc0c
 8008218:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800821c:	f7fa fc42 	bl	8002aa4 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e08a      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800822e:	4b47      	ldr	r3, [pc, #284]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d0f0      	beq.n	800821c <HAL_RCC_OscConfig+0x77c>
 800823a:	e082      	b.n	8008342 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800823c:	4b43      	ldr	r3, [pc, #268]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a42      	ldr	r2, [pc, #264]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008248:	f7fa fc2c 	bl	8002aa4 <HAL_GetTick>
 800824c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800824e:	e008      	b.n	8008262 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008250:	f7fa fc28 	bl	8002aa4 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e070      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008262:	4b3a      	ldr	r3, [pc, #232]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f0      	bne.n	8008250 <HAL_RCC_OscConfig+0x7b0>
 800826e:	e068      	b.n	8008342 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008270:	4b36      	ldr	r3, [pc, #216]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008274:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008276:	4b35      	ldr	r3, [pc, #212]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008280:	2b01      	cmp	r3, #1
 8008282:	d031      	beq.n	80082e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f003 0203 	and.w	r2, r3, #3
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800828e:	429a      	cmp	r2, r3
 8008290:	d12a      	bne.n	80082e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	091b      	lsrs	r3, r3, #4
 8008296:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800829e:	429a      	cmp	r2, r3
 80082a0:	d122      	bne.n	80082e8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d11a      	bne.n	80082e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	0a5b      	lsrs	r3, r3, #9
 80082b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082be:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d111      	bne.n	80082e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	0c1b      	lsrs	r3, r3, #16
 80082c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d108      	bne.n	80082e8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	0e1b      	lsrs	r3, r3, #24
 80082da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d001      	beq.n	80082ec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	e02b      	b.n	8008344 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80082ec:	4b17      	ldr	r3, [pc, #92]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 80082ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f0:	08db      	lsrs	r3, r3, #3
 80082f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082f6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d01f      	beq.n	8008342 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8008302:	4b12      	ldr	r3, [pc, #72]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008306:	4a11      	ldr	r2, [pc, #68]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008308:	f023 0301 	bic.w	r3, r3, #1
 800830c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800830e:	f7fa fbc9 	bl	8002aa4 <HAL_GetTick>
 8008312:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008314:	bf00      	nop
 8008316:	f7fa fbc5 	bl	8002aa4 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	4293      	cmp	r3, r2
 8008320:	d0f9      	beq.n	8008316 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008322:	4b0a      	ldr	r3, [pc, #40]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008324:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008326:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <HAL_RCC_OscConfig+0x8b0>)
 8008328:	4013      	ands	r3, r2
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800832e:	00d2      	lsls	r2, r2, #3
 8008330:	4906      	ldr	r1, [pc, #24]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008332:	4313      	orrs	r3, r2
 8008334:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008336:	4b05      	ldr	r3, [pc, #20]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 8008338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800833a:	4a04      	ldr	r2, [pc, #16]	; (800834c <HAL_RCC_OscConfig+0x8ac>)
 800833c:	f043 0301 	orr.w	r3, r3, #1
 8008340:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3730      	adds	r7, #48	; 0x30
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	58024400 	.word	0x58024400
 8008350:	ffff0007 	.word	0xffff0007

08008354 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d101      	bne.n	8008368 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008364:	2301      	movs	r3, #1
 8008366:	e19c      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008368:	4b8a      	ldr	r3, [pc, #552]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f003 030f 	and.w	r3, r3, #15
 8008370:	683a      	ldr	r2, [r7, #0]
 8008372:	429a      	cmp	r2, r3
 8008374:	d910      	bls.n	8008398 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008376:	4b87      	ldr	r3, [pc, #540]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f023 020f 	bic.w	r2, r3, #15
 800837e:	4985      	ldr	r1, [pc, #532]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	4313      	orrs	r3, r2
 8008384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008386:	4b83      	ldr	r3, [pc, #524]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 030f 	and.w	r3, r3, #15
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	429a      	cmp	r2, r3
 8008392:	d001      	beq.n	8008398 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e184      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d010      	beq.n	80083c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	691a      	ldr	r2, [r3, #16]
 80083a8:	4b7b      	ldr	r3, [pc, #492]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d908      	bls.n	80083c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083b4:	4b78      	ldr	r3, [pc, #480]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	4975      	ldr	r1, [pc, #468]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083c2:	4313      	orrs	r3, r2
 80083c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d010      	beq.n	80083f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695a      	ldr	r2, [r3, #20]
 80083d6:	4b70      	ldr	r3, [pc, #448]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083d8:	69db      	ldr	r3, [r3, #28]
 80083da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083de:	429a      	cmp	r2, r3
 80083e0:	d908      	bls.n	80083f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083e2:	4b6d      	ldr	r3, [pc, #436]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083e4:	69db      	ldr	r3, [r3, #28]
 80083e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	695b      	ldr	r3, [r3, #20]
 80083ee:	496a      	ldr	r1, [pc, #424]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80083f0:	4313      	orrs	r3, r2
 80083f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0310 	and.w	r3, r3, #16
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d010      	beq.n	8008422 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	699a      	ldr	r2, [r3, #24]
 8008404:	4b64      	ldr	r3, [pc, #400]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800840c:	429a      	cmp	r2, r3
 800840e:	d908      	bls.n	8008422 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008410:	4b61      	ldr	r3, [pc, #388]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	699b      	ldr	r3, [r3, #24]
 800841c:	495e      	ldr	r1, [pc, #376]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 800841e:	4313      	orrs	r3, r2
 8008420:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0320 	and.w	r3, r3, #32
 800842a:	2b00      	cmp	r3, #0
 800842c:	d010      	beq.n	8008450 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	69da      	ldr	r2, [r3, #28]
 8008432:	4b59      	ldr	r3, [pc, #356]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800843a:	429a      	cmp	r2, r3
 800843c:	d908      	bls.n	8008450 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800843e:	4b56      	ldr	r3, [pc, #344]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008440:	6a1b      	ldr	r3, [r3, #32]
 8008442:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69db      	ldr	r3, [r3, #28]
 800844a:	4953      	ldr	r1, [pc, #332]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 800844c:	4313      	orrs	r3, r2
 800844e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	2b00      	cmp	r3, #0
 800845a:	d010      	beq.n	800847e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68da      	ldr	r2, [r3, #12]
 8008460:	4b4d      	ldr	r3, [pc, #308]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	429a      	cmp	r2, r3
 800846a:	d908      	bls.n	800847e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800846c:	4b4a      	ldr	r3, [pc, #296]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	f023 020f 	bic.w	r2, r3, #15
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	4947      	ldr	r1, [pc, #284]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 800847a:	4313      	orrs	r3, r2
 800847c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d055      	beq.n	8008536 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800848a:	4b43      	ldr	r3, [pc, #268]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	4940      	ldr	r1, [pc, #256]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008498:	4313      	orrs	r3, r2
 800849a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b02      	cmp	r3, #2
 80084a2:	d107      	bne.n	80084b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084a4:	4b3c      	ldr	r3, [pc, #240]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d121      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e0f6      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d107      	bne.n	80084cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084bc:	4b36      	ldr	r3, [pc, #216]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d115      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e0ea      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d107      	bne.n	80084e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80084d4:	4b30      	ldr	r3, [pc, #192]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d109      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e0de      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084e4:	4b2c      	ldr	r3, [pc, #176]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e0d6      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084f4:	4b28      	ldr	r3, [pc, #160]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 80084f6:	691b      	ldr	r3, [r3, #16]
 80084f8:	f023 0207 	bic.w	r2, r3, #7
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	4925      	ldr	r1, [pc, #148]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008502:	4313      	orrs	r3, r2
 8008504:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008506:	f7fa facd 	bl	8002aa4 <HAL_GetTick>
 800850a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800850c:	e00a      	b.n	8008524 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800850e:	f7fa fac9 	bl	8002aa4 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	f241 3288 	movw	r2, #5000	; 0x1388
 800851c:	4293      	cmp	r3, r2
 800851e:	d901      	bls.n	8008524 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008520:	2303      	movs	r3, #3
 8008522:	e0be      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008524:	4b1c      	ldr	r3, [pc, #112]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	00db      	lsls	r3, r3, #3
 8008532:	429a      	cmp	r2, r3
 8008534:	d1eb      	bne.n	800850e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d010      	beq.n	8008564 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	68da      	ldr	r2, [r3, #12]
 8008546:	4b14      	ldr	r3, [pc, #80]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008548:	699b      	ldr	r3, [r3, #24]
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	429a      	cmp	r2, r3
 8008550:	d208      	bcs.n	8008564 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008552:	4b11      	ldr	r3, [pc, #68]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	f023 020f 	bic.w	r2, r3, #15
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	490e      	ldr	r1, [pc, #56]	; (8008598 <HAL_RCC_ClockConfig+0x244>)
 8008560:	4313      	orrs	r3, r2
 8008562:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008564:	4b0b      	ldr	r3, [pc, #44]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 030f 	and.w	r3, r3, #15
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d214      	bcs.n	800859c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008572:	4b08      	ldr	r3, [pc, #32]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f023 020f 	bic.w	r2, r3, #15
 800857a:	4906      	ldr	r1, [pc, #24]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	4313      	orrs	r3, r2
 8008580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008582:	4b04      	ldr	r3, [pc, #16]	; (8008594 <HAL_RCC_ClockConfig+0x240>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d005      	beq.n	800859c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e086      	b.n	80086a2 <HAL_RCC_ClockConfig+0x34e>
 8008594:	52002000 	.word	0x52002000
 8008598:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d010      	beq.n	80085ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691a      	ldr	r2, [r3, #16]
 80085ac:	4b3f      	ldr	r3, [pc, #252]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d208      	bcs.n	80085ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085b8:	4b3c      	ldr	r3, [pc, #240]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	4939      	ldr	r1, [pc, #228]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d010      	beq.n	80085f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695a      	ldr	r2, [r3, #20]
 80085da:	4b34      	ldr	r3, [pc, #208]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d208      	bcs.n	80085f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085e6:	4b31      	ldr	r3, [pc, #196]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085e8:	69db      	ldr	r3, [r3, #28]
 80085ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	695b      	ldr	r3, [r3, #20]
 80085f2:	492e      	ldr	r1, [pc, #184]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 0310 	and.w	r3, r3, #16
 8008600:	2b00      	cmp	r3, #0
 8008602:	d010      	beq.n	8008626 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699a      	ldr	r2, [r3, #24]
 8008608:	4b28      	ldr	r3, [pc, #160]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008610:	429a      	cmp	r2, r3
 8008612:	d208      	bcs.n	8008626 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008614:	4b25      	ldr	r3, [pc, #148]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	4922      	ldr	r1, [pc, #136]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008622:	4313      	orrs	r3, r2
 8008624:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0320 	and.w	r3, r3, #32
 800862e:	2b00      	cmp	r3, #0
 8008630:	d010      	beq.n	8008654 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69da      	ldr	r2, [r3, #28]
 8008636:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008638:	6a1b      	ldr	r3, [r3, #32]
 800863a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800863e:	429a      	cmp	r2, r3
 8008640:	d208      	bcs.n	8008654 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008642:	4b1a      	ldr	r3, [pc, #104]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008644:	6a1b      	ldr	r3, [r3, #32]
 8008646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69db      	ldr	r3, [r3, #28]
 800864e:	4917      	ldr	r1, [pc, #92]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008650:	4313      	orrs	r3, r2
 8008652:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008654:	f000 f834 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 8008658:	4602      	mov	r2, r0
 800865a:	4b14      	ldr	r3, [pc, #80]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 800865c:	699b      	ldr	r3, [r3, #24]
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	4912      	ldr	r1, [pc, #72]	; (80086b0 <HAL_RCC_ClockConfig+0x35c>)
 8008666:	5ccb      	ldrb	r3, [r1, r3]
 8008668:	f003 031f 	and.w	r3, r3, #31
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008672:	4b0e      	ldr	r3, [pc, #56]	; (80086ac <HAL_RCC_ClockConfig+0x358>)
 8008674:	699b      	ldr	r3, [r3, #24]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	4a0d      	ldr	r2, [pc, #52]	; (80086b0 <HAL_RCC_ClockConfig+0x35c>)
 800867c:	5cd3      	ldrb	r3, [r2, r3]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	fa22 f303 	lsr.w	r3, r2, r3
 8008688:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <HAL_RCC_ClockConfig+0x360>)
 800868a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800868c:	4a0a      	ldr	r2, [pc, #40]	; (80086b8 <HAL_RCC_ClockConfig+0x364>)
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008692:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <HAL_RCC_ClockConfig+0x368>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7fa f9ba 	bl	8002a10 <HAL_InitTick>
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3718      	adds	r7, #24
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	58024400 	.word	0x58024400
 80086b0:	0800ceb0 	.word	0x0800ceb0
 80086b4:	24000004 	.word	0x24000004
 80086b8:	24000000 	.word	0x24000000
 80086bc:	2400000c 	.word	0x2400000c

080086c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b089      	sub	sp, #36	; 0x24
 80086c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086c6:	4bb3      	ldr	r3, [pc, #716]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c8:	691b      	ldr	r3, [r3, #16]
 80086ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80086ce:	2b18      	cmp	r3, #24
 80086d0:	f200 8155 	bhi.w	800897e <HAL_RCC_GetSysClockFreq+0x2be>
 80086d4:	a201      	add	r2, pc, #4	; (adr r2, 80086dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80086d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086da:	bf00      	nop
 80086dc:	08008741 	.word	0x08008741
 80086e0:	0800897f 	.word	0x0800897f
 80086e4:	0800897f 	.word	0x0800897f
 80086e8:	0800897f 	.word	0x0800897f
 80086ec:	0800897f 	.word	0x0800897f
 80086f0:	0800897f 	.word	0x0800897f
 80086f4:	0800897f 	.word	0x0800897f
 80086f8:	0800897f 	.word	0x0800897f
 80086fc:	08008767 	.word	0x08008767
 8008700:	0800897f 	.word	0x0800897f
 8008704:	0800897f 	.word	0x0800897f
 8008708:	0800897f 	.word	0x0800897f
 800870c:	0800897f 	.word	0x0800897f
 8008710:	0800897f 	.word	0x0800897f
 8008714:	0800897f 	.word	0x0800897f
 8008718:	0800897f 	.word	0x0800897f
 800871c:	0800876d 	.word	0x0800876d
 8008720:	0800897f 	.word	0x0800897f
 8008724:	0800897f 	.word	0x0800897f
 8008728:	0800897f 	.word	0x0800897f
 800872c:	0800897f 	.word	0x0800897f
 8008730:	0800897f 	.word	0x0800897f
 8008734:	0800897f 	.word	0x0800897f
 8008738:	0800897f 	.word	0x0800897f
 800873c:	08008773 	.word	0x08008773
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008740:	4b94      	ldr	r3, [pc, #592]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f003 0320 	and.w	r3, r3, #32
 8008748:	2b00      	cmp	r3, #0
 800874a:	d009      	beq.n	8008760 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800874c:	4b91      	ldr	r3, [pc, #580]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	08db      	lsrs	r3, r3, #3
 8008752:	f003 0303 	and.w	r3, r3, #3
 8008756:	4a90      	ldr	r2, [pc, #576]	; (8008998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008758:	fa22 f303 	lsr.w	r3, r2, r3
 800875c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800875e:	e111      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008760:	4b8d      	ldr	r3, [pc, #564]	; (8008998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008762:	61bb      	str	r3, [r7, #24]
      break;
 8008764:	e10e      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008766:	4b8d      	ldr	r3, [pc, #564]	; (800899c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008768:	61bb      	str	r3, [r7, #24]
      break;
 800876a:	e10b      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800876c:	4b8c      	ldr	r3, [pc, #560]	; (80089a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800876e:	61bb      	str	r3, [r7, #24]
      break;
 8008770:	e108      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008772:	4b88      	ldr	r3, [pc, #544]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800877c:	4b85      	ldr	r3, [pc, #532]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800877e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008780:	091b      	lsrs	r3, r3, #4
 8008782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008786:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008788:	4b82      	ldr	r3, [pc, #520]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800878a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878c:	f003 0301 	and.w	r3, r3, #1
 8008790:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008792:	4b80      	ldr	r3, [pc, #512]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008796:	08db      	lsrs	r3, r3, #3
 8008798:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	fb02 f303 	mul.w	r3, r2, r3
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 80e1 	beq.w	8008978 <HAL_RCC_GetSysClockFreq+0x2b8>
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	f000 8083 	beq.w	80088c4 <HAL_RCC_GetSysClockFreq+0x204>
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	f200 80a1 	bhi.w	8008908 <HAL_RCC_GetSysClockFreq+0x248>
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d003      	beq.n	80087d4 <HAL_RCC_GetSysClockFreq+0x114>
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d056      	beq.n	8008880 <HAL_RCC_GetSysClockFreq+0x1c0>
 80087d2:	e099      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087d4:	4b6f      	ldr	r3, [pc, #444]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0320 	and.w	r3, r3, #32
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d02d      	beq.n	800883c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087e0:	4b6c      	ldr	r3, [pc, #432]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	08db      	lsrs	r3, r3, #3
 80087e6:	f003 0303 	and.w	r3, r3, #3
 80087ea:	4a6b      	ldr	r2, [pc, #428]	; (8008998 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087ec:	fa22 f303 	lsr.w	r3, r2, r3
 80087f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	ee07 3a90 	vmov	s15, r3
 80087f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880a:	4b62      	ldr	r3, [pc, #392]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a02 	vldr	s12, [r7, #8]
 800881e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800883a:	e087      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	eddf 6a58 	vldr	s13, [pc, #352]	; 80089a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800884a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884e:	4b51      	ldr	r3, [pc, #324]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008862:	eddf 5a50 	vldr	s11, [pc, #320]	; 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800886a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800887e:	e065      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888a:	eddf 6a48 	vldr	s13, [pc, #288]	; 80089ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800888e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008892:	4b40      	ldr	r3, [pc, #256]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088a6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088c2:	e043      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	ee07 3a90 	vmov	s15, r3
 80088ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80089b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80088d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088d6:	4b2f      	ldr	r3, [pc, #188]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088de:	ee07 3a90 	vmov	s15, r3
 80088e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ea:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008902:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008906:	e021      	b.n	800894c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	ee07 3a90 	vmov	s15, r3
 800890e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008912:	eddf 6a26 	vldr	s13, [pc, #152]	; 80089ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8008916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800891a:	4b1e      	ldr	r3, [pc, #120]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800891c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800891e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008922:	ee07 3a90 	vmov	s15, r3
 8008926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800892a:	ed97 6a02 	vldr	s12, [r7, #8]
 800892e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80089a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800893a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800893e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008946:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800894a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800894c:	4b11      	ldr	r3, [pc, #68]	; (8008994 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800894e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008950:	0a5b      	lsrs	r3, r3, #9
 8008952:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008956:	3301      	adds	r3, #1
 8008958:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	ee07 3a90 	vmov	s15, r3
 8008960:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008964:	edd7 6a07 	vldr	s13, [r7, #28]
 8008968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800896c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008970:	ee17 3a90 	vmov	r3, s15
 8008974:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008976:	e005      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008978:	2300      	movs	r3, #0
 800897a:	61bb      	str	r3, [r7, #24]
      break;
 800897c:	e002      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800897e:	4b07      	ldr	r3, [pc, #28]	; (800899c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008980:	61bb      	str	r3, [r7, #24]
      break;
 8008982:	bf00      	nop
  }

  return sysclockfreq;
 8008984:	69bb      	ldr	r3, [r7, #24]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3724      	adds	r7, #36	; 0x24
 800898a:	46bd      	mov	sp, r7
 800898c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop
 8008994:	58024400 	.word	0x58024400
 8008998:	03d09000 	.word	0x03d09000
 800899c:	003d0900 	.word	0x003d0900
 80089a0:	016e3600 	.word	0x016e3600
 80089a4:	46000000 	.word	0x46000000
 80089a8:	4c742400 	.word	0x4c742400
 80089ac:	4a742400 	.word	0x4a742400
 80089b0:	4bb71b00 	.word	0x4bb71b00

080089b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b082      	sub	sp, #8
 80089b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089ba:	f7ff fe81 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 80089be:	4602      	mov	r2, r0
 80089c0:	4b10      	ldr	r3, [pc, #64]	; (8008a04 <HAL_RCC_GetHCLKFreq+0x50>)
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	0a1b      	lsrs	r3, r3, #8
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	490f      	ldr	r1, [pc, #60]	; (8008a08 <HAL_RCC_GetHCLKFreq+0x54>)
 80089cc:	5ccb      	ldrb	r3, [r1, r3]
 80089ce:	f003 031f 	and.w	r3, r3, #31
 80089d2:	fa22 f303 	lsr.w	r3, r2, r3
 80089d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <HAL_RCC_GetHCLKFreq+0x50>)
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	4a09      	ldr	r2, [pc, #36]	; (8008a08 <HAL_RCC_GetHCLKFreq+0x54>)
 80089e2:	5cd3      	ldrb	r3, [r2, r3]
 80089e4:	f003 031f 	and.w	r3, r3, #31
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	fa22 f303 	lsr.w	r3, r2, r3
 80089ee:	4a07      	ldr	r2, [pc, #28]	; (8008a0c <HAL_RCC_GetHCLKFreq+0x58>)
 80089f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089f2:	4a07      	ldr	r2, [pc, #28]	; (8008a10 <HAL_RCC_GetHCLKFreq+0x5c>)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80089f8:	4b04      	ldr	r3, [pc, #16]	; (8008a0c <HAL_RCC_GetHCLKFreq+0x58>)
 80089fa:	681b      	ldr	r3, [r3, #0]
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3708      	adds	r7, #8
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}
 8008a04:	58024400 	.word	0x58024400
 8008a08:	0800ceb0 	.word	0x0800ceb0
 8008a0c:	24000004 	.word	0x24000004
 8008a10:	24000000 	.word	0x24000000

08008a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a18:	f7ff ffcc 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	091b      	lsrs	r3, r3, #4
 8008a24:	f003 0307 	and.w	r3, r3, #7
 8008a28:	4904      	ldr	r1, [pc, #16]	; (8008a3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a2a:	5ccb      	ldrb	r3, [r1, r3]
 8008a2c:	f003 031f 	and.w	r3, r3, #31
 8008a30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	58024400 	.word	0x58024400
 8008a3c:	0800ceb0 	.word	0x0800ceb0

08008a40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a44:	f7ff ffb6 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	0a1b      	lsrs	r3, r3, #8
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	4904      	ldr	r1, [pc, #16]	; (8008a68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a56:	5ccb      	ldrb	r3, [r1, r3]
 8008a58:	f003 031f 	and.w	r3, r3, #31
 8008a5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	58024400 	.word	0x58024400
 8008a68:	0800ceb0 	.word	0x0800ceb0

08008a6c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a70:	b0ca      	sub	sp, #296	; 0x128
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8008a90:	2500      	movs	r5, #0
 8008a92:	ea54 0305 	orrs.w	r3, r4, r5
 8008a96:	d049      	beq.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a9e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aa2:	d02f      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008aa4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008aa8:	d828      	bhi.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008aaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008aae:	d01a      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008ab0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ab4:	d822      	bhi.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d003      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008abe:	d007      	beq.n	8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008ac0:	e01c      	b.n	8008afc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac2:	4bb8      	ldr	r3, [pc, #736]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac6:	4ab7      	ldr	r2, [pc, #732]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008acc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ace:	e01a      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ad4:	3308      	adds	r3, #8
 8008ad6:	2102      	movs	r1, #2
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f002 fb61 	bl	800b1a0 <RCCEx_PLL2_Config>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008ae4:	e00f      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aea:	3328      	adds	r3, #40	; 0x28
 8008aec:	2102      	movs	r1, #2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f002 fc08 	bl	800b304 <RCCEx_PLL3_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008afa:	e004      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b02:	e000      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008b04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10a      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b0e:	4ba5      	ldr	r3, [pc, #660]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b12:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b1c:	4aa1      	ldr	r2, [pc, #644]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b1e:	430b      	orrs	r3, r1
 8008b20:	6513      	str	r3, [r2, #80]	; 0x50
 8008b22:	e003      	b.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008b38:	f04f 0900 	mov.w	r9, #0
 8008b3c:	ea58 0309 	orrs.w	r3, r8, r9
 8008b40:	d047      	beq.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b48:	2b04      	cmp	r3, #4
 8008b4a:	d82a      	bhi.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008b4c:	a201      	add	r2, pc, #4	; (adr r2, 8008b54 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b52:	bf00      	nop
 8008b54:	08008b69 	.word	0x08008b69
 8008b58:	08008b77 	.word	0x08008b77
 8008b5c:	08008b8d 	.word	0x08008b8d
 8008b60:	08008bab 	.word	0x08008bab
 8008b64:	08008bab 	.word	0x08008bab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b68:	4b8e      	ldr	r3, [pc, #568]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b6c:	4a8d      	ldr	r2, [pc, #564]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b74:	e01a      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f002 fb0e 	bl	800b1a0 <RCCEx_PLL2_Config>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b8a:	e00f      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b90:	3328      	adds	r3, #40	; 0x28
 8008b92:	2100      	movs	r1, #0
 8008b94:	4618      	mov	r0, r3
 8008b96:	f002 fbb5 	bl	800b304 <RCCEx_PLL3_Config>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ba0:	e004      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ba8:	e000      	b.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008baa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10a      	bne.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bb4:	4b7b      	ldr	r3, [pc, #492]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb8:	f023 0107 	bic.w	r1, r3, #7
 8008bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc2:	4a78      	ldr	r2, [pc, #480]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bc4:	430b      	orrs	r3, r1
 8008bc6:	6513      	str	r3, [r2, #80]	; 0x50
 8008bc8:	e003      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008bce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008bde:	f04f 0b00 	mov.w	fp, #0
 8008be2:	ea5a 030b 	orrs.w	r3, sl, fp
 8008be6:	d04c      	beq.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf2:	d030      	beq.n	8008c56 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bf8:	d829      	bhi.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8008bfc:	d02d      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8008c00:	d825      	bhi.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c02:	2b80      	cmp	r3, #128	; 0x80
 8008c04:	d018      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008c06:	2b80      	cmp	r3, #128	; 0x80
 8008c08:	d821      	bhi.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008c0e:	2b40      	cmp	r3, #64	; 0x40
 8008c10:	d007      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008c12:	e01c      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c14:	4b63      	ldr	r3, [pc, #396]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c18:	4a62      	ldr	r2, [pc, #392]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c20:	e01c      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c26:	3308      	adds	r3, #8
 8008c28:	2100      	movs	r1, #0
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f002 fab8 	bl	800b1a0 <RCCEx_PLL2_Config>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c36:	e011      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c3c:	3328      	adds	r3, #40	; 0x28
 8008c3e:	2100      	movs	r1, #0
 8008c40:	4618      	mov	r0, r3
 8008c42:	f002 fb5f 	bl	800b304 <RCCEx_PLL3_Config>
 8008c46:	4603      	mov	r3, r0
 8008c48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c4c:	e006      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c54:	e002      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008c56:	bf00      	nop
 8008c58:	e000      	b.n	8008c5c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10a      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008c64:	4b4f      	ldr	r3, [pc, #316]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c68:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c72:	4a4c      	ldr	r2, [pc, #304]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c74:	430b      	orrs	r3, r1
 8008c76:	6513      	str	r3, [r2, #80]	; 0x50
 8008c78:	e003      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008c8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008c92:	2300      	movs	r3, #0
 8008c94:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008c98:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	d053      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ca6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008caa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cae:	d035      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008cb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008cb4:	d82e      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008cb6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cba:	d031      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008cbc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008cc0:	d828      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008cc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cc6:	d01a      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ccc:	d822      	bhi.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008cd6:	d007      	beq.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008cd8:	e01c      	b.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cda:	4b32      	ldr	r3, [pc, #200]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cde:	4a31      	ldr	r2, [pc, #196]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ce6:	e01c      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cec:	3308      	adds	r3, #8
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f002 fa55 	bl	800b1a0 <RCCEx_PLL2_Config>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008cfc:	e011      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d02:	3328      	adds	r3, #40	; 0x28
 8008d04:	2100      	movs	r1, #0
 8008d06:	4618      	mov	r0, r3
 8008d08:	f002 fafc 	bl	800b304 <RCCEx_PLL3_Config>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d12:	e006      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d1a:	e002      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008d1c:	bf00      	nop
 8008d1e:	e000      	b.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d10b      	bne.n	8008d42 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d2a:	4b1e      	ldr	r3, [pc, #120]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008d3a:	4a1a      	ldr	r2, [pc, #104]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d3c:	430b      	orrs	r3, r1
 8008d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8008d40:	e003      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d52:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008d56:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008d60:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008d64:	460b      	mov	r3, r1
 8008d66:	4313      	orrs	r3, r2
 8008d68:	d056      	beq.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d72:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d76:	d038      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d7c:	d831      	bhi.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d82:	d034      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008d84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d88:	d82b      	bhi.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d8e:	d01d      	beq.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008d90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d94:	d825      	bhi.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d006      	beq.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008d9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d9e:	d00a      	beq.n	8008db6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008da0:	e01f      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008da2:	bf00      	nop
 8008da4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008da8:	4ba2      	ldr	r3, [pc, #648]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dac:	4aa1      	ldr	r2, [pc, #644]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008db2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008db4:	e01c      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dba:	3308      	adds	r3, #8
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f002 f9ee 	bl	800b1a0 <RCCEx_PLL2_Config>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008dca:	e011      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd0:	3328      	adds	r3, #40	; 0x28
 8008dd2:	2100      	movs	r1, #0
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f002 fa95 	bl	800b304 <RCCEx_PLL3_Config>
 8008dda:	4603      	mov	r3, r0
 8008ddc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008de0:	e006      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008de8:	e002      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008dea:	bf00      	nop
 8008dec:	e000      	b.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10b      	bne.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008df8:	4b8e      	ldr	r3, [pc, #568]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008e08:	4a8a      	ldr	r2, [pc, #552]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	6593      	str	r3, [r2, #88]	; 0x58
 8008e0e:	e003      	b.n	8008e18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008e24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e28:	2300      	movs	r3, #0
 8008e2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008e2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008e32:	460b      	mov	r3, r1
 8008e34:	4313      	orrs	r3, r2
 8008e36:	d03a      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e3e:	2b30      	cmp	r3, #48	; 0x30
 8008e40:	d01f      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008e42:	2b30      	cmp	r3, #48	; 0x30
 8008e44:	d819      	bhi.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d00c      	beq.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008e4a:	2b20      	cmp	r3, #32
 8008e4c:	d815      	bhi.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d019      	beq.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008e52:	2b10      	cmp	r3, #16
 8008e54:	d111      	bne.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e56:	4b77      	ldr	r3, [pc, #476]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5a:	4a76      	ldr	r2, [pc, #472]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008e62:	e011      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e68:	3308      	adds	r3, #8
 8008e6a:	2102      	movs	r1, #2
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f002 f997 	bl	800b1a0 <RCCEx_PLL2_Config>
 8008e72:	4603      	mov	r3, r0
 8008e74:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008e78:	e006      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e80:	e002      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008e82:	bf00      	nop
 8008e84:	e000      	b.n	8008e88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d10a      	bne.n	8008ea6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008e90:	4b68      	ldr	r3, [pc, #416]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e94:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e9e:	4a65      	ldr	r2, [pc, #404]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ea0:	430b      	orrs	r3, r1
 8008ea2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ea4:	e003      	b.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008eaa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008eba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ec4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	d051      	beq.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ed8:	d035      	beq.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008ede:	d82e      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008ee0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008ee4:	d031      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008ee6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008eea:	d828      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ef0:	d01a      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ef6:	d822      	bhi.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d003      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f00:	d007      	beq.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008f02:	e01c      	b.n	8008f3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f04:	4b4b      	ldr	r3, [pc, #300]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f08:	4a4a      	ldr	r2, [pc, #296]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f10:	e01c      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f16:	3308      	adds	r3, #8
 8008f18:	2100      	movs	r1, #0
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f002 f940 	bl	800b1a0 <RCCEx_PLL2_Config>
 8008f20:	4603      	mov	r3, r0
 8008f22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f26:	e011      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f2c:	3328      	adds	r3, #40	; 0x28
 8008f2e:	2100      	movs	r1, #0
 8008f30:	4618      	mov	r0, r3
 8008f32:	f002 f9e7 	bl	800b304 <RCCEx_PLL3_Config>
 8008f36:	4603      	mov	r3, r0
 8008f38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f3c:	e006      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f44:	e002      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008f46:	bf00      	nop
 8008f48:	e000      	b.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008f4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10a      	bne.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f54:	4b37      	ldr	r3, [pc, #220]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f58:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f62:	4a34      	ldr	r2, [pc, #208]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f64:	430b      	orrs	r3, r1
 8008f66:	6513      	str	r3, [r2, #80]	; 0x50
 8008f68:	e003      	b.n	8008f72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f7a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008f7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008f82:	2300      	movs	r3, #0
 8008f84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008f8c:	460b      	mov	r3, r1
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	d056      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f9c:	d033      	beq.n	8009006 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008f9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fa2:	d82c      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008fa4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fa8:	d02f      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008faa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008fae:	d826      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008fb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fb4:	d02b      	beq.n	800900e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008fb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008fba:	d820      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008fbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fc0:	d012      	beq.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008fc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fc6:	d81a      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d022      	beq.n	8009012 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fd0:	d115      	bne.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fd6:	3308      	adds	r3, #8
 8008fd8:	2101      	movs	r1, #1
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f002 f8e0 	bl	800b1a0 <RCCEx_PLL2_Config>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008fe6:	e015      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fec:	3328      	adds	r3, #40	; 0x28
 8008fee:	2101      	movs	r1, #1
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f002 f987 	bl	800b304 <RCCEx_PLL3_Config>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ffc:	e00a      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009004:	e006      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009006:	bf00      	nop
 8009008:	e004      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800900a:	bf00      	nop
 800900c:	e002      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800900e:	bf00      	nop
 8009010:	e000      	b.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009012:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009014:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10d      	bne.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800901c:	4b05      	ldr	r3, [pc, #20]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800901e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009020:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009028:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800902a:	4a02      	ldr	r2, [pc, #8]	; (8009034 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800902c:	430b      	orrs	r3, r1
 800902e:	6513      	str	r3, [r2, #80]	; 0x50
 8009030:	e006      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009032:	bf00      	nop
 8009034:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800903c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800904c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009050:	2300      	movs	r3, #0
 8009052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009056:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800905a:	460b      	mov	r3, r1
 800905c:	4313      	orrs	r3, r2
 800905e:	d055      	beq.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800906c:	d033      	beq.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800906e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009072:	d82c      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009074:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009078:	d02f      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800907a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800907e:	d826      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009080:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009084:	d02b      	beq.n	80090de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009086:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800908a:	d820      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800908c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009090:	d012      	beq.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009092:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009096:	d81a      	bhi.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009098:	2b00      	cmp	r3, #0
 800909a:	d022      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800909c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090a0:	d115      	bne.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090a6:	3308      	adds	r3, #8
 80090a8:	2101      	movs	r1, #1
 80090aa:	4618      	mov	r0, r3
 80090ac:	f002 f878 	bl	800b1a0 <RCCEx_PLL2_Config>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80090b6:	e015      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090bc:	3328      	adds	r3, #40	; 0x28
 80090be:	2101      	movs	r1, #1
 80090c0:	4618      	mov	r0, r3
 80090c2:	f002 f91f 	bl	800b304 <RCCEx_PLL3_Config>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80090cc:	e00a      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80090ce:	2301      	movs	r3, #1
 80090d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80090d4:	e006      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80090d6:	bf00      	nop
 80090d8:	e004      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80090da:	bf00      	nop
 80090dc:	e002      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80090de:	bf00      	nop
 80090e0:	e000      	b.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80090e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d10b      	bne.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80090ec:	4ba3      	ldr	r3, [pc, #652]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80090f0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80090f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80090fc:	4a9f      	ldr	r2, [pc, #636]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090fe:	430b      	orrs	r3, r1
 8009100:	6593      	str	r3, [r2, #88]	; 0x58
 8009102:	e003      	b.n	800910c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009104:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009108:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800910c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009114:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009118:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800911c:	2300      	movs	r3, #0
 800911e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009122:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009126:	460b      	mov	r3, r1
 8009128:	4313      	orrs	r3, r2
 800912a:	d037      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800912c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009136:	d00e      	beq.n	8009156 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913c:	d816      	bhi.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800913e:	2b00      	cmp	r3, #0
 8009140:	d018      	beq.n	8009174 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009142:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009146:	d111      	bne.n	800916c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009148:	4b8c      	ldr	r3, [pc, #560]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800914a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800914c:	4a8b      	ldr	r2, [pc, #556]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800914e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009154:	e00f      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800915a:	3308      	adds	r3, #8
 800915c:	2101      	movs	r1, #1
 800915e:	4618      	mov	r0, r3
 8009160:	f002 f81e 	bl	800b1a0 <RCCEx_PLL2_Config>
 8009164:	4603      	mov	r3, r0
 8009166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800916a:	e004      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800916c:	2301      	movs	r3, #1
 800916e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009172:	e000      	b.n	8009176 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009174:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800917a:	2b00      	cmp	r3, #0
 800917c:	d10a      	bne.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800917e:	4b7f      	ldr	r3, [pc, #508]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009182:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800918a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918c:	4a7b      	ldr	r2, [pc, #492]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800918e:	430b      	orrs	r3, r1
 8009190:	6513      	str	r3, [r2, #80]	; 0x50
 8009192:	e003      	b.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009198:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800919c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091a4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80091a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091ac:	2300      	movs	r3, #0
 80091ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80091b2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4313      	orrs	r3, r2
 80091ba:	d039      	beq.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80091bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d81c      	bhi.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80091c6:	a201      	add	r2, pc, #4	; (adr r2, 80091cc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80091c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091cc:	08009209 	.word	0x08009209
 80091d0:	080091dd 	.word	0x080091dd
 80091d4:	080091eb 	.word	0x080091eb
 80091d8:	08009209 	.word	0x08009209
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091dc:	4b67      	ldr	r3, [pc, #412]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e0:	4a66      	ldr	r2, [pc, #408]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80091e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80091e8:	e00f      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091ee:	3308      	adds	r3, #8
 80091f0:	2102      	movs	r1, #2
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 ffd4 	bl	800b1a0 <RCCEx_PLL2_Config>
 80091f8:	4603      	mov	r3, r0
 80091fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80091fe:	e004      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009206:	e000      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800920a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800920e:	2b00      	cmp	r3, #0
 8009210:	d10a      	bne.n	8009228 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009212:	4b5a      	ldr	r3, [pc, #360]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009216:	f023 0103 	bic.w	r1, r3, #3
 800921a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800921e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009220:	4a56      	ldr	r2, [pc, #344]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009222:	430b      	orrs	r3, r1
 8009224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009226:	e003      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009228:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800922c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009230:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800923c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009240:	2300      	movs	r3, #0
 8009242:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009246:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800924a:	460b      	mov	r3, r1
 800924c:	4313      	orrs	r3, r2
 800924e:	f000 809f 	beq.w	8009390 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009252:	4b4b      	ldr	r3, [pc, #300]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a4a      	ldr	r2, [pc, #296]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800925c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800925e:	f7f9 fc21 	bl	8002aa4 <HAL_GetTick>
 8009262:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009266:	e00b      	b.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009268:	f7f9 fc1c 	bl	8002aa4 <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009272:	1ad3      	subs	r3, r2, r3
 8009274:	2b64      	cmp	r3, #100	; 0x64
 8009276:	d903      	bls.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800927e:	e005      	b.n	800928c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009280:	4b3f      	ldr	r3, [pc, #252]	; (8009380 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0ed      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800928c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009290:	2b00      	cmp	r3, #0
 8009292:	d179      	bne.n	8009388 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009294:	4b39      	ldr	r3, [pc, #228]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009296:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009298:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800929c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80092a0:	4053      	eors	r3, r2
 80092a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d015      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092aa:	4b34      	ldr	r3, [pc, #208]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092b6:	4b31      	ldr	r3, [pc, #196]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ba:	4a30      	ldr	r2, [pc, #192]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092c0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092c2:	4b2e      	ldr	r3, [pc, #184]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c6:	4a2d      	ldr	r2, [pc, #180]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092cc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80092ce:	4a2b      	ldr	r2, [pc, #172]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80092d4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80092d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80092de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e2:	d118      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092e4:	f7f9 fbde 	bl	8002aa4 <HAL_GetTick>
 80092e8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ec:	e00d      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092ee:	f7f9 fbd9 	bl	8002aa4 <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80092f8:	1ad2      	subs	r2, r2, r3
 80092fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80092fe:	429a      	cmp	r2, r3
 8009300:	d903      	bls.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009308:	e005      	b.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800930a:	4b1c      	ldr	r3, [pc, #112]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800930c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0eb      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009316:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800931a:	2b00      	cmp	r3, #0
 800931c:	d129      	bne.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800931e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009322:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800932a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800932e:	d10e      	bne.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009330:	4b12      	ldr	r3, [pc, #72]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800933c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009340:	091a      	lsrs	r2, r3, #4
 8009342:	4b10      	ldr	r3, [pc, #64]	; (8009384 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009344:	4013      	ands	r3, r2
 8009346:	4a0d      	ldr	r2, [pc, #52]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009348:	430b      	orrs	r3, r1
 800934a:	6113      	str	r3, [r2, #16]
 800934c:	e005      	b.n	800935a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800934e:	4b0b      	ldr	r3, [pc, #44]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009350:	691b      	ldr	r3, [r3, #16]
 8009352:	4a0a      	ldr	r2, [pc, #40]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009354:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009358:	6113      	str	r3, [r2, #16]
 800935a:	4b08      	ldr	r3, [pc, #32]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800935c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800935e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009362:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800936a:	4a04      	ldr	r2, [pc, #16]	; (800937c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800936c:	430b      	orrs	r3, r1
 800936e:	6713      	str	r3, [r2, #112]	; 0x70
 8009370:	e00e      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009376:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800937a:	e009      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800937c:	58024400 	.word	0x58024400
 8009380:	58024800 	.word	0x58024800
 8009384:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009388:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800938c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009398:	f002 0301 	and.w	r3, r2, #1
 800939c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093a0:	2300      	movs	r3, #0
 80093a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093aa:	460b      	mov	r3, r1
 80093ac:	4313      	orrs	r3, r2
 80093ae:	f000 8089 	beq.w	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80093b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093b8:	2b28      	cmp	r3, #40	; 0x28
 80093ba:	d86b      	bhi.n	8009494 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80093bc:	a201      	add	r2, pc, #4	; (adr r2, 80093c4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c2:	bf00      	nop
 80093c4:	0800949d 	.word	0x0800949d
 80093c8:	08009495 	.word	0x08009495
 80093cc:	08009495 	.word	0x08009495
 80093d0:	08009495 	.word	0x08009495
 80093d4:	08009495 	.word	0x08009495
 80093d8:	08009495 	.word	0x08009495
 80093dc:	08009495 	.word	0x08009495
 80093e0:	08009495 	.word	0x08009495
 80093e4:	08009469 	.word	0x08009469
 80093e8:	08009495 	.word	0x08009495
 80093ec:	08009495 	.word	0x08009495
 80093f0:	08009495 	.word	0x08009495
 80093f4:	08009495 	.word	0x08009495
 80093f8:	08009495 	.word	0x08009495
 80093fc:	08009495 	.word	0x08009495
 8009400:	08009495 	.word	0x08009495
 8009404:	0800947f 	.word	0x0800947f
 8009408:	08009495 	.word	0x08009495
 800940c:	08009495 	.word	0x08009495
 8009410:	08009495 	.word	0x08009495
 8009414:	08009495 	.word	0x08009495
 8009418:	08009495 	.word	0x08009495
 800941c:	08009495 	.word	0x08009495
 8009420:	08009495 	.word	0x08009495
 8009424:	0800949d 	.word	0x0800949d
 8009428:	08009495 	.word	0x08009495
 800942c:	08009495 	.word	0x08009495
 8009430:	08009495 	.word	0x08009495
 8009434:	08009495 	.word	0x08009495
 8009438:	08009495 	.word	0x08009495
 800943c:	08009495 	.word	0x08009495
 8009440:	08009495 	.word	0x08009495
 8009444:	0800949d 	.word	0x0800949d
 8009448:	08009495 	.word	0x08009495
 800944c:	08009495 	.word	0x08009495
 8009450:	08009495 	.word	0x08009495
 8009454:	08009495 	.word	0x08009495
 8009458:	08009495 	.word	0x08009495
 800945c:	08009495 	.word	0x08009495
 8009460:	08009495 	.word	0x08009495
 8009464:	0800949d 	.word	0x0800949d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800946c:	3308      	adds	r3, #8
 800946e:	2101      	movs	r1, #1
 8009470:	4618      	mov	r0, r3
 8009472:	f001 fe95 	bl	800b1a0 <RCCEx_PLL2_Config>
 8009476:	4603      	mov	r3, r0
 8009478:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800947c:	e00f      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800947e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009482:	3328      	adds	r3, #40	; 0x28
 8009484:	2101      	movs	r1, #1
 8009486:	4618      	mov	r0, r3
 8009488:	f001 ff3c 	bl	800b304 <RCCEx_PLL3_Config>
 800948c:	4603      	mov	r3, r0
 800948e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009492:	e004      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800949a:	e000      	b.n	800949e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800949c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800949e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10a      	bne.n	80094bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80094a6:	4bbf      	ldr	r3, [pc, #764]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094aa:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80094ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b4:	4abb      	ldr	r2, [pc, #748]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094b6:	430b      	orrs	r3, r1
 80094b8:	6553      	str	r3, [r2, #84]	; 0x54
 80094ba:	e003      	b.n	80094c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80094c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80094c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	f002 0302 	and.w	r3, r2, #2
 80094d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80094d4:	2300      	movs	r3, #0
 80094d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80094da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80094de:	460b      	mov	r3, r1
 80094e0:	4313      	orrs	r3, r2
 80094e2:	d041      	beq.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80094e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80094ea:	2b05      	cmp	r3, #5
 80094ec:	d824      	bhi.n	8009538 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80094ee:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80094f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f4:	08009541 	.word	0x08009541
 80094f8:	0800950d 	.word	0x0800950d
 80094fc:	08009523 	.word	0x08009523
 8009500:	08009541 	.word	0x08009541
 8009504:	08009541 	.word	0x08009541
 8009508:	08009541 	.word	0x08009541
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800950c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009510:	3308      	adds	r3, #8
 8009512:	2101      	movs	r1, #1
 8009514:	4618      	mov	r0, r3
 8009516:	f001 fe43 	bl	800b1a0 <RCCEx_PLL2_Config>
 800951a:	4603      	mov	r3, r0
 800951c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009520:	e00f      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009526:	3328      	adds	r3, #40	; 0x28
 8009528:	2101      	movs	r1, #1
 800952a:	4618      	mov	r0, r3
 800952c:	f001 feea 	bl	800b304 <RCCEx_PLL3_Config>
 8009530:	4603      	mov	r3, r0
 8009532:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009536:	e004      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800953e:	e000      	b.n	8009542 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009540:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009546:	2b00      	cmp	r3, #0
 8009548:	d10a      	bne.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800954a:	4b96      	ldr	r3, [pc, #600]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800954c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800954e:	f023 0107 	bic.w	r1, r3, #7
 8009552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009558:	4a92      	ldr	r2, [pc, #584]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800955a:	430b      	orrs	r3, r1
 800955c:	6553      	str	r3, [r2, #84]	; 0x54
 800955e:	e003      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009564:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800956c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009570:	f002 0304 	and.w	r3, r2, #4
 8009574:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009578:	2300      	movs	r3, #0
 800957a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800957e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8009582:	460b      	mov	r3, r1
 8009584:	4313      	orrs	r3, r2
 8009586:	d044      	beq.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800958c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009590:	2b05      	cmp	r3, #5
 8009592:	d825      	bhi.n	80095e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009594:	a201      	add	r2, pc, #4	; (adr r2, 800959c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800959a:	bf00      	nop
 800959c:	080095e9 	.word	0x080095e9
 80095a0:	080095b5 	.word	0x080095b5
 80095a4:	080095cb 	.word	0x080095cb
 80095a8:	080095e9 	.word	0x080095e9
 80095ac:	080095e9 	.word	0x080095e9
 80095b0:	080095e9 	.word	0x080095e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095b8:	3308      	adds	r3, #8
 80095ba:	2101      	movs	r1, #1
 80095bc:	4618      	mov	r0, r3
 80095be:	f001 fdef 	bl	800b1a0 <RCCEx_PLL2_Config>
 80095c2:	4603      	mov	r3, r0
 80095c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80095c8:	e00f      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80095ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ce:	3328      	adds	r3, #40	; 0x28
 80095d0:	2101      	movs	r1, #1
 80095d2:	4618      	mov	r0, r3
 80095d4:	f001 fe96 	bl	800b304 <RCCEx_PLL3_Config>
 80095d8:	4603      	mov	r3, r0
 80095da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80095de:	e004      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095e0:	2301      	movs	r3, #1
 80095e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095e6:	e000      	b.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80095e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d10b      	bne.n	800960a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095f2:	4b6c      	ldr	r3, [pc, #432]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095f6:	f023 0107 	bic.w	r1, r3, #7
 80095fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009602:	4a68      	ldr	r2, [pc, #416]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009604:	430b      	orrs	r3, r1
 8009606:	6593      	str	r3, [r2, #88]	; 0x58
 8009608:	e003      	b.n	8009612 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800960e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009612:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f002 0320 	and.w	r3, r2, #32
 800961e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009622:	2300      	movs	r3, #0
 8009624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009628:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800962c:	460b      	mov	r3, r1
 800962e:	4313      	orrs	r3, r2
 8009630:	d055      	beq.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800963a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800963e:	d033      	beq.n	80096a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009640:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009644:	d82c      	bhi.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800964a:	d02f      	beq.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800964c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009650:	d826      	bhi.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009652:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009656:	d02b      	beq.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009658:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800965c:	d820      	bhi.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800965e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009662:	d012      	beq.n	800968a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009668:	d81a      	bhi.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800966a:	2b00      	cmp	r3, #0
 800966c:	d022      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800966e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009672:	d115      	bne.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009674:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009678:	3308      	adds	r3, #8
 800967a:	2100      	movs	r1, #0
 800967c:	4618      	mov	r0, r3
 800967e:	f001 fd8f 	bl	800b1a0 <RCCEx_PLL2_Config>
 8009682:	4603      	mov	r3, r0
 8009684:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009688:	e015      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800968a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800968e:	3328      	adds	r3, #40	; 0x28
 8009690:	2102      	movs	r1, #2
 8009692:	4618      	mov	r0, r3
 8009694:	f001 fe36 	bl	800b304 <RCCEx_PLL3_Config>
 8009698:	4603      	mov	r3, r0
 800969a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800969e:	e00a      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096a0:	2301      	movs	r3, #1
 80096a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80096a6:	e006      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096a8:	bf00      	nop
 80096aa:	e004      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096ac:	bf00      	nop
 80096ae:	e002      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096b0:	bf00      	nop
 80096b2:	e000      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10b      	bne.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096be:	4b39      	ldr	r3, [pc, #228]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80096c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ce:	4a35      	ldr	r2, [pc, #212]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096d0:	430b      	orrs	r3, r1
 80096d2:	6553      	str	r3, [r2, #84]	; 0x54
 80096d4:	e003      	b.n	80096de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80096de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80096ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80096ee:	2300      	movs	r3, #0
 80096f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80096f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4313      	orrs	r3, r2
 80096fc:	d058      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80096fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009706:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800970a:	d033      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800970c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009710:	d82c      	bhi.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009716:	d02f      	beq.n	8009778 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971c:	d826      	bhi.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800971e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009722:	d02b      	beq.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009728:	d820      	bhi.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800972a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800972e:	d012      	beq.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009734:	d81a      	bhi.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009736:	2b00      	cmp	r3, #0
 8009738:	d022      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800973a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800973e:	d115      	bne.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009740:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009744:	3308      	adds	r3, #8
 8009746:	2100      	movs	r1, #0
 8009748:	4618      	mov	r0, r3
 800974a:	f001 fd29 	bl	800b1a0 <RCCEx_PLL2_Config>
 800974e:	4603      	mov	r3, r0
 8009750:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009754:	e015      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800975a:	3328      	adds	r3, #40	; 0x28
 800975c:	2102      	movs	r1, #2
 800975e:	4618      	mov	r0, r3
 8009760:	f001 fdd0 	bl	800b304 <RCCEx_PLL3_Config>
 8009764:	4603      	mov	r3, r0
 8009766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800976a:	e00a      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800976c:	2301      	movs	r3, #1
 800976e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009772:	e006      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009774:	bf00      	nop
 8009776:	e004      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009778:	bf00      	nop
 800977a:	e002      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800977c:	bf00      	nop
 800977e:	e000      	b.n	8009782 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009780:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009782:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009786:	2b00      	cmp	r3, #0
 8009788:	d10e      	bne.n	80097a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800978a:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800978c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800978e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8009792:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009796:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800979a:	4a02      	ldr	r2, [pc, #8]	; (80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800979c:	430b      	orrs	r3, r1
 800979e:	6593      	str	r3, [r2, #88]	; 0x58
 80097a0:	e006      	b.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80097a2:	bf00      	nop
 80097a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80097ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80097b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80097bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80097c0:	2300      	movs	r3, #0
 80097c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80097c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80097ca:	460b      	mov	r3, r1
 80097cc:	4313      	orrs	r3, r2
 80097ce:	d055      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80097d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097d8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80097dc:	d033      	beq.n	8009846 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80097de:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80097e2:	d82c      	bhi.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80097e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097e8:	d02f      	beq.n	800984a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80097ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ee:	d826      	bhi.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80097f0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80097f4:	d02b      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80097f6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80097fa:	d820      	bhi.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80097fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009800:	d012      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009802:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009806:	d81a      	bhi.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009808:	2b00      	cmp	r3, #0
 800980a:	d022      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800980c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009810:	d115      	bne.n	800983e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009812:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009816:	3308      	adds	r3, #8
 8009818:	2100      	movs	r1, #0
 800981a:	4618      	mov	r0, r3
 800981c:	f001 fcc0 	bl	800b1a0 <RCCEx_PLL2_Config>
 8009820:	4603      	mov	r3, r0
 8009822:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009826:	e015      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800982c:	3328      	adds	r3, #40	; 0x28
 800982e:	2102      	movs	r1, #2
 8009830:	4618      	mov	r0, r3
 8009832:	f001 fd67 	bl	800b304 <RCCEx_PLL3_Config>
 8009836:	4603      	mov	r3, r0
 8009838:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800983c:	e00a      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009844:	e006      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009846:	bf00      	nop
 8009848:	e004      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800984a:	bf00      	nop
 800984c:	e002      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800984e:	bf00      	nop
 8009850:	e000      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009854:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10b      	bne.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800985c:	4ba1      	ldr	r3, [pc, #644]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800985e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009860:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009864:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800986c:	4a9d      	ldr	r2, [pc, #628]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800986e:	430b      	orrs	r3, r1
 8009870:	6593      	str	r3, [r2, #88]	; 0x58
 8009872:	e003      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009874:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009878:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800987c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009884:	f002 0308 	and.w	r3, r2, #8
 8009888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800988c:	2300      	movs	r3, #0
 800988e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009892:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8009896:	460b      	mov	r3, r1
 8009898:	4313      	orrs	r3, r2
 800989a:	d01e      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800989c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098a8:	d10c      	bne.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098ae:	3328      	adds	r3, #40	; 0x28
 80098b0:	2102      	movs	r1, #2
 80098b2:	4618      	mov	r0, r3
 80098b4:	f001 fd26 	bl	800b304 <RCCEx_PLL3_Config>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d002      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80098c4:	4b87      	ldr	r3, [pc, #540]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80098d4:	4a83      	ldr	r2, [pc, #524]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098d6:	430b      	orrs	r3, r1
 80098d8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80098da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f002 0310 	and.w	r3, r2, #16
 80098e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80098ea:	2300      	movs	r3, #0
 80098ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80098f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80098f4:	460b      	mov	r3, r1
 80098f6:	4313      	orrs	r3, r2
 80098f8:	d01e      	beq.n	8009938 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80098fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009906:	d10c      	bne.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800990c:	3328      	adds	r3, #40	; 0x28
 800990e:	2102      	movs	r1, #2
 8009910:	4618      	mov	r0, r3
 8009912:	f001 fcf7 	bl	800b304 <RCCEx_PLL3_Config>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d002      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800991c:	2301      	movs	r3, #1
 800991e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009922:	4b70      	ldr	r3, [pc, #448]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009926:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800992a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800992e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009932:	4a6c      	ldr	r2, [pc, #432]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009934:	430b      	orrs	r3, r1
 8009936:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800993c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009940:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009944:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009948:	2300      	movs	r3, #0
 800994a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800994e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009952:	460b      	mov	r3, r1
 8009954:	4313      	orrs	r3, r2
 8009956:	d03e      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800995c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009964:	d022      	beq.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009966:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800996a:	d81b      	bhi.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009974:	d00b      	beq.n	800998e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009976:	e015      	b.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800997c:	3308      	adds	r3, #8
 800997e:	2100      	movs	r1, #0
 8009980:	4618      	mov	r0, r3
 8009982:	f001 fc0d 	bl	800b1a0 <RCCEx_PLL2_Config>
 8009986:	4603      	mov	r3, r0
 8009988:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800998c:	e00f      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800998e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009992:	3328      	adds	r3, #40	; 0x28
 8009994:	2102      	movs	r1, #2
 8009996:	4618      	mov	r0, r3
 8009998:	f001 fcb4 	bl	800b304 <RCCEx_PLL3_Config>
 800999c:	4603      	mov	r3, r0
 800999e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80099a2:	e004      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099a4:	2301      	movs	r3, #1
 80099a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099aa:	e000      	b.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80099ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10b      	bne.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099b6:	4b4b      	ldr	r3, [pc, #300]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099ba:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80099be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80099c6:	4a47      	ldr	r2, [pc, #284]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099c8:	430b      	orrs	r3, r1
 80099ca:	6593      	str	r3, [r2, #88]	; 0x58
 80099cc:	e003      	b.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80099d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099de:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80099e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80099e4:	2300      	movs	r3, #0
 80099e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80099e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80099ec:	460b      	mov	r3, r1
 80099ee:	4313      	orrs	r3, r2
 80099f0:	d03b      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80099f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80099fe:	d01f      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009a00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009a04:	d818      	bhi.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a0a:	d003      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009a0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a10:	d007      	beq.n	8009a22 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009a12:	e011      	b.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a14:	4b33      	ldr	r3, [pc, #204]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a18:	4a32      	ldr	r2, [pc, #200]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a20:	e00f      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a26:	3328      	adds	r3, #40	; 0x28
 8009a28:	2101      	movs	r1, #1
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f001 fc6a 	bl	800b304 <RCCEx_PLL3_Config>
 8009a30:	4603      	mov	r3, r0
 8009a32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a36:	e004      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a38:	2301      	movs	r3, #1
 8009a3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a3e:	e000      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10b      	bne.n	8009a62 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a4a:	4b26      	ldr	r3, [pc, #152]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a5a:	4a22      	ldr	r2, [pc, #136]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a5c:	430b      	orrs	r3, r1
 8009a5e:	6553      	str	r3, [r2, #84]	; 0x54
 8009a60:	e003      	b.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a72:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009a76:	673b      	str	r3, [r7, #112]	; 0x70
 8009a78:	2300      	movs	r3, #0
 8009a7a:	677b      	str	r3, [r7, #116]	; 0x74
 8009a7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8009a80:	460b      	mov	r3, r1
 8009a82:	4313      	orrs	r3, r2
 8009a84:	d034      	beq.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d003      	beq.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a94:	d007      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009a96:	e011      	b.n	8009abc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a98:	4b12      	ldr	r3, [pc, #72]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a9c:	4a11      	ldr	r2, [pc, #68]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009aa4:	e00e      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aaa:	3308      	adds	r3, #8
 8009aac:	2102      	movs	r1, #2
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f001 fb76 	bl	800b1a0 <RCCEx_PLL2_Config>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009aba:	e003      	b.n	8009ac4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009abc:	2301      	movs	r3, #1
 8009abe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10d      	bne.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009acc:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ad0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ada:	4a02      	ldr	r2, [pc, #8]	; (8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009adc:	430b      	orrs	r3, r1
 8009ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009ae0:	e006      	b.n	8009af0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009ae2:	bf00      	nop
 8009ae4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009aec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009afc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009afe:	2300      	movs	r3, #0
 8009b00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009b06:	460b      	mov	r3, r1
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	d00c      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b10:	3328      	adds	r3, #40	; 0x28
 8009b12:	2102      	movs	r1, #2
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 fbf5 	bl	800b304 <RCCEx_PLL3_Config>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009b32:	663b      	str	r3, [r7, #96]	; 0x60
 8009b34:	2300      	movs	r3, #0
 8009b36:	667b      	str	r3, [r7, #100]	; 0x64
 8009b38:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009b3c:	460b      	mov	r3, r1
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	d038      	beq.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b4e:	d018      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b54:	d811      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b5a:	d014      	beq.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b60:	d80b      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d011      	beq.n	8009b8a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b6a:	d106      	bne.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b6c:	4bc3      	ldr	r3, [pc, #780]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b70:	4ac2      	ldr	r2, [pc, #776]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009b78:	e008      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009b80:	e004      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b82:	bf00      	nop
 8009b84:	e002      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b86:	bf00      	nop
 8009b88:	e000      	b.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10b      	bne.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b94:	4bb9      	ldr	r3, [pc, #740]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b98:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ba4:	4ab5      	ldr	r2, [pc, #724]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ba6:	430b      	orrs	r3, r1
 8009ba8:	6553      	str	r3, [r2, #84]	; 0x54
 8009baa:	e003      	b.n	8009bb4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bb0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009bc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bc6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	d009      	beq.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009bd0:	4baa      	ldr	r3, [pc, #680]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bde:	4aa7      	ldr	r2, [pc, #668]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009be0:	430b      	orrs	r3, r1
 8009be2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009bf0:	653b      	str	r3, [r7, #80]	; 0x50
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	657b      	str	r3, [r7, #84]	; 0x54
 8009bf6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	d00a      	beq.n	8009c16 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009c00:	4b9e      	ldr	r3, [pc, #632]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c0c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009c10:	4a9a      	ldr	r2, [pc, #616]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c12:	430b      	orrs	r3, r1
 8009c14:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c1e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009c22:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c24:	2300      	movs	r3, #0
 8009c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c28:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	d009      	beq.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c32:	4b92      	ldr	r3, [pc, #584]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c36:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c40:	4a8e      	ldr	r2, [pc, #568]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c42:	430b      	orrs	r3, r1
 8009c44:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009c52:	643b      	str	r3, [r7, #64]	; 0x40
 8009c54:	2300      	movs	r3, #0
 8009c56:	647b      	str	r3, [r7, #68]	; 0x44
 8009c58:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4313      	orrs	r3, r2
 8009c60:	d00e      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c62:	4b86      	ldr	r3, [pc, #536]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	4a85      	ldr	r2, [pc, #532]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c68:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009c6c:	6113      	str	r3, [r2, #16]
 8009c6e:	4b83      	ldr	r3, [pc, #524]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c70:	6919      	ldr	r1, [r3, #16]
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c76:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009c7a:	4a80      	ldr	r2, [pc, #512]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c7c:	430b      	orrs	r3, r1
 8009c7e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c88:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c8e:	2300      	movs	r3, #0
 8009c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009c96:	460b      	mov	r3, r1
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	d009      	beq.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009c9c:	4b77      	ldr	r3, [pc, #476]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009caa:	4a74      	ldr	r2, [pc, #464]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cac:	430b      	orrs	r3, r1
 8009cae:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cc2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009cc6:	460b      	mov	r3, r1
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	d00a      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009ccc:	4b6b      	ldr	r3, [pc, #428]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009cdc:	4a67      	ldr	r2, [pc, #412]	; (8009e7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cde:	430b      	orrs	r3, r1
 8009ce0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cea:	2100      	movs	r1, #0
 8009cec:	62b9      	str	r1, [r7, #40]	; 0x28
 8009cee:	f003 0301 	and.w	r3, r3, #1
 8009cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cf4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	d011      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d02:	3308      	adds	r3, #8
 8009d04:	2100      	movs	r1, #0
 8009d06:	4618      	mov	r0, r3
 8009d08:	f001 fa4a 	bl	800b1a0 <RCCEx_PLL2_Config>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d003      	beq.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	6239      	str	r1, [r7, #32]
 8009d2e:	f003 0302 	and.w	r3, r3, #2
 8009d32:	627b      	str	r3, [r7, #36]	; 0x24
 8009d34:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	d011      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d42:	3308      	adds	r3, #8
 8009d44:	2101      	movs	r1, #1
 8009d46:	4618      	mov	r0, r3
 8009d48:	f001 fa2a 	bl	800b1a0 <RCCEx_PLL2_Config>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d003      	beq.n	8009d62 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6a:	2100      	movs	r1, #0
 8009d6c:	61b9      	str	r1, [r7, #24]
 8009d6e:	f003 0304 	and.w	r3, r3, #4
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d78:	460b      	mov	r3, r1
 8009d7a:	4313      	orrs	r3, r2
 8009d7c:	d011      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d82:	3308      	adds	r3, #8
 8009d84:	2102      	movs	r1, #2
 8009d86:	4618      	mov	r0, r3
 8009d88:	f001 fa0a 	bl	800b1a0 <RCCEx_PLL2_Config>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009daa:	2100      	movs	r1, #0
 8009dac:	6139      	str	r1, [r7, #16]
 8009dae:	f003 0308 	and.w	r3, r3, #8
 8009db2:	617b      	str	r3, [r7, #20]
 8009db4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009db8:	460b      	mov	r3, r1
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	d011      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009dbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dc2:	3328      	adds	r3, #40	; 0x28
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f001 fa9c 	bl	800b304 <RCCEx_PLL3_Config>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d003      	beq.n	8009de2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dda:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dde:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dea:	2100      	movs	r1, #0
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	f003 0310 	and.w	r3, r3, #16
 8009df2:	60fb      	str	r3, [r7, #12]
 8009df4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	d011      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e02:	3328      	adds	r3, #40	; 0x28
 8009e04:	2101      	movs	r1, #1
 8009e06:	4618      	mov	r0, r3
 8009e08:	f001 fa7c 	bl	800b304 <RCCEx_PLL3_Config>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	6039      	str	r1, [r7, #0]
 8009e2e:	f003 0320 	and.w	r3, r3, #32
 8009e32:	607b      	str	r3, [r7, #4]
 8009e34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e38:	460b      	mov	r3, r1
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	d011      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e42:	3328      	adds	r3, #40	; 0x28
 8009e44:	2102      	movs	r1, #2
 8009e46:	4618      	mov	r0, r3
 8009e48:	f001 fa5c 	bl	800b304 <RCCEx_PLL3_Config>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d003      	beq.n	8009e62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009e5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009e62:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	e000      	b.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009e76:	46bd      	mov	sp, r7
 8009e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e7c:	58024400 	.word	0x58024400

08009e80 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b090      	sub	sp, #64	; 0x40
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009e8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e8e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009e92:	430b      	orrs	r3, r1
 8009e94:	f040 8094 	bne.w	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009e98:	4b9e      	ldr	r3, [pc, #632]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e9c:	f003 0307 	and.w	r3, r3, #7
 8009ea0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ea4:	2b04      	cmp	r3, #4
 8009ea6:	f200 8087 	bhi.w	8009fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009eaa:	a201      	add	r2, pc, #4	; (adr r2, 8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb0:	08009ec5 	.word	0x08009ec5
 8009eb4:	08009eed 	.word	0x08009eed
 8009eb8:	08009f15 	.word	0x08009f15
 8009ebc:	08009fb1 	.word	0x08009fb1
 8009ec0:	08009f3d 	.word	0x08009f3d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009ec4:	4b93      	ldr	r3, [pc, #588]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ed0:	d108      	bne.n	8009ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f001 f810 	bl	800aefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ede:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ee0:	f000 bd45 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ee8:	f000 bd41 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009eec:	4b89      	ldr	r3, [pc, #548]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ef8:	d108      	bne.n	8009f0c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009efa:	f107 0318 	add.w	r3, r7, #24
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 fd54 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f04:	69bb      	ldr	r3, [r7, #24]
 8009f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f08:	f000 bd31 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f10:	f000 bd2d 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f14:	4b7f      	ldr	r3, [pc, #508]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f20:	d108      	bne.n	8009f34 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f22:	f107 030c 	add.w	r3, r7, #12
 8009f26:	4618      	mov	r0, r3
 8009f28:	f000 fe94 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f30:	f000 bd1d 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f34:	2300      	movs	r3, #0
 8009f36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f38:	f000 bd19 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f3c:	4b75      	ldr	r3, [pc, #468]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009f44:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f46:	4b73      	ldr	r3, [pc, #460]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	d10c      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d109      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f58:	4b6e      	ldr	r3, [pc, #440]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	08db      	lsrs	r3, r3, #3
 8009f5e:	f003 0303 	and.w	r3, r3, #3
 8009f62:	4a6d      	ldr	r2, [pc, #436]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f64:	fa22 f303 	lsr.w	r3, r2, r3
 8009f68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f6a:	e01f      	b.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f6c:	4b69      	ldr	r3, [pc, #420]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f78:	d106      	bne.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f80:	d102      	bne.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f82:	4b66      	ldr	r3, [pc, #408]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009f84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f86:	e011      	b.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f88:	4b62      	ldr	r3, [pc, #392]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f94:	d106      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009f9c:	d102      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f9e:	4b60      	ldr	r3, [pc, #384]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009fa2:	e003      	b.n	8009fac <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009fa8:	f000 bce1 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fac:	f000 bcdf 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fb0:	4b5c      	ldr	r3, [pc, #368]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fb4:	f000 bcdb 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fbc:	f000 bcd7 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009fc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fc4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009fc8:	430b      	orrs	r3, r1
 8009fca:	f040 80ad 	bne.w	800a128 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009fce:	4b51      	ldr	r3, [pc, #324]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fd2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8009fd6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8009fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fde:	d056      	beq.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fe6:	f200 8090 	bhi.w	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fec:	2bc0      	cmp	r3, #192	; 0xc0
 8009fee:	f000 8088 	beq.w	800a102 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff4:	2bc0      	cmp	r3, #192	; 0xc0
 8009ff6:	f200 8088 	bhi.w	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffc:	2b80      	cmp	r3, #128	; 0x80
 8009ffe:	d032      	beq.n	800a066 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a002:	2b80      	cmp	r3, #128	; 0x80
 800a004:	f200 8081 	bhi.w	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a010:	2b40      	cmp	r3, #64	; 0x40
 800a012:	d014      	beq.n	800a03e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a014:	e079      	b.n	800a10a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a016:	4b3f      	ldr	r3, [pc, #252]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a01e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a022:	d108      	bne.n	800a036 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 ff67 	bl	800aefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a032:	f000 bc9c 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a03a:	f000 bc98 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a03e:	4b35      	ldr	r3, [pc, #212]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a046:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a04a:	d108      	bne.n	800a05e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a04c:	f107 0318 	add.w	r3, r7, #24
 800a050:	4618      	mov	r0, r3
 800a052:	f000 fcab 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a05a:	f000 bc88 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a05e:	2300      	movs	r3, #0
 800a060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a062:	f000 bc84 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a066:	4b2b      	ldr	r3, [pc, #172]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a06e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a072:	d108      	bne.n	800a086 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a074:	f107 030c 	add.w	r3, r7, #12
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 fdeb 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a082:	f000 bc74 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a086:	2300      	movs	r3, #0
 800a088:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a08a:	f000 bc70 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a08e:	4b21      	ldr	r3, [pc, #132]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a092:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a096:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a098:	4b1e      	ldr	r3, [pc, #120]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0304 	and.w	r3, r3, #4
 800a0a0:	2b04      	cmp	r3, #4
 800a0a2:	d10c      	bne.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d109      	bne.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0aa:	4b1a      	ldr	r3, [pc, #104]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	08db      	lsrs	r3, r3, #3
 800a0b0:	f003 0303 	and.w	r3, r3, #3
 800a0b4:	4a18      	ldr	r2, [pc, #96]	; (800a118 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0bc:	e01f      	b.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0be:	4b15      	ldr	r3, [pc, #84]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0ca:	d106      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a0d2:	d102      	bne.n	800a0da <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a0d4:	4b11      	ldr	r3, [pc, #68]	; (800a11c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0d8:	e011      	b.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a0da:	4b0e      	ldr	r3, [pc, #56]	; (800a114 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a0e6:	d106      	bne.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a0ee:	d102      	bne.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a0f0:	4b0b      	ldr	r3, [pc, #44]	; (800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a0f4:	e003      	b.n	800a0fe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a0fa:	f000 bc38 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0fe:	f000 bc36 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a102:	4b08      	ldr	r3, [pc, #32]	; (800a124 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a104:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a106:	f000 bc32 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a10a:	2300      	movs	r3, #0
 800a10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a10e:	f000 bc2e 	b.w	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a112:	bf00      	nop
 800a114:	58024400 	.word	0x58024400
 800a118:	03d09000 	.word	0x03d09000
 800a11c:	003d0900 	.word	0x003d0900
 800a120:	016e3600 	.word	0x016e3600
 800a124:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a128:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a12c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800a130:	430b      	orrs	r3, r1
 800a132:	f040 809c 	bne.w	800a26e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a136:	4b9e      	ldr	r3, [pc, #632]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a13a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800a13e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a146:	d054      	beq.n	800a1f2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a14a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a14e:	f200 808b 	bhi.w	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a154:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a158:	f000 8083 	beq.w	800a262 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a162:	f200 8081 	bhi.w	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a16c:	d02f      	beq.n	800a1ce <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a174:	d878      	bhi.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d004      	beq.n	800a186 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a182:	d012      	beq.n	800a1aa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a184:	e070      	b.n	800a268 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a186:	4b8a      	ldr	r3, [pc, #552]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a18e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a192:	d107      	bne.n	800a1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 feaf 	bl	800aefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1a2:	e3e4      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1a8:	e3e1      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1aa:	4b81      	ldr	r3, [pc, #516]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a1b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a1b6:	d107      	bne.n	800a1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1b8:	f107 0318 	add.w	r3, r7, #24
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f000 fbf5 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1c6:	e3d2      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1cc:	e3cf      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a1ce:	4b78      	ldr	r3, [pc, #480]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a1da:	d107      	bne.n	800a1ec <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1dc:	f107 030c 	add.w	r3, r7, #12
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f000 fd37 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ea:	e3c0      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a1f0:	e3bd      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1f2:	4b6f      	ldr	r3, [pc, #444]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a1fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1fc:	4b6c      	ldr	r3, [pc, #432]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f003 0304 	and.w	r3, r3, #4
 800a204:	2b04      	cmp	r3, #4
 800a206:	d10c      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d109      	bne.n	800a222 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a20e:	4b68      	ldr	r3, [pc, #416]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	08db      	lsrs	r3, r3, #3
 800a214:	f003 0303 	and.w	r3, r3, #3
 800a218:	4a66      	ldr	r2, [pc, #408]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a21a:	fa22 f303 	lsr.w	r3, r2, r3
 800a21e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a220:	e01e      	b.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a222:	4b63      	ldr	r3, [pc, #396]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a22a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a22e:	d106      	bne.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a236:	d102      	bne.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a238:	4b5f      	ldr	r3, [pc, #380]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a23a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a23c:	e010      	b.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a23e:	4b5c      	ldr	r3, [pc, #368]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a24a:	d106      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a24e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a252:	d102      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a254:	4b59      	ldr	r3, [pc, #356]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a256:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a258:	e002      	b.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a25a:	2300      	movs	r3, #0
 800a25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a25e:	e386      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a260:	e385      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a262:	4b57      	ldr	r3, [pc, #348]	; (800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a264:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a266:	e382      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a268:	2300      	movs	r3, #0
 800a26a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a26c:	e37f      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a26e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a272:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800a276:	430b      	orrs	r3, r1
 800a278:	f040 80a7 	bne.w	800a3ca <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a27c:	4b4c      	ldr	r3, [pc, #304]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a27e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a280:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800a284:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800a286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a288:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a28c:	d055      	beq.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a294:	f200 8096 	bhi.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a29e:	f000 8084 	beq.w	800a3aa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a2a8:	f200 808c 	bhi.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2b2:	d030      	beq.n	800a316 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2ba:	f200 8083 	bhi.w	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d004      	beq.n	800a2ce <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a2ca:	d012      	beq.n	800a2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a2cc:	e07a      	b.n	800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a2ce:	4b38      	ldr	r3, [pc, #224]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a2da:	d107      	bne.n	800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 fe0b 	bl	800aefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ea:	e340      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a2f0:	e33d      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2f2:	4b2f      	ldr	r3, [pc, #188]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2fe:	d107      	bne.n	800a310 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a300:	f107 0318 	add.w	r3, r7, #24
 800a304:	4618      	mov	r0, r3
 800a306:	f000 fb51 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a30e:	e32e      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a314:	e32b      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a316:	4b26      	ldr	r3, [pc, #152]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a31e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a322:	d107      	bne.n	800a334 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a324:	f107 030c 	add.w	r3, r7, #12
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 fc93 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a332:	e31c      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a338:	e319      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a33a:	4b1d      	ldr	r3, [pc, #116]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a33c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a33e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a342:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a344:	4b1a      	ldr	r3, [pc, #104]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 0304 	and.w	r3, r3, #4
 800a34c:	2b04      	cmp	r3, #4
 800a34e:	d10c      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a352:	2b00      	cmp	r3, #0
 800a354:	d109      	bne.n	800a36a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a356:	4b16      	ldr	r3, [pc, #88]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	08db      	lsrs	r3, r3, #3
 800a35c:	f003 0303 	and.w	r3, r3, #3
 800a360:	4a14      	ldr	r2, [pc, #80]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a362:	fa22 f303 	lsr.w	r3, r2, r3
 800a366:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a368:	e01e      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a36a:	4b11      	ldr	r3, [pc, #68]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a376:	d106      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a37a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a37e:	d102      	bne.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a380:	4b0d      	ldr	r3, [pc, #52]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a382:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a384:	e010      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a386:	4b0a      	ldr	r3, [pc, #40]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a38e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a392:	d106      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a39a:	d102      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a39c:	4b07      	ldr	r3, [pc, #28]	; (800a3bc <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a39e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3a0:	e002      	b.n	800a3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a3a6:	e2e2      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3a8:	e2e1      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3aa:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3ae:	e2de      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	03d09000 	.word	0x03d09000
 800a3b8:	003d0900 	.word	0x003d0900
 800a3bc:	016e3600 	.word	0x016e3600
 800a3c0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c8:	e2d1      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a3ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ce:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800a3d2:	430b      	orrs	r3, r1
 800a3d4:	f040 809c 	bne.w	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a3d8:	4b93      	ldr	r3, [pc, #588]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3dc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800a3e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e8:	d054      	beq.n	800a494 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3f0:	f200 808b 	bhi.w	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3f6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3fa:	f000 8083 	beq.w	800a504 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a404:	f200 8081 	bhi.w	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a40e:	d02f      	beq.n	800a470 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a416:	d878      	bhi.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d004      	beq.n	800a428 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a41e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a420:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a424:	d012      	beq.n	800a44c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a426:	e070      	b.n	800a50a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a428:	4b7f      	ldr	r3, [pc, #508]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a434:	d107      	bne.n	800a446 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a43a:	4618      	mov	r0, r3
 800a43c:	f000 fd5e 	bl	800aefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a444:	e293      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a446:	2300      	movs	r3, #0
 800a448:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a44a:	e290      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a44c:	4b76      	ldr	r3, [pc, #472]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a454:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a458:	d107      	bne.n	800a46a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a45a:	f107 0318 	add.w	r3, r7, #24
 800a45e:	4618      	mov	r0, r3
 800a460:	f000 faa4 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a468:	e281      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a46a:	2300      	movs	r3, #0
 800a46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a46e:	e27e      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a470:	4b6d      	ldr	r3, [pc, #436]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a47c:	d107      	bne.n	800a48e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a47e:	f107 030c 	add.w	r3, r7, #12
 800a482:	4618      	mov	r0, r3
 800a484:	f000 fbe6 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a48c:	e26f      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a48e:	2300      	movs	r3, #0
 800a490:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a492:	e26c      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a494:	4b64      	ldr	r3, [pc, #400]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a498:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a49c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a49e:	4b62      	ldr	r3, [pc, #392]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0304 	and.w	r3, r3, #4
 800a4a6:	2b04      	cmp	r3, #4
 800a4a8:	d10c      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a4aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d109      	bne.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4b0:	4b5d      	ldr	r3, [pc, #372]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	08db      	lsrs	r3, r3, #3
 800a4b6:	f003 0303 	and.w	r3, r3, #3
 800a4ba:	4a5c      	ldr	r2, [pc, #368]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a4bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4c2:	e01e      	b.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4c4:	4b58      	ldr	r3, [pc, #352]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4d0:	d106      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4d8:	d102      	bne.n	800a4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a4da:	4b55      	ldr	r3, [pc, #340]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4de:	e010      	b.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4e0:	4b51      	ldr	r3, [pc, #324]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a4ec:	d106      	bne.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a4ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a4f4:	d102      	bne.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4f6:	4b4f      	ldr	r3, [pc, #316]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4fa:	e002      	b.n	800a502 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a500:	e235      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a502:	e234      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a504:	4b4c      	ldr	r3, [pc, #304]	; (800a638 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a508:	e231      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a50a:	2300      	movs	r3, #0
 800a50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a50e:	e22e      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a510:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a514:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800a518:	430b      	orrs	r3, r1
 800a51a:	f040 808f 	bne.w	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a51e:	4b42      	ldr	r3, [pc, #264]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a522:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800a526:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a52e:	d06b      	beq.n	800a608 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a532:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a536:	d874      	bhi.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a53e:	d056      	beq.n	800a5ee <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a542:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a546:	d86c      	bhi.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a54e:	d03b      	beq.n	800a5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a552:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a556:	d864      	bhi.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a55e:	d021      	beq.n	800a5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a566:	d85c      	bhi.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d004      	beq.n	800a578 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a574:	d004      	beq.n	800a580 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a576:	e054      	b.n	800a622 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a578:	f7fe fa4c 	bl	8008a14 <HAL_RCC_GetPCLK1Freq>
 800a57c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a57e:	e1f6      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a580:	4b29      	ldr	r3, [pc, #164]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a58c:	d107      	bne.n	800a59e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a58e:	f107 0318 	add.w	r3, r7, #24
 800a592:	4618      	mov	r0, r3
 800a594:	f000 fa0a 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a598:	69fb      	ldr	r3, [r7, #28]
 800a59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a59c:	e1e7      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5a2:	e1e4      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5a4:	4b20      	ldr	r3, [pc, #128]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a5b0:	d107      	bne.n	800a5c2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5b2:	f107 030c 	add.w	r3, r7, #12
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f000 fb4c 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5c0:	e1d5      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5c6:	e1d2      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5c8:	4b17      	ldr	r3, [pc, #92]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 0304 	and.w	r3, r3, #4
 800a5d0:	2b04      	cmp	r3, #4
 800a5d2:	d109      	bne.n	800a5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5d4:	4b14      	ldr	r3, [pc, #80]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	08db      	lsrs	r3, r3, #3
 800a5da:	f003 0303 	and.w	r3, r3, #3
 800a5de:	4a13      	ldr	r2, [pc, #76]	; (800a62c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a5e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5e6:	e1c2      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5ec:	e1bf      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a5ee:	4b0e      	ldr	r3, [pc, #56]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a5fa:	d102      	bne.n	800a602 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a5fc:	4b0c      	ldr	r3, [pc, #48]	; (800a630 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a600:	e1b5      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a602:	2300      	movs	r3, #0
 800a604:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a606:	e1b2      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a608:	4b07      	ldr	r3, [pc, #28]	; (800a628 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a610:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a614:	d102      	bne.n	800a61c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a616:	4b07      	ldr	r3, [pc, #28]	; (800a634 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a618:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61a:	e1a8      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a620:	e1a5      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a622:	2300      	movs	r3, #0
 800a624:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a626:	e1a2      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a628:	58024400 	.word	0x58024400
 800a62c:	03d09000 	.word	0x03d09000
 800a630:	003d0900 	.word	0x003d0900
 800a634:	016e3600 	.word	0x016e3600
 800a638:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a63c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a640:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a644:	430b      	orrs	r3, r1
 800a646:	d173      	bne.n	800a730 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a648:	4b9c      	ldr	r3, [pc, #624]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a64a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a64c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a650:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a654:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a658:	d02f      	beq.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a65a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a660:	d863      	bhi.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a664:	2b00      	cmp	r3, #0
 800a666:	d004      	beq.n	800a672 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a66a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a66e:	d012      	beq.n	800a696 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a670:	e05b      	b.n	800a72a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a672:	4b92      	ldr	r3, [pc, #584]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a67a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a67e:	d107      	bne.n	800a690 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a680:	f107 0318 	add.w	r3, r7, #24
 800a684:	4618      	mov	r0, r3
 800a686:	f000 f991 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a68e:	e16e      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a690:	2300      	movs	r3, #0
 800a692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a694:	e16b      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a696:	4b89      	ldr	r3, [pc, #548]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a69e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6a2:	d107      	bne.n	800a6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6a4:	f107 030c 	add.w	r3, r7, #12
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 fad3 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6b2:	e15c      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6b8:	e159      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6ba:	4b80      	ldr	r3, [pc, #512]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a6c2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6c4:	4b7d      	ldr	r3, [pc, #500]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	f003 0304 	and.w	r3, r3, #4
 800a6cc:	2b04      	cmp	r3, #4
 800a6ce:	d10c      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d109      	bne.n	800a6ea <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6d6:	4b79      	ldr	r3, [pc, #484]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	08db      	lsrs	r3, r3, #3
 800a6dc:	f003 0303 	and.w	r3, r3, #3
 800a6e0:	4a77      	ldr	r2, [pc, #476]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a6e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a6e8:	e01e      	b.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6ea:	4b74      	ldr	r3, [pc, #464]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6f6:	d106      	bne.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6fe:	d102      	bne.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a700:	4b70      	ldr	r3, [pc, #448]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a702:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a704:	e010      	b.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a706:	4b6d      	ldr	r3, [pc, #436]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a70e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a712:	d106      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a71a:	d102      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a71c:	4b6a      	ldr	r3, [pc, #424]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a71e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a720:	e002      	b.n	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a722:	2300      	movs	r3, #0
 800a724:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800a726:	e122      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a728:	e121      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a72e:	e11e      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a730:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a734:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800a738:	430b      	orrs	r3, r1
 800a73a:	d133      	bne.n	800a7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a73c:	4b5f      	ldr	r3, [pc, #380]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a73e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a744:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d004      	beq.n	800a756 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a752:	d012      	beq.n	800a77a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a754:	e023      	b.n	800a79e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a756:	4b59      	ldr	r3, [pc, #356]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a75e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a762:	d107      	bne.n	800a774 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a768:	4618      	mov	r0, r3
 800a76a:	f000 fbc7 	bl	800aefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a770:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a772:	e0fc      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a774:	2300      	movs	r3, #0
 800a776:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a778:	e0f9      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a77a:	4b50      	ldr	r3, [pc, #320]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a782:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a786:	d107      	bne.n	800a798 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a788:	f107 0318 	add.w	r3, r7, #24
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 f90d 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a792:	6a3b      	ldr	r3, [r7, #32]
 800a794:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a796:	e0ea      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a798:	2300      	movs	r3, #0
 800a79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a79c:	e0e7      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a2:	e0e4      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a7a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7a8:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800a7ac:	430b      	orrs	r3, r1
 800a7ae:	f040 808d 	bne.w	800a8cc <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a7b2:	4b42      	ldr	r3, [pc, #264]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800a7ba:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7c2:	d06b      	beq.n	800a89c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a7ca:	d874      	bhi.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7d2:	d056      	beq.n	800a882 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7da:	d86c      	bhi.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7de:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7e2:	d03b      	beq.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a7ea:	d864      	bhi.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7f2:	d021      	beq.n	800a838 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7fa:	d85c      	bhi.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d004      	beq.n	800a80c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a808:	d004      	beq.n	800a814 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a80a:	e054      	b.n	800a8b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a80c:	f000 f8b8 	bl	800a980 <HAL_RCCEx_GetD3PCLK1Freq>
 800a810:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a812:	e0ac      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a814:	4b29      	ldr	r3, [pc, #164]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a81c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a820:	d107      	bne.n	800a832 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a822:	f107 0318 	add.w	r3, r7, #24
 800a826:	4618      	mov	r0, r3
 800a828:	f000 f8c0 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a830:	e09d      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a832:	2300      	movs	r3, #0
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a836:	e09a      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a838:	4b20      	ldr	r3, [pc, #128]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a840:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a844:	d107      	bne.n	800a856 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a846:	f107 030c 	add.w	r3, r7, #12
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fa02 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a854:	e08b      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a85a:	e088      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a85c:	4b17      	ldr	r3, [pc, #92]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0304 	and.w	r3, r3, #4
 800a864:	2b04      	cmp	r3, #4
 800a866:	d109      	bne.n	800a87c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a868:	4b14      	ldr	r3, [pc, #80]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	08db      	lsrs	r3, r3, #3
 800a86e:	f003 0303 	and.w	r3, r3, #3
 800a872:	4a13      	ldr	r2, [pc, #76]	; (800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a874:	fa22 f303 	lsr.w	r3, r2, r3
 800a878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a87a:	e078      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a87c:	2300      	movs	r3, #0
 800a87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a880:	e075      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a882:	4b0e      	ldr	r3, [pc, #56]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a88e:	d102      	bne.n	800a896 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a890:	4b0c      	ldr	r3, [pc, #48]	; (800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a892:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a894:	e06b      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a896:	2300      	movs	r3, #0
 800a898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a89a:	e068      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a89c:	4b07      	ldr	r3, [pc, #28]	; (800a8bc <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8a8:	d102      	bne.n	800a8b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a8aa:	4b07      	ldr	r3, [pc, #28]	; (800a8c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8ae:	e05e      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8b4:	e05b      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8ba:	e058      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8bc:	58024400 	.word	0x58024400
 800a8c0:	03d09000 	.word	0x03d09000
 800a8c4:	003d0900 	.word	0x003d0900
 800a8c8:	016e3600 	.word	0x016e3600
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a8cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8d0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800a8d4:	430b      	orrs	r3, r1
 800a8d6:	d148      	bne.n	800a96a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a8d8:	4b27      	ldr	r3, [pc, #156]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a8e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800a8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8e8:	d02a      	beq.n	800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8f0:	d838      	bhi.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d004      	beq.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a8f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8fe:	d00d      	beq.n	800a91c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a900:	e030      	b.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a902:	4b1d      	ldr	r3, [pc, #116]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a90a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a90e:	d102      	bne.n	800a916 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a910:	4b1a      	ldr	r3, [pc, #104]	; (800a97c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a912:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a914:	e02b      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a916:	2300      	movs	r3, #0
 800a918:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a91a:	e028      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a91c:	4b16      	ldr	r3, [pc, #88]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a924:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a928:	d107      	bne.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a92a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a92e:	4618      	mov	r0, r3
 800a930:	f000 fae4 	bl	800aefc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a936:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a938:	e019      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a93e:	e016      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a940:	4b0d      	ldr	r3, [pc, #52]	; (800a978 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a94c:	d107      	bne.n	800a95e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a94e:	f107 0318 	add.w	r3, r7, #24
 800a952:	4618      	mov	r0, r3
 800a954:	f000 f82a 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a95c:	e007      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a962:	e004      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a964:	2300      	movs	r3, #0
 800a966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a968:	e001      	b.n	800a96e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800a96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a970:	4618      	mov	r0, r3
 800a972:	3740      	adds	r7, #64	; 0x40
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	58024400 	.word	0x58024400
 800a97c:	016e3600 	.word	0x016e3600

0800a980 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a980:	b580      	push	{r7, lr}
 800a982:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a984:	f7fe f816 	bl	80089b4 <HAL_RCC_GetHCLKFreq>
 800a988:	4602      	mov	r2, r0
 800a98a:	4b06      	ldr	r3, [pc, #24]	; (800a9a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a98c:	6a1b      	ldr	r3, [r3, #32]
 800a98e:	091b      	lsrs	r3, r3, #4
 800a990:	f003 0307 	and.w	r3, r3, #7
 800a994:	4904      	ldr	r1, [pc, #16]	; (800a9a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a996:	5ccb      	ldrb	r3, [r1, r3]
 800a998:	f003 031f 	and.w	r3, r3, #31
 800a99c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	58024400 	.word	0x58024400
 800a9a8:	0800ceb0 	.word	0x0800ceb0

0800a9ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b089      	sub	sp, #36	; 0x24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9b4:	4ba1      	ldr	r3, [pc, #644]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b8:	f003 0303 	and.w	r3, r3, #3
 800a9bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a9be:	4b9f      	ldr	r3, [pc, #636]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c2:	0b1b      	lsrs	r3, r3, #12
 800a9c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a9ca:	4b9c      	ldr	r3, [pc, #624]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ce:	091b      	lsrs	r3, r3, #4
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a9d6:	4b99      	ldr	r3, [pc, #612]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9da:	08db      	lsrs	r3, r3, #3
 800a9dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	fb02 f303 	mul.w	r3, r2, r3
 800a9e6:	ee07 3a90 	vmov	s15, r3
 800a9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 8111 	beq.w	800ac1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	f000 8083 	beq.w	800ab08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	2b02      	cmp	r3, #2
 800aa06:	f200 80a1 	bhi.w	800ab4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d003      	beq.n	800aa18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d056      	beq.n	800aac4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa16:	e099      	b.n	800ab4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa18:	4b88      	ldr	r3, [pc, #544]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 0320 	and.w	r3, r3, #32
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d02d      	beq.n	800aa80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa24:	4b85      	ldr	r3, [pc, #532]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	08db      	lsrs	r3, r3, #3
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	4a84      	ldr	r2, [pc, #528]	; (800ac40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa30:	fa22 f303 	lsr.w	r3, r2, r3
 800aa34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	ee07 3a90 	vmov	s15, r3
 800aa3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	ee07 3a90 	vmov	s15, r3
 800aa46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa4e:	4b7b      	ldr	r3, [pc, #492]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa56:	ee07 3a90 	vmov	s15, r3
 800aa5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa62:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ac44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa7e:	e087      	b.n	800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	ee07 3a90 	vmov	s15, r3
 800aa86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ac48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa92:	4b6a      	ldr	r3, [pc, #424]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa9a:	ee07 3a90 	vmov	s15, r3
 800aa9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaa6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ac44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aabe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aac2:	e065      	b.n	800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aace:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aad6:	4b59      	ldr	r3, [pc, #356]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ac44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab06:	e043      	b.n	800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	ee07 3a90 	vmov	s15, r3
 800ab0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ac50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab1a:	4b48      	ldr	r3, [pc, #288]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab22:	ee07 3a90 	vmov	s15, r3
 800ab26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ac44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab4a:	e021      	b.n	800ab90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	ee07 3a90 	vmov	s15, r3
 800ab52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ac4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab5e:	4b37      	ldr	r3, [pc, #220]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab66:	ee07 3a90 	vmov	s15, r3
 800ab6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab72:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ac44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ab90:	4b2a      	ldr	r3, [pc, #168]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab94:	0a5b      	lsrs	r3, r3, #9
 800ab96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab9a:	ee07 3a90 	vmov	s15, r3
 800ab9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aba2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800abae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abb6:	ee17 2a90 	vmov	r2, s15
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800abbe:	4b1f      	ldr	r3, [pc, #124]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc2:	0c1b      	lsrs	r3, r3, #16
 800abc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc8:	ee07 3a90 	vmov	s15, r3
 800abcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800abd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800abdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abe4:	ee17 2a90 	vmov	r2, s15
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800abec:	4b13      	ldr	r3, [pc, #76]	; (800ac3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf0:	0e1b      	lsrs	r3, r3, #24
 800abf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abf6:	ee07 3a90 	vmov	s15, r3
 800abfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ac02:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac06:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac12:	ee17 2a90 	vmov	r2, s15
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac1a:	e008      	b.n	800ac2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	609a      	str	r2, [r3, #8]
}
 800ac2e:	bf00      	nop
 800ac30:	3724      	adds	r7, #36	; 0x24
 800ac32:	46bd      	mov	sp, r7
 800ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac38:	4770      	bx	lr
 800ac3a:	bf00      	nop
 800ac3c:	58024400 	.word	0x58024400
 800ac40:	03d09000 	.word	0x03d09000
 800ac44:	46000000 	.word	0x46000000
 800ac48:	4c742400 	.word	0x4c742400
 800ac4c:	4a742400 	.word	0x4a742400
 800ac50:	4bb71b00 	.word	0x4bb71b00

0800ac54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b089      	sub	sp, #36	; 0x24
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac5c:	4ba1      	ldr	r3, [pc, #644]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac60:	f003 0303 	and.w	r3, r3, #3
 800ac64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac66:	4b9f      	ldr	r3, [pc, #636]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6a:	0d1b      	lsrs	r3, r3, #20
 800ac6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac72:	4b9c      	ldr	r3, [pc, #624]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac76:	0a1b      	lsrs	r3, r3, #8
 800ac78:	f003 0301 	and.w	r3, r3, #1
 800ac7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac7e:	4b99      	ldr	r3, [pc, #612]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac82:	08db      	lsrs	r3, r3, #3
 800ac84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	fb02 f303 	mul.w	r3, r2, r3
 800ac8e:	ee07 3a90 	vmov	s15, r3
 800ac92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 8111 	beq.w	800aec4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	f000 8083 	beq.w	800adb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800acaa:	69bb      	ldr	r3, [r7, #24]
 800acac:	2b02      	cmp	r3, #2
 800acae:	f200 80a1 	bhi.w	800adf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d003      	beq.n	800acc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d056      	beq.n	800ad6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800acbe:	e099      	b.n	800adf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acc0:	4b88      	ldr	r3, [pc, #544]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f003 0320 	and.w	r3, r3, #32
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d02d      	beq.n	800ad28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800accc:	4b85      	ldr	r3, [pc, #532]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	08db      	lsrs	r3, r3, #3
 800acd2:	f003 0303 	and.w	r3, r3, #3
 800acd6:	4a84      	ldr	r2, [pc, #528]	; (800aee8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800acd8:	fa22 f303 	lsr.w	r3, r2, r3
 800acdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	ee07 3a90 	vmov	s15, r3
 800ace4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	ee07 3a90 	vmov	s15, r3
 800acee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf6:	4b7b      	ldr	r3, [pc, #492]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acfe:	ee07 3a90 	vmov	s15, r3
 800ad02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad0a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800aeec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad26:	e087      	b.n	800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	ee07 3a90 	vmov	s15, r3
 800ad2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad32:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800aef0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3a:	4b6a      	ldr	r3, [pc, #424]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad42:	ee07 3a90 	vmov	s15, r3
 800ad46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad4e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800aeec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad6a:	e065      	b.n	800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	ee07 3a90 	vmov	s15, r3
 800ad72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad76:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad7e:	4b59      	ldr	r3, [pc, #356]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad86:	ee07 3a90 	vmov	s15, r3
 800ad8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad92:	eddf 5a56 	vldr	s11, [pc, #344]	; 800aeec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ada2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adae:	e043      	b.n	800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	ee07 3a90 	vmov	s15, r3
 800adb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800aef8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800adbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc2:	4b48      	ldr	r3, [pc, #288]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adca:	ee07 3a90 	vmov	s15, r3
 800adce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add2:	ed97 6a03 	vldr	s12, [r7, #12]
 800add6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800aeec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800adde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ade2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ade6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adf2:	e021      	b.n	800ae38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	ee07 3a90 	vmov	s15, r3
 800adfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aef4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae06:	4b37      	ldr	r3, [pc, #220]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0e:	ee07 3a90 	vmov	s15, r3
 800ae12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae16:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae1a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800aeec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae38:	4b2a      	ldr	r3, [pc, #168]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3c:	0a5b      	lsrs	r3, r3, #9
 800ae3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae42:	ee07 3a90 	vmov	s15, r3
 800ae46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae5e:	ee17 2a90 	vmov	r2, s15
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae66:	4b1f      	ldr	r3, [pc, #124]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6a:	0c1b      	lsrs	r3, r3, #16
 800ae6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae70:	ee07 3a90 	vmov	s15, r3
 800ae74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae80:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae8c:	ee17 2a90 	vmov	r2, s15
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ae94:	4b13      	ldr	r3, [pc, #76]	; (800aee4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae98:	0e1b      	lsrs	r3, r3, #24
 800ae9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae9e:	ee07 3a90 	vmov	s15, r3
 800aea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aeaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aeae:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aeba:	ee17 2a90 	vmov	r2, s15
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aec2:	e008      	b.n	800aed6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2200      	movs	r2, #0
 800aece:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	609a      	str	r2, [r3, #8]
}
 800aed6:	bf00      	nop
 800aed8:	3724      	adds	r7, #36	; 0x24
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
 800aee2:	bf00      	nop
 800aee4:	58024400 	.word	0x58024400
 800aee8:	03d09000 	.word	0x03d09000
 800aeec:	46000000 	.word	0x46000000
 800aef0:	4c742400 	.word	0x4c742400
 800aef4:	4a742400 	.word	0x4a742400
 800aef8:	4bb71b00 	.word	0x4bb71b00

0800aefc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b089      	sub	sp, #36	; 0x24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af04:	4ba0      	ldr	r3, [pc, #640]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af08:	f003 0303 	and.w	r3, r3, #3
 800af0c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af0e:	4b9e      	ldr	r3, [pc, #632]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af12:	091b      	lsrs	r3, r3, #4
 800af14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800af18:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af1a:	4b9b      	ldr	r3, [pc, #620]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af1e:	f003 0301 	and.w	r3, r3, #1
 800af22:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af24:	4b98      	ldr	r3, [pc, #608]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af28:	08db      	lsrs	r3, r3, #3
 800af2a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af2e:	693a      	ldr	r2, [r7, #16]
 800af30:	fb02 f303 	mul.w	r3, r2, r3
 800af34:	ee07 3a90 	vmov	s15, r3
 800af38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af3c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2b00      	cmp	r3, #0
 800af44:	f000 8111 	beq.w	800b16a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	f000 8083 	beq.w	800b056 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af50:	69bb      	ldr	r3, [r7, #24]
 800af52:	2b02      	cmp	r3, #2
 800af54:	f200 80a1 	bhi.w	800b09a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af58:	69bb      	ldr	r3, [r7, #24]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d003      	beq.n	800af66 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d056      	beq.n	800b012 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af64:	e099      	b.n	800b09a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af66:	4b88      	ldr	r3, [pc, #544]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0320 	and.w	r3, r3, #32
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d02d      	beq.n	800afce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af72:	4b85      	ldr	r3, [pc, #532]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	08db      	lsrs	r3, r3, #3
 800af78:	f003 0303 	and.w	r3, r3, #3
 800af7c:	4a83      	ldr	r2, [pc, #524]	; (800b18c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af7e:	fa22 f303 	lsr.w	r3, r2, r3
 800af82:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af84:	68bb      	ldr	r3, [r7, #8]
 800af86:	ee07 3a90 	vmov	s15, r3
 800af8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	ee07 3a90 	vmov	s15, r3
 800af94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af98:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af9c:	4b7a      	ldr	r3, [pc, #488]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afa4:	ee07 3a90 	vmov	s15, r3
 800afa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afac:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afb4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afb8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800afcc:	e087      	b.n	800b0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	ee07 3a90 	vmov	s15, r3
 800afd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800afdc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afe0:	4b69      	ldr	r3, [pc, #420]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afe8:	ee07 3a90 	vmov	s15, r3
 800afec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff0:	ed97 6a03 	vldr	s12, [r7, #12]
 800aff4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800aff8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800affc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b000:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b004:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b00c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b010:	e065      	b.n	800b0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	ee07 3a90 	vmov	s15, r3
 800b018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b01c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b198 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b020:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b024:	4b58      	ldr	r3, [pc, #352]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b02c:	ee07 3a90 	vmov	s15, r3
 800b030:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b034:	ed97 6a03 	vldr	s12, [r7, #12]
 800b038:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b03c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b040:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b044:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b048:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b04c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b050:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b054:	e043      	b.n	800b0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	ee07 3a90 	vmov	s15, r3
 800b05c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b060:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b19c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b064:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b068:	4b47      	ldr	r3, [pc, #284]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b06a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b070:	ee07 3a90 	vmov	s15, r3
 800b074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b078:	ed97 6a03 	vldr	s12, [r7, #12]
 800b07c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b080:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b084:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b088:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b08c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b090:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b094:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b098:	e021      	b.n	800b0de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	ee07 3a90 	vmov	s15, r3
 800b0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b194 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b0a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0ac:	4b36      	ldr	r3, [pc, #216]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0b4:	ee07 3a90 	vmov	s15, r3
 800b0b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b190 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b0d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b0de:	4b2a      	ldr	r3, [pc, #168]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0e2:	0a5b      	lsrs	r3, r3, #9
 800b0e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0e8:	ee07 3a90 	vmov	s15, r3
 800b0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b0f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b100:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b104:	ee17 2a90 	vmov	r2, s15
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b10c:	4b1e      	ldr	r3, [pc, #120]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b110:	0c1b      	lsrs	r3, r3, #16
 800b112:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b116:	ee07 3a90 	vmov	s15, r3
 800b11a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b11e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b122:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b126:	edd7 6a07 	vldr	s13, [r7, #28]
 800b12a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b12e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b132:	ee17 2a90 	vmov	r2, s15
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b13a:	4b13      	ldr	r3, [pc, #76]	; (800b188 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b13c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b13e:	0e1b      	lsrs	r3, r3, #24
 800b140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b144:	ee07 3a90 	vmov	s15, r3
 800b148:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b14c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b150:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b154:	edd7 6a07 	vldr	s13, [r7, #28]
 800b158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b15c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b160:	ee17 2a90 	vmov	r2, s15
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b168:	e008      	b.n	800b17c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	609a      	str	r2, [r3, #8]
}
 800b17c:	bf00      	nop
 800b17e:	3724      	adds	r7, #36	; 0x24
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr
 800b188:	58024400 	.word	0x58024400
 800b18c:	03d09000 	.word	0x03d09000
 800b190:	46000000 	.word	0x46000000
 800b194:	4c742400 	.word	0x4c742400
 800b198:	4a742400 	.word	0x4a742400
 800b19c:	4bb71b00 	.word	0x4bb71b00

0800b1a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1ae:	4b53      	ldr	r3, [pc, #332]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b1b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b2:	f003 0303 	and.w	r3, r3, #3
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	d101      	bne.n	800b1be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e099      	b.n	800b2f2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b1be:	4b4f      	ldr	r3, [pc, #316]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a4e      	ldr	r2, [pc, #312]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b1c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b1c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1ca:	f7f7 fc6b 	bl	8002aa4 <HAL_GetTick>
 800b1ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1d0:	e008      	b.n	800b1e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b1d2:	f7f7 fc67 	bl	8002aa4 <HAL_GetTick>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d901      	bls.n	800b1e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e086      	b.n	800b2f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1e4:	4b45      	ldr	r3, [pc, #276]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1f0      	bne.n	800b1d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1f0:	4b42      	ldr	r3, [pc, #264]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b1f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	031b      	lsls	r3, r3, #12
 800b1fe:	493f      	ldr	r1, [pc, #252]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b200:	4313      	orrs	r3, r2
 800b202:	628b      	str	r3, [r1, #40]	; 0x28
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	3b01      	subs	r3, #1
 800b20a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	3b01      	subs	r3, #1
 800b214:	025b      	lsls	r3, r3, #9
 800b216:	b29b      	uxth	r3, r3
 800b218:	431a      	orrs	r2, r3
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	68db      	ldr	r3, [r3, #12]
 800b21e:	3b01      	subs	r3, #1
 800b220:	041b      	lsls	r3, r3, #16
 800b222:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b226:	431a      	orrs	r2, r3
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	3b01      	subs	r3, #1
 800b22e:	061b      	lsls	r3, r3, #24
 800b230:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b234:	4931      	ldr	r1, [pc, #196]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b236:	4313      	orrs	r3, r2
 800b238:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b23a:	4b30      	ldr	r3, [pc, #192]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b23e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	695b      	ldr	r3, [r3, #20]
 800b246:	492d      	ldr	r1, [pc, #180]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b248:	4313      	orrs	r3, r2
 800b24a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b24c:	4b2b      	ldr	r3, [pc, #172]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b250:	f023 0220 	bic.w	r2, r3, #32
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	699b      	ldr	r3, [r3, #24]
 800b258:	4928      	ldr	r1, [pc, #160]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b25a:	4313      	orrs	r3, r2
 800b25c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b25e:	4b27      	ldr	r3, [pc, #156]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b262:	4a26      	ldr	r2, [pc, #152]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b264:	f023 0310 	bic.w	r3, r3, #16
 800b268:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b26a:	4b24      	ldr	r3, [pc, #144]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b26c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b26e:	4b24      	ldr	r3, [pc, #144]	; (800b300 <RCCEx_PLL2_Config+0x160>)
 800b270:	4013      	ands	r3, r2
 800b272:	687a      	ldr	r2, [r7, #4]
 800b274:	69d2      	ldr	r2, [r2, #28]
 800b276:	00d2      	lsls	r2, r2, #3
 800b278:	4920      	ldr	r1, [pc, #128]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b27a:	4313      	orrs	r3, r2
 800b27c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b27e:	4b1f      	ldr	r3, [pc, #124]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b282:	4a1e      	ldr	r2, [pc, #120]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b284:	f043 0310 	orr.w	r3, r3, #16
 800b288:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d106      	bne.n	800b29e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b290:	4b1a      	ldr	r3, [pc, #104]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b294:	4a19      	ldr	r2, [pc, #100]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b296:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b29a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b29c:	e00f      	b.n	800b2be <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d106      	bne.n	800b2b2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2a4:	4b15      	ldr	r3, [pc, #84]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b2a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a8:	4a14      	ldr	r2, [pc, #80]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b2aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b2b0:	e005      	b.n	800b2be <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b2b2:	4b12      	ldr	r3, [pc, #72]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b6:	4a11      	ldr	r2, [pc, #68]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b2b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b2bc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b2be:	4b0f      	ldr	r3, [pc, #60]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a0e      	ldr	r2, [pc, #56]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b2c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b2c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2ca:	f7f7 fbeb 	bl	8002aa4 <HAL_GetTick>
 800b2ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2d0:	e008      	b.n	800b2e4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b2d2:	f7f7 fbe7 	bl	8002aa4 <HAL_GetTick>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	1ad3      	subs	r3, r2, r3
 800b2dc:	2b02      	cmp	r3, #2
 800b2de:	d901      	bls.n	800b2e4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	e006      	b.n	800b2f2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2e4:	4b05      	ldr	r3, [pc, #20]	; (800b2fc <RCCEx_PLL2_Config+0x15c>)
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d0f0      	beq.n	800b2d2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	58024400 	.word	0x58024400
 800b300:	ffff0007 	.word	0xffff0007

0800b304 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b30e:	2300      	movs	r3, #0
 800b310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b312:	4b53      	ldr	r3, [pc, #332]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b316:	f003 0303 	and.w	r3, r3, #3
 800b31a:	2b03      	cmp	r3, #3
 800b31c:	d101      	bne.n	800b322 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e099      	b.n	800b456 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b322:	4b4f      	ldr	r3, [pc, #316]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	4a4e      	ldr	r2, [pc, #312]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b32c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b32e:	f7f7 fbb9 	bl	8002aa4 <HAL_GetTick>
 800b332:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b334:	e008      	b.n	800b348 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b336:	f7f7 fbb5 	bl	8002aa4 <HAL_GetTick>
 800b33a:	4602      	mov	r2, r0
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	1ad3      	subs	r3, r2, r3
 800b340:	2b02      	cmp	r3, #2
 800b342:	d901      	bls.n	800b348 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b344:	2303      	movs	r3, #3
 800b346:	e086      	b.n	800b456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b348:	4b45      	ldr	r3, [pc, #276]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1f0      	bne.n	800b336 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b354:	4b42      	ldr	r3, [pc, #264]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b358:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	051b      	lsls	r3, r3, #20
 800b362:	493f      	ldr	r1, [pc, #252]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b364:	4313      	orrs	r3, r2
 800b366:	628b      	str	r3, [r1, #40]	; 0x28
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	685b      	ldr	r3, [r3, #4]
 800b36c:	3b01      	subs	r3, #1
 800b36e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	3b01      	subs	r3, #1
 800b378:	025b      	lsls	r3, r3, #9
 800b37a:	b29b      	uxth	r3, r3
 800b37c:	431a      	orrs	r2, r3
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	3b01      	subs	r3, #1
 800b384:	041b      	lsls	r3, r3, #16
 800b386:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b38a:	431a      	orrs	r2, r3
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	691b      	ldr	r3, [r3, #16]
 800b390:	3b01      	subs	r3, #1
 800b392:	061b      	lsls	r3, r3, #24
 800b394:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b398:	4931      	ldr	r1, [pc, #196]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b39a:	4313      	orrs	r3, r2
 800b39c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b39e:	4b30      	ldr	r3, [pc, #192]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	695b      	ldr	r3, [r3, #20]
 800b3aa:	492d      	ldr	r1, [pc, #180]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b3b0:	4b2b      	ldr	r3, [pc, #172]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	699b      	ldr	r3, [r3, #24]
 800b3bc:	4928      	ldr	r1, [pc, #160]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b3c2:	4b27      	ldr	r3, [pc, #156]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c6:	4a26      	ldr	r2, [pc, #152]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b3ce:	4b24      	ldr	r3, [pc, #144]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3d2:	4b24      	ldr	r3, [pc, #144]	; (800b464 <RCCEx_PLL3_Config+0x160>)
 800b3d4:	4013      	ands	r3, r2
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	69d2      	ldr	r2, [r2, #28]
 800b3da:	00d2      	lsls	r2, r2, #3
 800b3dc:	4920      	ldr	r1, [pc, #128]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3de:	4313      	orrs	r3, r2
 800b3e0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3e2:	4b1f      	ldr	r3, [pc, #124]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e6:	4a1e      	ldr	r2, [pc, #120]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d106      	bne.n	800b402 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3f4:	4b1a      	ldr	r3, [pc, #104]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f8:	4a19      	ldr	r2, [pc, #100]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b3fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b3fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b400:	e00f      	b.n	800b422 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b01      	cmp	r3, #1
 800b406:	d106      	bne.n	800b416 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b408:	4b15      	ldr	r3, [pc, #84]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40c:	4a14      	ldr	r2, [pc, #80]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b40e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b412:	62d3      	str	r3, [r2, #44]	; 0x2c
 800b414:	e005      	b.n	800b422 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b416:	4b12      	ldr	r3, [pc, #72]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b41a:	4a11      	ldr	r2, [pc, #68]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b41c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b420:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b422:	4b0f      	ldr	r3, [pc, #60]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a0e      	ldr	r2, [pc, #56]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b42c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b42e:	f7f7 fb39 	bl	8002aa4 <HAL_GetTick>
 800b432:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b434:	e008      	b.n	800b448 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b436:	f7f7 fb35 	bl	8002aa4 <HAL_GetTick>
 800b43a:	4602      	mov	r2, r0
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	1ad3      	subs	r3, r2, r3
 800b440:	2b02      	cmp	r3, #2
 800b442:	d901      	bls.n	800b448 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b444:	2303      	movs	r3, #3
 800b446:	e006      	b.n	800b456 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b448:	4b05      	ldr	r3, [pc, #20]	; (800b460 <RCCEx_PLL3_Config+0x15c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b450:	2b00      	cmp	r3, #0
 800b452:	d0f0      	beq.n	800b436 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b454:	7bfb      	ldrb	r3, [r7, #15]
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
 800b45e:	bf00      	nop
 800b460:	58024400 	.word	0x58024400
 800b464:	ffff0007 	.word	0xffff0007

0800b468 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d101      	bne.n	800b47c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b478:	2301      	movs	r3, #1
 800b47a:	e08f      	b.n	800b59c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b482:	b2db      	uxtb	r3, r3
 800b484:	2b00      	cmp	r3, #0
 800b486:	d106      	bne.n	800b496 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7f6 fe2d 	bl	80020f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2202      	movs	r2, #2
 800b49a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	6899      	ldr	r1, [r3, #8]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	4b3e      	ldr	r3, [pc, #248]	; (800b5a4 <HAL_TIM_Encoder_Init+0x13c>)
 800b4aa:	400b      	ands	r3, r1
 800b4ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	4619      	mov	r1, r3
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	f000 fa39 	bl	800b930 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	699b      	ldr	r3, [r3, #24]
 800b4cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	6a1b      	ldr	r3, [r3, #32]
 800b4d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b4e0:	693a      	ldr	r2, [r7, #16]
 800b4e2:	4b31      	ldr	r3, [pc, #196]	; (800b5a8 <HAL_TIM_Encoder_Init+0x140>)
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	689a      	ldr	r2, [r3, #8]
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	699b      	ldr	r3, [r3, #24]
 800b4f0:	021b      	lsls	r3, r3, #8
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b4fa:	693a      	ldr	r2, [r7, #16]
 800b4fc:	4b2b      	ldr	r3, [pc, #172]	; (800b5ac <HAL_TIM_Encoder_Init+0x144>)
 800b4fe:	4013      	ands	r3, r2
 800b500:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b502:	693a      	ldr	r2, [r7, #16]
 800b504:	4b2a      	ldr	r3, [pc, #168]	; (800b5b0 <HAL_TIM_Encoder_Init+0x148>)
 800b506:	4013      	ands	r3, r2
 800b508:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68da      	ldr	r2, [r3, #12]
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	021b      	lsls	r3, r3, #8
 800b514:	4313      	orrs	r3, r2
 800b516:	693a      	ldr	r2, [r7, #16]
 800b518:	4313      	orrs	r3, r2
 800b51a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	011a      	lsls	r2, r3, #4
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	031b      	lsls	r3, r3, #12
 800b528:	4313      	orrs	r3, r2
 800b52a:	693a      	ldr	r2, [r7, #16]
 800b52c:	4313      	orrs	r3, r2
 800b52e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b536:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b53e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	685a      	ldr	r2, [r3, #4]
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	011b      	lsls	r3, r3, #4
 800b54a:	4313      	orrs	r3, r2
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	4313      	orrs	r3, r2
 800b550:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2201      	movs	r2, #1
 800b56e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2201      	movs	r2, #1
 800b576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2201      	movs	r2, #1
 800b57e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2201      	movs	r2, #1
 800b586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2201      	movs	r2, #1
 800b58e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2201      	movs	r2, #1
 800b596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3718      	adds	r7, #24
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	fffebff8 	.word	0xfffebff8
 800b5a8:	fffffcfc 	.word	0xfffffcfc
 800b5ac:	fffff3f3 	.word	0xfffff3f3
 800b5b0:	ffff0f0f 	.word	0xffff0f0f

0800b5b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b084      	sub	sp, #16
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
 800b5bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b5c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b5cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d110      	bne.n	800b606 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b5e4:	7bfb      	ldrb	r3, [r7, #15]
 800b5e6:	2b01      	cmp	r3, #1
 800b5e8:	d102      	bne.n	800b5f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800b5ea:	7b7b      	ldrb	r3, [r7, #13]
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d001      	beq.n	800b5f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	e069      	b.n	800b6c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2202      	movs	r2, #2
 800b600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b604:	e031      	b.n	800b66a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	2b04      	cmp	r3, #4
 800b60a:	d110      	bne.n	800b62e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d102      	bne.n	800b618 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b612:	7b3b      	ldrb	r3, [r7, #12]
 800b614:	2b01      	cmp	r3, #1
 800b616:	d001      	beq.n	800b61c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800b618:	2301      	movs	r3, #1
 800b61a:	e055      	b.n	800b6c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2202      	movs	r2, #2
 800b620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2202      	movs	r2, #2
 800b628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b62c:	e01d      	b.n	800b66a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	2b01      	cmp	r3, #1
 800b632:	d108      	bne.n	800b646 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800b634:	7bbb      	ldrb	r3, [r7, #14]
 800b636:	2b01      	cmp	r3, #1
 800b638:	d105      	bne.n	800b646 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800b63a:	7b7b      	ldrb	r3, [r7, #13]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d102      	bne.n	800b646 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800b640:	7b3b      	ldrb	r3, [r7, #12]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d001      	beq.n	800b64a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	e03e      	b.n	800b6c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2202      	movs	r2, #2
 800b64e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2202      	movs	r2, #2
 800b656:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2202      	movs	r2, #2
 800b65e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2202      	movs	r2, #2
 800b666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d003      	beq.n	800b678 <HAL_TIM_Encoder_Start+0xc4>
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2b04      	cmp	r3, #4
 800b674:	d008      	beq.n	800b688 <HAL_TIM_Encoder_Start+0xd4>
 800b676:	e00f      	b.n	800b698 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2201      	movs	r2, #1
 800b67e:	2100      	movs	r1, #0
 800b680:	4618      	mov	r0, r3
 800b682:	f000 f9fb 	bl	800ba7c <TIM_CCxChannelCmd>
      break;
 800b686:	e016      	b.n	800b6b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2201      	movs	r2, #1
 800b68e:	2104      	movs	r1, #4
 800b690:	4618      	mov	r0, r3
 800b692:	f000 f9f3 	bl	800ba7c <TIM_CCxChannelCmd>
      break;
 800b696:	e00e      	b.n	800b6b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2201      	movs	r2, #1
 800b69e:	2100      	movs	r1, #0
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f000 f9eb 	bl	800ba7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	2104      	movs	r1, #4
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 f9e4 	bl	800ba7c <TIM_CCxChannelCmd>
      break;
 800b6b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f042 0201 	orr.w	r2, r2, #1
 800b6c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800b6c6:	2300      	movs	r3, #0
}
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	3710      	adds	r7, #16
 800b6cc:	46bd      	mov	sp, r7
 800b6ce:	bd80      	pop	{r7, pc}

0800b6d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	691b      	ldr	r3, [r3, #16]
 800b6e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	f003 0302 	and.w	r3, r3, #2
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d020      	beq.n	800b734 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d01b      	beq.n	800b734 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f06f 0202 	mvn.w	r2, #2
 800b704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2201      	movs	r2, #1
 800b70a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	f003 0303 	and.w	r3, r3, #3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d003      	beq.n	800b722 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 f8e9 	bl	800b8f2 <HAL_TIM_IC_CaptureCallback>
 800b720:	e005      	b.n	800b72e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f000 f8db 	bl	800b8de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f8ec 	bl	800b906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2200      	movs	r2, #0
 800b732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	f003 0304 	and.w	r3, r3, #4
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d020      	beq.n	800b780 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f003 0304 	and.w	r3, r3, #4
 800b744:	2b00      	cmp	r3, #0
 800b746:	d01b      	beq.n	800b780 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f06f 0204 	mvn.w	r2, #4
 800b750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2202      	movs	r2, #2
 800b756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b762:	2b00      	cmp	r3, #0
 800b764:	d003      	beq.n	800b76e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 f8c3 	bl	800b8f2 <HAL_TIM_IC_CaptureCallback>
 800b76c:	e005      	b.n	800b77a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 f8b5 	bl	800b8de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f8c6 	bl	800b906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	f003 0308 	and.w	r3, r3, #8
 800b786:	2b00      	cmp	r3, #0
 800b788:	d020      	beq.n	800b7cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	f003 0308 	and.w	r3, r3, #8
 800b790:	2b00      	cmp	r3, #0
 800b792:	d01b      	beq.n	800b7cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f06f 0208 	mvn.w	r2, #8
 800b79c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2204      	movs	r2, #4
 800b7a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	69db      	ldr	r3, [r3, #28]
 800b7aa:	f003 0303 	and.w	r3, r3, #3
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d003      	beq.n	800b7ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 f89d 	bl	800b8f2 <HAL_TIM_IC_CaptureCallback>
 800b7b8:	e005      	b.n	800b7c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 f88f 	bl	800b8de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f8a0 	bl	800b906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	f003 0310 	and.w	r3, r3, #16
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d020      	beq.n	800b818 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f003 0310 	and.w	r3, r3, #16
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d01b      	beq.n	800b818 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f06f 0210 	mvn.w	r2, #16
 800b7e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2208      	movs	r2, #8
 800b7ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	69db      	ldr	r3, [r3, #28]
 800b7f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f877 	bl	800b8f2 <HAL_TIM_IC_CaptureCallback>
 800b804:	e005      	b.n	800b812 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f869 	bl	800b8de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f000 f87a 	bl	800b906 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2200      	movs	r2, #0
 800b816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	f003 0301 	and.w	r3, r3, #1
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00c      	beq.n	800b83c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	f003 0301 	and.w	r3, r3, #1
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d007      	beq.n	800b83c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f06f 0201 	mvn.w	r2, #1
 800b834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7f6 fce4 	bl	8002204 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b842:	2b00      	cmp	r3, #0
 800b844:	d104      	bne.n	800b850 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00c      	beq.n	800b86a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b856:	2b00      	cmp	r3, #0
 800b858:	d007      	beq.n	800b86a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800b862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f9c7 	bl	800bbf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00c      	beq.n	800b88e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d007      	beq.n	800b88e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f9bf 	bl	800bc0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b894:	2b00      	cmp	r3, #0
 800b896:	d00c      	beq.n	800b8b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d007      	beq.n	800b8b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b8aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f000 f834 	bl	800b91a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	f003 0320 	and.w	r3, r3, #32
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d00c      	beq.n	800b8d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f003 0320 	and.w	r3, r3, #32
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d007      	beq.n	800b8d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f06f 0220 	mvn.w	r2, #32
 800b8ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f987 	bl	800bbe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b8d6:	bf00      	nop
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8de:	b480      	push	{r7}
 800b8e0:	b083      	sub	sp, #12
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8e6:	bf00      	nop
 800b8e8:	370c      	adds	r7, #12
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8f2:	b480      	push	{r7}
 800b8f4:	b083      	sub	sp, #12
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8fa:	bf00      	nop
 800b8fc:	370c      	adds	r7, #12
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b906:	b480      	push	{r7}
 800b908:	b083      	sub	sp, #12
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b90e:	bf00      	nop
 800b910:	370c      	adds	r7, #12
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b083      	sub	sp, #12
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b922:	bf00      	nop
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
	...

0800b930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a46      	ldr	r2, [pc, #280]	; (800ba5c <TIM_Base_SetConfig+0x12c>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d013      	beq.n	800b970 <TIM_Base_SetConfig+0x40>
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b94e:	d00f      	beq.n	800b970 <TIM_Base_SetConfig+0x40>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	4a43      	ldr	r2, [pc, #268]	; (800ba60 <TIM_Base_SetConfig+0x130>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d00b      	beq.n	800b970 <TIM_Base_SetConfig+0x40>
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4a42      	ldr	r2, [pc, #264]	; (800ba64 <TIM_Base_SetConfig+0x134>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d007      	beq.n	800b970 <TIM_Base_SetConfig+0x40>
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	4a41      	ldr	r2, [pc, #260]	; (800ba68 <TIM_Base_SetConfig+0x138>)
 800b964:	4293      	cmp	r3, r2
 800b966:	d003      	beq.n	800b970 <TIM_Base_SetConfig+0x40>
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	4a40      	ldr	r2, [pc, #256]	; (800ba6c <TIM_Base_SetConfig+0x13c>)
 800b96c:	4293      	cmp	r3, r2
 800b96e:	d108      	bne.n	800b982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4313      	orrs	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a35      	ldr	r2, [pc, #212]	; (800ba5c <TIM_Base_SetConfig+0x12c>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d01f      	beq.n	800b9ca <TIM_Base_SetConfig+0x9a>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b990:	d01b      	beq.n	800b9ca <TIM_Base_SetConfig+0x9a>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a32      	ldr	r2, [pc, #200]	; (800ba60 <TIM_Base_SetConfig+0x130>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d017      	beq.n	800b9ca <TIM_Base_SetConfig+0x9a>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a31      	ldr	r2, [pc, #196]	; (800ba64 <TIM_Base_SetConfig+0x134>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d013      	beq.n	800b9ca <TIM_Base_SetConfig+0x9a>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a30      	ldr	r2, [pc, #192]	; (800ba68 <TIM_Base_SetConfig+0x138>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d00f      	beq.n	800b9ca <TIM_Base_SetConfig+0x9a>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a2f      	ldr	r2, [pc, #188]	; (800ba6c <TIM_Base_SetConfig+0x13c>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d00b      	beq.n	800b9ca <TIM_Base_SetConfig+0x9a>
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a2e      	ldr	r2, [pc, #184]	; (800ba70 <TIM_Base_SetConfig+0x140>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d007      	beq.n	800b9ca <TIM_Base_SetConfig+0x9a>
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	4a2d      	ldr	r2, [pc, #180]	; (800ba74 <TIM_Base_SetConfig+0x144>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	d003      	beq.n	800b9ca <TIM_Base_SetConfig+0x9a>
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a2c      	ldr	r2, [pc, #176]	; (800ba78 <TIM_Base_SetConfig+0x148>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	d108      	bne.n	800b9dc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	68db      	ldr	r3, [r3, #12]
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	695b      	ldr	r3, [r3, #20]
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	68fa      	ldr	r2, [r7, #12]
 800b9ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	689a      	ldr	r2, [r3, #8]
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4a16      	ldr	r2, [pc, #88]	; (800ba5c <TIM_Base_SetConfig+0x12c>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d00f      	beq.n	800ba28 <TIM_Base_SetConfig+0xf8>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	4a18      	ldr	r2, [pc, #96]	; (800ba6c <TIM_Base_SetConfig+0x13c>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d00b      	beq.n	800ba28 <TIM_Base_SetConfig+0xf8>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	4a17      	ldr	r2, [pc, #92]	; (800ba70 <TIM_Base_SetConfig+0x140>)
 800ba14:	4293      	cmp	r3, r2
 800ba16:	d007      	beq.n	800ba28 <TIM_Base_SetConfig+0xf8>
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	4a16      	ldr	r2, [pc, #88]	; (800ba74 <TIM_Base_SetConfig+0x144>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d003      	beq.n	800ba28 <TIM_Base_SetConfig+0xf8>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	4a15      	ldr	r2, [pc, #84]	; (800ba78 <TIM_Base_SetConfig+0x148>)
 800ba24:	4293      	cmp	r3, r2
 800ba26:	d103      	bne.n	800ba30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	691a      	ldr	r2, [r3, #16]
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	2201      	movs	r2, #1
 800ba34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d105      	bne.n	800ba4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	f023 0201 	bic.w	r2, r3, #1
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	611a      	str	r2, [r3, #16]
  }
}
 800ba4e:	bf00      	nop
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr
 800ba5a:	bf00      	nop
 800ba5c:	40010000 	.word	0x40010000
 800ba60:	40000400 	.word	0x40000400
 800ba64:	40000800 	.word	0x40000800
 800ba68:	40000c00 	.word	0x40000c00
 800ba6c:	40010400 	.word	0x40010400
 800ba70:	40014000 	.word	0x40014000
 800ba74:	40014400 	.word	0x40014400
 800ba78:	40014800 	.word	0x40014800

0800ba7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b087      	sub	sp, #28
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	f003 031f 	and.w	r3, r3, #31
 800ba8e:	2201      	movs	r2, #1
 800ba90:	fa02 f303 	lsl.w	r3, r2, r3
 800ba94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6a1a      	ldr	r2, [r3, #32]
 800ba9a:	697b      	ldr	r3, [r7, #20]
 800ba9c:	43db      	mvns	r3, r3
 800ba9e:	401a      	ands	r2, r3
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6a1a      	ldr	r2, [r3, #32]
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f003 031f 	and.w	r3, r3, #31
 800baae:	6879      	ldr	r1, [r7, #4]
 800bab0:	fa01 f303 	lsl.w	r3, r1, r3
 800bab4:	431a      	orrs	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	621a      	str	r2, [r3, #32]
}
 800baba:	bf00      	nop
 800babc:	371c      	adds	r7, #28
 800babe:	46bd      	mov	sp, r7
 800bac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac4:	4770      	bx	lr
	...

0800bac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d101      	bne.n	800bae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800badc:	2302      	movs	r3, #2
 800bade:	e06d      	b.n	800bbbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2201      	movs	r2, #1
 800bae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2202      	movs	r2, #2
 800baec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	685b      	ldr	r3, [r3, #4]
 800baf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	4a30      	ldr	r2, [pc, #192]	; (800bbc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d004      	beq.n	800bb14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	4a2f      	ldr	r2, [pc, #188]	; (800bbcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb10:	4293      	cmp	r3, r2
 800bb12:	d108      	bne.n	800bb26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800bb1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	4313      	orrs	r3, r2
 800bb24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	4313      	orrs	r3, r2
 800bb36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68fa      	ldr	r2, [r7, #12]
 800bb3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4a20      	ldr	r2, [pc, #128]	; (800bbc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d022      	beq.n	800bb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb52:	d01d      	beq.n	800bb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4a1d      	ldr	r2, [pc, #116]	; (800bbd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d018      	beq.n	800bb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a1c      	ldr	r2, [pc, #112]	; (800bbd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d013      	beq.n	800bb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a1a      	ldr	r2, [pc, #104]	; (800bbd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bb6e:	4293      	cmp	r3, r2
 800bb70:	d00e      	beq.n	800bb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	4a15      	ldr	r2, [pc, #84]	; (800bbcc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d009      	beq.n	800bb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4a16      	ldr	r2, [pc, #88]	; (800bbdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d004      	beq.n	800bb90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4a15      	ldr	r2, [pc, #84]	; (800bbe0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bb8c:	4293      	cmp	r3, r2
 800bb8e:	d10c      	bne.n	800bbaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb90:	68bb      	ldr	r3, [r7, #8]
 800bb92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	68ba      	ldr	r2, [r7, #8]
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	2201      	movs	r2, #1
 800bbae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbba:	2300      	movs	r3, #0
}
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	3714      	adds	r7, #20
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr
 800bbc8:	40010000 	.word	0x40010000
 800bbcc:	40010400 	.word	0x40010400
 800bbd0:	40000400 	.word	0x40000400
 800bbd4:	40000800 	.word	0x40000800
 800bbd8:	40000c00 	.word	0x40000c00
 800bbdc:	40001800 	.word	0x40001800
 800bbe0:	40014000 	.word	0x40014000

0800bbe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bc00:	bf00      	nop
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc14:	bf00      	nop
 800bc16:	370c      	adds	r7, #12
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b082      	sub	sp, #8
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e042      	b.n	800bcb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d106      	bne.n	800bc4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7f6 fd75 	bl	8002734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2224      	movs	r2, #36	; 0x24
 800bc4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f022 0201 	bic.w	r2, r2, #1
 800bc60:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d002      	beq.n	800bc70 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 fd90 	bl	800c790 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f000 f825 	bl	800bcc0 <UART_SetConfig>
 800bc76:	4603      	mov	r3, r0
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d101      	bne.n	800bc80 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e01b      	b.n	800bcb8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	685a      	ldr	r2, [r3, #4]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	689a      	ldr	r2, [r3, #8]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f042 0201 	orr.w	r2, r2, #1
 800bcae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f000 fe0f 	bl	800c8d4 <UART_CheckIdleState>
 800bcb6:	4603      	mov	r3, r0
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3708      	adds	r7, #8
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bd80      	pop	{r7, pc}

0800bcc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bcc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcc4:	b092      	sub	sp, #72	; 0x48
 800bcc6:	af00      	add	r7, sp, #0
 800bcc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	689a      	ldr	r2, [r3, #8]
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	691b      	ldr	r3, [r3, #16]
 800bcd8:	431a      	orrs	r2, r3
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	695b      	ldr	r3, [r3, #20]
 800bcde:	431a      	orrs	r2, r3
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	69db      	ldr	r3, [r3, #28]
 800bce4:	4313      	orrs	r3, r2
 800bce6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	4bbe      	ldr	r3, [pc, #760]	; (800bfe8 <UART_SetConfig+0x328>)
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	697a      	ldr	r2, [r7, #20]
 800bcf4:	6812      	ldr	r2, [r2, #0]
 800bcf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcf8:	430b      	orrs	r3, r1
 800bcfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	68da      	ldr	r2, [r3, #12]
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	430a      	orrs	r2, r1
 800bd10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	699b      	ldr	r3, [r3, #24]
 800bd16:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4ab3      	ldr	r2, [pc, #716]	; (800bfec <UART_SetConfig+0x32c>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d004      	beq.n	800bd2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	6a1b      	ldr	r3, [r3, #32]
 800bd26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd28:	4313      	orrs	r3, r2
 800bd2a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	689a      	ldr	r2, [r3, #8]
 800bd32:	4baf      	ldr	r3, [pc, #700]	; (800bff0 <UART_SetConfig+0x330>)
 800bd34:	4013      	ands	r3, r2
 800bd36:	697a      	ldr	r2, [r7, #20]
 800bd38:	6812      	ldr	r2, [r2, #0]
 800bd3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd3c:	430b      	orrs	r3, r1
 800bd3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd46:	f023 010f 	bic.w	r1, r3, #15
 800bd4a:	697b      	ldr	r3, [r7, #20]
 800bd4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	430a      	orrs	r2, r1
 800bd54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4aa6      	ldr	r2, [pc, #664]	; (800bff4 <UART_SetConfig+0x334>)
 800bd5c:	4293      	cmp	r3, r2
 800bd5e:	d177      	bne.n	800be50 <UART_SetConfig+0x190>
 800bd60:	4ba5      	ldr	r3, [pc, #660]	; (800bff8 <UART_SetConfig+0x338>)
 800bd62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bd68:	2b28      	cmp	r3, #40	; 0x28
 800bd6a:	d86d      	bhi.n	800be48 <UART_SetConfig+0x188>
 800bd6c:	a201      	add	r2, pc, #4	; (adr r2, 800bd74 <UART_SetConfig+0xb4>)
 800bd6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd72:	bf00      	nop
 800bd74:	0800be19 	.word	0x0800be19
 800bd78:	0800be49 	.word	0x0800be49
 800bd7c:	0800be49 	.word	0x0800be49
 800bd80:	0800be49 	.word	0x0800be49
 800bd84:	0800be49 	.word	0x0800be49
 800bd88:	0800be49 	.word	0x0800be49
 800bd8c:	0800be49 	.word	0x0800be49
 800bd90:	0800be49 	.word	0x0800be49
 800bd94:	0800be21 	.word	0x0800be21
 800bd98:	0800be49 	.word	0x0800be49
 800bd9c:	0800be49 	.word	0x0800be49
 800bda0:	0800be49 	.word	0x0800be49
 800bda4:	0800be49 	.word	0x0800be49
 800bda8:	0800be49 	.word	0x0800be49
 800bdac:	0800be49 	.word	0x0800be49
 800bdb0:	0800be49 	.word	0x0800be49
 800bdb4:	0800be29 	.word	0x0800be29
 800bdb8:	0800be49 	.word	0x0800be49
 800bdbc:	0800be49 	.word	0x0800be49
 800bdc0:	0800be49 	.word	0x0800be49
 800bdc4:	0800be49 	.word	0x0800be49
 800bdc8:	0800be49 	.word	0x0800be49
 800bdcc:	0800be49 	.word	0x0800be49
 800bdd0:	0800be49 	.word	0x0800be49
 800bdd4:	0800be31 	.word	0x0800be31
 800bdd8:	0800be49 	.word	0x0800be49
 800bddc:	0800be49 	.word	0x0800be49
 800bde0:	0800be49 	.word	0x0800be49
 800bde4:	0800be49 	.word	0x0800be49
 800bde8:	0800be49 	.word	0x0800be49
 800bdec:	0800be49 	.word	0x0800be49
 800bdf0:	0800be49 	.word	0x0800be49
 800bdf4:	0800be39 	.word	0x0800be39
 800bdf8:	0800be49 	.word	0x0800be49
 800bdfc:	0800be49 	.word	0x0800be49
 800be00:	0800be49 	.word	0x0800be49
 800be04:	0800be49 	.word	0x0800be49
 800be08:	0800be49 	.word	0x0800be49
 800be0c:	0800be49 	.word	0x0800be49
 800be10:	0800be49 	.word	0x0800be49
 800be14:	0800be41 	.word	0x0800be41
 800be18:	2301      	movs	r3, #1
 800be1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be1e:	e222      	b.n	800c266 <UART_SetConfig+0x5a6>
 800be20:	2304      	movs	r3, #4
 800be22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be26:	e21e      	b.n	800c266 <UART_SetConfig+0x5a6>
 800be28:	2308      	movs	r3, #8
 800be2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be2e:	e21a      	b.n	800c266 <UART_SetConfig+0x5a6>
 800be30:	2310      	movs	r3, #16
 800be32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be36:	e216      	b.n	800c266 <UART_SetConfig+0x5a6>
 800be38:	2320      	movs	r3, #32
 800be3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be3e:	e212      	b.n	800c266 <UART_SetConfig+0x5a6>
 800be40:	2340      	movs	r3, #64	; 0x40
 800be42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be46:	e20e      	b.n	800c266 <UART_SetConfig+0x5a6>
 800be48:	2380      	movs	r3, #128	; 0x80
 800be4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be4e:	e20a      	b.n	800c266 <UART_SetConfig+0x5a6>
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	4a69      	ldr	r2, [pc, #420]	; (800bffc <UART_SetConfig+0x33c>)
 800be56:	4293      	cmp	r3, r2
 800be58:	d130      	bne.n	800bebc <UART_SetConfig+0x1fc>
 800be5a:	4b67      	ldr	r3, [pc, #412]	; (800bff8 <UART_SetConfig+0x338>)
 800be5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5e:	f003 0307 	and.w	r3, r3, #7
 800be62:	2b05      	cmp	r3, #5
 800be64:	d826      	bhi.n	800beb4 <UART_SetConfig+0x1f4>
 800be66:	a201      	add	r2, pc, #4	; (adr r2, 800be6c <UART_SetConfig+0x1ac>)
 800be68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6c:	0800be85 	.word	0x0800be85
 800be70:	0800be8d 	.word	0x0800be8d
 800be74:	0800be95 	.word	0x0800be95
 800be78:	0800be9d 	.word	0x0800be9d
 800be7c:	0800bea5 	.word	0x0800bea5
 800be80:	0800bead 	.word	0x0800bead
 800be84:	2300      	movs	r3, #0
 800be86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be8a:	e1ec      	b.n	800c266 <UART_SetConfig+0x5a6>
 800be8c:	2304      	movs	r3, #4
 800be8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be92:	e1e8      	b.n	800c266 <UART_SetConfig+0x5a6>
 800be94:	2308      	movs	r3, #8
 800be96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800be9a:	e1e4      	b.n	800c266 <UART_SetConfig+0x5a6>
 800be9c:	2310      	movs	r3, #16
 800be9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bea2:	e1e0      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bea4:	2320      	movs	r3, #32
 800bea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beaa:	e1dc      	b.n	800c266 <UART_SetConfig+0x5a6>
 800beac:	2340      	movs	r3, #64	; 0x40
 800beae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beb2:	e1d8      	b.n	800c266 <UART_SetConfig+0x5a6>
 800beb4:	2380      	movs	r3, #128	; 0x80
 800beb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800beba:	e1d4      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	4a4f      	ldr	r2, [pc, #316]	; (800c000 <UART_SetConfig+0x340>)
 800bec2:	4293      	cmp	r3, r2
 800bec4:	d130      	bne.n	800bf28 <UART_SetConfig+0x268>
 800bec6:	4b4c      	ldr	r3, [pc, #304]	; (800bff8 <UART_SetConfig+0x338>)
 800bec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beca:	f003 0307 	and.w	r3, r3, #7
 800bece:	2b05      	cmp	r3, #5
 800bed0:	d826      	bhi.n	800bf20 <UART_SetConfig+0x260>
 800bed2:	a201      	add	r2, pc, #4	; (adr r2, 800bed8 <UART_SetConfig+0x218>)
 800bed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bed8:	0800bef1 	.word	0x0800bef1
 800bedc:	0800bef9 	.word	0x0800bef9
 800bee0:	0800bf01 	.word	0x0800bf01
 800bee4:	0800bf09 	.word	0x0800bf09
 800bee8:	0800bf11 	.word	0x0800bf11
 800beec:	0800bf19 	.word	0x0800bf19
 800bef0:	2300      	movs	r3, #0
 800bef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bef6:	e1b6      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bef8:	2304      	movs	r3, #4
 800befa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800befe:	e1b2      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf00:	2308      	movs	r3, #8
 800bf02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf06:	e1ae      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf08:	2310      	movs	r3, #16
 800bf0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf0e:	e1aa      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf10:	2320      	movs	r3, #32
 800bf12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf16:	e1a6      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf18:	2340      	movs	r3, #64	; 0x40
 800bf1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf1e:	e1a2      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf20:	2380      	movs	r3, #128	; 0x80
 800bf22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf26:	e19e      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a35      	ldr	r2, [pc, #212]	; (800c004 <UART_SetConfig+0x344>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d130      	bne.n	800bf94 <UART_SetConfig+0x2d4>
 800bf32:	4b31      	ldr	r3, [pc, #196]	; (800bff8 <UART_SetConfig+0x338>)
 800bf34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf36:	f003 0307 	and.w	r3, r3, #7
 800bf3a:	2b05      	cmp	r3, #5
 800bf3c:	d826      	bhi.n	800bf8c <UART_SetConfig+0x2cc>
 800bf3e:	a201      	add	r2, pc, #4	; (adr r2, 800bf44 <UART_SetConfig+0x284>)
 800bf40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf44:	0800bf5d 	.word	0x0800bf5d
 800bf48:	0800bf65 	.word	0x0800bf65
 800bf4c:	0800bf6d 	.word	0x0800bf6d
 800bf50:	0800bf75 	.word	0x0800bf75
 800bf54:	0800bf7d 	.word	0x0800bf7d
 800bf58:	0800bf85 	.word	0x0800bf85
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf62:	e180      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf64:	2304      	movs	r3, #4
 800bf66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf6a:	e17c      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf6c:	2308      	movs	r3, #8
 800bf6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf72:	e178      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf74:	2310      	movs	r3, #16
 800bf76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf7a:	e174      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf7c:	2320      	movs	r3, #32
 800bf7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf82:	e170      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf84:	2340      	movs	r3, #64	; 0x40
 800bf86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf8a:	e16c      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf8c:	2380      	movs	r3, #128	; 0x80
 800bf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf92:	e168      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a1b      	ldr	r2, [pc, #108]	; (800c008 <UART_SetConfig+0x348>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d142      	bne.n	800c024 <UART_SetConfig+0x364>
 800bf9e:	4b16      	ldr	r3, [pc, #88]	; (800bff8 <UART_SetConfig+0x338>)
 800bfa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa2:	f003 0307 	and.w	r3, r3, #7
 800bfa6:	2b05      	cmp	r3, #5
 800bfa8:	d838      	bhi.n	800c01c <UART_SetConfig+0x35c>
 800bfaa:	a201      	add	r2, pc, #4	; (adr r2, 800bfb0 <UART_SetConfig+0x2f0>)
 800bfac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb0:	0800bfc9 	.word	0x0800bfc9
 800bfb4:	0800bfd1 	.word	0x0800bfd1
 800bfb8:	0800bfd9 	.word	0x0800bfd9
 800bfbc:	0800bfe1 	.word	0x0800bfe1
 800bfc0:	0800c00d 	.word	0x0800c00d
 800bfc4:	0800c015 	.word	0x0800c015
 800bfc8:	2300      	movs	r3, #0
 800bfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfce:	e14a      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bfd0:	2304      	movs	r3, #4
 800bfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfd6:	e146      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bfd8:	2308      	movs	r3, #8
 800bfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfde:	e142      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bfe0:	2310      	movs	r3, #16
 800bfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfe6:	e13e      	b.n	800c266 <UART_SetConfig+0x5a6>
 800bfe8:	cfff69f3 	.word	0xcfff69f3
 800bfec:	58000c00 	.word	0x58000c00
 800bff0:	11fff4ff 	.word	0x11fff4ff
 800bff4:	40011000 	.word	0x40011000
 800bff8:	58024400 	.word	0x58024400
 800bffc:	40004400 	.word	0x40004400
 800c000:	40004800 	.word	0x40004800
 800c004:	40004c00 	.word	0x40004c00
 800c008:	40005000 	.word	0x40005000
 800c00c:	2320      	movs	r3, #32
 800c00e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c012:	e128      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c014:	2340      	movs	r3, #64	; 0x40
 800c016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01a:	e124      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c01c:	2380      	movs	r3, #128	; 0x80
 800c01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c022:	e120      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	4acb      	ldr	r2, [pc, #812]	; (800c358 <UART_SetConfig+0x698>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d176      	bne.n	800c11c <UART_SetConfig+0x45c>
 800c02e:	4bcb      	ldr	r3, [pc, #812]	; (800c35c <UART_SetConfig+0x69c>)
 800c030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c036:	2b28      	cmp	r3, #40	; 0x28
 800c038:	d86c      	bhi.n	800c114 <UART_SetConfig+0x454>
 800c03a:	a201      	add	r2, pc, #4	; (adr r2, 800c040 <UART_SetConfig+0x380>)
 800c03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c040:	0800c0e5 	.word	0x0800c0e5
 800c044:	0800c115 	.word	0x0800c115
 800c048:	0800c115 	.word	0x0800c115
 800c04c:	0800c115 	.word	0x0800c115
 800c050:	0800c115 	.word	0x0800c115
 800c054:	0800c115 	.word	0x0800c115
 800c058:	0800c115 	.word	0x0800c115
 800c05c:	0800c115 	.word	0x0800c115
 800c060:	0800c0ed 	.word	0x0800c0ed
 800c064:	0800c115 	.word	0x0800c115
 800c068:	0800c115 	.word	0x0800c115
 800c06c:	0800c115 	.word	0x0800c115
 800c070:	0800c115 	.word	0x0800c115
 800c074:	0800c115 	.word	0x0800c115
 800c078:	0800c115 	.word	0x0800c115
 800c07c:	0800c115 	.word	0x0800c115
 800c080:	0800c0f5 	.word	0x0800c0f5
 800c084:	0800c115 	.word	0x0800c115
 800c088:	0800c115 	.word	0x0800c115
 800c08c:	0800c115 	.word	0x0800c115
 800c090:	0800c115 	.word	0x0800c115
 800c094:	0800c115 	.word	0x0800c115
 800c098:	0800c115 	.word	0x0800c115
 800c09c:	0800c115 	.word	0x0800c115
 800c0a0:	0800c0fd 	.word	0x0800c0fd
 800c0a4:	0800c115 	.word	0x0800c115
 800c0a8:	0800c115 	.word	0x0800c115
 800c0ac:	0800c115 	.word	0x0800c115
 800c0b0:	0800c115 	.word	0x0800c115
 800c0b4:	0800c115 	.word	0x0800c115
 800c0b8:	0800c115 	.word	0x0800c115
 800c0bc:	0800c115 	.word	0x0800c115
 800c0c0:	0800c105 	.word	0x0800c105
 800c0c4:	0800c115 	.word	0x0800c115
 800c0c8:	0800c115 	.word	0x0800c115
 800c0cc:	0800c115 	.word	0x0800c115
 800c0d0:	0800c115 	.word	0x0800c115
 800c0d4:	0800c115 	.word	0x0800c115
 800c0d8:	0800c115 	.word	0x0800c115
 800c0dc:	0800c115 	.word	0x0800c115
 800c0e0:	0800c10d 	.word	0x0800c10d
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ea:	e0bc      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c0ec:	2304      	movs	r3, #4
 800c0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f2:	e0b8      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c0f4:	2308      	movs	r3, #8
 800c0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fa:	e0b4      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c0fc:	2310      	movs	r3, #16
 800c0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c102:	e0b0      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c104:	2320      	movs	r3, #32
 800c106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c10a:	e0ac      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c10c:	2340      	movs	r3, #64	; 0x40
 800c10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c112:	e0a8      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c114:	2380      	movs	r3, #128	; 0x80
 800c116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c11a:	e0a4      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a8f      	ldr	r2, [pc, #572]	; (800c360 <UART_SetConfig+0x6a0>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d130      	bne.n	800c188 <UART_SetConfig+0x4c8>
 800c126:	4b8d      	ldr	r3, [pc, #564]	; (800c35c <UART_SetConfig+0x69c>)
 800c128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c12a:	f003 0307 	and.w	r3, r3, #7
 800c12e:	2b05      	cmp	r3, #5
 800c130:	d826      	bhi.n	800c180 <UART_SetConfig+0x4c0>
 800c132:	a201      	add	r2, pc, #4	; (adr r2, 800c138 <UART_SetConfig+0x478>)
 800c134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c138:	0800c151 	.word	0x0800c151
 800c13c:	0800c159 	.word	0x0800c159
 800c140:	0800c161 	.word	0x0800c161
 800c144:	0800c169 	.word	0x0800c169
 800c148:	0800c171 	.word	0x0800c171
 800c14c:	0800c179 	.word	0x0800c179
 800c150:	2300      	movs	r3, #0
 800c152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c156:	e086      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c158:	2304      	movs	r3, #4
 800c15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15e:	e082      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c160:	2308      	movs	r3, #8
 800c162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c166:	e07e      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c168:	2310      	movs	r3, #16
 800c16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c16e:	e07a      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c170:	2320      	movs	r3, #32
 800c172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c176:	e076      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c178:	2340      	movs	r3, #64	; 0x40
 800c17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c17e:	e072      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c180:	2380      	movs	r3, #128	; 0x80
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c186:	e06e      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a75      	ldr	r2, [pc, #468]	; (800c364 <UART_SetConfig+0x6a4>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d130      	bne.n	800c1f4 <UART_SetConfig+0x534>
 800c192:	4b72      	ldr	r3, [pc, #456]	; (800c35c <UART_SetConfig+0x69c>)
 800c194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c196:	f003 0307 	and.w	r3, r3, #7
 800c19a:	2b05      	cmp	r3, #5
 800c19c:	d826      	bhi.n	800c1ec <UART_SetConfig+0x52c>
 800c19e:	a201      	add	r2, pc, #4	; (adr r2, 800c1a4 <UART_SetConfig+0x4e4>)
 800c1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a4:	0800c1bd 	.word	0x0800c1bd
 800c1a8:	0800c1c5 	.word	0x0800c1c5
 800c1ac:	0800c1cd 	.word	0x0800c1cd
 800c1b0:	0800c1d5 	.word	0x0800c1d5
 800c1b4:	0800c1dd 	.word	0x0800c1dd
 800c1b8:	0800c1e5 	.word	0x0800c1e5
 800c1bc:	2300      	movs	r3, #0
 800c1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1c2:	e050      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c1c4:	2304      	movs	r3, #4
 800c1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ca:	e04c      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c1cc:	2308      	movs	r3, #8
 800c1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1d2:	e048      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c1d4:	2310      	movs	r3, #16
 800c1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1da:	e044      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c1dc:	2320      	movs	r3, #32
 800c1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1e2:	e040      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c1e4:	2340      	movs	r3, #64	; 0x40
 800c1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1ea:	e03c      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c1ec:	2380      	movs	r3, #128	; 0x80
 800c1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c1f2:	e038      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	4a5b      	ldr	r2, [pc, #364]	; (800c368 <UART_SetConfig+0x6a8>)
 800c1fa:	4293      	cmp	r3, r2
 800c1fc:	d130      	bne.n	800c260 <UART_SetConfig+0x5a0>
 800c1fe:	4b57      	ldr	r3, [pc, #348]	; (800c35c <UART_SetConfig+0x69c>)
 800c200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c202:	f003 0307 	and.w	r3, r3, #7
 800c206:	2b05      	cmp	r3, #5
 800c208:	d826      	bhi.n	800c258 <UART_SetConfig+0x598>
 800c20a:	a201      	add	r2, pc, #4	; (adr r2, 800c210 <UART_SetConfig+0x550>)
 800c20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c210:	0800c229 	.word	0x0800c229
 800c214:	0800c231 	.word	0x0800c231
 800c218:	0800c239 	.word	0x0800c239
 800c21c:	0800c241 	.word	0x0800c241
 800c220:	0800c249 	.word	0x0800c249
 800c224:	0800c251 	.word	0x0800c251
 800c228:	2302      	movs	r3, #2
 800c22a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c22e:	e01a      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c230:	2304      	movs	r3, #4
 800c232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c236:	e016      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c238:	2308      	movs	r3, #8
 800c23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c23e:	e012      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c240:	2310      	movs	r3, #16
 800c242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c246:	e00e      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c248:	2320      	movs	r3, #32
 800c24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c24e:	e00a      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c250:	2340      	movs	r3, #64	; 0x40
 800c252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c256:	e006      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c258:	2380      	movs	r3, #128	; 0x80
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e002      	b.n	800c266 <UART_SetConfig+0x5a6>
 800c260:	2380      	movs	r3, #128	; 0x80
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4a3f      	ldr	r2, [pc, #252]	; (800c368 <UART_SetConfig+0x6a8>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	f040 80f8 	bne.w	800c462 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c272:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c276:	2b20      	cmp	r3, #32
 800c278:	dc46      	bgt.n	800c308 <UART_SetConfig+0x648>
 800c27a:	2b02      	cmp	r3, #2
 800c27c:	f2c0 8082 	blt.w	800c384 <UART_SetConfig+0x6c4>
 800c280:	3b02      	subs	r3, #2
 800c282:	2b1e      	cmp	r3, #30
 800c284:	d87e      	bhi.n	800c384 <UART_SetConfig+0x6c4>
 800c286:	a201      	add	r2, pc, #4	; (adr r2, 800c28c <UART_SetConfig+0x5cc>)
 800c288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c28c:	0800c30f 	.word	0x0800c30f
 800c290:	0800c385 	.word	0x0800c385
 800c294:	0800c317 	.word	0x0800c317
 800c298:	0800c385 	.word	0x0800c385
 800c29c:	0800c385 	.word	0x0800c385
 800c2a0:	0800c385 	.word	0x0800c385
 800c2a4:	0800c327 	.word	0x0800c327
 800c2a8:	0800c385 	.word	0x0800c385
 800c2ac:	0800c385 	.word	0x0800c385
 800c2b0:	0800c385 	.word	0x0800c385
 800c2b4:	0800c385 	.word	0x0800c385
 800c2b8:	0800c385 	.word	0x0800c385
 800c2bc:	0800c385 	.word	0x0800c385
 800c2c0:	0800c385 	.word	0x0800c385
 800c2c4:	0800c337 	.word	0x0800c337
 800c2c8:	0800c385 	.word	0x0800c385
 800c2cc:	0800c385 	.word	0x0800c385
 800c2d0:	0800c385 	.word	0x0800c385
 800c2d4:	0800c385 	.word	0x0800c385
 800c2d8:	0800c385 	.word	0x0800c385
 800c2dc:	0800c385 	.word	0x0800c385
 800c2e0:	0800c385 	.word	0x0800c385
 800c2e4:	0800c385 	.word	0x0800c385
 800c2e8:	0800c385 	.word	0x0800c385
 800c2ec:	0800c385 	.word	0x0800c385
 800c2f0:	0800c385 	.word	0x0800c385
 800c2f4:	0800c385 	.word	0x0800c385
 800c2f8:	0800c385 	.word	0x0800c385
 800c2fc:	0800c385 	.word	0x0800c385
 800c300:	0800c385 	.word	0x0800c385
 800c304:	0800c377 	.word	0x0800c377
 800c308:	2b40      	cmp	r3, #64	; 0x40
 800c30a:	d037      	beq.n	800c37c <UART_SetConfig+0x6bc>
 800c30c:	e03a      	b.n	800c384 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c30e:	f7fe fb37 	bl	800a980 <HAL_RCCEx_GetD3PCLK1Freq>
 800c312:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c314:	e03c      	b.n	800c390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7fe fb46 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c322:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c324:	e034      	b.n	800c390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c326:	f107 0318 	add.w	r3, r7, #24
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe fc92 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c334:	e02c      	b.n	800c390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c336:	4b09      	ldr	r3, [pc, #36]	; (800c35c <UART_SetConfig+0x69c>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f003 0320 	and.w	r3, r3, #32
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d016      	beq.n	800c370 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c342:	4b06      	ldr	r3, [pc, #24]	; (800c35c <UART_SetConfig+0x69c>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	08db      	lsrs	r3, r3, #3
 800c348:	f003 0303 	and.w	r3, r3, #3
 800c34c:	4a07      	ldr	r2, [pc, #28]	; (800c36c <UART_SetConfig+0x6ac>)
 800c34e:	fa22 f303 	lsr.w	r3, r2, r3
 800c352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c354:	e01c      	b.n	800c390 <UART_SetConfig+0x6d0>
 800c356:	bf00      	nop
 800c358:	40011400 	.word	0x40011400
 800c35c:	58024400 	.word	0x58024400
 800c360:	40007800 	.word	0x40007800
 800c364:	40007c00 	.word	0x40007c00
 800c368:	58000c00 	.word	0x58000c00
 800c36c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c370:	4b9d      	ldr	r3, [pc, #628]	; (800c5e8 <UART_SetConfig+0x928>)
 800c372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c374:	e00c      	b.n	800c390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c376:	4b9d      	ldr	r3, [pc, #628]	; (800c5ec <UART_SetConfig+0x92c>)
 800c378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c37a:	e009      	b.n	800c390 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c37c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c382:	e005      	b.n	800c390 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c384:	2300      	movs	r3, #0
 800c386:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c388:	2301      	movs	r3, #1
 800c38a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c38e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 81de 	beq.w	800c754 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c39c:	4a94      	ldr	r2, [pc, #592]	; (800c5f0 <UART_SetConfig+0x930>)
 800c39e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a6:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3aa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	685a      	ldr	r2, [r3, #4]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	4413      	add	r3, r2
 800c3b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d305      	bcc.n	800c3c8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c3bc:	697b      	ldr	r3, [r7, #20]
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c3c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d903      	bls.n	800c3d0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c3c8:	2301      	movs	r3, #1
 800c3ca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c3ce:	e1c1      	b.n	800c754 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	60bb      	str	r3, [r7, #8]
 800c3d6:	60fa      	str	r2, [r7, #12]
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3dc:	4a84      	ldr	r2, [pc, #528]	; (800c5f0 <UART_SetConfig+0x930>)
 800c3de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	603b      	str	r3, [r7, #0]
 800c3e8:	607a      	str	r2, [r7, #4]
 800c3ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c3f2:	f7f3 ff71 	bl	80002d8 <__aeabi_uldivmod>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4610      	mov	r0, r2
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	f04f 0200 	mov.w	r2, #0
 800c402:	f04f 0300 	mov.w	r3, #0
 800c406:	020b      	lsls	r3, r1, #8
 800c408:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c40c:	0202      	lsls	r2, r0, #8
 800c40e:	6979      	ldr	r1, [r7, #20]
 800c410:	6849      	ldr	r1, [r1, #4]
 800c412:	0849      	lsrs	r1, r1, #1
 800c414:	2000      	movs	r0, #0
 800c416:	460c      	mov	r4, r1
 800c418:	4605      	mov	r5, r0
 800c41a:	eb12 0804 	adds.w	r8, r2, r4
 800c41e:	eb43 0905 	adc.w	r9, r3, r5
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	685b      	ldr	r3, [r3, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	469a      	mov	sl, r3
 800c42a:	4693      	mov	fp, r2
 800c42c:	4652      	mov	r2, sl
 800c42e:	465b      	mov	r3, fp
 800c430:	4640      	mov	r0, r8
 800c432:	4649      	mov	r1, r9
 800c434:	f7f3 ff50 	bl	80002d8 <__aeabi_uldivmod>
 800c438:	4602      	mov	r2, r0
 800c43a:	460b      	mov	r3, r1
 800c43c:	4613      	mov	r3, r2
 800c43e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c446:	d308      	bcc.n	800c45a <UART_SetConfig+0x79a>
 800c448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c44e:	d204      	bcs.n	800c45a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c456:	60da      	str	r2, [r3, #12]
 800c458:	e17c      	b.n	800c754 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c45a:	2301      	movs	r3, #1
 800c45c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c460:	e178      	b.n	800c754 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	69db      	ldr	r3, [r3, #28]
 800c466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c46a:	f040 80c5 	bne.w	800c5f8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c46e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c472:	2b20      	cmp	r3, #32
 800c474:	dc48      	bgt.n	800c508 <UART_SetConfig+0x848>
 800c476:	2b00      	cmp	r3, #0
 800c478:	db7b      	blt.n	800c572 <UART_SetConfig+0x8b2>
 800c47a:	2b20      	cmp	r3, #32
 800c47c:	d879      	bhi.n	800c572 <UART_SetConfig+0x8b2>
 800c47e:	a201      	add	r2, pc, #4	; (adr r2, 800c484 <UART_SetConfig+0x7c4>)
 800c480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c484:	0800c50f 	.word	0x0800c50f
 800c488:	0800c517 	.word	0x0800c517
 800c48c:	0800c573 	.word	0x0800c573
 800c490:	0800c573 	.word	0x0800c573
 800c494:	0800c51f 	.word	0x0800c51f
 800c498:	0800c573 	.word	0x0800c573
 800c49c:	0800c573 	.word	0x0800c573
 800c4a0:	0800c573 	.word	0x0800c573
 800c4a4:	0800c52f 	.word	0x0800c52f
 800c4a8:	0800c573 	.word	0x0800c573
 800c4ac:	0800c573 	.word	0x0800c573
 800c4b0:	0800c573 	.word	0x0800c573
 800c4b4:	0800c573 	.word	0x0800c573
 800c4b8:	0800c573 	.word	0x0800c573
 800c4bc:	0800c573 	.word	0x0800c573
 800c4c0:	0800c573 	.word	0x0800c573
 800c4c4:	0800c53f 	.word	0x0800c53f
 800c4c8:	0800c573 	.word	0x0800c573
 800c4cc:	0800c573 	.word	0x0800c573
 800c4d0:	0800c573 	.word	0x0800c573
 800c4d4:	0800c573 	.word	0x0800c573
 800c4d8:	0800c573 	.word	0x0800c573
 800c4dc:	0800c573 	.word	0x0800c573
 800c4e0:	0800c573 	.word	0x0800c573
 800c4e4:	0800c573 	.word	0x0800c573
 800c4e8:	0800c573 	.word	0x0800c573
 800c4ec:	0800c573 	.word	0x0800c573
 800c4f0:	0800c573 	.word	0x0800c573
 800c4f4:	0800c573 	.word	0x0800c573
 800c4f8:	0800c573 	.word	0x0800c573
 800c4fc:	0800c573 	.word	0x0800c573
 800c500:	0800c573 	.word	0x0800c573
 800c504:	0800c565 	.word	0x0800c565
 800c508:	2b40      	cmp	r3, #64	; 0x40
 800c50a:	d02e      	beq.n	800c56a <UART_SetConfig+0x8aa>
 800c50c:	e031      	b.n	800c572 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c50e:	f7fc fa81 	bl	8008a14 <HAL_RCC_GetPCLK1Freq>
 800c512:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c514:	e033      	b.n	800c57e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c516:	f7fc fa93 	bl	8008a40 <HAL_RCC_GetPCLK2Freq>
 800c51a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c51c:	e02f      	b.n	800c57e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c51e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c522:	4618      	mov	r0, r3
 800c524:	f7fe fa42 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c52c:	e027      	b.n	800c57e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c52e:	f107 0318 	add.w	r3, r7, #24
 800c532:	4618      	mov	r0, r3
 800c534:	f7fe fb8e 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c538:	69fb      	ldr	r3, [r7, #28]
 800c53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c53c:	e01f      	b.n	800c57e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c53e:	4b2d      	ldr	r3, [pc, #180]	; (800c5f4 <UART_SetConfig+0x934>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f003 0320 	and.w	r3, r3, #32
 800c546:	2b00      	cmp	r3, #0
 800c548:	d009      	beq.n	800c55e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c54a:	4b2a      	ldr	r3, [pc, #168]	; (800c5f4 <UART_SetConfig+0x934>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	08db      	lsrs	r3, r3, #3
 800c550:	f003 0303 	and.w	r3, r3, #3
 800c554:	4a24      	ldr	r2, [pc, #144]	; (800c5e8 <UART_SetConfig+0x928>)
 800c556:	fa22 f303 	lsr.w	r3, r2, r3
 800c55a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c55c:	e00f      	b.n	800c57e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c55e:	4b22      	ldr	r3, [pc, #136]	; (800c5e8 <UART_SetConfig+0x928>)
 800c560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c562:	e00c      	b.n	800c57e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c564:	4b21      	ldr	r3, [pc, #132]	; (800c5ec <UART_SetConfig+0x92c>)
 800c566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c568:	e009      	b.n	800c57e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c56a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c570:	e005      	b.n	800c57e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c572:	2300      	movs	r3, #0
 800c574:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c576:	2301      	movs	r3, #1
 800c578:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c57c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c580:	2b00      	cmp	r3, #0
 800c582:	f000 80e7 	beq.w	800c754 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c58a:	4a19      	ldr	r2, [pc, #100]	; (800c5f0 <UART_SetConfig+0x930>)
 800c58c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c590:	461a      	mov	r2, r3
 800c592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c594:	fbb3 f3f2 	udiv	r3, r3, r2
 800c598:	005a      	lsls	r2, r3, #1
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	085b      	lsrs	r3, r3, #1
 800c5a0:	441a      	add	r2, r3
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c5aa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ae:	2b0f      	cmp	r3, #15
 800c5b0:	d916      	bls.n	800c5e0 <UART_SetConfig+0x920>
 800c5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5b8:	d212      	bcs.n	800c5e0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5bc:	b29b      	uxth	r3, r3
 800c5be:	f023 030f 	bic.w	r3, r3, #15
 800c5c2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c5c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c6:	085b      	lsrs	r3, r3, #1
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	f003 0307 	and.w	r3, r3, #7
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c5dc:	60da      	str	r2, [r3, #12]
 800c5de:	e0b9      	b.n	800c754 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c5e6:	e0b5      	b.n	800c754 <UART_SetConfig+0xa94>
 800c5e8:	03d09000 	.word	0x03d09000
 800c5ec:	003d0900 	.word	0x003d0900
 800c5f0:	0800cec8 	.word	0x0800cec8
 800c5f4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c5f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c5fc:	2b20      	cmp	r3, #32
 800c5fe:	dc49      	bgt.n	800c694 <UART_SetConfig+0x9d4>
 800c600:	2b00      	cmp	r3, #0
 800c602:	db7c      	blt.n	800c6fe <UART_SetConfig+0xa3e>
 800c604:	2b20      	cmp	r3, #32
 800c606:	d87a      	bhi.n	800c6fe <UART_SetConfig+0xa3e>
 800c608:	a201      	add	r2, pc, #4	; (adr r2, 800c610 <UART_SetConfig+0x950>)
 800c60a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c60e:	bf00      	nop
 800c610:	0800c69b 	.word	0x0800c69b
 800c614:	0800c6a3 	.word	0x0800c6a3
 800c618:	0800c6ff 	.word	0x0800c6ff
 800c61c:	0800c6ff 	.word	0x0800c6ff
 800c620:	0800c6ab 	.word	0x0800c6ab
 800c624:	0800c6ff 	.word	0x0800c6ff
 800c628:	0800c6ff 	.word	0x0800c6ff
 800c62c:	0800c6ff 	.word	0x0800c6ff
 800c630:	0800c6bb 	.word	0x0800c6bb
 800c634:	0800c6ff 	.word	0x0800c6ff
 800c638:	0800c6ff 	.word	0x0800c6ff
 800c63c:	0800c6ff 	.word	0x0800c6ff
 800c640:	0800c6ff 	.word	0x0800c6ff
 800c644:	0800c6ff 	.word	0x0800c6ff
 800c648:	0800c6ff 	.word	0x0800c6ff
 800c64c:	0800c6ff 	.word	0x0800c6ff
 800c650:	0800c6cb 	.word	0x0800c6cb
 800c654:	0800c6ff 	.word	0x0800c6ff
 800c658:	0800c6ff 	.word	0x0800c6ff
 800c65c:	0800c6ff 	.word	0x0800c6ff
 800c660:	0800c6ff 	.word	0x0800c6ff
 800c664:	0800c6ff 	.word	0x0800c6ff
 800c668:	0800c6ff 	.word	0x0800c6ff
 800c66c:	0800c6ff 	.word	0x0800c6ff
 800c670:	0800c6ff 	.word	0x0800c6ff
 800c674:	0800c6ff 	.word	0x0800c6ff
 800c678:	0800c6ff 	.word	0x0800c6ff
 800c67c:	0800c6ff 	.word	0x0800c6ff
 800c680:	0800c6ff 	.word	0x0800c6ff
 800c684:	0800c6ff 	.word	0x0800c6ff
 800c688:	0800c6ff 	.word	0x0800c6ff
 800c68c:	0800c6ff 	.word	0x0800c6ff
 800c690:	0800c6f1 	.word	0x0800c6f1
 800c694:	2b40      	cmp	r3, #64	; 0x40
 800c696:	d02e      	beq.n	800c6f6 <UART_SetConfig+0xa36>
 800c698:	e031      	b.n	800c6fe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c69a:	f7fc f9bb 	bl	8008a14 <HAL_RCC_GetPCLK1Freq>
 800c69e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6a0:	e033      	b.n	800c70a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c6a2:	f7fc f9cd 	bl	8008a40 <HAL_RCC_GetPCLK2Freq>
 800c6a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c6a8:	e02f      	b.n	800c70a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fe f97c 	bl	800a9ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b8:	e027      	b.n	800c70a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6ba:	f107 0318 	add.w	r3, r7, #24
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7fe fac8 	bl	800ac54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c8:	e01f      	b.n	800c70a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6ca:	4b2d      	ldr	r3, [pc, #180]	; (800c780 <UART_SetConfig+0xac0>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0320 	and.w	r3, r3, #32
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d009      	beq.n	800c6ea <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6d6:	4b2a      	ldr	r3, [pc, #168]	; (800c780 <UART_SetConfig+0xac0>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	08db      	lsrs	r3, r3, #3
 800c6dc:	f003 0303 	and.w	r3, r3, #3
 800c6e0:	4a28      	ldr	r2, [pc, #160]	; (800c784 <UART_SetConfig+0xac4>)
 800c6e2:	fa22 f303 	lsr.w	r3, r2, r3
 800c6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6e8:	e00f      	b.n	800c70a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c6ea:	4b26      	ldr	r3, [pc, #152]	; (800c784 <UART_SetConfig+0xac4>)
 800c6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ee:	e00c      	b.n	800c70a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6f0:	4b25      	ldr	r3, [pc, #148]	; (800c788 <UART_SetConfig+0xac8>)
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f4:	e009      	b.n	800c70a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6fc:	e005      	b.n	800c70a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c6fe:	2300      	movs	r3, #0
 800c700:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c702:	2301      	movs	r3, #1
 800c704:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c708:	bf00      	nop
    }

    if (pclk != 0U)
 800c70a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d021      	beq.n	800c754 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c714:	4a1d      	ldr	r2, [pc, #116]	; (800c78c <UART_SetConfig+0xacc>)
 800c716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c71a:	461a      	mov	r2, r3
 800c71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c71e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	085b      	lsrs	r3, r3, #1
 800c728:	441a      	add	r2, r3
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c732:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c736:	2b0f      	cmp	r3, #15
 800c738:	d909      	bls.n	800c74e <UART_SetConfig+0xa8e>
 800c73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c740:	d205      	bcs.n	800c74e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c744:	b29a      	uxth	r2, r3
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	60da      	str	r2, [r3, #12]
 800c74c:	e002      	b.n	800c754 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	2201      	movs	r2, #1
 800c758:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	2201      	movs	r2, #1
 800c760:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	2200      	movs	r2, #0
 800c768:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c76a:	697b      	ldr	r3, [r7, #20]
 800c76c:	2200      	movs	r2, #0
 800c76e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c770:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c774:	4618      	mov	r0, r3
 800c776:	3748      	adds	r7, #72	; 0x48
 800c778:	46bd      	mov	sp, r7
 800c77a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c77e:	bf00      	nop
 800c780:	58024400 	.word	0x58024400
 800c784:	03d09000 	.word	0x03d09000
 800c788:	003d0900 	.word	0x003d0900
 800c78c:	0800cec8 	.word	0x0800cec8

0800c790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c79c:	f003 0308 	and.w	r3, r3, #8
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d00a      	beq.n	800c7ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	685b      	ldr	r3, [r3, #4]
 800c7aa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	430a      	orrs	r2, r1
 800c7b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7be:	f003 0301 	and.w	r3, r3, #1
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d00a      	beq.n	800c7dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	685b      	ldr	r3, [r3, #4]
 800c7cc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	430a      	orrs	r2, r1
 800c7da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7e0:	f003 0302 	and.w	r3, r3, #2
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00a      	beq.n	800c7fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	430a      	orrs	r2, r1
 800c7fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c802:	f003 0304 	and.w	r3, r3, #4
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00a      	beq.n	800c820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	430a      	orrs	r2, r1
 800c81e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c824:	f003 0310 	and.w	r3, r3, #16
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d00a      	beq.n	800c842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	689b      	ldr	r3, [r3, #8]
 800c832:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	430a      	orrs	r2, r1
 800c840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c846:	f003 0320 	and.w	r3, r3, #32
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00a      	beq.n	800c864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	430a      	orrs	r2, r1
 800c862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d01a      	beq.n	800c8a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	430a      	orrs	r2, r1
 800c884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c88a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c88e:	d10a      	bne.n	800c8a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	685b      	ldr	r3, [r3, #4]
 800c896:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	430a      	orrs	r2, r1
 800c8a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d00a      	beq.n	800c8c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	430a      	orrs	r2, r1
 800c8c6:	605a      	str	r2, [r3, #4]
  }
}
 800c8c8:	bf00      	nop
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b098      	sub	sp, #96	; 0x60
 800c8d8:	af02      	add	r7, sp, #8
 800c8da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2200      	movs	r2, #0
 800c8e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c8e4:	f7f6 f8de 	bl	8002aa4 <HAL_GetTick>
 800c8e8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 0308 	and.w	r3, r3, #8
 800c8f4:	2b08      	cmp	r3, #8
 800c8f6:	d12f      	bne.n	800c958 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c8f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c900:	2200      	movs	r2, #0
 800c902:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 f88e 	bl	800ca28 <UART_WaitOnFlagUntilTimeout>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d022      	beq.n	800c958 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91a:	e853 3f00 	ldrex	r3, [r3]
 800c91e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c922:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c926:	653b      	str	r3, [r7, #80]	; 0x50
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	461a      	mov	r2, r3
 800c92e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c930:	647b      	str	r3, [r7, #68]	; 0x44
 800c932:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c934:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c938:	e841 2300 	strex	r3, r2, [r1]
 800c93c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c940:	2b00      	cmp	r3, #0
 800c942:	d1e6      	bne.n	800c912 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2220      	movs	r2, #32
 800c948:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2200      	movs	r2, #0
 800c950:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c954:	2303      	movs	r3, #3
 800c956:	e063      	b.n	800ca20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f003 0304 	and.w	r3, r3, #4
 800c962:	2b04      	cmp	r3, #4
 800c964:	d149      	bne.n	800c9fa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c966:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c96a:	9300      	str	r3, [sp, #0]
 800c96c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c96e:	2200      	movs	r2, #0
 800c970:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f000 f857 	bl	800ca28 <UART_WaitOnFlagUntilTimeout>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d03c      	beq.n	800c9fa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c988:	e853 3f00 	ldrex	r3, [r3]
 800c98c:	623b      	str	r3, [r7, #32]
   return(result);
 800c98e:	6a3b      	ldr	r3, [r7, #32]
 800c990:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c994:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	461a      	mov	r2, r3
 800c99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c99e:	633b      	str	r3, [r7, #48]	; 0x30
 800c9a0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9a6:	e841 2300 	strex	r3, r2, [r1]
 800c9aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1e6      	bne.n	800c980 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	3308      	adds	r3, #8
 800c9b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	e853 3f00 	ldrex	r3, [r3]
 800c9c0:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f023 0301 	bic.w	r3, r3, #1
 800c9c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	3308      	adds	r3, #8
 800c9d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c9d2:	61fa      	str	r2, [r7, #28]
 800c9d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d6:	69b9      	ldr	r1, [r7, #24]
 800c9d8:	69fa      	ldr	r2, [r7, #28]
 800c9da:	e841 2300 	strex	r3, r2, [r1]
 800c9de:	617b      	str	r3, [r7, #20]
   return(result);
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d1e5      	bne.n	800c9b2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2220      	movs	r2, #32
 800c9ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c9f6:	2303      	movs	r3, #3
 800c9f8:	e012      	b.n	800ca20 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2220      	movs	r2, #32
 800c9fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2220      	movs	r2, #32
 800ca06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2200      	movs	r2, #0
 800ca1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ca1e:	2300      	movs	r3, #0
}
 800ca20:	4618      	mov	r0, r3
 800ca22:	3758      	adds	r7, #88	; 0x58
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}

0800ca28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	603b      	str	r3, [r7, #0]
 800ca34:	4613      	mov	r3, r2
 800ca36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ca38:	e04f      	b.n	800cada <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ca3a:	69bb      	ldr	r3, [r7, #24]
 800ca3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca40:	d04b      	beq.n	800cada <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ca42:	f7f6 f82f 	bl	8002aa4 <HAL_GetTick>
 800ca46:	4602      	mov	r2, r0
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	1ad3      	subs	r3, r2, r3
 800ca4c:	69ba      	ldr	r2, [r7, #24]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d302      	bcc.n	800ca58 <UART_WaitOnFlagUntilTimeout+0x30>
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d101      	bne.n	800ca5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	e04e      	b.n	800cafa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	f003 0304 	and.w	r3, r3, #4
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d037      	beq.n	800cada <UART_WaitOnFlagUntilTimeout+0xb2>
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2b80      	cmp	r3, #128	; 0x80
 800ca6e:	d034      	beq.n	800cada <UART_WaitOnFlagUntilTimeout+0xb2>
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b40      	cmp	r3, #64	; 0x40
 800ca74:	d031      	beq.n	800cada <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	69db      	ldr	r3, [r3, #28]
 800ca7c:	f003 0308 	and.w	r3, r3, #8
 800ca80:	2b08      	cmp	r3, #8
 800ca82:	d110      	bne.n	800caa6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2208      	movs	r2, #8
 800ca8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f000 f839 	bl	800cb04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2208      	movs	r2, #8
 800ca96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	e029      	b.n	800cafa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	69db      	ldr	r3, [r3, #28]
 800caac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cab4:	d111      	bne.n	800cada <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cabe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f000 f81f 	bl	800cb04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2220      	movs	r2, #32
 800caca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	2200      	movs	r2, #0
 800cad2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800cad6:	2303      	movs	r3, #3
 800cad8:	e00f      	b.n	800cafa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	69da      	ldr	r2, [r3, #28]
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	4013      	ands	r3, r2
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	bf0c      	ite	eq
 800caea:	2301      	moveq	r3, #1
 800caec:	2300      	movne	r3, #0
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	461a      	mov	r2, r3
 800caf2:	79fb      	ldrb	r3, [r7, #7]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d0a0      	beq.n	800ca3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
	...

0800cb04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b095      	sub	sp, #84	; 0x54
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb14:	e853 3f00 	ldrex	r3, [r3]
 800cb18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cb20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	461a      	mov	r2, r3
 800cb28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb2a:	643b      	str	r3, [r7, #64]	; 0x40
 800cb2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cb30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb32:	e841 2300 	strex	r3, r2, [r1]
 800cb36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e6      	bne.n	800cb0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3308      	adds	r3, #8
 800cb44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb46:	6a3b      	ldr	r3, [r7, #32]
 800cb48:	e853 3f00 	ldrex	r3, [r3]
 800cb4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb4e:	69fa      	ldr	r2, [r7, #28]
 800cb50:	4b1e      	ldr	r3, [pc, #120]	; (800cbcc <UART_EndRxTransfer+0xc8>)
 800cb52:	4013      	ands	r3, r2
 800cb54:	64bb      	str	r3, [r7, #72]	; 0x48
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb66:	e841 2300 	strex	r3, r2, [r1]
 800cb6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d1e5      	bne.n	800cb3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d118      	bne.n	800cbac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	e853 3f00 	ldrex	r3, [r3]
 800cb86:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	f023 0310 	bic.w	r3, r3, #16
 800cb8e:	647b      	str	r3, [r7, #68]	; 0x44
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	461a      	mov	r2, r3
 800cb96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cb98:	61bb      	str	r3, [r7, #24]
 800cb9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb9c:	6979      	ldr	r1, [r7, #20]
 800cb9e:	69ba      	ldr	r2, [r7, #24]
 800cba0:	e841 2300 	strex	r3, r2, [r1]
 800cba4:	613b      	str	r3, [r7, #16]
   return(result);
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1e6      	bne.n	800cb7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2220      	movs	r2, #32
 800cbb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2200      	movs	r2, #0
 800cbb8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	675a      	str	r2, [r3, #116]	; 0x74
}
 800cbc0:	bf00      	nop
 800cbc2:	3754      	adds	r7, #84	; 0x54
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	effffffe 	.word	0xeffffffe

0800cbd0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d101      	bne.n	800cbe6 <HAL_UARTEx_DisableFifoMode+0x16>
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	e027      	b.n	800cc36 <HAL_UARTEx_DisableFifoMode+0x66>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2224      	movs	r2, #36	; 0x24
 800cbf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	681a      	ldr	r2, [r3, #0]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f022 0201 	bic.w	r2, r2, #1
 800cc0c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cc14:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2200      	movs	r2, #0
 800cc1a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68fa      	ldr	r2, [r7, #12]
 800cc22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2220      	movs	r2, #32
 800cc28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b084      	sub	sp, #16
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d101      	bne.n	800cc5a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cc56:	2302      	movs	r3, #2
 800cc58:	e02d      	b.n	800ccb6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2224      	movs	r2, #36	; 0x24
 800cc66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	f022 0201 	bic.w	r2, r2, #1
 800cc80:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	689b      	ldr	r3, [r3, #8]
 800cc88:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	683a      	ldr	r2, [r7, #0]
 800cc92:	430a      	orrs	r2, r1
 800cc94:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 f850 	bl	800cd3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	68fa      	ldr	r2, [r7, #12]
 800cca2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2220      	movs	r2, #32
 800cca8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ccbe:	b580      	push	{r7, lr}
 800ccc0:	b084      	sub	sp, #16
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ccce:	2b01      	cmp	r3, #1
 800ccd0:	d101      	bne.n	800ccd6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ccd2:	2302      	movs	r3, #2
 800ccd4:	e02d      	b.n	800cd32 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2201      	movs	r2, #1
 800ccda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2224      	movs	r2, #36	; 0x24
 800cce2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	681a      	ldr	r2, [r3, #0]
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	f022 0201 	bic.w	r2, r2, #1
 800ccfc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	689b      	ldr	r3, [r3, #8]
 800cd04:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	683a      	ldr	r2, [r7, #0]
 800cd0e:	430a      	orrs	r2, r1
 800cd10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f812 	bl	800cd3c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2220      	movs	r2, #32
 800cd24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cd30:	2300      	movs	r3, #0
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
	...

0800cd3c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b085      	sub	sp, #20
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d108      	bne.n	800cd5e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2201      	movs	r2, #1
 800cd50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cd5c:	e031      	b.n	800cdc2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cd5e:	2310      	movs	r3, #16
 800cd60:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cd62:	2310      	movs	r3, #16
 800cd64:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	689b      	ldr	r3, [r3, #8]
 800cd6c:	0e5b      	lsrs	r3, r3, #25
 800cd6e:	b2db      	uxtb	r3, r3
 800cd70:	f003 0307 	and.w	r3, r3, #7
 800cd74:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	0f5b      	lsrs	r3, r3, #29
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	f003 0307 	and.w	r3, r3, #7
 800cd84:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd86:	7bbb      	ldrb	r3, [r7, #14]
 800cd88:	7b3a      	ldrb	r2, [r7, #12]
 800cd8a:	4911      	ldr	r1, [pc, #68]	; (800cdd0 <UARTEx_SetNbDataToProcess+0x94>)
 800cd8c:	5c8a      	ldrb	r2, [r1, r2]
 800cd8e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cd92:	7b3a      	ldrb	r2, [r7, #12]
 800cd94:	490f      	ldr	r1, [pc, #60]	; (800cdd4 <UARTEx_SetNbDataToProcess+0x98>)
 800cd96:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd98:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd9c:	b29a      	uxth	r2, r3
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cda4:	7bfb      	ldrb	r3, [r7, #15]
 800cda6:	7b7a      	ldrb	r2, [r7, #13]
 800cda8:	4909      	ldr	r1, [pc, #36]	; (800cdd0 <UARTEx_SetNbDataToProcess+0x94>)
 800cdaa:	5c8a      	ldrb	r2, [r1, r2]
 800cdac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cdb0:	7b7a      	ldrb	r2, [r7, #13]
 800cdb2:	4908      	ldr	r1, [pc, #32]	; (800cdd4 <UARTEx_SetNbDataToProcess+0x98>)
 800cdb4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cdb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cdba:	b29a      	uxth	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cdc2:	bf00      	nop
 800cdc4:	3714      	adds	r7, #20
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	0800cee0 	.word	0x0800cee0
 800cdd4:	0800cee8 	.word	0x0800cee8

0800cdd8 <memset>:
 800cdd8:	4402      	add	r2, r0
 800cdda:	4603      	mov	r3, r0
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d100      	bne.n	800cde2 <memset+0xa>
 800cde0:	4770      	bx	lr
 800cde2:	f803 1b01 	strb.w	r1, [r3], #1
 800cde6:	e7f9      	b.n	800cddc <memset+0x4>

0800cde8 <__libc_init_array>:
 800cde8:	b570      	push	{r4, r5, r6, lr}
 800cdea:	4d0d      	ldr	r5, [pc, #52]	; (800ce20 <__libc_init_array+0x38>)
 800cdec:	4c0d      	ldr	r4, [pc, #52]	; (800ce24 <__libc_init_array+0x3c>)
 800cdee:	1b64      	subs	r4, r4, r5
 800cdf0:	10a4      	asrs	r4, r4, #2
 800cdf2:	2600      	movs	r6, #0
 800cdf4:	42a6      	cmp	r6, r4
 800cdf6:	d109      	bne.n	800ce0c <__libc_init_array+0x24>
 800cdf8:	4d0b      	ldr	r5, [pc, #44]	; (800ce28 <__libc_init_array+0x40>)
 800cdfa:	4c0c      	ldr	r4, [pc, #48]	; (800ce2c <__libc_init_array+0x44>)
 800cdfc:	f000 f826 	bl	800ce4c <_init>
 800ce00:	1b64      	subs	r4, r4, r5
 800ce02:	10a4      	asrs	r4, r4, #2
 800ce04:	2600      	movs	r6, #0
 800ce06:	42a6      	cmp	r6, r4
 800ce08:	d105      	bne.n	800ce16 <__libc_init_array+0x2e>
 800ce0a:	bd70      	pop	{r4, r5, r6, pc}
 800ce0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce10:	4798      	blx	r3
 800ce12:	3601      	adds	r6, #1
 800ce14:	e7ee      	b.n	800cdf4 <__libc_init_array+0xc>
 800ce16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce1a:	4798      	blx	r3
 800ce1c:	3601      	adds	r6, #1
 800ce1e:	e7f2      	b.n	800ce06 <__libc_init_array+0x1e>
 800ce20:	0800cef8 	.word	0x0800cef8
 800ce24:	0800cef8 	.word	0x0800cef8
 800ce28:	0800cef8 	.word	0x0800cef8
 800ce2c:	0800cefc 	.word	0x0800cefc

0800ce30 <memcpy>:
 800ce30:	440a      	add	r2, r1
 800ce32:	4291      	cmp	r1, r2
 800ce34:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce38:	d100      	bne.n	800ce3c <memcpy+0xc>
 800ce3a:	4770      	bx	lr
 800ce3c:	b510      	push	{r4, lr}
 800ce3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce46:	4291      	cmp	r1, r2
 800ce48:	d1f9      	bne.n	800ce3e <memcpy+0xe>
 800ce4a:	bd10      	pop	{r4, pc}

0800ce4c <_init>:
 800ce4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce4e:	bf00      	nop
 800ce50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce52:	bc08      	pop	{r3}
 800ce54:	469e      	mov	lr, r3
 800ce56:	4770      	bx	lr

0800ce58 <_fini>:
 800ce58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce5a:	bf00      	nop
 800ce5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce5e:	bc08      	pop	{r3}
 800ce60:	469e      	mov	lr, r3
 800ce62:	4770      	bx	lr
